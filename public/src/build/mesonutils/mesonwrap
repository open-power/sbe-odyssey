#!/bin/sh
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: public/src/build/mesonutils/mesonwrap $
#
# OpenPOWER sbe Project
#
# Contributors Listed Below - COPYRIGHT 2021,2023
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

#Akhilesh S - created 08/12/2021
# Script to run Meson.

# Exit if any command fails
set -e

if [ -e ${SBEROOT_INT} ]; then
    . ${SBEROOT_INT}/src/build/mesonutils/mesonutil.sh
fi

TOOL_VERSION=1
BASE_CMD="$USER_BIN_DIR/meson"
MESON_BUILD_DIR="$SBEROOT/builddir"
MESON_INSTALL_DIR="$SBEROOT/images"
CMN_PUB_MESON_CROSS_FILE_PATH="$SBEROOT_PUB/src/build/mesonutils/common/cross_file.txt"
CMN_MESON_NATIVE_FILE_PATH="$SBEROOT_PUB/src/build/mesonutils/common/native_file.txt"
ODYSSEY_MESON_CROSS_FILE_PATH="$SBEROOT_PUB/src/build/mesonutils/odyssey/cross_file.txt"
P11_MESON_CROSS_FILE_PATH="$SBEROOT_PUB/src/build/mesonutils/p11/cross_file.txt"
INSTALL_DIR="$SBEROOT/images"

# @brief Print the help/usage info to the console
usage()
{
    echo "TOOL VERSION : $TOOL_VERSION"
    echo ""
    echo "To setup meson:"
    echo "mesonwrap setup"
    echo ""
    echo "To Compile Code:"
    echo "mesonwrap compile"
    echo "To print all make commands during compile process:"
    echo "mesonwrap compile -v"
    echo ""
    echo "To Install:"
    echo "mesonwrap install"
    echo ""
    echo "To Compile & Install:"
    echo "mesonwrap build"
    echo ""
    echo "To Sync PLATFORM env var:"
    echo "mesonwrap sync"
    echo ""
    echo "To clean(Removes install dir):"
    echo "mesonwrap clean"
    echo ""
    echo "To check available build option:"
    echo "mesonwrap configure"
    echo ""
    echo "To reconfigure project setup(Re-run setup phase):"
    echo "mesonwrap reconfigure"
    echo ""
    echo "To build a image:"
    echo "mesonwrap setup"
    echo "mesonwrap compile"
    echo "mesonwrap install"
    echo ""
    echo "Note: Any second arg passed to this script as input will be appended
    with the default cmd"
    echo "To disable parts of build/images pass -D option during setup/configure
    Ex: -Dsppe=disabled
    All available build options can be found in meson_options.txt"
}

#Execute a given command and exit
exc_cmd()
{
    echo $1
    $1
    rc=$?
    exit $rc
}

# Add some checks to prevent user from building unsupported images for a given platform
if [[ "$SBE_PLATFORM" == "odyssey" &&  "$SBE_IMAGE" != "pnor" ]]; then
    echo "***ERROR | SBE | mesonwrap: Unsupported sbe image type: $SBE_IMAGE for platform: $SBE_PLATFORM"
    echo "***ERROR | SBE | mesonwrap: workon with odyssey pnor"
    exit 1
fi

#Disable parts of image build based on user setup(during workon)
#By default all images are enabled.
#We need enabled images var incase of resync
#TODO: Below enabled and disabled macros are consedering that golden pnor image is available.
DISABLED_IMAGES=
ENABLED_IMAGES=

if [ "$SBE_IMAGE" == "sppe" ]; then
    DISABLED_IMAGES=" -Dotprom=disabled -Dsrom=disabled -Dbldr=disabled -Dhsbe=disabled -Dtsbe=disabled
                      -Dpme=disabled -Dsbe=disabled"
    ENABLED_IMAGES=" -Dsppe=enabled"

elif [ "$SBE_IMAGE" == "otprom" ]; then
    DISABLED_IMAGES=" -Dsppe=disabled -Dsrom=disabled -Dbldr=disabled -Dhsbe=disabled -Dtsbe=disabled
                      -Dpme=disabled -Dsbe=disabled"
    ENABLED_IMAGES=" -Dotprom=enabled"

elif [ "$SBE_IMAGE" == "pnor" ]; then
# - SROM image build is disabled because its frozen. SROM image will not be required to release to build.
#   For simics it will be picked from "public/src/ontime/odyssey/srom/build/images/"
# - BLDR image build is disabled because its frozen and it will get from
#   "public/src/ontime/odyssey/bldr/images"
    DISABLED_IMAGES=" -Dsrom=disabled -Dpme=disabled -Dsbe=disabled -Dhsbe=disabled -Dtsbe=disabled
                      -Dbldr=disabled"
    ENABLED_IMAGES=" -Dotprom=enabled -Dsppe=enabled"

elif [ "$SBE_IMAGE" == "zseeprom" ]; then
    ENABLED_IMAGES=" -Dotprom=enabled -Dsppe=enabled -Dbldr=enabled -Dsbe=enabled -Dsrom=enabled -Dpme=enabled"
    DISABLED_IMAGES=" -Dhsbe=disabled -Dtsbe=disabled"

elif [ "$SBE_IMAGE" == "srom" ]; then
    DISABLED_IMAGES=" -Dsppe=disabled -Dbldr=disabled -Dhsbe=disabled -Dtsbe=disabled -Dpme=disabled -Dsbe=disabled"
    ENABLED_IMAGES=" -Dotprom=enabled -Dsrom=enabled "

elif [ "$SBE_IMAGE" == "bldr" ]; then
    DISABLED_IMAGES=" -Dsppe=disabled -Dsrom=disabled -Dhsbe=disabled -Dtsbe=disabled -Dpme=disabled -Dsbe=disabled"
    ENABLED_IMAGES=" -Dotprom=enabled -Dbldr=enabled "

elif [ "$SBE_IMAGE" == "tsbe" ]; then
    DISABLED_IMAGES=" -Dsppe=disabled -Dbldr=disabled -Dotprom=disabled -Dhsbe=disabled -Dsrom=disabled
                      -Dpme=disabled -Dsbe=disabled"
    ENABLED_IMAGES=" -Dtsbe=enabled"

elif [ "$SBE_IMAGE" == "hsbe" ]; then
    DISABLED_IMAGES=" -Dsppe=disabled -Dbldr=disabled -Dotprom=disabled -Dtsbe=disabled -Dsrom=disabled
                      -Dpme=disabled -Dsbe=disabled"
    ENABLED_IMAGES=" -Dhsbe=enabled"

elif [ "$SBE_IMAGE" == "sbe" ]; then
    DISABLED_IMAGES=" -Dsppe=disabled -Dbldr=disabled -Dotprom=disabled -Dsrom=disabled -Dpme=disabled
                      -Dhsbe=disabled -Dtsbe=disabled"
    ENABLED_IMAGES=" -Dsbe=enabled"

elif [ "$SBE_IMAGE" == "pme" ]; then
    DISABLED_IMAGES=" -Dsppe=disabled -Dbldr=disabled -Dotprom=disabled -Dsrom=disabled -Dsbe=disabled
                      -Dhsbe=disabled -Dtsbe=disabled"
    ENABLED_IMAGES=" -Dpme=enabled"

elif [ "$SBE_IMAGE" == "pseeprom" ]; then
    ENABLED_IMAGES=" -Dbldr=enabled -Dotprom=enabled -Dsppe=enabled -Dhsbe=enabled -Dtsbe=enabled -Dsrom=enabled"
    DISABLED_IMAGES=" -Dpme=disabled -Dsbe=disabled"

elif [ "$SBE_IMAGE" == "all" ]; then
    ENABLED_IMAGES=" -Dbldr=enabled -Dotprom=enabled -Dsppe=enabled -Dhsbe=enabled -Dtsbe=enabled -Dsrom=enabled
                     -Dpme=enabled -Dsbe=enabled"

else
    echo "***ERROR | SBE | mesonwrap: Unsupported SBE_IMAGE type $SBE_IMAGE"
    exit 1

fi

MESON_OPT_IMAGE_TYPE="-Dimage_type=${SBE_IMAGE}"

if [ "$1" == "setup" ]; then
    cat > $SBEROOT/.user_cross_file.txt <<EOF
[constants]
ppetools_path = '$PPETOOLS'
EOF

    #Pass all cross files ir-respective of platform used.
    CROSS_FILES=" --cross-file $CMN_PUB_MESON_CROSS_FILE_PATH
                  --cross-file $ODYSSEY_MESON_CROSS_FILE_PATH
                  --cross-file $P11_MESON_CROSS_FILE_PATH
                  --cross-file $SBEROOT/.user_cross_file.txt"

    #Append internal cross file paths if any
    for CROSS_FILE_PATH in ${INT_MESON_CROSS_FILE_PATH[@]}; do
        echo $CROSS_FILE_PATH
        CROSS_FILES=" ${CROSS_FILES} --cross-file $CROSS_FILE_PATH"
    done

    CMD="$BASE_CMD $1 $MESON_BUILD_DIR -Dplatform=$SBE_PLATFORM
         $MESON_OPT_IMAGE_TYPE $DISABLED_IMAGES $ENABLED_IMAGES
         $CROSS_FILES --native-file $CMN_MESON_NATIVE_FILE_PATH
         --prefix $INSTALL_DIR ${@:2}"
    exc_cmd "$CMD"
fi

if [ "$1" == "compile" ]; then
    CMD="$BASE_CMD $1 -C $MESON_BUILD_DIR -j32 ${@:2}"
    exc_cmd "$CMD"
fi

if [ "$1" == "install" ]; then
    CMD="$BASE_CMD $1 -C $MESON_BUILD_DIR --only-changed --no-rebuild ${@:2}"
    exc_cmd "$CMD"
fi

if [ "$1" == "build" ]; then
    CMD="$BASE_CMD install -C $MESON_BUILD_DIR ${@:2}"
    exc_cmd "$CMD"
fi

if [ "$1" == "clean" ]; then
    echo "Removing...."
    CMD="rm -rf $MESON_INSTALL_DIR $SBEROOT/genfiles $SBEROOT/builddir $SBEROOT/simics/sbe/"
    exc_cmd "$CMD"
fi

if [ "$1" == "configure" ]; then
    CMD="$BASE_CMD $1 $MESON_BUILD_DIR ${@:2}"
    exc_cmd "$CMD"
fi

if [ "$1" == "sync" ]; then
    CMD="$BASE_CMD configure $MESON_BUILD_DIR -Dplatform=$SBE_PLATFORM
         $MESON_OPT_IMAGE_TYPE $DISABLED_IMAGES $ENABLED_IMAGES"
    exc_cmd "$CMD"
fi

if [ "$1" == "reconfigure" ]; then
    CMD="$BASE_CMD setup $MESON_BUILD_DIR --reconfigure"
    exc_cmd "$CMD"
fi

if [ "$1" == "help" ]; then
    usage
    exit 0
fi

CMD="$BASE_CMD $@"
exc_cmd "$CMD"
