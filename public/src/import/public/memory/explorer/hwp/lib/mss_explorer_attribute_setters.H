/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: public/src/import/public/memory/explorer/hwp/lib/mss_explorer_attribute_setters.H $ */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2022,2023                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// mss_explorer_attribute_setters.H
#ifndef MSS_EXPLORER_ATTR_SETTERS_H_
#define MSS_EXPLORER_ATTR_SETTERS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/index.H>
#include <generic/memory/lib/utils/c_str.H>



namespace mss
{
namespace attr
{
///
/// @brief ATTR_MEM_EXP_INIT_VREF_DQ setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial VrefDQ setting before training
///
inline fapi2::ReturnCode set_exp_init_vref_dq(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_VREF_DQ setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial VrefDQ setting before training
///
inline fapi2::ReturnCode set_exp_init_vref_dq(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_PHY_VREF setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial DQ Vref setting of PHY before training
///
inline fapi2::ReturnCode set_exp_init_phy_vref(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_PHY_VREF setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial DQ Vref setting of PHY before training
///
inline fapi2::ReturnCode set_exp_init_phy_vref(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_DIC setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  CA and CS signal Driver Characteristics from F0RC03, F0RC04, F0RC05
///
inline fapi2::ReturnCode set_exp_rcd_dic(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t i_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_DIC, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_DIC, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_DIC setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  CA and CS signal Driver Characteristics from F0RC03, F0RC04, F0RC05
///
inline fapi2::ReturnCode set_exp_rcd_dic(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&i_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_DIC, i_target, l_value) );
    memcpy(&l_value, i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_DIC, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_VOLTAGE_CTRL setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD operating voltage VDD and VrefCA control from F0RC0B and F0RC1x
///
inline fapi2::ReturnCode set_exp_rcd_voltage_ctrl(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t i_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_VOLTAGE_CTRL setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD operating voltage VDD and VrefCA control from F0RC0B and F0RC1x
///
inline fapi2::ReturnCode set_exp_rcd_voltage_ctrl(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&i_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, i_target, l_value) );
    memcpy(&l_value, i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode set_exp_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode set_exp_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_SLEW_RATE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD slew rate control from F1RC02,F1RC03,F1RC04,F1RC05
///
inline fapi2::ReturnCode set_exp_rcd_slew_rate(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t i_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_SLEW_RATE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD slew rate control from F1RC02,F1RC03,F1RC04,F1RC05
///
inline fapi2::ReturnCode set_exp_rcd_slew_rate(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&i_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, i_target, l_value) );
    memcpy(&l_value, i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC00 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC00: Global Features Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc00(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC00 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC00: Global Features Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc00(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC01 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC01: Clock Driver Enable Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc01(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC01 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC01: Clock Driver Enable Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc01(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC03 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC03 - CA and CS Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc03(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC03 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC03 - CA and CS Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc03(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC04 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC04 - ODT and CKE Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc04(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC04 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC04 - ODT and CKE Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc04(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC05 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC05 - Clock Driver Characteristics Control Word from the DDR4 RCD Spec. From
/// user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc05(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC05 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC05 - Clock Driver Characteristics Control Word from the DDR4 RCD Spec. From
/// user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc05(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0B setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Operating Voltage VDD and VrefCA Source Control Word from the DDR4 RCD Spec. From
/// the DDR4 RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0b(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0B setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Operating Voltage VDD and VrefCA Source Control Word from the DDR4 RCD Spec. From
/// the DDR4 RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0b(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0E setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0E - Parity, NV Mode Enable, and ALERT Configuration Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0e(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0E setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0E - Parity, NV Mode Enable, and ALERT Configuration Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0e(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0F setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0F - Command Latency Adder Control Word from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0f(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0F setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0F - Command Latency Adder Control Word from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0f(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC1X setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC1x - Internal VrefCA Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc1x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC1X setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC1x - Internal VrefCA Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc1x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC7X setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC7x: IBT Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t in
/// draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc7x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC7X setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC7x: IBT Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t in
/// draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc7x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC00 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC00: Data Buffer Interface Driver Characteristics Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc00(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC00 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC00: Data Buffer Interface Driver Characteristics Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc00(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC02 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC02 - CA and CS Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc02(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC02 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC02 - CA and CS Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc02(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC03 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC03 - ODT and CKEn Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc03(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC03 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC03 - ODT and CKEn Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc03(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC04 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC04 - Clock Driver Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc04(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC04 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC04 - Clock Driver Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc04(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC05 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC05 - Data Buffer Interface Output Slew Rate Control from the DDR4 RCD Spec.
/// From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc05(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC05 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC05 - Data Buffer Interface Output Slew Rate Control from the DDR4 RCD Spec.
/// From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc05(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_ODIC setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DRAM output driver impedance control from DDR4 DRAM Spec This is for DDR4 MRS1.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_odic(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_ODIC setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DRAM output driver impedance control from DDR4 DRAM Spec This is for DDR4 MRS1.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_odic(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_NOM setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_NOM value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS1. From
/// user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_nom(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_NOM setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_NOM value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS1. From
/// user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_nom(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_PARK setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_PARK value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS5.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_PARK setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_PARK value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS5.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_WR setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_WR value from DDR4 DRAM Spec This is for DDR4 MRS2. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_WR setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_WR value from DDR4 DRAM Spec This is for DDR4 MRS2. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_value(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 80);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_value(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, i_target, l_value) );
    memcpy(&l_value, i_array, 160);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Range from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_range(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 80);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Range from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_range(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, i_target, l_value) );
    memcpy(&l_value, i_array, 160);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_enable(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 80);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_enable(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, i_target, l_value) );
    memcpy(&l_value, i_array, 160);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PSTATES setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] This byte defines the allowed number of P-States for the DDR4 Differential
/// Memory Buffer. P-States can be thought of as an available performance profile.
///
inline fapi2::ReturnCode set_pstates(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PSTATES, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_PSTATES, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PSTATES setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] This byte defines the allowed number of P-States for the DDR4 Differential
/// Memory Buffer. P-States can be thought of as an available performance profile.
///
inline fapi2::ReturnCode set_pstates(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PSTATES, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_PSTATES, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_FOUR_RANK_MODE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] A-Side CA bus drives rank 0/1 and B-Side CA bus drives rank 2/3, DQ/DQS
/// are shared across the ranks
///
inline fapi2::ReturnCode set_four_rank_mode(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_FOUR_RANK_MODE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] A-Side CA bus drives rank 0/1 and B-Side CA bus drives rank 2/3, DQ/DQS
/// are shared across the ranks
///
inline fapi2::ReturnCode set_four_rank_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MRAM_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MRAM Support Support timing parameters of Everspin DDR4 MRAM
///
inline fapi2::ReturnCode set_mram_support(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MRAM_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MRAM Support Support timing parameters of Everspin DDR4 MRAM
///
inline fapi2::ReturnCode set_mram_support(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDP_COMPATIBILITY setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] DDP Compatibility Support 1 rank 3DS Device in DDP board routing. CKE[1],
/// CSN[1], ODT[1] of PHY are connected to C[0], C[1], C[2] of DRAM
///
inline fapi2::ReturnCode set_ddp_compatibility(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDP_COMPATIBILITY setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] DDP Compatibility Support 1 rank 3DS Device in DDP board routing. CKE[1],
/// CSN[1], ODT[1] of PHY are connected to C[0], C[1], C[2] of DRAM
///
inline fapi2::ReturnCode set_ddp_compatibility(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_TSV_8H_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] TSV 8H Support Support 8H 3DS routing in board routing when parity check
/// is disabled
///
inline fapi2::ReturnCode set_tsv_8h_support(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_TSV_8H_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] TSV 8H Support Support 8H 3DS routing in board routing when parity check
/// is disabled
///
inline fapi2::ReturnCode set_tsv_8h_support(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MDS_DDIMM setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MDS DDIMM type derived attribute Will be true if HYBRID_MEMORY_TYPE
/// is MDS and HYBRID is true
///
inline fapi2::ReturnCode set_mds_ddimm(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MDS_DDIMM setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MDS DDIMM type derived attribute Will be true if HYBRID_MEMORY_TYPE
/// is MDS and HYBRID is true
///
inline fapi2::ReturnCode set_mds_ddimm(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                       uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}


} // attr
} // mss

#endif
