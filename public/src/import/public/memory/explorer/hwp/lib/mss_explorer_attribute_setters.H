/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: public/src/import/public/memory/explorer/hwp/lib/mss_explorer_attribute_setters.H $ */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2022,2023                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// mss_explorer_attribute_setters.H
#ifndef MSS_EXPLORER_ATTR_SETTERS_H_
#define MSS_EXPLORER_ATTR_SETTERS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/index.H>
#include <generic/memory/lib/utils/c_str.H>



namespace mss
{
namespace attr
{
///
/// @brief ATTR_MEM_EXP_INIT_VREF_DQ setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial VrefDQ setting before training
///
inline fapi2::ReturnCode set_exp_init_vref_dq(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_VREF_DQ setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial VrefDQ setting before training
///
inline fapi2::ReturnCode set_exp_init_vref_dq(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_VREF_DQ, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_PHY_VREF setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial DQ Vref setting of PHY before training
///
inline fapi2::ReturnCode set_exp_init_phy_vref(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_INIT_PHY_VREF setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Initial DQ Vref setting of PHY before training
///
inline fapi2::ReturnCode set_exp_init_phy_vref(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_INIT_PHY_VREF, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_DIC setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  CA and CS signal Driver Characteristics from F0RC03, F0RC04, F0RC05
///
inline fapi2::ReturnCode set_exp_rcd_dic(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t i_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_DIC, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_DIC, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_DIC setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  CA and CS signal Driver Characteristics from F0RC03, F0RC04, F0RC05
///
inline fapi2::ReturnCode set_exp_rcd_dic(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&i_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_DIC, i_target, l_value) );
    memcpy(&l_value, i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_DIC, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_VOLTAGE_CTRL setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD operating voltage VDD and VrefCA control from F0RC0B and F0RC1x
///
inline fapi2::ReturnCode set_exp_rcd_voltage_ctrl(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t i_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_VOLTAGE_CTRL setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD operating voltage VDD and VrefCA control from F0RC0B and F0RC1x
///
inline fapi2::ReturnCode set_exp_rcd_voltage_ctrl(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&i_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, i_target, l_value) );
    memcpy(&l_value, i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_VOLTAGE_CTRL, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode set_exp_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode set_exp_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_DRAM_ADDRESS_MIRRORING, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_SLEW_RATE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD slew rate control from F1RC02,F1RC03,F1RC04,F1RC05
///
inline fapi2::ReturnCode set_exp_rcd_slew_rate(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t i_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_RCD_SLEW_RATE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RCD slew rate control from F1RC02,F1RC03,F1RC04,F1RC05
///
inline fapi2::ReturnCode set_exp_rcd_slew_rate(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&i_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, i_target, l_value) );
    memcpy(&l_value, i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_RCD_SLEW_RATE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_SPD_CL_SUPPORTED setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint32_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Cas Latency Supported by DRAM
///
inline fapi2::ReturnCode set_exp_spd_cl_supported(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_SPD_CL_SUPPORTED, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_SPD_TAA_MIN setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Minimum Cas Latency Time (tAAmin) in Picosecond (Byte 24)
///
inline fapi2::ReturnCode set_exp_spd_taa_min(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_SPD_TAA_MIN, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_FIRMWARE_EMULATION_MODE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Enable Special mode for Emulation Support
///
inline fapi2::ReturnCode set_exp_firmware_emulation_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_FIRMWARE_EMULATION_MODE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EXP_DFIMRL_CLK setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  timing parameter for the DFIMRL clock
///
inline fapi2::ReturnCode set_exp_dfimrl_clk(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EXP_DFIMRL_CLK, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_A setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode set_exp_atxdly_a(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[8] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_A, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_ATXDLY_A, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_A setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode set_exp_atxdly_a(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[8])
{
    uint8_t l_value[8] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_A, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_ATXDLY_A, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_B setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode set_exp_atxdly_b(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[8] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_B, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_ATXDLY_B, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_ATXDLY_B setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[ADDRESS INDEX] ATxDly_A/B[0]: ODT[1],ODT[0],CS_N[0],CS_N[1] ATxDly_A/B[1]:
/// ADDR[13],ADDR[5],BG[0],CKE[1] ATxDly_A/B[2]: ADDR[17],ADDR[7],BA[0],ADDR[16] ATxDly_A/B[3]:
/// ADDR[8],BG[1],CID[1],CID[0] ATxDly_A/B[4]: ADDR[1],ADDR[9],ADDR[2],CAPARITY ATxDly_A/B[5]:
/// ADDR[12],ADDR[3],ADDR[4],ADDR[0] ATxDly_A/B[6]: CKE[0],ADDR[15],ACT_N,ADDR[10] ATxDly_A/B[7]:
/// ADDR[11],ADDR[6],BA[1],ADDR[14]
///
inline fapi2::ReturnCode set_exp_atxdly_b(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[8])
{
    uint8_t l_value[8] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_ATXDLY_B, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_ATXDLY_B, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC00 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC00: Global Features Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc00(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC00 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC00: Global Features Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc00(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC00, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC01 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC01: Clock Driver Enable Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc01(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC01 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC01: Clock Driver Enable Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc01(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC01, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC03 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC03 - CA and CS Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc03(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC03 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC03 - CA and CS Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc03(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC03, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC04 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC04 - ODT and CKE Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc04(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC04 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC04 - ODT and CKE Signals Driver Characteristics Control Word from the DDR4 RCD
/// Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc04(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC04, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC05 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC05 - Clock Driver Characteristics Control Word from the DDR4 RCD Spec. From
/// user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc05(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC05 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC05 - Clock Driver Characteristics Control Word from the DDR4 RCD Spec. From
/// user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc05(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC05, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0B setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Operating Voltage VDD and VrefCA Source Control Word from the DDR4 RCD Spec. From
/// the DDR4 RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0b(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0B setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Operating Voltage VDD and VrefCA Source Control Word from the DDR4 RCD Spec. From
/// the DDR4 RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0b(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0B, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0E setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0E - Parity, NV Mode Enable, and ALERT Configuration Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0e(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0E setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0E - Parity, NV Mode Enable, and ALERT Configuration Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0e(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0E, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0F setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0F - Command Latency Adder Control Word from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0f(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC0F setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC0F - Command Latency Adder Control Word from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc0f(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC0F, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC1X setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC1x - Internal VrefCA Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc1x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC1X setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC1x - Internal VrefCA Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc1x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC1X, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC7X setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC7x: IBT Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t in
/// draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc7x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F0RC7X setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F0RC7x: IBT Control Word from the DDR4 RCD Spec; From user_response_rc_msdg_t in
/// draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f0rc7x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F0RC7X, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC00 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC00: Data Buffer Interface Driver Characteristics Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc00(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC00 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC00: Data Buffer Interface Driver Characteristics Control Word from the DDR4
/// RCD Spec. From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc00(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC00, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC02 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC02 - CA and CS Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc02(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC02 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC02 - CA and CS Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc02(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC02, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC03 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC03 - ODT and CKEn Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc03(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC03 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC03 - ODT and CKEn Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc03(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC03, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC04 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC04 - Clock Driver Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc04(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC04 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC04 - Clock Driver Output Slew Rate Control from the DDR4 RCD Spec. From user_response_rc_msdg_t
/// in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc04(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC04, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC05 setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC05 - Data Buffer Interface Output Slew Rate Control from the DDR4 RCD Spec.
/// From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc05(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DDR4_F1RC05 setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  F1RC05 - Data Buffer Interface Output Slew Rate Control from the DDR4 RCD Spec.
/// From user_response_rc_msdg_t in draminit..
///
inline fapi2::ReturnCode set_exp_resp_ddr4_f1rc05(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DDR4_F1RC05, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RBT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Read Burst Type from DDR4 DRAM Spec This is for DDR4 MRS0. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rbt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RBT, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_TM setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Test Mode from DDR4 DRAM Spec This is for DDR4 MRS0. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_tm(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_TM, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_DLL_RESET setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DLL Reset from DDR4 DRAM Spec This is for DDR4 MRS0. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_dll_reset(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_DLL_RESET, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_BURST_LENGTH setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DLL Reset from DDR4 DRAM Spec This is for DDR4 MRS0. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_burst_length(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_BURST_LENGTH, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_DLL_ENABLE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DLL Enable from DDR4 DRAM Spec This is for DDR4 MRS1. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_dll_enable(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_DLL_ENABLE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_ODIC setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DRAM output driver impedance control from DDR4 DRAM Spec This is for DDR4 MRS1.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_odic(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_ODIC setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DRAM output driver impedance control from DDR4 DRAM Spec This is for DDR4 MRS1.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_odic(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_ODIC, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_AL setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Additive Latency from DDR4 DRAM Spec This is for DDR4 MRS1. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_al(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_AL, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_WR_LVL_ENABLE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Write Level Enable from DDR4 DRAM Spec This is for DDR4 MRS1. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_wr_lvl_enable(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_WR_LVL_ENABLE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_NOM setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_NOM value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS1. From
/// user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_nom(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_NOM setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_NOM value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS1. From
/// user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_nom(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_NOM, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_PARK setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_PARK value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS5.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_PARK setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_PARK value read to be programmed from DDR4 DRAM Spec This is for DDR4 MRS5.
/// From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_PARK, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_TDQS setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  TDQS from DDR4 DRAM Spec This is for DDR4 MRS1. From user_response_mrs_msdg_t in
/// draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_tdqs(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_TDQS, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_OUTPUT_BUFFER setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  DRAM Qoff from DDR4 DRAM Spec Enables or disables DRAM output. This is for DDR4
/// MRS1. From user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_output_buffer(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_OUTPUT_BUFFER, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_LPASR setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Low Power Auto Self-Refresh from DDR4 DRAM Spec This is for DDR4 MRS2. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_lpasr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_LPASR, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_WR setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_WR value from DDR4 DRAM Spec This is for DDR4 MRS2. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 4);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DRAM_RTT_WR setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  RTT_WR value from DDR4 DRAM Spec This is for DDR4 MRS2. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, i_target, l_value) );
    memcpy(&l_value, i_array, 8);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DRAM_RTT_WR, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_MPR_PAGE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  MPR Page Selection from DDR4 DRAM Spec. This is for DDR4 MRS3. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_mpr_page(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_MPR_PAGE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_MPR_MODE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Multi Purpose Register Mode from DDR4 DRAM Spec This is for DDR4 MRS3. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_mpr_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_MPR_MODE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_GEARDOWN_MODE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Gear Down Mode from DDR4 DRAM Spec. This is for DDR4 MRS3. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_geardown_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_GEARDOWN_MODE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_PER_DRAM_ACCESS setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Per DRAM accessibility from DDR4 DRAM Spec This is for DDR4 MRS3. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_per_dram_access(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_PER_DRAM_ACCESS, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_TEMP_READOUT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Temperature sensor readout from DDR4 DRAM Spec. This is for DDR4 MRS3. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_temp_readout(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_TEMP_READOUT, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_CRC_WR_LATENCY setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Write latency for CRC and DM from DDR4 DRAM Spec. This is for DDR4 MRS3. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_crc_wr_latency(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_CRC_WR_LATENCY, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_MPR_RD_FORMAT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  MPR READ FORMAT from DDR4 DRAM Spec. This is for DDR4 MRS3. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_mpr_rd_format(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_MPR_RD_FORMAT, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_MAX_POWERDOWN_MODE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Max Power down mode from DDR4 DRAM Spec. This is for DDR4 MRS4. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_max_powerdown_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_MAX_POWERDOWN_MODE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_INTERNAL_VREF_MONITOR setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Internal Vref Monitor from DDR4 DRAM Spec. This is for DDR4 MRS4. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_internal_vref_monitor(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_INTERNAL_VREF_MONITOR, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_SELF_REF_ABORT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Self Refresh Abort from DDR4 DRAM Spec. This is for DDR4 MRS4. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_self_ref_abort(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_SELF_REF_ABORT, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_RD_PREAMBLE_TRAIN setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Read Pre amble Training Mode from DDR4 DRAM Spec. This is for DDR4 MRS4. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_rd_preamble_train(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_RD_PREAMBLE_TRAIN, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_RD_PREAMBLE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Read Pre amble Mode from DDR4 DRAM Spec. This is for DDR4 MRS4. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_rd_preamble(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_RD_PREAMBLE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_WR_PREAMBLE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Write Pre amble Mode from DDR4 DRAM Spec. This is for DDR4 MRS4. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_wr_preamble(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_WR_PREAMBLE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_CRC_ERROR_CLEAR setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  CRC Error Clear from DDR4 DRAM Spec. This is for DDR4 MRS5. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_crc_error_clear(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_CRC_ERROR_CLEAR, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_CA_PARITY_ERROR_STATUS setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  C/A Parity Error Status from DDR4 DRAM Spec. This is for DDR4 MRS5. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_ca_parity_error_status(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_CA_PARITY_ERROR_STATUS, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_ODT_INPUT_BUFF setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ODT Input Buffer during power down from DDR4 DRAM Spec. This is for DDR4 MRS5. From
/// user_response_mrs_msdg_t in draminit.
///
inline fapi2::ReturnCode set_exp_resp_odt_input_buff(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_ODT_INPUT_BUFF, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_CA_PARITY setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  CA Parity Persistance Error from DDR4 DRAM Spec. This is for DDR4 MRS5. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_ca_parity(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_CA_PARITY, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_DATA_MASK setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Data Mask from DDR4 DRAM Spec. This is for DDR4 MRS5. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_data_mask(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_DATA_MASK, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_WRITE_DBI setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Write DBI from DDR4 DRAM Spec. This is for DDR4 MRS5. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_write_dbi(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_WRITE_DBI, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_READ_DBI setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Read DBI from DDR4 DRAM Spec. This is for DDR4 MRS5. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_read_dbi(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_READ_DBI, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_value(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 80);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_value(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, i_target, l_value) );
    memcpy(&l_value, i_array, 160);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_VALUE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Range from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_range(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 80);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Range from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_range(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, i_target, l_value) );
    memcpy(&l_value, i_array, 160);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_RANGE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_enable(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&i_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, l_port, l_value) );
    memcpy(&(l_value[mss::index(i_target)][0]), i_array, 80);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  VrefDQ Training Value from DDR4 DRAM Spec. This is for DDR4 MRS6. From user_response_mrs_msdg_t
/// in draminit.
///
inline fapi2::ReturnCode set_exp_resp_vref_dq_train_enable(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, i_target, l_value) );
    memcpy(&l_value, i_array, 160);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_RESP_VREF_DQ_TRAIN_ENABLE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PSTATES setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] This byte defines the allowed number of P-States for the DDR4 Differential
/// Memory Buffer. P-States can be thought of as an available performance profile.
///
inline fapi2::ReturnCode set_pstates(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PSTATES, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_PSTATES, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PSTATES setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] This byte defines the allowed number of P-States for the DDR4 Differential
/// Memory Buffer. P-States can be thought of as an available performance profile.
///
inline fapi2::ReturnCode set_pstates(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PSTATES, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_PSTATES, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_FOUR_RANK_MODE setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] A-Side CA bus drives rank 0/1 and B-Side CA bus drives rank 2/3, DQ/DQS
/// are shared across the ranks
///
inline fapi2::ReturnCode set_four_rank_mode(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_FOUR_RANK_MODE setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] A-Side CA bus drives rank 0/1 and B-Side CA bus drives rank 2/3, DQ/DQS
/// are shared across the ranks
///
inline fapi2::ReturnCode set_four_rank_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_FOUR_RANK_MODE, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MRAM_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MRAM Support Support timing parameters of Everspin DDR4 MRAM
///
inline fapi2::ReturnCode set_mram_support(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MRAM_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MRAM Support Support timing parameters of Everspin DDR4 MRAM
///
inline fapi2::ReturnCode set_mram_support(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MRAM_SUPPORT, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDP_COMPATIBILITY setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] DDP Compatibility Support 1 rank 3DS Device in DDP board routing. CKE[1],
/// CSN[1], ODT[1] of PHY are connected to C[0], C[1], C[2] of DRAM
///
inline fapi2::ReturnCode set_ddp_compatibility(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDP_COMPATIBILITY setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] DDP Compatibility Support 1 rank 3DS Device in DDP board routing. CKE[1],
/// CSN[1], ODT[1] of PHY are connected to C[0], C[1], C[2] of DRAM
///
inline fapi2::ReturnCode set_ddp_compatibility(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_DDP_COMPATIBILITY, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_TSV_8H_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] TSV 8H Support Support 8H 3DS routing in board routing when parity check
/// is disabled
///
inline fapi2::ReturnCode set_tsv_8h_support(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_TSV_8H_SUPPORT setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] TSV 8H Support Support 8H 3DS routing in board routing when parity check
/// is disabled
///
inline fapi2::ReturnCode set_tsv_8h_support(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_TSV_8H_SUPPORT, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MDS_DDIMM setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MDS DDIMM type derived attribute Will be true if HYBRID_MEMORY_TYPE
/// is MDS and HYBRID is true
///
inline fapi2::ReturnCode set_mds_ddimm(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, l_port, l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, l_port, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_MDS_DDIMM setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ARRAY[DIMM] MDS DDIMM type derived attribute Will be true if HYBRID_MEMORY_TYPE
/// is MDS and HYBRID is true
///
inline fapi2::ReturnCode set_mds_ddimm(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                       uint8_t (&i_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, i_target, l_value) );
    memcpy(&l_value, i_array, 2);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MEM_EFF_MDS_DDIMM, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}


///
/// @brief ATTR_MSS_OCMB_ENTERPRISE_MODE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Indicates whether the OCMB can support enterprise mode or if it has been fused to
/// only support non-enterprise mode. Note: needs to be setup by the get ECID functionality
///
inline fapi2::ReturnCode set_ocmb_enterprise_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_OCMB_ENTERPRISE_MODE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_NONENTERPRISE_MODE_OVERRIDE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  An override to allow an enterprise capable DIMM to be run in non-enterprise mode.
/// Defaults to NO_OVERRIDE
///
inline fapi2::ReturnCode set_ocmb_nonenterprise_mode_override(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>&
        i_target, uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_OCMB_NONENTERPRISE_MODE_OVERRIDE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_HALF_DIMM_MODE_OVERRIDE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  An override that allows the user to control full or half DIMM mode
///
inline fapi2::ReturnCode set_ocmb_half_dimm_mode_override(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_OCMB_HALF_DIMM_MODE_OVERRIDE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_REORDER_QUEUE_SETTING setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Contains the settings for write/read reorder queue
///
inline fapi2::ReturnCode set_exp_reorder_queue_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_REORDER_QUEUE_SETTING, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_ECID setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ECID of the chip as determined by the IPL getecid procedure.
///
inline fapi2::ReturnCode set_ocmb_ecid(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint16_t i_value)
{
    uint16_t l_value[14] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ECID, i_target.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_OCMB_ECID, i_target.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_ECID setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ECID of the chip as determined by the IPL getecid procedure.
///
inline fapi2::ReturnCode set_ocmb_ecid(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t i_value)
{
    uint16_t l_value[14] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ECID, l_port.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );
    l_value[mss::index(l_port)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_OCMB_ECID, l_port.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_ECID setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint16_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ECID of the chip as determined by the IPL getecid procedure.
///
inline fapi2::ReturnCode set_ocmb_ecid(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
                                       uint16_t (&i_array)[14])
{
    uint16_t l_value[14] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_OCMB_ECID, i_target, l_value) );
    memcpy(&l_value, i_array, 28);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_OCMB_ECID, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_OCMB_PHY_INIT_MODE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Mode for PHY initialization.
///
inline fapi2::ReturnCode set_exp_phy_init_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_OCMB_PHY_INIT_MODE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_FW_API_VERSION setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Explorer I2C firmware API version supported. Reflects bits 22:18 from FW_STATUS
/// response.
///
inline fapi2::ReturnCode set_exp_fw_api_version(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_FW_API_VERSION, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_FW_VERSION_A setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint32_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Explorer firmware version loaded in partition A
///
inline fapi2::ReturnCode set_exp_fw_version_a(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_FW_VERSION_A, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_FW_VERSION_B setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint32_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Explorer firmware version loaded in partition B
///
inline fapi2::ReturnCode set_exp_fw_version_b(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_FW_VERSION_B, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_FW_PARTITION_ID setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint32_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  ID of Explorer partition that firmware was booted from
///
inline fapi2::ReturnCode set_exp_fw_partition_id(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_FW_PARTITION_ID, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_FW_FAILED_AUTHENTICATION_A setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Explorer firmware authentication status for partition A. '1' indicates the partition
/// failed authentication.
///
inline fapi2::ReturnCode set_exp_fw_failed_authentication_a(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_FW_FAILED_AUTHENTICATION_A, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_FW_FAILED_AUTHENTICATION_B setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Explorer firmware authentication status for partition B. '1' indicates the partition
/// failed authentication.
///
inline fapi2::ReturnCode set_exp_fw_failed_authentication_b(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_FW_FAILED_AUTHENTICATION_B, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_COMM_STATE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Can be used by general procedure code to determine sideband/inband mode, etc.
///
inline fapi2::ReturnCode set_exp_comm_state(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_COMM_STATE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_CDR_BW_OVERRIDE_ENABLE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  This enables the override to the Explroer CDR bandwidth, to the value specified
/// by ATTR_MSS_EXP_CDR_BW_OVERRIDE_VALUE. (Deprecated. Use ATTR_MSS_EXP_OMI_CDR_BW_OVERRIDE
/// instead.)
///
inline fapi2::ReturnCode set_exp_cdr_bw_override_enable(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_CDR_BW_OVERRIDE_ENABLE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_CDR_BW_OVERRIDE_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Value for the Explorer CDR Bandwidth when override is enabled via ATTR_MSS_EXP_CDR_BW_OVERRIDE_ENABLE
/// (Deprecated. Use ATTR_MSS_EXP_OMI_CDR_BW_OVERRIDE instead.)
///
inline fapi2::ReturnCode set_exp_cdr_bw_override_value(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_CDR_BW_OVERRIDE_VALUE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_INTR_MASK_DISABLE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  This is a lab override attribute to disable masking Explorer FIR interrupts during
/// OMI training. Disabling this can work around scom fails caused by older FW versions
/// not including the register 0x08040017
///
inline fapi2::ReturnCode set_exp_intr_mask_disable(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_INTR_MASK_DISABLE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_I2C_FW_LOG_DUMP_DISABLE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  This is a lab override attribute to disable dumping Explorer firmware logs via i2c
/// in FFDC handling. Dumping out logs using this method is destructive, i.e. the logs
/// get cleared, so they will not be accessible via lab tool after the initial FFDC
/// dump. FFDC may not be able to store the entire log so setting this could be necessary
/// in a lab setting.
///
inline fapi2::ReturnCode set_exp_i2c_fw_log_dump_disable(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_I2C_FW_LOG_DUMP_DISABLE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_SERIAL_NUMBER setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  IBM serial number for this DDIMM
///
inline fapi2::ReturnCode set_exp_serial_number(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t i_value)
{
    uint8_t l_value[26] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_SERIAL_NUMBER, i_target.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(),
                            l_value) );
    l_value[mss::index(i_target)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_SERIAL_NUMBER, i_target.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(),
                            l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_SERIAL_NUMBER setter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[in] uint8_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  IBM serial number for this DDIMM
///
inline fapi2::ReturnCode set_exp_serial_number(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t i_value)
{
    uint8_t l_value[26] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_SERIAL_NUMBER, l_port.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );
    l_value[mss::index(l_port)] = i_value;
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_SERIAL_NUMBER, l_port.getParent<fapi2::TARGET_TYPE_OCMB_CHIP>(), l_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MSS_EXP_SERIAL_NUMBER setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint8_t&[] ref to array of values to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  IBM serial number for this DDIMM
///
inline fapi2::ReturnCode set_exp_serial_number(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t (&i_array)[26])
{
    uint8_t l_value[26] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MSS_EXP_SERIAL_NUMBER, i_target, l_value) );
    memcpy(&l_value, i_array, 26);
    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_MSS_EXP_SERIAL_NUMBER, i_target, l_value) );

fapi_try_exit:
    return fapi2::current_err;
}


///
/// @brief ATTR_OMI_FFE_PRE_CURSOR setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint32_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  OMI FFE pre-cursor setting. Maximum 32, but cannot be 32 if ATTR_OMI_FFE_POST_CURSOR
/// is also 32. Default 0.
///
inline fapi2::ReturnCode set_omi_ffe_pre_cursor(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_OMI_FFE_PRE_CURSOR, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_OMI_FFE_POST_CURSOR setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] uint32_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  OMI FFE post-cursor setting. Maximum 32, but cannot be 32 if ATTR_OMI_FFE_PRE_CURSOR
/// is also 32. Default 0.
///
inline fapi2::ReturnCode set_omi_ffe_post_cursor(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint32_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_OMI_FFE_POST_CURSOR, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}


///
/// @brief ATTR_EXP_DATABUS_UTIL setter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[in] uint32_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Databus utilization per port limit used to calculate memory throttles and power
/// limit
///
inline fapi2::ReturnCode set_databus_util(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint32_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_EXP_DATABUS_UTIL, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}


} // attr
} // mss

#endif
