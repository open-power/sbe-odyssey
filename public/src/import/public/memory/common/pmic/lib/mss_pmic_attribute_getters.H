/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: public/src/import/public/memory/common/pmic/lib/mss_pmic_attribute_getters.H $ */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2022,2023                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// mss_pmic_attribute_getters.H
#ifndef MSS_PMIC_ATTR_GETTERS_H_
#define MSS_PMIC_ATTR_GETTERS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/index.H>
#include <generic/memory/lib/utils/c_str.H>



namespace mss
{
namespace attr
{
///
/// @brief ATTR_MEM_EFF_PMIC0_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Manufacturer ID Code for PMIC0
///
inline fapi2::ReturnCode get_pmic0_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_MFG_ID, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWA_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWA Voltage Setting
///
inline fapi2::ReturnCode get_pmic0_swa_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWA_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWA_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWA Voltage Range
///
inline fapi2::ReturnCode get_pmic0_swa_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWA_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic0_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWA_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWA for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swa_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWA_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWA_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWA will be enabled for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swa_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWA_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWB_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWB Voltage Setting
///
inline fapi2::ReturnCode get_pmic0_swb_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWB_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWB_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWB Voltage Range
///
inline fapi2::ReturnCode get_pmic0_swb_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWB_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic0_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWB_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWB for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swb_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWB_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWB_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWB will be enabled for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swb_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWB_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWC_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWC Voltage Setting
///
inline fapi2::ReturnCode get_pmic0_swc_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWC_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWC_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWC Voltage Range
///
inline fapi2::ReturnCode get_pmic0_swc_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWC_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic0_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWC_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWC for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swc_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWC_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWC_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWC will be enabled for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swc_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWC_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWD_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWD Voltage Setting
///
inline fapi2::ReturnCode get_pmic0_swd_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWD_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWD_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWD Voltage Range
///
inline fapi2::ReturnCode get_pmic0_swd_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWD_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic0_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWD_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWD for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swd_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWD_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWD_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWD will be enabled for PMIC0
///
inline fapi2::ReturnCode get_pmic0_swd_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWD_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Manufacturer ID Code for PMIC1
///
inline fapi2::ReturnCode get_pmic1_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_MFG_ID, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWA_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWA Voltage Setting
///
inline fapi2::ReturnCode get_pmic1_swa_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWA_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWA_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWA Voltage Range
///
inline fapi2::ReturnCode get_pmic1_swa_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWA_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic1_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWA_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWA for PMIC1
///
inline fapi2::ReturnCode get_pmic1_swa_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWA_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWA_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWA will be enabled for PMIC1
///
inline fapi2::ReturnCode get_pmic1_swa_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWA_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWB_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWB Voltage Setting
///
inline fapi2::ReturnCode get_pmic1_swb_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWB_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWB_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWB Voltage Range
///
inline fapi2::ReturnCode get_pmic1_swb_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWB_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic1_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWB_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWB for PMIC1
///
inline fapi2::ReturnCode get_pmic1_swb_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWB_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWB_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWB will be enabled for PMIC1
///
inline fapi2::ReturnCode get_pmic1_swb_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWB_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWC_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWC Voltage Setting
///
inline fapi2::ReturnCode get_pmic1_swc_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWC_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWC_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWC Voltage Range
///
inline fapi2::ReturnCode get_pmic1_swc_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWC_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic1_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWC_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWC
///
inline fapi2::ReturnCode get_pmic1_swc_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWC_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWC_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWC will be enabled for PMIC1
///
inline fapi2::ReturnCode get_pmic1_swc_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWC_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWD_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWD Voltage Setting
///
inline fapi2::ReturnCode get_pmic1_swd_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWD_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWD_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWD Voltage Range
///
inline fapi2::ReturnCode get_pmic1_swd_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWD_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic1_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWD_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWD for PMIC1
///
inline fapi2::ReturnCode get_pmic1_swd_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWD_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWD_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWD will be enabled for PMIC1
///
inline fapi2::ReturnCode get_pmic1_swd_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWD_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Manufacturer ID Code for PMIC2
///
inline fapi2::ReturnCode get_pmic2_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_MFG_ID, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWA_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWA Voltage Setting
///
inline fapi2::ReturnCode get_pmic2_swa_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWA_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWA_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWA Voltage Range
///
inline fapi2::ReturnCode get_pmic2_swa_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWA_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic2_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWA_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWA for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swa_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWA_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWA_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWA will be enabled for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swa_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWA_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWB_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWB Voltage Setting
///
inline fapi2::ReturnCode get_pmic2_swb_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWB_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWB_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWB Voltage Range
///
inline fapi2::ReturnCode get_pmic2_swb_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWB_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic2_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWB_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWB for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swb_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWB_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWB_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWB will be enabled for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swb_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWB_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWC_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWC Voltage Setting
///
inline fapi2::ReturnCode get_pmic2_swc_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWC_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWC_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWC Voltage Range
///
inline fapi2::ReturnCode get_pmic2_swc_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWC_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic2_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWC_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWC for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swc_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWC_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWC_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWC will be enabled for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swc_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWC_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWD_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWD Voltage Setting
///
inline fapi2::ReturnCode get_pmic2_swd_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWD_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWD_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWD Voltage Range
///
inline fapi2::ReturnCode get_pmic2_swd_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWD_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic2_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWD_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWD for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swd_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWD_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWD_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWD will be enabled for PMIC2
///
inline fapi2::ReturnCode get_pmic2_swd_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWD_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Manufacturer ID Code for PMIC3
///
inline fapi2::ReturnCode get_pmic3_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint16_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_MFG_ID, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWA_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWA Voltage Setting
///
inline fapi2::ReturnCode get_pmic3_swa_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWA_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWA_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWA Voltage Range
///
inline fapi2::ReturnCode get_pmic3_swa_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWA_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic3_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWA_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWA for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swa_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWA_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWA_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWA will be enabled for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swa_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWA_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWB_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWB Voltage Setting
///
inline fapi2::ReturnCode get_pmic3_swb_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWB_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWB_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWB Voltage Range
///
inline fapi2::ReturnCode get_pmic3_swb_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWB_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic3_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWB_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWB for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swb_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWB_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWB_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWB will be enabled for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swb_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWB_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWC_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWC Voltage Setting
///
inline fapi2::ReturnCode get_pmic3_swc_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWC_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWC_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWC Voltage Range
///
inline fapi2::ReturnCode get_pmic3_swc_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWC_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic3_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWC_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWC for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swc_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWC_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWC_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWC will be enabled for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swc_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWC_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWD_VOLTAGE_SETTING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWD Voltage Setting
///
inline fapi2::ReturnCode get_pmic3_swd_voltage_setting(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWD_VOLTAGE_SETTING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWD_VOLTAGE_RANGE_SELECT getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWD Voltage Range
///
inline fapi2::ReturnCode get_pmic3_swd_voltage_range_select(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWD_VOLTAGE_RANGE_SELECT, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_pmic3_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWD_SEQUENCE_DELAY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Delay after the sequence which enables SWD for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swd_sequence_delay(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWD_SEQUENCE_DELAY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWD_SEQUENCE_ORDER getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The sequence at which SWD will be enabled for PMIC3
///
inline fapi2::ReturnCode get_pmic3_swd_sequence_order(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWD_SEQUENCE_ORDER, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_REDUNDANCY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Redundant PMIC exists for PMIC0
///
inline fapi2::ReturnCode get_pmic0_redundancy(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_REDUNDANCY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_REVISION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Revision ID of PMIC0
///
inline fapi2::ReturnCode get_pmic0_revision(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_REVISION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_PHASE_COMB getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Phase configuration for PMIC0
///
inline fapi2::ReturnCode get_pmic0_phase_comb(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_PHASE_COMB, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SEQUENCE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Sequence order to enable PMIC0
///
inline fapi2::ReturnCode get_pmic0_sequence(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SEQUENCE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC0_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic0_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC0_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC0_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic0_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC0_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC0_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic0_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC0_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC0_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic0_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC0_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWA_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWA Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic0_swa_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWA_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWB_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWB Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic0_swb_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWB_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWC_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWC Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic0_swc_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWC_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC0_SWD_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC0 SWD Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic0_swd_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC0_SWD_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_REDUNDANCY getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Redundant PMIC exists for PMIC1
///
inline fapi2::ReturnCode get_pmic1_redundancy(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_REDUNDANCY, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_REVISION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Revision ID of PMIC1
///
inline fapi2::ReturnCode get_pmic1_revision(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_REVISION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_PHASE_COMB getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Phase configuration for PMIC1
///
inline fapi2::ReturnCode get_pmic1_phase_comb(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_PHASE_COMB, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SEQUENCE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Sequence order to enable PMIC1
///
inline fapi2::ReturnCode get_pmic1_sequence(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SEQUENCE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC1_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic1_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC1_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC1_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic1_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC1_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC1_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic1_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC1_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC1_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic1_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC1_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWA_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWA Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic1_swa_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWA_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWB_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWB Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic1_swb_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWB_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWC_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWC Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic1_swc_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWC_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC1_SWD_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC1 SWD Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic1_swd_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC1_SWD_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_REVISION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Revision ID of PMIC2
///
inline fapi2::ReturnCode get_pmic2_revision(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_REVISION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_PHASE_COMB getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Phase configuration for PMIC2
///
inline fapi2::ReturnCode get_pmic2_phase_comb(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_PHASE_COMB, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SEQUENCE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Sequence order to enable PMIC2
///
inline fapi2::ReturnCode get_pmic2_sequence(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SEQUENCE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC2_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic2_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC2_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC2_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic2_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC2_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC2_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic2_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC2_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC2_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic2_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC2_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWA_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWA Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic2_swa_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWA_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWB_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWB Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic2_swb_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWB_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWC_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWC Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic2_swc_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWC_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC2_SWD_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC2 SWD Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic2_swd_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC2_SWD_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_REVISION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Revision ID of PMIC3
///
inline fapi2::ReturnCode get_pmic3_revision(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_REVISION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_PHASE_COMB getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Phase configuration for PMIC3
///
inline fapi2::ReturnCode get_pmic3_phase_comb(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_PHASE_COMB, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SEQUENCE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Sequence order to enable PMIC3
///
inline fapi2::ReturnCode get_pmic3_sequence(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SEQUENCE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC3_SWA_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWA Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic3_swa_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC3_SWA_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC3_SWB_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWB Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic3_swb_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC3_SWB_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC3_SWC_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWC Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic3_swc_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC3_SWC_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_EFD_PMIC3_SWD_VOLTAGE_OFFSET getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] int8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWD Voltage Offset (signed, 1 bit increments)
///
inline fapi2::ReturnCode get_efd_pmic3_swd_voltage_offset(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_EFD_PMIC3_SWD_VOLTAGE_OFFSET, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWA_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWA Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic3_swa_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWA_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWB_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWB Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic3_swb_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWB_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWC_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWC Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic3_swc_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWC_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PMIC3_SWD_CURRENT_WARNING getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  PMIC3 SWD Current Warning Threshold. Directly maps to registers R1C to R1F. Bits
/// [7:2] x 0.125mA = threshold, bits [1:0] Reserved (0)
///
inline fapi2::ReturnCode get_pmic3_swd_current_warning(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PMIC3_SWD_CURRENT_WARNING, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}


///
/// @brief ATTR_MEM_PMIC_4U_N_MODE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  States of N-Mode declaration for the PMICs on a 4U DIMM. The bit would be set high
/// if GPIO or PMIC setup reported a failure relating to that part. If two PMICs in
/// a redundant pair have declared N-Mode, then the DIMM can not be enabled. The bits
/// are as follows: [PMIC0, PMIC1, PMIC2, PMIC3, 0, 0, 0, 0] Bit high = N-Mode declared,
/// or PMIC was not identified as PRESENT
///
inline fapi2::ReturnCode get_pmic_n_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target, uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_PMIC_4U_N_MODE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_PMIC_FORCE_N_MODE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Force one of 4 N-Mode configurations instead of N_PLUS_1 mode. The bits are as follows:
/// [PMIC0, PMIC1, PMIC2, PMIC3, 0, 0, 0, 0] Set the bits high for the desired PMICs
/// to run with. For DDR4 a valid configuration to boot with is at least a pair with
/// one each of [0,2] and [1,3]. FOr DDR5 a valid configuration to boot with is at least
/// 3 PMICs This only applies to 4U DDIMMs.
///
inline fapi2::ReturnCode get_pmic_force_n_mode(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_PMIC_FORCE_N_MODE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}


} // attr
} // mss

#endif
