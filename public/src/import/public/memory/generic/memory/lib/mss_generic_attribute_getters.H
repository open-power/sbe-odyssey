/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: public/src/import/public/memory/generic/memory/lib/mss_generic_attribute_getters.H $ */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2022,2024                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// mss_generic_attribute_getters.H
#ifndef MSS_GENERIC_ATTR_GETTERS_H_
#define MSS_GENERIC_ATTR_GETTERS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/index.H>
#include <generic/memory/lib/utils/c_str.H>



namespace mss
{
namespace attr
{
#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F0RC0F getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] F0RC0F - Command Latency Adder Control Word; Default value - 04. Values
/// Range from 00 to 04. No need to calculate; User can override with desired experimental
/// value.
///
inline fapi2::ReturnCode get_dimm_ddr4_f0rc0f(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F0RC0F, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F0RC0F getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] F0RC0F - Command Latency Adder Control Word; Default value - 04. Values
/// Range from 00 to 04. No need to calculate; User can override with desired experimental
/// value.
///
inline fapi2::ReturnCode get_dimm_ddr4_f0rc0f(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F0RC0F, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_CS_CMD_LATENCY getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] CS to CMD/ADDR Latency. This is for DDR4 MRS4. Computed in mss_eff_cnfg.
/// Each memory channel will have a value.
///
inline fapi2::ReturnCode get_cs_cmd_latency(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_CS_CMD_LATENCY, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_CS_CMD_LATENCY getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] CS to CMD/ADDR Latency. This is for DDR4 MRS4. Computed in mss_eff_cnfg.
/// Each memory channel will have a value.
///
inline fapi2::ReturnCode get_cs_cmd_latency(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_CS_CMD_LATENCY, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_CA_PARITY_LATENCY getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] C/A Parity Latency Mode. This is for DDR4 MRS5. Computed in mss_eff_cnfg.
/// Each memory channel will have a value.
///
inline fapi2::ReturnCode get_ca_parity_latency(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_CA_PARITY_LATENCY, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_CA_PARITY_LATENCY getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] C/A Parity Latency Mode. This is for DDR4 MRS5. Computed in mss_eff_cnfg.
/// Each memory channel will have a value.
///
inline fapi2::ReturnCode get_ca_parity_latency(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_CA_PARITY_LATENCY, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F0RC7X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] F0RC7x: IBT Control Word; Default value - 00. Values Range from 00 to
/// FF.No need to calculate. User can override with desired experimental value.
///
inline fapi2::ReturnCode get_dimm_ddr4_f0rc7x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F0RC7X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F0RC7X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] F0RC7x: IBT Control Word; Default value - 00. Values Range from 00 to
/// FF.No need to calculate. User can override with desired experimental value.
///
inline fapi2::ReturnCode get_dimm_ddr4_f0rc7x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F0RC7X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC00 getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] F1RC00: Data Buffer Interface Driver Characteristics Control Word; Default
/// value - 00. Values Range from 00 to 0F. No need to calculate. User can override
/// with desired experimental value.
///
inline fapi2::ReturnCode get_dimm_ddr4_f1rc00(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC00, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC00 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] F1RC00: Data Buffer Interface Driver Characteristics Control Word; Default
/// value - 00. Values Range from 00 to 0F. No need to calculate. User can override
/// with desired experimental value.
///
inline fapi2::ReturnCode get_dimm_ddr4_f1rc00(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC00, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DRAM_ADDRESS_MIRRORING getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode get_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DRAM_ADDRESS_MIRRORING, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DRAM_ADDRESS_MIRRORING getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Ranks that have address mirroring. This data is derived from SPD or VPD. Note: This
/// is a bit-wise map and muliple ranks can be mirrored.
///
inline fapi2::ReturnCode get_dram_address_mirroring(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DRAM_ADDRESS_MIRRORING, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif


///
/// @brief ATTR_MEM_EFF_REDUNDANT_CS_EN getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Rank0 DRAM will be half driven by CS0 and CS2. Rank1 DRAM will be half driven by
/// CS1 and CS3.
///
inline fapi2::ReturnCode get_ddr5_redundant_cs_en(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_REDUNDANT_CS_EN, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_REDUNDANT_CS_EN getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Rank0 DRAM will be half driven by CS0 and CS2. Rank1 DRAM will be half driven by
/// CS1 and CS3.
///
inline fapi2::ReturnCode get_ddr5_redundant_cs_en(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_REDUNDANT_CS_EN, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDR5_RTT_PARK_RD getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  RTT_PARK setting for read accesses. Bits[4:6] bitmap setting for non-target ranks
/// 3 to 0, respectively (bit 7 is not used). If a bit is set, corresponding ranks use
/// RTT_PARK during Reads to this rank; otherwise, RTT_NOM_RD is used. ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_rtt_park_rd(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_RTT_PARK_RD, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDR5_RTT_PARK_RD getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  RTT_PARK setting for read accesses. Bits[4:6] bitmap setting for non-target ranks
/// 3 to 0, respectively (bit 7 is not used). If a bit is set, corresponding ranks use
/// RTT_PARK during Reads to this rank; otherwise, RTT_NOM_RD is used. ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_rtt_park_rd(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_RTT_PARK_RD, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDR5_RTT_PARK_WR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  RTT_PARK setting for write accesses. Bits[4:6] bitmap setting for non-target ranks
/// 3 to 0, respectively (bit 7 is not used). If a bit is set, corresponding ranks use
/// RTT_PARK during Writes to this rank; otherwise, RTT_NOM_RD is used. ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_rtt_park_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_RTT_PARK_WR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DDR5_RTT_PARK_WR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  RTT_PARK setting for write accesses. Bits[4:6] bitmap setting for non-target ranks
/// 3 to 0, respectively (bit 7 is not used). If a bit is set, corresponding ranks use
/// RTT_PARK during Writes to this rank; otherwise, RTT_NOM_RD is used. ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_rtt_park_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_RTT_PARK_WR, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW00_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Command Address Rate and SDR Modes for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw00_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW00_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW01_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Parity, CMD Blocking, and Alert for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw01_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW01_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW05_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Operating Speed, Vdd Operating voltage and frequency context for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw05_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW05_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW08_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Clock Driver Enable for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw08_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW08_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW09_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Output Address and Control Enable for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw09_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW09_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0A_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK Signal Driver Characteristics for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0a_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0A_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0C_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute QxCA and QxCS Signal Driver Characteristics for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0c_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0C_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0D_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Data Buffer Interface Driver Characteristics for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0d_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0D_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0E_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK, QCA and QCS Output Slew Rate for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0e_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0E_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0F_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for BCK, BCOM and BCS Output Slew Rate for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0f_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0F_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW40_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw40_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW40_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW41_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw41_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW41_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW42_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw42_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW42_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW43_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw43_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW43_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW44_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw44_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW44_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW45_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw45_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW45_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW46_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw46_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW46_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW47_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw47_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW47_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW48_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw48_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW48_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW49_CHA_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw49_cha_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW49_CHA_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW00_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Command Address Rate and SDR Modes for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw00_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW00_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW01_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Parity, CMD Blocking, and Alert for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw01_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW01_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW05_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Operating Speed, Vdd Operating voltage and frequency context for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw05_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW05_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW08_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Clock Driver Enable for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw08_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW08_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW09_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Output Address and Control Enable for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw09_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW09_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0A_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK Signal Driver Characteristics for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0a_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0A_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0C_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute QxCA and QxCS Signal Driver Characteristics for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0c_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0C_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0D_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Data Buffer Interface Driver Characteristics for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0d_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0D_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0E_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK, QCA and QCS Output Slew Rate for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0e_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0E_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0F_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for BCK, BCOM and BCS Output Slew Rate for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0f_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0F_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW40_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw40_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW40_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW41_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw41_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW41_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW42_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw42_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW42_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW43_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw43_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW43_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW44_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw44_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW44_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW45_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw45_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW45_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW46_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw46_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW46_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW47_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw47_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW47_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW48_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw48_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW48_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW49_CHA_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw49_cha_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW49_CHA_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW00_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Command Address Rate and SDR Modes for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw00_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW00_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW01_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Parity, CMD Blocking, and Alert for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw01_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW01_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW05_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Operating Speed, Vdd Operating voltage and frequency context for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw05_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW05_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW08_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Clock Driver Enable for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw08_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW08_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW09_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Output Address and Control Enable for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw09_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW09_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0A_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK Signal Driver Characteristics for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0a_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0A_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0C_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute QxCA and QxCS Signal Driver Characteristics for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0c_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0C_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0D_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Data Buffer Interface Driver Characteristics for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0d_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0D_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0E_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK, QCA and QCS Output Slew Rate for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0e_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0E_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0F_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for BCK, BCOM and BCS Output Slew Rate for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw0f_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0F_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW40_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw40_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW40_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW41_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw41_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW41_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW42_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw42_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW42_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW43_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw43_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW43_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW44_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw44_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW44_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW45_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw45_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW45_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW46_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw46_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW46_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW47_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw47_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW47_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW48_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw48_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW48_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW49_CHB_D0 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM0
///
inline fapi2::ReturnCode get_ddr5_rcw49_chb_d0(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW49_CHB_D0, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW00_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Command Address Rate and SDR Modes for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw00_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW00_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW01_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Parity, CMD Blocking, and Alert for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw01_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW01_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW05_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Operating Speed, Vdd Operating voltage and frequency context for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw05_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW05_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW08_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Clock Driver Enable for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw08_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW08_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW09_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Output Address and Control Enable for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw09_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW09_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0A_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK Signal Driver Characteristics for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0a_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0A_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0C_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute QxCA and QxCS Signal Driver Characteristics for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0c_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0C_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0D_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Data Buffer Interface Driver Characteristics for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0d_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0D_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0E_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for QCK, QCA and QCS Output Slew Rate for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0e_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0E_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW0F_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for BCK, BCOM and BCS Output Slew Rate for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw0f_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW0F_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW40_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw40_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW40_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW41_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw41_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW41_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW42_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw42_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW42_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW43_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw43_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW43_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW44_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw44_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW44_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW45_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw45_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW45_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW46_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw46_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW46_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW47_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCA for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw47_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW47_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW48_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw48_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW48_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_RCW49_CHB_D1 getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Attribute for Internal VrefCS for DIMM1
///
inline fapi2::ReturnCode get_ddr5_rcw49_chb_d1(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_RCW49_CHB_D1, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}


///
/// @brief ATTR_MEM_WL_INTERNAL_CYCLE_ALIGNMENT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Internal WR cycle alignment 0 -> 0 tck 0xf -> -15 tck Includes values on a per-Rank,
/// per-DRAM (nibble) ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_wl_internal_cycle_alignment(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_WL_INTERNAL_CYCLE_ALIGNMENT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 80);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_WL_INTERNAL_CYCLE_ALIGNMENT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Internal WR cycle alignment 0 -> 0 tck 0xf -> -15 tck Includes values on a per-Rank,
/// per-DRAM (nibble) ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_wl_internal_cycle_alignment(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_WL_INTERNAL_CYCLE_ALIGNMENT, i_target, l_value) );
    memcpy(o_array, &l_value, 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DRAM_PU_DRV_IMP getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM pull up drive impedance ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_dram_pu_drv_imp(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DRAM_PU_DRV_IMP, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DRAM_PU_DRV_IMP getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM pull up drive impedance ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_dram_pu_drv_imp(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DRAM_PU_DRV_IMP, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DRAM_PD_DRV_IMP getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM pull down drive impedance ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_dram_pd_drv_imp(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DRAM_PD_DRV_IMP, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DRAM_PD_DRV_IMP getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM pull down drive impedance ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_dram_pd_drv_imp(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DRAM_PD_DRV_IMP, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_WR_VREFDQ getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM WR VREF DQ value. Decodes are noted in MR10 in the DDR5 JEDEC spec ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_wr_vrefdq(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_WR_VREFDQ, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 80);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_WR_VREFDQ getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM WR VREF DQ value. Decodes are noted in MR10 in the DDR5 JEDEC spec ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_wr_vrefdq(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_WR_VREFDQ, i_target, l_value) );
    memcpy(o_array, &l_value, 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_VREFCA getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM VREF CA value. Decodes are noted in MR11 in the DDR5 JEDEC spec The Leftmost
/// bit (OP[7]) is a VALID bit ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_vrefca(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_VREFCA, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 80);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_VREFCA getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM VREF CA value. Decodes are noted in MR11 in the DDR5 JEDEC spec The Leftmost
/// bit (OP[7]) is a VALID bit ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_vrefca(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_VREFCA, i_target, l_value) );
    memcpy(o_array, &l_value, 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_VREFCS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM VREF CS value. Decodes are noted in MR11 in the DDR5 JEDEC spec The Leftmost
/// bit (OP[7]) is a VALID bit ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_vrefcs(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_VREFCS, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 80);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_VREFCS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM VREF CS value. Decodes are noted in MR11 in the DDR5 JEDEC spec The Leftmost
/// bit (OP[7]) is a VALID bit ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_vrefcs(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_VREFCS, i_target, l_value) );
    memcpy(o_array, &l_value, 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CK_ODT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_ck_odt(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4][2])
{
    uint16_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CK_ODT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CK_ODT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_ck_odt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4][2])
{
    uint16_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CK_ODT, i_target, l_value) );
    memcpy(o_array, &l_value, 32);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CS_ODT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 chip select ODT value. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_cs_odt(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4][2])
{
    uint16_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CS_ODT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CS_ODT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 chip select ODT value. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_cs_odt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4][2])
{
    uint16_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CS_ODT, i_target, l_value) );
    memcpy(o_array, &l_value, 32);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CK_ODT_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_ck_odt_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4][20])
{
    uint16_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CK_ODT_PER_DRAM, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CK_ODT_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_ck_odt_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4][20])
{
    uint16_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CK_ODT_PER_DRAM, i_target, l_value) );
    memcpy(o_array, &l_value, 320);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CS_ODT_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 chip select ODT value. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_cs_odt_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4][20])
{
    uint16_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CS_ODT_PER_DRAM, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CS_ODT_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 chip select ODT value. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_cs_odt_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4][20])
{
    uint16_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CS_ODT_PER_DRAM, i_target, l_value) );
    memcpy(o_array, &l_value, 320);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CA_ODT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_ca_odt(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4][2])
{
    uint16_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CA_ODT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CA_ODT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_ca_odt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4][2])
{
    uint16_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CA_ODT, i_target, l_value) );
    memcpy(o_array, &l_value, 32);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_DQS_RTT_PARK getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM DQS RTT Park Termination Resistance in Ohms. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_dqs_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][2])
{
    uint8_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_DQS_RTT_PARK, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_DQS_RTT_PARK getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM DQS RTT Park Termination Resistance in Ohms. ARRAY[DIMM][RANK][STRAP]
///
inline fapi2::ReturnCode get_ddr5_dram_dqs_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][2])
{
    uint8_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_DQS_RTT_PARK, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CA_ODT_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_ca_odt_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4][20])
{
    uint16_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CA_ODT_PER_DRAM, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_CA_ODT_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 clock ODT value. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_ca_odt_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4][20])
{
    uint16_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_CA_ODT_PER_DRAM, i_target, l_value) );
    memcpy(o_array, &l_value, 320);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_DQS_RTT_PARK_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM DQS RTT Park Termination Resistance in Ohms. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_dqs_rtt_park_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][20])
{
    uint8_t l_value[2][4][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_DQS_RTT_PARK_PER_DRAM, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 80);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_DQS_RTT_PARK_PER_DRAM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM DQS RTT Park Termination Resistance in Ohms. ARRAY[DIMM][RANK][DRAM]
///
inline fapi2::ReturnCode get_ddr5_dram_dqs_rtt_park_per_dram(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][20])
{
    uint8_t l_value[2][4][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_DQS_RTT_PARK_PER_DRAM, i_target, l_value) );
    memcpy(o_array, &l_value, 160);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_WR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT PARK for writes Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][2])
{
    uint8_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_WR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_WR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT PARK for writes Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][2])
{
    uint8_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_WR, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_PARK getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT PARK for reads Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][2])
{
    uint8_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_PARK, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_PARK getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT PARK for reads Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][2])
{
    uint8_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_PARK, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_NOM_WR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT NOM for writes Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_nom_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][2])
{
    uint8_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_NOM_WR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_NOM_WR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT NOM for writes Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_nom_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][2])
{
    uint8_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_NOM_WR, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_NOM_RD getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT NOM for reads Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_nom_rd(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4][2])
{
    uint8_t l_value[2][4][2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_NOM_RD, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_RTT_NOM_RD getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM RTT NOM for reads Termination Resistance in Ohms. ARRAY[DIMM][RANK][CHANNEL]
///
inline fapi2::ReturnCode get_ddr5_dram_rtt_nom_rd(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4][2])
{
    uint8_t l_value[2][4][2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_RTT_NOM_RD, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLON_WR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODTon timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtlon_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        int8_t (&o_array)[4])
{
    int8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLON_WR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLON_WR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODTon timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtlon_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        int8_t (&o_array)[2][4])
{
    int8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLON_WR, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLOFF_WR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODToff timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtloff_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        int8_t (&o_array)[4])
{
    int8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLOFF_WR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLOFF_WR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODToff timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtloff_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        int8_t (&o_array)[2][4])
{
    int8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLOFF_WR, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLON_WR_NT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODTon non-targetted termination timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtlon_wr_nt(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        int8_t (&o_array)[4])
{
    int8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLON_WR_NT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLON_WR_NT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODTon non-targetted termination timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtlon_wr_nt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        int8_t (&o_array)[2][4])
{
    int8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLON_WR_NT, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLOFF_WR_NT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODToff non-targetted termination timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtloff_wr_nt(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        int8_t (&o_array)[4])
{
    int8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLOFF_WR_NT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLOFF_WR_NT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODToff non-targetted termination timing for writes ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtloff_wr_nt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        int8_t (&o_array)[2][4])
{
    int8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLOFF_WR_NT, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLON_RD_NT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODTon non-targetted termination timing for read ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtlon_rd_nt(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        int8_t (&o_array)[4])
{
    int8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLON_RD_NT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLON_RD_NT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODTon non-targetted termination timing for read ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtlon_rd_nt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        int8_t (&o_array)[2][4])
{
    int8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLON_RD_NT, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLOFF_RD_NT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODToff non-targetted termination timing for read ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtloff_rd_nt(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        int8_t (&o_array)[4])
{
    int8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLOFF_RD_NT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_DDR5_DRAM_ODTLOFF_RD_NT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] int8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DRAM ODToff non-targetted termination timing for read ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dram_odtloff_rd_nt(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        int8_t (&o_array)[2][4])
{
    int8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_DDR5_DRAM_ODTLOFF_RD_NT, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_DDR5_DFE_GAIN_BIAS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DFE gain bias ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dfe_gain_bias(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DDR5_DFE_GAIN_BIAS, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_DDR5_DFE_GAIN_BIAS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DFE gain bias ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dfe_gain_bias(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DDR5_DFE_GAIN_BIAS, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_DDR5_DFE_SIGN_BIT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DFE sign bit ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dfe_sign_bit(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DDR5_DFE_SIGN_BIT, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_DDR5_DFE_SIGN_BIT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DDR5 DFE sign bit ARRAY[DIMM][RANK]
///
inline fapi2::ReturnCode get_ddr5_dfe_sign_bit(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DDR5_DFE_SIGN_BIT, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}


///
/// @brief ATTR_MEM_EFF_DRAM_GEN getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DRAM Device Type. Decodes SPD byte 2. Generation of memory: DDR3, DDR4,
/// DDR5
///
inline fapi2::ReturnCode get_dram_gen(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_GEN, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DRAM_GEN getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DRAM Device Type. Decodes SPD byte 2. Generation of memory: DDR3, DDR4,
/// DDR5
///
inline fapi2::ReturnCode get_dram_gen(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_GEN, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DIMM_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Base Module Type. Decodes SPD Byte 3 (bits 3~0). Type of DIMM: RDIMM,
/// UDIMM, LRDIMM as specified by the JEDEC standard.
///
inline fapi2::ReturnCode get_dimm_type(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_TYPE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DIMM_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Base Module Type. Decodes SPD Byte 3 (bits 3~0). Type of DIMM: RDIMM,
/// UDIMM, LRDIMM as specified by the JEDEC standard.
///
inline fapi2::ReturnCode get_dimm_type(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                       uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_TYPE, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_HYBRID_MEMORY_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Hybrid Media. Decodes SPD Byte 3 (bits 6~4)
///
inline fapi2::ReturnCode get_hybrid_memory_type(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_HYBRID_MEMORY_TYPE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_HYBRID_MEMORY_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Hybrid Media. Decodes SPD Byte 3 (bits 6~4)
///
inline fapi2::ReturnCode get_hybrid_memory_type(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_HYBRID_MEMORY_TYPE, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_HYBRID getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Hybrid. Decodes SPD Byte 3 (bit 7)
///
inline fapi2::ReturnCode get_hybrid(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_HYBRID, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_HYBRID getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Hybrid. Decodes SPD Byte 3 (bit 7)
///
inline fapi2::ReturnCode get_hybrid(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_HYBRID, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_HOST_TO_DDR_SPEED_RATIO getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM]
///
inline fapi2::ReturnCode get_host_to_ddr_speed_ratio(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_HOST_TO_DDR_SPEED_RATIO, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_HOST_TO_DDR_SPEED_RATIO getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM]
///
inline fapi2::ReturnCode get_host_to_ddr_speed_ratio(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_HOST_TO_DDR_SPEED_RATIO, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_EFF_DRAM_DENSITY getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DRAM Density. Decodes SPD Byte 4 (bits 3~0). Total SDRAM capacity per
/// die. For multi-die stacks (DDP, QDP, or 3DS), this represents the capacity of each
/// DRAM die in the stack.
///
inline fapi2::ReturnCode get_dram_density(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_DENSITY, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DRAM_DENSITY getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DRAM Density. Decodes SPD Byte 4 (bits 3~0). Total SDRAM capacity per
/// die. For multi-die stacks (DDP, QDP, or 3DS), this represents the capacity of each
/// DRAM die in the stack.
///
inline fapi2::ReturnCode get_dram_density(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_DENSITY, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_BANK_BITS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Number of DRAM bank address bits. Actual number of banks is 2^N, where
/// N is the number of bank address bits. Decodes SPD Byte 4 (bits 5~4).
///
inline fapi2::ReturnCode get_dram_bank_bits(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_BANK_BITS, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_BANK_BITS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Number of DRAM bank address bits. Actual number of banks is 2^N, where
/// N is the number of bank address bits. Decodes SPD Byte 4 (bits 5~4).
///
inline fapi2::ReturnCode get_dram_bank_bits(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_BANK_BITS, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_COLUMN_BITS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Column Address Bits. Decoded SPD Byte 5 (bits 2~0). Actual number of
/// DRAM columns is 2^N, where N is the number of column address bits
///
inline fapi2::ReturnCode get_dram_column_bits(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_COLUMN_BITS, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_COLUMN_BITS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Column Address Bits. Decoded SPD Byte 5 (bits 2~0). Actual number of
/// DRAM columns is 2^N, where N is the number of column address bits
///
inline fapi2::ReturnCode get_dram_column_bits(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_COLUMN_BITS, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_EFF_DRAM_ROW_BITS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Row Address Bits. Decodes Byte 5 (bits 5~3). Number of DRAM column address
/// bits. Actual number of DRAM rows is 2^N, where N is the number of row address bits
///
inline fapi2::ReturnCode get_dram_row_bits(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_ROW_BITS, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DRAM_ROW_BITS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Row Address Bits. Decodes Byte 5 (bits 5~3). Number of DRAM column address
/// bits. Actual number of DRAM rows is 2^N, where N is the number of row address bits
///
inline fapi2::ReturnCode get_dram_row_bits(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_ROW_BITS, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PRIM_DIE_COUNT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Primary SDRAM Die Count. Decodes Byte 6 (bits 6~4).
///
inline fapi2::ReturnCode get_prim_die_count(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PRIM_DIE_COUNT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PRIM_DIE_COUNT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Primary SDRAM Die Count. Decodes Byte 6 (bits 6~4).
///
inline fapi2::ReturnCode get_prim_die_count(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PRIM_DIE_COUNT, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PRIM_STACK_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Primary SDRAM Package Type (bits 1~0). Decodes Byte 6. This byte defines
/// the primary set of SDRAMs. Monolithic = SPD, Multi-load stack = DDP/QDP, Single-load
/// stack = 3DS
///
inline fapi2::ReturnCode get_prim_stack_type(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PRIM_STACK_TYPE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_PRIM_STACK_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Primary SDRAM Package Type (bits 1~0). Decodes Byte 6. This byte defines
/// the primary set of SDRAMs. Monolithic = SPD, Multi-load stack = DDP/QDP, Single-load
/// stack = 3DS
///
inline fapi2::ReturnCode get_prim_stack_type(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PRIM_STACK_TYPE, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_PRIM_BUS_WIDTH getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Primary bus with (bits 1~0). Decodes Byte 13.
///
inline fapi2::ReturnCode get_prim_bus_width(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PRIM_BUS_WIDTH, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_PRIM_BUS_WIDTH getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Primary bus with (bits 1~0). Decodes Byte 13.
///
inline fapi2::ReturnCode get_prim_bus_width(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PRIM_BUS_WIDTH, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_CHANNELS_PER_DIMM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Number of channels per DIMM (bits 6~5). Decodes Byte 235.
///
inline fapi2::ReturnCode get_channels_per_dimm(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_CHANNELS_PER_DIMM, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_CHANNELS_PER_DIMM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Number of channels per DIMM (bits 6~5). Decodes Byte 235.
///
inline fapi2::ReturnCode get_channels_per_dimm(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_CHANNELS_PER_DIMM, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_PPR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Post Package Repair. Used in various locations and is evaluated in mss_eff_cnfg.
///
inline fapi2::ReturnCode get_dram_ppr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_PPR, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_PPR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Post Package Repair. Used in various locations and is evaluated in mss_eff_cnfg.
///
inline fapi2::ReturnCode get_dram_ppr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target, uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_PPR, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_SOFT_PPR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Soft Post Package Repair. Used in various locations and is evaluated
/// in mss_eff_cnfg.
///
inline fapi2::ReturnCode get_dram_soft_ppr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_SOFT_PPR, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_SOFT_PPR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Soft Post Package Repair. Used in various locations and is evaluated
/// in mss_eff_cnfg.
///
inline fapi2::ReturnCode get_dram_soft_ppr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_SOFT_PPR, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_EFF_DRAM_WIDTH getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] SDRAM Device Width Decodes SPD Byte 12 (bits 2~0). Options: X4 (4 bits),
/// X8 (8 bits), X16 (16 bits), X32 (32 bits).
///
inline fapi2::ReturnCode get_dram_width(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_WIDTH, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DRAM_WIDTH getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] SDRAM Device Width Decodes SPD Byte 12 (bits 2~0). Options: X4 (4 bits),
/// X8 (8 bits), X16 (16 bits), X32 (32 bits).
///
inline fapi2::ReturnCode get_dram_width(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_WIDTH, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_LOGICAL_RANKS_PER_DIMM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Total number of ranks in each DIMM. For monolithic and multi-load stack
/// modules (SDP/DDP) this is the same as the number of package ranks per DIMM (SPD
/// Byte 12 bits 5~3). For single load stack (3DS) modules this value represents the
/// number of logical ranks per DIMM. Logical rank refers the individually addressable
/// die in a 3DS stack and has no meaning for monolithic or multi-load stacked SDRAMs.
///
inline fapi2::ReturnCode get_logical_ranks_per_dimm(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_LOGICAL_RANKS_PER_DIMM, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_LOGICAL_RANKS_PER_DIMM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Total number of ranks in each DIMM. For monolithic and multi-load stack
/// modules (SDP/DDP) this is the same as the number of package ranks per DIMM (SPD
/// Byte 12 bits 5~3). For single load stack (3DS) modules this value represents the
/// number of logical ranks per DIMM. Logical rank refers the individually addressable
/// die in a 3DS stack and has no meaning for monolithic or multi-load stacked SDRAMs.
///
inline fapi2::ReturnCode get_logical_ranks_per_dimm(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_LOGICAL_RANKS_PER_DIMM, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_3DS_HEIGHT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Setting for 3DS stack. Calculated from logical_ranks / master_ranks
///
inline fapi2::ReturnCode get_3ds_height(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_3DS_HEIGHT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_3DS_HEIGHT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Setting for 3DS stack. Calculated from logical_ranks / master_ranks
///
inline fapi2::ReturnCode get_3ds_height(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_3DS_HEIGHT, i_target, l_value) );
    memcpy(o_array, &l_value, 4);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_REGISTER_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Register Type Decodes SPD Byte 131
///
inline fapi2::ReturnCode get_register_type(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_REGISTER_TYPE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_REGISTER_TYPE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Register Type Decodes SPD Byte 131
///
inline fapi2::ReturnCode get_register_type(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_REGISTER_TYPE, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_MODULE_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Module MFG ID Decodes SPD Byte 320 and 321 for ISDIMMs (Fujitsu, US
/// Modular) Decodes SPD Byte 512 and 513 for DDIMMs (Micron, Samsung, Smart)
///
inline fapi2::ReturnCode get_module_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MODULE_MFG_ID, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_MODULE_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Module MFG ID Decodes SPD Byte 320 and 321 for ISDIMMs (Fujitsu, US
/// Modular) Decodes SPD Byte 512 and 513 for DDIMMs (Micron, Samsung, Smart)
///
inline fapi2::ReturnCode get_module_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_MODULE_MFG_ID, i_target, l_value) );
    memcpy(o_array, &l_value, 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DRAM Manufacturer ID Code Decodes SPD Byte 350 and 351 for ISDIMMs Decodes
/// SPD Byte 552 and 553 for DDIMMs
///
inline fapi2::ReturnCode get_dram_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_MFG_ID, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DRAM_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DRAM Manufacturer ID Code Decodes SPD Byte 350 and 351 for ISDIMMs Decodes
/// SPD Byte 552 and 553 for DDIMMs
///
inline fapi2::ReturnCode get_dram_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DRAM_MFG_ID, i_target, l_value) );
    memcpy(o_array, &l_value, 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_RCD_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Register Manufacturer ID Code Decodes SPD Byte 133 and 134 DDIMM Module
/// Bytes 265 and 266
///
inline fapi2::ReturnCode get_rcd_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_RCD_MFG_ID, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_RCD_MFG_ID getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Register Manufacturer ID Code Decodes SPD Byte 133 and 134 DDIMM Module
/// Bytes 265 and 266
///
inline fapi2::ReturnCode get_rcd_mfg_id(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_RCD_MFG_ID, i_target, l_value) );
    memcpy(o_array, &l_value, 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_REGISTER_REV getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Register Revision Number Decodes SPD Byte 135
///
inline fapi2::ReturnCode get_register_rev(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_REGISTER_REV, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_REGISTER_REV getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Register Revision Number Decodes SPD Byte 135
///
inline fapi2::ReturnCode get_register_rev(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_REGISTER_REV, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_PACKAGE_RANK_MAP getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM][DQ_NIBBLES] Package Rank Map Decodes SPD Byte 60 - 77 (Bits 7~6)
///
inline fapi2::ReturnCode get_package_rank_map(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[20])
{
    uint8_t l_value[2][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PACKAGE_RANK_MAP, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 20);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_PACKAGE_RANK_MAP getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM][DQ_NIBBLES] Package Rank Map Decodes SPD Byte 60 - 77 (Bits 7~6)
///
inline fapi2::ReturnCode get_package_rank_map(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][20])
{
    uint8_t l_value[2][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_PACKAGE_RANK_MAP, i_target, l_value) );
    memcpy(o_array, &l_value, 40);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_NIBBLE_MAP getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM][DQ_NIBBLES] Nibble Map Decodes SPD Byte 60 - 77 (Bits 5~0) for DDR4
///
inline fapi2::ReturnCode get_nibble_map(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t (&o_array)[20])
{
    uint8_t l_value[2][20] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NIBBLE_MAP, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 20);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_NIBBLE_MAP getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM][DQ_NIBBLES] Nibble Map Decodes SPD Byte 60 - 77 (Bits 5~0) for DDR4
///
inline fapi2::ReturnCode get_nibble_map(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                        uint8_t (&o_array)[2][20])
{
    uint8_t l_value[2][20] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NIBBLE_MAP, i_target, l_value) );
    memcpy(o_array, &l_value, 40);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DIMM_SIZE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DIMM Size, in GB Used in various locations
///
inline fapi2::ReturnCode get_dimm_size(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint32_t& o_value)
{
    uint32_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_SIZE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_DIMM_SIZE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] DIMM Size, in GB Used in various locations
///
inline fapi2::ReturnCode get_dimm_size(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                       uint32_t (&o_array)[2])
{
    uint32_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_SIZE, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_EFF_DIMM_SPARE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Spare DRAM availability. Used in various locations and is computed in mss_eff_cnfg.
/// Array indexes are [DIMM][RANK]
///
inline fapi2::ReturnCode get_dimm_spare(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_SPARE, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DIMM_SPARE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Spare DRAM availability. Used in various locations and is computed in mss_eff_cnfg.
/// Array indexes are [DIMM][RANK]
///
inline fapi2::ReturnCode get_dimm_spare(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_SPARE, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_NUM_MASTER_RANKS_PER_DIMM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Specifies the number of master ranks per DIMM. Represents the number
/// of physical ranks on a DIMM. From SPD spec JEDEC Standard No. 21-C: Page 4.1.2.L-4.
/// Byte 12 (Bits 5~3) Number of package ranks per DIMM. Package ranks per DIMM refers
/// to the collections of devices on the module sharing common chip select signals.
///
inline fapi2::ReturnCode get_num_master_ranks_per_dimm(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NUM_MASTER_RANKS_PER_DIMM, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_NUM_MASTER_RANKS_PER_DIMM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Specifies the number of master ranks per DIMM. Represents the number
/// of physical ranks on a DIMM. From SPD spec JEDEC Standard No. 21-C: Page 4.1.2.L-4.
/// Byte 12 (Bits 5~3) Number of package ranks per DIMM. Package ranks per DIMM refers
/// to the collections of devices on the module sharing common chip select signals.
///
inline fapi2::ReturnCode get_num_master_ranks_per_dimm(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NUM_MASTER_RANKS_PER_DIMM, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DIMM_RANKS_CONFIGED getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Bit wise representation of master ranks in each DIMM that are used for reads and
/// writes. Used by PRD.
///
inline fapi2::ReturnCode get_dimm_ranks_configed(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_RANKS_CONFIGED, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_DIMM_RANKS_CONFIGED getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Bit wise representation of master ranks in each DIMM that are used for reads and
/// writes. Used by PRD.
///
inline fapi2::ReturnCode get_dimm_ranks_configed(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DIMM_RANKS_CONFIGED, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_SUPPORTED_RCD getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Byte 264: Registered Clock Drivers (RCD). DDIMM SPD spec. Module's supported
/// RCD options
///
inline fapi2::ReturnCode get_supported_rcd(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_SUPPORTED_RCD, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_SUPPORTED_RCD getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] Byte 264: Registered Clock Drivers (RCD). DDIMM SPD spec. Module's supported
/// RCD options
///
inline fapi2::ReturnCode get_supported_rcd(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_SUPPORTED_RCD, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_BYTE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to activate or deactivate bytes in the DDR interface
/// of the differential memory buffer chip. Right aligned data.
///
inline fapi2::ReturnCode get_byte_enables(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_BYTE_ENABLES, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_BYTE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to activate or deactivate bytes in the DDR interface
/// of the differential memory buffer chip. Right aligned data.
///
inline fapi2::ReturnCode get_byte_enables(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_BYTE_ENABLES, i_target, l_value) );
    memcpy(o_array, &l_value, 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_NIBBLE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to select the active nibbles or DQS on the DDR interface.
/// Right aligned data.
///
inline fapi2::ReturnCode get_nibble_enables(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint32_t& o_value)
{
    uint32_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NIBBLE_ENABLES, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_NIBBLE_ENABLES getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM] These bits are used to select the active nibbles or DQS on the DDR interface.
/// Right aligned data.
///
inline fapi2::ReturnCode get_nibble_enables(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t (&o_array)[2])
{
    uint32_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_NIBBLE_ENABLES, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}


#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_VOLT_VDDR getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM Voltage, each voltage rail would need to have a value.
///
inline fapi2::ReturnCode get_volt_vddr(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target, uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_VOLT_VDDR, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_VOLT_VDDQ getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM Voltage, each voltage rail would need to have a value.
///
inline fapi2::ReturnCode get_volt_vddq(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target, uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_VOLT_VDDQ, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_EFF_VOLT_VPP getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DRAM VPP Voltage, each voltage rail would need to have a value.
///
inline fapi2::ReturnCode get_volt_vpp(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target, uint32_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_VOLT_VPP, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}
#endif


#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_DRAM_DRV_IMP_DQ_DQS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DQ and DQS Drive Impedance.
///
inline fapi2::ReturnCode get_si_dram_drv_imp_dq_dqs(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_DRV_IMP_DQ_DQS, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_DRAM_DRV_IMP_DQ_DQS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DQ and DQS Drive Impedance.
///
inline fapi2::ReturnCode get_si_dram_drv_imp_dq_dqs(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_DRV_IMP_DQ_DQS, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_DRAM_PREAMBLE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Number of clocks used for read/write preamble. Calibration only
/// uses 1 nCK preamble (DEFAULT). Mainline has both 1 nCK and 2 nCK preamble option.
/// The value of "0" means 1 nCK preamble, the value of "1" means 2 nCK preamble. Bit
/// 3 for READ preamble, and Bit 7 for WRITE preamble. E.g. 0b00010001 means 2 nCK preamble
/// for both READ and WRITE
///
inline fapi2::ReturnCode get_si_dram_preamble(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_PREAMBLE, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_DRAM_PREAMBLE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Number of clocks used for read/write preamble. Calibration only
/// uses 1 nCK preamble (DEFAULT). Mainline has both 1 nCK and 2 nCK preamble option.
/// The value of "0" means 1 nCK preamble, the value of "1" means 2 nCK preamble. Bit
/// 3 for READ preamble, and Bit 7 for WRITE preamble. E.g. 0b00010001 means 2 nCK preamble
/// for both READ and WRITE
///
inline fapi2::ReturnCode get_si_dram_preamble(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_PREAMBLE, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_SI_DRAM_RTT_NOM getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DRAM side Nominal Termination Resistance in Ohms.
///
inline fapi2::ReturnCode get_si_dram_rtt_nom(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_RTT_NOM, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_DRAM_RTT_NOM getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DRAM side Nominal Termination Resistance in Ohms.
///
inline fapi2::ReturnCode get_si_dram_rtt_nom(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_RTT_NOM, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_DRAM_RTT_PARK getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DRAM side Park Termination Resistance in Ohms.
///
inline fapi2::ReturnCode get_si_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_RTT_PARK, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_DRAM_RTT_PARK getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DRAM side Park Termination Resistance in Ohms.
///
inline fapi2::ReturnCode get_si_dram_rtt_park(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_RTT_PARK, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_DRAM_RTT_WR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DRAM side Write Termination Resistance in Ohms. Note: This attr
/// is for DDR4 ONLY
///
inline fapi2::ReturnCode get_si_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_RTT_WR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_DRAM_RTT_WR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] DRAM side Write Termination Resistance in Ohms. Note: This attr
/// is for DDR4 ONLY
///
inline fapi2::ReturnCode get_si_dram_rtt_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_DRAM_RTT_WR, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_GEARDOWN_MODE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM][RANK] Gear Down Mode. This is for DDR4 MRS3. Each memory channel will
/// have a value.
///
inline fapi2::ReturnCode get_si_geardown_mode(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_GEARDOWN_MODE, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_GEARDOWN_MODE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  ARRAY[DIMM][RANK] Gear Down Mode. This is for DDR4 MRS3. Each memory channel will
/// have a value.
///
inline fapi2::ReturnCode get_si_geardown_mode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_GEARDOWN_MODE, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_PHY_EQUALIZATION getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive and Receive Equalization for Data
/// and Data Strobe Lines. Bit 6 - Driver FFE Bit 7 - Receiver DFE 0 = disable, 1 =
/// enable
///
inline fapi2::ReturnCode get_si_phy_equalization(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_PHY_EQUALIZATION, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_PHY_EQUALIZATION getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive and Receive Equalization for Data
/// and Data Strobe Lines. Bit 6 - Driver FFE Bit 7 - Receiver DFE 0 = disable, 1 =
/// enable
///
inline fapi2::ReturnCode get_si_phy_equalization(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_PHY_EQUALIZATION, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_CLK getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance for Clock in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_imp_clk(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_CLK, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_CLK getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance for Clock in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_imp_clk(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_CLK, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_CMD_ADDR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance for Address, Bank Address,
/// Bank Group and Activate Lines in Ohms. DDR4 configs values are in Ohms. DDR5 configs
/// (SDR_ and DDR_) values are the possible SPD encoding for ATx impedance. The CSR
/// value is derived from the lookup table of byte 32 in DDR5 SPD spec in ody_ddrphy_phyinit
///
inline fapi2::ReturnCode get_si_mc_drv_imp_cmd_addr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_CMD_ADDR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_CMD_ADDR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance for Address, Bank Address,
/// Bank Group and Activate Lines in Ohms. DDR4 configs values are in Ohms. DDR5 configs
/// (SDR_ and DDR_) values are the possible SPD encoding for ATx impedance. The CSR
/// value is derived from the lookup table of byte 32 in DDR5 SPD spec in ody_ddrphy_phyinit
///
inline fapi2::ReturnCode get_si_mc_drv_imp_cmd_addr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_CMD_ADDR, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_DOWN getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance Pull Down for Data and
/// Data Strobe Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_imp_dq_dqs_pull_down(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4])
{
    uint16_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_DOWN, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_DOWN getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance Pull Down for Data and
/// Data Strobe Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_imp_dq_dqs_pull_down(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4])
{
    uint16_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_DOWN, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_UP getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance Pull Up for Data and Data
/// Strobe Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_imp_dq_dqs_pull_up(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4])
{
    uint16_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_UP, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_UP getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Impedance Pull Up for Data and Data
/// Strobe Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_imp_dq_dqs_pull_up(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4])
{
    uint16_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_IMP_DQ_DQS_PULL_UP, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_SLEW_RATE_CLK getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Slew Rate for Clock in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_slew_rate_clk(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_SLEW_RATE_CLK, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_SLEW_RATE_CLK getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Slew Rate for Clock in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_slew_rate_clk(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_SLEW_RATE_CLK, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_SLEW_RATE_CMD_ADDR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Slew Rate for Address, Bank Address,
/// Bank Group and Activate Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_slew_rate_cmd_addr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_SLEW_RATE_CMD_ADDR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_SLEW_RATE_CMD_ADDR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Slew Rate for Address, Bank Address,
/// Bank Group and Activate Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_slew_rate_cmd_addr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_SLEW_RATE_CMD_ADDR, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_SLEW_RATE_DQ_DQS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Slew Rate for Data and Data Strobe
/// Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_slew_rate_dq_dqs(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_SLEW_RATE_DQ_DQS, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_SI_MC_DRV_SLEW_RATE_DQ_DQS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Drive Slew Rate for Data and Data Strobe
/// Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_drv_slew_rate_dq_dqs(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_DRV_SLEW_RATE_DQ_DQS, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

///
/// @brief ATTR_MEM_SI_MC_RCV_IMP_ALERT_N getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Memory Controller side Receiver Impedance. Alert_N line in Ohms.
///
inline fapi2::ReturnCode get_si_mc_rcv_imp_alert_n(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_RCV_IMP_ALERT_N, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_MC_RCV_IMP_ALERT_N getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Memory Controller side Receiver Impedance. Alert_N line in Ohms.
///
inline fapi2::ReturnCode get_si_mc_rcv_imp_alert_n(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_RCV_IMP_ALERT_N, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_MC_RCV_IMP_DQ_DQS getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Receiver Impedance. Data and Data Strobe
/// Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_rcv_imp_dq_dqs(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t (&o_array)[4])
{
    uint16_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_RCV_IMP_DQ_DQS, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_MC_RCV_IMP_DQ_DQS getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] Memory Controller side Receiver Impedance. Data and Data Strobe
/// Lines in Ohms.
///
inline fapi2::ReturnCode get_si_mc_rcv_imp_dq_dqs(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2][4])
{
    uint16_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_MC_RCV_IMP_DQ_DQS, i_target, l_value) );
    memcpy(o_array, &l_value, 16);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_ODT_RD getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] READ, On Die Termination triggering bitmap. Use bitmap to determine
/// which ODT to fire for the designated rank. The bits in 8 bit field are [DIMM0 ODT0][DIMM0
/// ODT1][DIMM0 ODT2][DIMM0 ODT3][DIMM1 ODT0][DIMM1 ODT1][DIMM1 ODT2][DIMM1 ODT3] For
/// Explorer: Only bits 0,1,4,5 are used. They correspond to A0 A1 -- -- B0 B1 -- --
///
inline fapi2::ReturnCode get_si_odt_rd(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_ODT_RD, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_ODT_RD getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] READ, On Die Termination triggering bitmap. Use bitmap to determine
/// which ODT to fire for the designated rank. The bits in 8 bit field are [DIMM0 ODT0][DIMM0
/// ODT1][DIMM0 ODT2][DIMM0 ODT3][DIMM1 ODT0][DIMM1 ODT1][DIMM1 ODT2][DIMM1 ODT3] For
/// Explorer: Only bits 0,1,4,5 are used. They correspond to A0 A1 -- -- B0 B1 -- --
///
inline fapi2::ReturnCode get_si_odt_rd(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                       uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_ODT_RD, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_ODT_WR getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] WRITE, On Die Termination triggering bitmap. Use bitmap to determine
/// which ODT to fire for the designated rank. The bits in 8 bit field are [DIMM0 ODT0][DIMM0
/// ODT1][DIMM0 ODT2][DIMM0 ODT3][DIMM1 ODT0][DIMM1 ODT1][DIMM1 ODT2][DIMM1 ODT3] For
/// Explorer: Only bits 0,1,4,5 are used. They correspond to A0 A1 -- -- B0 B1 -- --
///
inline fapi2::ReturnCode get_si_odt_wr(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t (&o_array)[4])
{
    uint8_t l_value[2][4] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_ODT_WR, l_port, l_value) );
    memcpy(o_array, &(l_value[mss::index(i_target)][0]), 4);

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_SI_ODT_WR getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM][RANK] WRITE, On Die Termination triggering bitmap. Use bitmap to determine
/// which ODT to fire for the designated rank. The bits in 8 bit field are [DIMM0 ODT0][DIMM0
/// ODT1][DIMM0 ODT2][DIMM0 ODT3][DIMM1 ODT0][DIMM1 ODT1][DIMM1 ODT2][DIMM1 ODT3] For
/// Explorer: Only bits 0,1,4,5 are used. They correspond to A0 A1 -- -- B0 B1 -- --
///
inline fapi2::ReturnCode get_si_odt_wr(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                       uint8_t (&o_array)[2][4])
{
    uint8_t l_value[2][4] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_SI_ODT_WR, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC1X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC1X - QxCSn_n Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc1x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC1X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC1X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC1X - QxCSn_n Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc1x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC1X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC2X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC2X - QxCn Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc2x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC2X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC2X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC2X - QxCn Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc2x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC2X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC3X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC3X - QxCKEn Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc3x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC3X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC3X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC3X - QxCKEn Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc3x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC3X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC4X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC4X - QxODTn Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc4x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC4X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC4X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC4X - QxODTn Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc4x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC4X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC5X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC5X - QxCA Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc5x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC5X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC5X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC5X - QxCA Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc5x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC5X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC6X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC6X - Y1/Y3 Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc6x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC6X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC6X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC6X - Y1/Y3 Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc6x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC6X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC7X getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC7X - Y0/Y2 Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc7x(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint8_t& o_value)
{
    uint8_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC7X, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_MEM_DIMM_DDR4_F1RC7X getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint8_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Array[DIMM]. F1RC7X - Y0/Y2 Output Delay Control Word from the DDR4 RCD Spec.
///
inline fapi2::ReturnCode get_ddr4_f1rc7x(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t (&o_array)[2])
{
    uint8_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_DIMM_DDR4_F1RC7X, i_target, l_value) );
    memcpy(o_array, &l_value, 2);

fapi_try_exit:
    return fapi2::current_err;
}
#endif


///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_0_AVAIL getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The availability of thermal sensor 0
///
inline fapi2::ReturnCode get_therm_sensor_0_availability(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_0_AVAIL, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_0_USAGE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The chosen usage monitor of thermal sensor 0. Note that the SPD encoding of DRAM_AND_PMIC
/// usage (0x03) is not supported and will be changed to PMIC in this attribute.
///
inline fapi2::ReturnCode get_therm_sensor_0_usage(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_0_USAGE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_1_AVAIL getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The availability of thermal sensor 1
///
inline fapi2::ReturnCode get_therm_sensor_1_availability(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_1_AVAIL, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_1_USAGE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The chosen usage monitor of thermal sensor 1. Note that the SPD encoding of DRAM_AND_PMIC
/// usage (0x03) is not supported and will be changed to PMIC in this attribute.
///
inline fapi2::ReturnCode get_therm_sensor_1_usage(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_1_USAGE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_2_AVAIL getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The availability of thermal sensor 2
///
inline fapi2::ReturnCode get_therm_sensor_2_availability(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_2_AVAIL, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_2_USAGE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The chosen usage monitor of thermal sensor 2. Note that the SPD encoding of DRAM_AND_PMIC
/// usage (0x03) is not supported and will be changed to PMIC in this attribute.
///
inline fapi2::ReturnCode get_therm_sensor_2_usage(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_2_USAGE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_3_AVAIL getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The availability of thermal sensor 3
///
inline fapi2::ReturnCode get_therm_sensor_3_availability(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_3_AVAIL, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_3_USAGE getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  The chosen usage monitor of thermal sensor 3. Note that the SPD encoding of DRAM_AND_PMIC
/// usage (0x03) is not supported and will be changed to PMIC in this attribute.
///
inline fapi2::ReturnCode get_therm_sensor_3_usage(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_3_USAGE, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_3_LOCATION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Thermal Sensor 3 Location
///
inline fapi2::ReturnCode get_therm_sensor_3_location(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_3_LOCATION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_2_LOCATION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Thermal Sensor 2 Location
///
inline fapi2::ReturnCode get_therm_sensor_2_location(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_2_LOCATION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_1_LOCATION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Thermal Sensor 1 Location
///
inline fapi2::ReturnCode get_therm_sensor_1_location(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_1_LOCATION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_MEM_EFF_THERM_SENSOR_0_LOCATION getter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[out] uint8_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Thermal Sensor 0 Location
///
inline fapi2::ReturnCode get_therm_sensor_0_location(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        uint8_t& o_value)
{

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_THERM_SENSOR_0_LOCATION, i_target, o_value) );

fapi_try_exit:
    return fapi2::current_err;
}


#ifndef __PPE__
///
/// @brief ATTR_EXP_MEM_WATT_TARGET getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Total memory power used to throttle for each dimm Used to compute the throttles
/// on the channel and/or dimms for OCC OCC sets after IPL
///
inline fapi2::ReturnCode get_mem_watt_target(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint32_t& o_value)
{
    uint32_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_MEM_WATT_TARGET, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_EXP_MEM_WATT_TARGET getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  Total memory power used to throttle for each dimm Used to compute the throttles
/// on the channel and/or dimms for OCC OCC sets after IPL
///
inline fapi2::ReturnCode get_mem_watt_target(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t (&o_array)[2])
{
    uint32_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_MEM_WATT_TARGET, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_EXP_TOTAL_PWR_SLOPE getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power slope value for dimm creator: mss_eff_config consumer: mss_bulk_pwr_throttles
///
inline fapi2::ReturnCode get_total_pwr_slope(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target, uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_SLOPE, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_EXP_TOTAL_PWR_SLOPE getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power slope value for dimm creator: mss_eff_config consumer: mss_bulk_pwr_throttles
///
inline fapi2::ReturnCode get_total_pwr_slope(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_SLOPE, i_target, l_value) );
    memcpy(o_array, &l_value, 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_EXP_TOTAL_PWR_INTERCEPT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint16_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power intercept value for dimm
///
inline fapi2::ReturnCode get_total_pwr_intercept(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint16_t& o_value)
{
    uint16_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_INTERCEPT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_EXP_TOTAL_PWR_INTERCEPT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint16_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  VDDR+VPP Power intercept value for dimm
///
inline fapi2::ReturnCode get_total_pwr_intercept(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint16_t (&o_array)[2])
{
    uint16_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_TOTAL_PWR_INTERCEPT, i_target, l_value) );
    memcpy(o_array, &l_value, 4);

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_EXP_DIMM_THERMAL_LIMIT getter
/// @param[in] const ref to the TARGET_TYPE_DIMM
/// @param[out] uint32_t& reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DIMM Max Power based on a thermal limit Decoded from ATTR_MSS_MRW_THERMAL_POWER_LIMIT
///
inline fapi2::ReturnCode get_dimm_thermal_limit(const fapi2::Target<fapi2::TARGET_TYPE_DIMM>& i_target,
        uint32_t& o_value)
{
    uint32_t l_value[2] = {};
    const auto l_port = i_target.getParent<fapi2::TARGET_TYPE_MEM_PORT>();

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_DIMM_THERMAL_LIMIT, l_port, l_value) );
    o_value = l_value[mss::index(i_target)];

fapi_try_exit:
    return fapi2::current_err;
}
#endif

#ifndef __PPE__
///
/// @brief ATTR_EXP_DIMM_THERMAL_LIMIT getter
/// @param[in] const ref to the TARGET_TYPE_MEM_PORT
/// @param[out] uint32_t&[] array reference to store the value
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff get is OK
/// @note  DIMM Max Power based on a thermal limit Decoded from ATTR_MSS_MRW_THERMAL_POWER_LIMIT
///
inline fapi2::ReturnCode get_dimm_thermal_limit(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint32_t (&o_array)[2])
{
    uint32_t l_value[2] = {};

    FAPI_TRY( FAPI_ATTR_GET(fapi2::ATTR_EXP_DIMM_THERMAL_LIMIT, i_target, l_value) );
    memcpy(o_array, &l_value, 8);

fapi_try_exit:
    return fapi2::current_err;
}
#endif


} // attr
} // mss

#endif
