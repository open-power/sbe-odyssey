/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: public/src/import/public/memory/odyssey/hwp/lib/mss_odyssey_attribute_setters.H $ */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2022,2024                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// mss_odyssey_attribute_setters.H
#ifndef MSS_ODYSSEY_ATTR_SETTERS_H_
#define MSS_ODYSSEY_ATTR_SETTERS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/index.H>
#include <generic/memory/lib/utils/c_str.H>



namespace mss
{
namespace attr
{
///
/// @brief ATTR_ODY_THERMAL_SENSOR_DIFF_PREVIOUS_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] int16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Value of differential thermal sensor the previous time DQS tracking executed. Updated
/// in DQS tracking procedure.
///
inline fapi2::ReturnCode set_therm_sensor_diff_prev_value(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int16_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_ODY_THERMAL_SENSOR_DIFF_PREVIOUS_VALUE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_ODY_THERMAL_SENSOR_0_PREVIOUS_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] int16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Value of thermal sensor 0 the previous time DQS tracking executed. Updated in DQS
/// tracking procedure.
///
inline fapi2::ReturnCode set_therm_sensor_0_prev_value(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int16_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_ODY_THERMAL_SENSOR_0_PREVIOUS_VALUE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_ODY_THERMAL_SENSOR_1_PREVIOUS_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] int16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Value of thermal sensor 1 the previous time DQS tracking executed. Updated in DQS
/// tracking procedure.
///
inline fapi2::ReturnCode set_therm_sensor_1_prev_value(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int16_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_ODY_THERMAL_SENSOR_1_PREVIOUS_VALUE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_ODY_THERMAL_SENSOR_2_PREVIOUS_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] int16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Value of thermal sensor 2 the previous time DQS tracking executed. Updated in DQS
/// tracking procedure.
///
inline fapi2::ReturnCode set_therm_sensor_2_prev_value(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int16_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_ODY_THERMAL_SENSOR_2_PREVIOUS_VALUE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @brief ATTR_ODY_THERMAL_SENSOR_3_PREVIOUS_VALUE setter
/// @param[in] const ref to the TARGET_TYPE_OCMB_CHIP
/// @param[in] int16_t the value to set
/// @note Generated by gen_accessors.pl generate_mc_port_params
/// @return fapi2::ReturnCode - FAPI2_RC_SUCCESS iff set is OK
/// @note  Value of thermal sensor 3 the previous time DQS tracking executed. Updated in DQS
/// tracking procedure.
///
inline fapi2::ReturnCode set_therm_sensor_3_prev_value(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
        int16_t i_value)
{

    FAPI_TRY( FAPI_ATTR_SET(fapi2::ATTR_ODY_THERMAL_SENSOR_3_PREVIOUS_VALUE, i_target, i_value) );

fapi_try_exit:
    return fapi2::current_err;
}


} // attr
} // mss

#endif
