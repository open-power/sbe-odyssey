
public/src/onetime/odyssey/srom/odyssey_srom_DD1.out:     file format elf32-powerpc


Disassembly of section .pk_vectors:

fff70000 <__vectors>:
fff70000:	48 00 00 20 	b       fff70020 <__machine_check>
	...

fff70010 <__set_msr>:
fff70010:	7c 60 01 24 	mtmsr   r3
fff70014:	4e 80 00 20 	blr
	...

fff70020 <__machine_check>:
fff70020:	48 00 cb 04 	b       fff7cb24 <__sbe_machine_check_handler>
	...

fff70040 <__system_reset>:
fff70040:	48 00 03 c0 	b       fff70400 <__system_reset_handler>
	...

fff70060 <__data_storage>:
fff70060:	48 00 ca bd 	bl      fff7cb1c <__sbe_register_saveoff>
fff70064:	7f e0 10 08 	twu     r0,r2
	...

fff70080 <__instruction_storage>:
fff70080:	48 00 ca 9d 	bl      fff7cb1c <__sbe_register_saveoff>
fff70084:	7f e0 18 08 	twu     r0,r3
	...

fff700a0 <__external_interrupt_vector>:
fff700a0:	f8 21 ff af 	stcxu   r1,-88(r1)
fff700a4:	3c 60 ff f7 	lis     r3,-9
fff700a8:	60 63 aa b0 	ori     r3,r3,43696
fff700ac:	7c 68 03 a6 	mtlr    r3
fff700b0:	7c 90 42 a6 	mfsprg  r4,0
fff700b4:	48 00 a9 8c 	b       fff7aa40 <ctx_check_discard>
	...

fff700c0 <__alignment_exception>:
fff700c0:	48 00 ca 5d 	bl      fff7cb1c <__sbe_register_saveoff>
fff700c4:	7f e0 20 08 	twu     r0,r4
	...

fff700e0 <__program_exception>:
fff700e0:	48 00 ca 3d 	bl      fff7cb1c <__sbe_register_saveoff>
fff700e4:	7f e0 e0 08 	twu     r0,r28
	...

fff70100 <__dec_interrupt>:
fff70100:	f8 21 ff af 	stcxu   r1,-88(r1)
fff70104:	3c 60 ff f7 	lis     r3,-9
fff70108:	60 63 a9 90 	ori     r3,r3,43408
fff7010c:	7c 68 03 a6 	mtlr    r3
fff70110:	7c 90 42 a6 	mfsprg  r4,0
fff70114:	48 00 a9 2c 	b       fff7aa40 <ctx_check_discard>
	...

fff70120 <__fit_interrupt>:
fff70120:	f8 21 ff af 	stcxu   r1,-88(r1)
fff70124:	3c 60 ff f7 	lis     r3,-9
fff70128:	60 63 a9 d4 	ori     r3,r3,43476
fff7012c:	7c 68 03 a6 	mtlr    r3
fff70130:	7c 90 42 a6 	mfsprg  r4,0
fff70134:	48 00 a9 0c 	b       fff7aa40 <ctx_check_discard>
	...

fff70140 <__watchdog_interrupt>:
fff70140:	f8 21 ff af 	stcxu   r1,-88(r1)
fff70144:	3c 60 ff f7 	lis     r3,-9
fff70148:	60 63 aa 00 	ori     r3,r3,43520
fff7014c:	7c 68 03 a6 	mtlr    r3
fff70150:	7c 90 42 a6 	mfsprg  r4,0
fff70154:	48 00 a8 ec 	b       fff7aa40 <ctx_check_discard>
	...

fff70160 <__virtual_exception>:
fff70160:	7f e0 e8 08 	twu     r0,r29

Disassembly of section .function_table:

fff70200 <__function_table>:

        .global __function_table

/* Add below the list of functions that are to be called from bootloader. */
__function_table:
        b verifySecureHdr
fff70200:	48 00 91 b0 	b       fff793b0 <verifySecureHdr>
        b _Z9ec_verifyPKhS0_S0_
fff70204:	48 00 2a 54 	b       fff72c58 <_Z9ec_verifyPKhS0_S0_>

Disassembly of section .odysseysrominit:

fff70400 <__system_reset_handler>:
fff70400:	3c a0 01 00 	lis     r5,256
fff70404:	7c b4 4b a6 	mtspr   308,r5

fff70408 <reset_register>:
fff70408:	3c a0 00 05 	lis     r5,5
fff7040c:	14 45 00 09 	lvd     d2,9(r5)
fff70410:	54 42 00 32 	rlwinm  r2,r2,0,0,25
fff70414:	54 42 01 3e 	clrlwi  r2,r2,4
fff70418:	18 45 00 09 	stvd    d2,9(r5)
fff7041c:	38 20 00 00 	li      r1,0
fff70420:	38 40 00 00 	li      r2,0
fff70424:	18 25 01 84 	stvd    d1,388(r5)
fff70428:	14 45 00 08 	lvd     d2,8(r5)
fff7042c:	07 82 68 1e 	bb0wi   r2,13,fff70468 <oos_load_spi_clk_cnfg>

fff70430 <hreset_path>:
fff70430:	14 45 00 09 	lvd     d2,9(r5)
fff70434:	54 42 21 0e 	rlwinm  r2,r2,4,4,7
fff70438:	64 42 00 a0 	oris    r2,r2,160
fff7043c:	18 45 00 09 	stvd    d2,9(r5)
fff70440:	3c 80 c0 00 	lis     r4,-16384
fff70444:	60 84 20 00 	ori     r4,r4,8192
fff70448:	39 00 00 00 	li      r8,0
fff7044c:	61 08 80 00 	ori     r8,r8,32768
fff70450:	39 20 00 00 	li      r9,0
fff70454:	19 04 00 50 	stvd    d8,80(r4)
fff70458:	15 24 00 40 	lvd     d9,64(r4)
fff7045c:	75 22 ff f0 	andis.  r2,r9,65520
fff70460:	55 23 c7 3e 	rlwinm  r3,r9,24,28,31
fff70464:	48 00 00 54 	b       fff704b8 <decode_round_trip_delay>

fff70468 <oos_load_spi_clk_cnfg>:
fff70468:	14 45 01 87 	lvd     d2,391(r5)
fff7046c:	07 82 20 08 	bb0wi   r2,4,fff7047c <spi_clk_cnfg_not_valid>
fff70470:	14 45 00 3c 	lvd     d2,60(r5)
fff70474:	54 42 00 1e 	rlwinm  r2,r2,0,0,15
fff70478:	48 00 00 08 	b       fff70480 <save_spi_cnfg>

fff7047c <spi_clk_cnfg_not_valid>:
fff7047c:	3c 40 00 81 	lis     r2,129

fff70480 <save_spi_cnfg>:
fff70480:	3c 80 c0 00 	lis     r4,-16384
fff70484:	60 84 20 00 	ori     r4,r4,8192
fff70488:	3d 00 ff f0 	lis     r8,-16
fff7048c:	61 08 0f 00 	ori     r8,r8,3840
fff70490:	39 20 00 00 	li      r9,0
fff70494:	19 04 00 58 	stvd    d8,88(r4)
fff70498:	74 46 ff f0 	andis.  r6,r2,65520
fff7049c:	38 e0 00 00 	li      r7,0
fff704a0:	18 c4 00 50 	stvd    d6,80(r4)
fff704a4:	74 46 00 0f 	andis.  r6,r2,15
fff704a8:	7c c6 46 70 	srawi   r6,r6,8
fff704ac:	18 c4 00 50 	stvd    d6,80(r4)
fff704b0:	54 43 87 3e 	rlwinm  r3,r2,16,28,31
fff704b4:	74 42 ff f0 	andis.  r2,r2,65520

fff704b8 <decode_round_trip_delay>:
fff704b8:	39 40 00 80 	li      r10,128
fff704bc:	7d 43 1e 30 	sraw    r3,r10,r3
fff704c0:	54 63 60 26 	rlwinm  r3,r3,12,0,19
fff704c4:	7c 42 1b 78 	or      r2,r2,r3

fff704c8 <spi_init>:
fff704c8:	3c c0 00 c0 	lis     r6,192
fff704cc:	38 e0 00 00 	li      r7,0
fff704d0:	18 c4 00 10 	stvd    d6,16(r4)
fff704d4:	18 c4 00 18 	stvd    d6,24(r4)
fff704d8:	3c c0 00 07 	lis     r6,7
fff704dc:	14 66 00 03 	lvd     d3,3(r6)
fff704e0:	54 63 05 3e 	clrlwi  r3,r3,20
fff704e4:	7c 63 13 78 	or      r3,r3,r2
fff704e8:	18 66 00 03 	stvd    d3,3(r6)
fff704ec:	3c 20 00 05 	lis     r1,5
fff704f0:	14 41 00 09 	lvd     d2,9(r1)
fff704f4:	60 42 00 01 	ori     r2,r2,1
fff704f8:	38 60 00 00 	li      r3,0
fff704fc:	18 41 00 09 	stvd    d2,9(r1)

fff70500 <partition_selection>:
fff70500:	3c a0 00 05 	lis     r5,5
fff70504:	3c 80 c0 00 	lis     r4,-16384
fff70508:	14 45 00 08 	lvd     d2,8(r5)
fff7050c:	38 a0 60 00 	li      r5,24576
fff70510:	7c 42 28 38 	and     r2,r2,r5
fff70514:	38 a0 00 0d 	li      r5,13
fff70518:	7c 43 2c 30 	srw     r3,r2,r5
fff7051c:	38 a0 00 12 	li      r5,18
fff70520:	7c 66 28 30 	slw     r6,r3,r5
fff70524:	14 24 20 40 	lvd     d1,8256(r4)
fff70528:	54 21 03 96 	rlwinm  r1,r1,0,14,11
fff7052c:	7c 21 33 78 	or      r1,r1,r6
fff70530:	18 24 20 40 	stvd    d1,8256(r4)
fff70534:	06 c3 00 12 	bwz     r3,fff70558 <partition_0_offset>
fff70538:	06 c3 08 16 	cmpwibeq r3,1,fff70564 <partition_1_offset>
fff7053c:	06 c3 10 1a 	cmpwibeq r3,2,fff70570 <partition_2_offset>
fff70540:	38 40 01 01 	li      r2,257
fff70544:	3c 20 00 05 	lis     r1,5
fff70548:	38 60 00 00 	li      r3,0
fff7054c:	18 41 01 84 	stvd    d2,388(r1)
fff70550:	7c 5d 0b a6 	mtspr   61,r2
fff70554:	7f e0 00 08 	trap

fff70558 <partition_0_offset>:
fff70558:	3c 60 fe 00 	lis     r3,-512
fff7055c:	60 63 00 00 	ori     r3,r3,0
fff70560:	48 00 05 d0 	b       fff70b30 <run_cmd_tables>

fff70564 <partition_1_offset>:
fff70564:	3c 60 fe 40 	lis     r3,-448
fff70568:	60 63 00 00 	ori     r3,r3,0
fff7056c:	48 00 05 c4 	b       fff70b30 <run_cmd_tables>

fff70570 <partition_2_offset>:
fff70570:	3c 60 fe 80 	lis     r3,-384
fff70574:	60 63 00 00 	ori     r3,r3,0
fff70578:	48 00 05 b8 	b       fff70b30 <run_cmd_tables>

Disassembly of section .cmnsrominit:

fff70980 <main_fsm_fname>:
fff70980:	6d 61 69 6e 	xoris   r1,r11,26990
fff70984:	2e 66 73 6d 	cmpdi   cr4,r6,29549

fff70988 <cust_fsm_fname>:
fff70988:	63 75 73 74 	ori     r21,r27,29556
fff7098c:	2e 66 73 6d 	cmpdi   cr4,r6,29549

fff70990 <locate_seeprom_file>:
fff70990:	06 c2 40 06 	cmpwibeq r2,8,fff7099c <locate_seeprom_file+0xc>
fff70994:	38 40 01 06 	li      r2,262
fff70998:	48 00 00 a4 	b       fff70a3c <_panic>
fff7099c:	7c 64 1b 78 	mr      r4,r3

fff709a0 <check_magic>:
fff709a0:	80 a4 00 00 	lwz     r5,0(r4)
fff709a4:	3c c0 2f 50 	lis     r6,12112
fff709a8:	60 c6 41 4b 	ori     r6,r6,16715
fff709ac:	04 45 30 06 	cmpwbne r5,r6,fff709b8 <return_empty_file+0x8>

fff709b0 <return_empty_file>:
fff709b0:	38 20 00 00 	li      r1,0
fff709b4:	4e 80 00 20 	blr
fff709b8:	3c c0 50 41 	lis     r6,20545
fff709bc:	60 c6 4b 21 	ori     r6,r6,19233
fff709c0:	04 c5 30 14 	cmpwbeq r5,r6,fff709e8 <process_file_entry>
fff709c4:	3c c0 50 41 	lis     r6,20545
fff709c8:	60 c6 4b 50 	ori     r6,r6,19280
fff709cc:	04 c5 30 06 	cmpwbeq r5,r6,fff709d8 <skip_padding>
fff709d0:	38 40 01 05 	li      r2,261
fff709d4:	48 00 00 68 	b       fff70a3c <_panic>

fff709d8 <skip_padding>:
fff709d8:	80 a4 00 04 	lwz     r5,4(r4)
fff709dc:	38 84 00 08 	addi    r4,r4,8
fff709e0:	7c 84 2a 14 	add     r4,r4,r5
fff709e4:	4b ff ff bc 	b       fff709a0 <check_magic>

fff709e8 <process_file_entry>:
fff709e8:	a0 a4 00 06 	lhz     r5,6(r4)
fff709ec:	80 c4 00 18 	lwz     r6,24(r4)
fff709f0:	a0 e4 00 0a 	lhz     r7,10(r4)
fff709f4:	04 47 10 1c 	cmpwbne r7,r2,fff70a2c <jump_to_next_file>
fff709f8:	14 e1 00 00 	lvd     d7,0(r1)
fff709fc:	81 24 00 1c 	lwz     r9,28(r4)
fff70a00:	81 44 00 20 	lwz     r10,32(r4)
fff70a04:	04 47 48 14 	cmpwbne r7,r9,fff70a2c <jump_to_next_file>
fff70a08:	04 48 50 12 	cmpwbne r8,r10,fff70a2c <jump_to_next_file>

fff70a0c <return_file_pointer>:
fff70a0c:	88 24 00 09 	lbz     r1,9(r4)
fff70a10:	06 c1 08 06 	cmpwibeq r1,1,fff70a1c <return_file_pointer+0x10>
fff70a14:	38 40 01 07 	li      r2,263
fff70a18:	48 00 00 24 	b       fff70a3c <_panic>
fff70a1c:	38 24 00 08 	addi    r1,r4,8
fff70a20:	7c 21 2a 14 	add     r1,r1,r5
fff70a24:	80 44 00 14 	lwz     r2,20(r4)
fff70a28:	4e 80 00 20 	blr

fff70a2c <jump_to_next_file>:
fff70a2c:	38 84 00 08 	addi    r4,r4,8
fff70a30:	7c 84 2a 14 	add     r4,r4,r5
fff70a34:	7c 84 32 14 	add     r4,r4,r6
fff70a38:	4b ff ff 68 	b       fff709a0 <check_magic>

fff70a3c <_panic>:
fff70a3c:	3c 20 00 05 	lis     r1,5
fff70a40:	38 60 00 00 	li      r3,0
fff70a44:	18 41 01 84 	stvd    d2,388(r1)
fff70a48:	7c 5d 0b a6 	mtspr   61,r2
fff70a4c:	7f e0 00 08 	trap

fff70a50 <swap_fsm>:
fff70a50:	7f 84 e3 78 	mr      r4,r28
fff70a54:	7f 89 02 a6 	mfctr   r28
fff70a58:	7c 89 03 a6 	mtctr   r4
fff70a5c:	7f a4 eb 78 	mr      r4,r29
fff70a60:	7f b0 42 a6 	mfsprg  r29,0
fff70a64:	7c 90 43 a6 	mtsprg  0,r4
fff70a68:	7f c4 f3 78 	mr      r4,r30
fff70a6c:	7f dd 0a a6 	mfspr   r30,61
fff70a70:	7c 9d 0b a6 	mtspr   61,r4
fff70a74:	7f e4 fb 78 	mr      r4,r31
fff70a78:	7d bf 6b 78 	mr      r31,r13
fff70a7c:	7c 8d 23 78 	mr      r13,r4
fff70a80:	4e 80 00 20 	blr

fff70a84 <load_fsm>:
fff70a84:	80 81 00 00 	lwz     r4,0(r1)
fff70a88:	3c 00 43 4d 	lis     r0,17229
fff70a8c:	60 00 54 61 	ori     r0,r0,21601
fff70a90:	7c 04 00 00 	cmpw    r4,r0
fff70a94:	41 82 00 0c 	beq     fff70aa0 <invalid_fsm+0x8>

fff70a98 <invalid_fsm>:
fff70a98:	7c 62 1b 78 	mr      r2,r3
fff70a9c:	4b ff ff a0 	b       fff70a3c <_panic>
fff70aa0:	80 81 00 04 	lwz     r4,4(r1)
fff70aa4:	3b 81 00 08 	addi    r28,r1,8
fff70aa8:	54 9d 93 ba 	rlwinm  r29,r4,18,14,29
fff70aac:	3b bd 00 04 	addi    r29,r29,4
fff70ab0:	7f bd e2 14 	add     r29,r29,r28
fff70ab4:	54 9e cd fa 	rlwinm  r30,r4,25,23,29
fff70ab8:	3b de 00 04 	addi    r30,r30,4
fff70abc:	7f de ea 14 	add     r30,r30,r29
fff70ac0:	54 9f 1d 38 	rlwinm  r31,r4,3,20,28
fff70ac4:	3b ff 00 08 	addi    r31,r31,8
fff70ac8:	7f ff f2 14 	add     r31,r31,r30
fff70acc:	7c 21 12 14 	add     r1,r1,r2
fff70ad0:	04 41 ff e4 	cmpwbne r1,r31,fff70a98 <invalid_fsm>
fff70ad4:	4e 80 00 20 	blr

fff70ad8 <filter_address>:
fff70ad8:	54 64 46 3e 	rlwinm  r4,r3,8,24,31
fff70adc:	06 44 08 22 	cmpwibne r4,1,fff70b20 <no_chiplet>
fff70ae0:	54 64 86 3f 	rlwinm. r4,r3,16,24,31
fff70ae4:	4d 82 00 20 	beqlr   
fff70ae8:	06 c4 08 0c 	cmpwibeq r4,1,fff70b00 <addr_ok>
fff70aec:	06 44 18 1e 	cmpwibne r4,3,fff70b28 <addr_blocked>
fff70af0:	07 03 80 0a 	bb1wi   r3,16,fff70b04 <scan_addr>
fff70af4:	70 64 ff ff 	andi.   r4,r3,65535
fff70af8:	06 c4 20 18 	cmpwibeq r4,4,fff70b28 <addr_blocked>
fff70afc:	06 c4 38 16 	cmpwibeq r4,7,fff70b28 <addr_blocked>

fff70b00 <addr_ok>:
fff70b00:	4e 80 00 20 	blr

fff70b04 <scan_addr>:
fff70b04:	3c 80 01 03 	lis     r4,259
fff70b08:	60 84 00 05 	ori     r4,r4,5
fff70b0c:	14 84 00 00 	lvd     d4,0(r4)
fff70b10:	70 a5 88 20 	andi.   r5,r5,34848
fff70b14:	4d 82 00 20 	beqlr   
fff70b18:	38 40 01 15 	li      r2,277
fff70b1c:	4b ff ff 20 	b       fff70a3c <_panic>

fff70b20 <no_chiplet>:
fff70b20:	54 64 84 3e 	rlwinm  r4,r3,16,16,31
fff70b24:	06 c4 2f ee 	cmpwibeq r4,5,fff70b00 <addr_ok>

fff70b28 <addr_blocked>:
fff70b28:	38 40 01 14 	li      r2,276
fff70b2c:	4b ff ff 10 	b       fff70a3c <_panic>

fff70b30 <run_cmd_tables>:
fff70b30:	3c 20 ff f7 	lis     r1,-9
fff70b34:	60 21 09 80 	ori     r1,r1,2432
fff70b38:	3c 40 00 00 	lis     r2,0
fff70b3c:	60 42 00 08 	ori     r2,r2,8
fff70b40:	4b ff fe 51 	bl      fff70990 <locate_seeprom_file>
fff70b44:	06 41 00 06 	bwnz    r1,fff70b50 <run_cmd_tables+0x20>
fff70b48:	38 40 01 02 	li      r2,258
fff70b4c:	4b ff fe f0 	b       fff70a3c <_panic>
fff70b50:	7c 3e 0b 78 	mr      r30,r1
fff70b54:	7c 5f 13 78 	mr      r31,r2
fff70b58:	3c 20 ff f7 	lis     r1,-9
fff70b5c:	60 21 09 88 	ori     r1,r1,2440
fff70b60:	3c 40 00 00 	lis     r2,0
fff70b64:	60 42 00 08 	ori     r2,r2,8
fff70b68:	4b ff fe 29 	bl      fff70990 <locate_seeprom_file>
fff70b6c:	7f c6 f3 78 	mr      r6,r30
fff70b70:	7f e7 fb 78 	mr      r7,r31
fff70b74:	06 41 00 06 	bwnz    r1,fff70b80 <run_cmd_tables+0x50>
fff70b78:	39 40 00 00 	li      r10,0
fff70b7c:	48 00 00 18 	b       fff70b94 <load_main_fsm>
fff70b80:	38 60 01 04 	li      r3,260
fff70b84:	4b ff ff 01 	bl      fff70a84 <load_fsm>
fff70b88:	4b ff fe c9 	bl      fff70a50 <swap_fsm>
fff70b8c:	7d 49 02 a6 	mfctr   r10
fff70b90:	39 ad ff ff 	addi    r13,r13,-1

fff70b94 <load_main_fsm>:
fff70b94:	7c c1 33 78 	mr      r1,r6
fff70b98:	7c e2 3b 78 	mr      r2,r7
fff70b9c:	38 60 01 03 	li      r3,259
fff70ba0:	4b ff fe e5 	bl      fff70a84 <load_fsm>
fff70ba4:	3c 20 00 05 	lis     r1,5
fff70ba8:	14 81 00 09 	lvd     d4,9(r1)
fff70bac:	54 84 00 32 	rlwinm  r4,r4,0,0,25
fff70bb0:	60 84 00 02 	ori     r4,r4,2
fff70bb4:	18 81 00 09 	stvd    d4,9(r1)

fff70bb8 <main_loop>:
fff70bb8:	04 9c e8 06 	cmpwblt r28,r29,fff70bc4 <main_loop+0xc>
fff70bbc:	38 40 01 10 	li      r2,272
fff70bc0:	4b ff fe 7c 	b       fff70a3c <_panic>
fff70bc4:	80 3c 00 00 	lwz     r1,0(r28)
fff70bc8:	3b 9c 00 04 	addi    r28,r28,4
fff70bcc:	54 22 66 3a 	rlwinm  r2,r1,12,24,29
fff70bd0:	7c 42 ea 14 	add     r2,r2,r29
fff70bd4:	04 82 f0 06 	cmpwblt r2,r30,fff70be0 <value_overrun+0x8>

fff70bd8 <value_overrun>:
fff70bd8:	38 40 01 11 	li      r2,273
fff70bdc:	4b ff fe 60 	b       fff70a3c <_panic>
fff70be0:	80 42 00 00 	lwz     r2,0(r2)
fff70be4:	54 24 27 7f 	rlwinm. r4,r1,4,29,31
fff70be8:	41 82 ff d0 	beq     fff70bb8 <main_loop>
fff70bec:	06 04 18 20 	cmpwibge r4,3,fff70c2c <scom_op>
fff70bf0:	06 c4 10 16 	cmpwibeq r4,2,fff70c1c <return_op>

fff70bf4 <call_op>:
fff70bf4:	07 1f f8 10 	bb1wi   r31,31,fff70c14 <invalid_call>
fff70bf8:	06 ca 00 0e 	bwz     r10,fff70c14 <invalid_call>
fff70bfc:	4b ff fe 55 	bl      fff70a50 <swap_fsm>
fff70c00:	54 44 10 3a 	rlwinm  r4,r2,2,0,29
fff70c04:	7f 8a 22 14 	add     r28,r10,r4
fff70c08:	04 9c 50 06 	cmpwblt r28,r10,fff70c14 <invalid_call>
fff70c0c:	04 1c e8 04 	cmpwbge r28,r29,fff70c14 <invalid_call>
fff70c10:	4b ff ff a8 	b       fff70bb8 <main_loop>

fff70c14 <invalid_call>:
fff70c14:	38 40 01 12 	li      r2,274
fff70c18:	4b ff fe 24 	b       fff70a3c <_panic>

fff70c1c <return_op>:
fff70c1c:	07 1f f8 04 	bb1wi   r31,31,fff70c24 <return_from_cust>
fff70c20:	48 00 9c c8 	b       fff7a8e8 <__pk_boot>

fff70c24 <return_from_cust>:
fff70c24:	4b ff fe 2d 	bl      fff70a50 <swap_fsm>
fff70c28:	4b ff ff 90 	b       fff70bb8 <main_loop>

fff70c2c <scom_op>:
fff70c2c:	54 23 9d fa 	rlwinm  r3,r1,19,23,29
fff70c30:	7c 63 ea 14 	add     r3,r3,r29
fff70c34:	04 03 f7 d2 	cmpwbge r3,r30,fff70bd8 <value_overrun>
fff70c38:	80 63 00 00 	lwz     r3,0(r3)
fff70c3c:	4b ff fe 9d 	bl      fff70ad8 <filter_address>
fff70c40:	54 28 1d 38 	rlwinm  r8,r1,3,20,28
fff70c44:	7d 08 f2 14 	add     r8,r8,r30
fff70c48:	04 08 ff c8 	cmpwbge r8,r31,fff70bd8 <value_overrun>
fff70c4c:	15 08 00 00 	lvd     d8,0(r8)
fff70c50:	54 26 d5 f8 	rlwinm  r6,r1,26,23,28
fff70c54:	7c c6 f2 14 	add     r6,r6,r30
fff70c58:	04 06 ff c0 	cmpwbge r6,r31,fff70bd8 <value_overrun>
fff70c5c:	14 c6 00 00 	lvd     d6,0(r6)
fff70c60:	07 01 08 20 	bb1wi   r1,1,fff70ca0 <test_ops>

fff70c64 <putscom_op>:
fff70c64:	2c 06 ff ff 	cmpwi   r6,-1
fff70c68:	40 82 00 14 	bne     fff70c7c <putscom_with_mask>
fff70c6c:	2c 07 ff ff 	cmpwi   r7,-1
fff70c70:	40 82 00 0c 	bne     fff70c7c <putscom_with_mask>
fff70c74:	19 03 00 00 	stvd    d8,0(r3)
fff70c78:	4b ff ff 40 	b       fff70bb8 <main_loop>

fff70c7c <putscom_with_mask>:
fff70c7c:	14 83 00 00 	lvd     d4,0(r3)
fff70c80:	7c c6 30 f8 	not     r6,r6
fff70c84:	7c e7 38 f8 	not     r7,r7
fff70c88:	7c 84 30 38 	and     r4,r4,r6
fff70c8c:	7c a5 38 38 	and     r5,r5,r7
fff70c90:	7c 84 43 78 	or      r4,r4,r8
fff70c94:	7c a5 4b 78 	or      r5,r5,r9
fff70c98:	18 83 00 00 	stvd    d4,0(r3)
fff70c9c:	4b ff ff 1c 	b       fff70bb8 <main_loop>

fff70ca0 <test_ops>:
fff70ca0:	38 00 03 e8 	li      r0,1000

fff70ca4 <poll_loop>:
fff70ca4:	14 83 00 00 	lvd     d4,0(r3)
fff70ca8:	7c 84 30 38 	and     r4,r4,r6
fff70cac:	7c a5 38 38 	and     r5,r5,r7
fff70cb0:	7c 84 42 78 	xor     r4,r4,r8
fff70cb4:	7c a5 4a 78 	xor     r5,r5,r9
fff70cb8:	7c a5 23 78 	or      r5,r5,r4
fff70cbc:	07 01 10 12 	bb1wi   r1,2,fff70ce0 <cmpbxx_op>
fff70cc0:	06 c5 07 7c 	bwz     r5,fff70bb8 <main_loop>
fff70cc4:	07 81 1e bc 	bb0wi   r1,3,fff70a3c <_panic>
fff70cc8:	06 c2 00 04 	bwz     r2,fff70cd0 <no_timeout>
fff70ccc:	06 e0 0e b8 	subwibz r0,1,fff70a3c <_panic>

fff70cd0 <no_timeout>:
fff70cd0:	3c 80 00 00 	lis     r4,0
fff70cd4:	60 84 4e 20 	ori     r4,r4,20000

fff70cd8 <poll_delay>:
fff70cd8:	06 64 08 00 	subwibnz r4,1,fff70cd8 <poll_delay>
fff70cdc:	4b ff ff c8 	b       fff70ca4 <poll_loop>

fff70ce0 <cmpbxx_op>:
fff70ce0:	54 42 10 3a 	rlwinm  r2,r2,2,0,29
fff70ce4:	7c 9c 12 14 	add     r4,r28,r2
fff70ce8:	04 04 e8 04 	cmpwbge r4,r29,fff70cf0 <invalid_branch>
fff70cec:	04 04 e0 06 	cmpwbge r4,r28,fff70cf8 <valid_branch>

fff70cf0 <invalid_branch>:
fff70cf0:	38 40 01 13 	li      r2,275
fff70cf4:	4b ff fd 48 	b       fff70a3c <_panic>

fff70cf8 <valid_branch>:
fff70cf8:	07 01 18 06 	bb1wi   r1,3,fff70d04 <cmpbne_op>
fff70cfc:	06 c5 00 08 	bwz     r5,fff70d0c <take_branch>
fff70d00:	4b ff fe b8 	b       fff70bb8 <main_loop>

fff70d04 <cmpbne_op>:
fff70d04:	06 45 00 04 	bwnz    r5,fff70d0c <take_branch>
fff70d08:	4b ff fe b0 	b       fff70bb8 <main_loop>

fff70d0c <take_branch>:
fff70d0c:	7c 9c 23 78 	mr      r28,r4
fff70d10:	4b ff fe a8 	b       fff70bb8 <main_loop>

Disassembly of section .sha3algo:

fff71110 <_Z12sha3_keccakfPy>:
#include "sha3.H"
#include "sbetrace.H"

// update the state with given number of rounds
void sha3_keccakf(uint64_t st[25])
{
fff71110:	94 21 fd f8 	stwu    r1,-520(r1)
fff71114:	7c 08 02 a6 	mflr    r0
fff71118:	1b c1 02 00 	stvd    d30,512(r1)
        0x0000000000000088, 0x0000000080008009, 0x000000008000000a,
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    };
fff7111c:	3f e0 ff f7 	lis     r31,-9
fff71120:	3b ff 16 a8 	addi    r31,r31,5800
#include "sha3.H"
#include "sbetrace.H"

// update the state with given number of rounds
void sha3_keccakf(uint64_t st[25])
{
fff71124:	7c 7e 1b 78 	mr      r30,r3
        0x0000000000000088, 0x0000000080008009, 0x000000008000000a,
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    };
fff71128:	7f e4 fb 78 	mr      r4,r31
fff7112c:	38 a0 00 c0 	li      r5,192
fff71130:	38 61 00 08 	addi    r3,r1,8
#include "sha3.H"
#include "sbetrace.H"

// update the state with given number of rounds
void sha3_keccakf(uint64_t st[25])
{
fff71134:	90 01 02 0c 	stw     r0,524(r1)
fff71138:	1b 81 01 f8 	stvd    d28,504(r1)
        0x0000000000000088, 0x0000000080008009, 0x000000008000000a,
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    };
fff7113c:	48 00 92 7d 	bl      fff7a3b8 <memcpy>
    const int keccakf_rotc[24] = {
        1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14,
        27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44
    };
fff71140:	38 9f 00 c0 	addi    r4,r31,192
fff71144:	38 a0 00 60 	li      r5,96
fff71148:	38 61 01 28 	addi    r3,r1,296
fff7114c:	48 00 92 6d 	bl      fff7a3b8 <memcpy>
    const int keccakf_piln[24] = {
        10, 7,  11, 17, 18, 3, 5,  16, 8,  21, 24, 4,
        15, 23, 19, 13, 12, 2, 20, 14, 22, 9,  6,  1
    };
fff71150:	38 9f 01 20 	addi    r4,r31,288
fff71154:	38 a0 00 60 	li      r5,96
fff71158:	38 61 00 c8 	addi    r3,r1,200
fff7115c:	48 00 92 5d 	bl      fff7a3b8 <memcpy>
fff71160:	38 e0 00 19 	li      r7,25
fff71164:	7c e9 03 a6 	mtctr   r7
fff71168:	38 be 00 c0 	addi    r5,r30,192
fff7116c:	3b fe ff f8 	addi    r31,r30,-8
fff71170:	90 a1 01 c8 	stw     r5,456(r1)
fff71174:	7f ea fb 78 	mr      r10,r31
    uint8_t *v;

    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
fff71178:	89 0a 00 09 	lbz     r8,9(r10)
fff7117c:	3b 80 00 00 	li      r28,0
fff71180:	93 81 01 b8 	stw     r28,440(r1)
fff71184:	91 01 01 bc 	stw     r8,444(r1)
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
fff71188:	93 81 01 c0 	stw     r28,448(r1)
    uint8_t *v;

    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
fff7118c:	14 e1 01 b8 	lvd     d7,440(r1)
fff71190:	78 e4 45 e4 	rldicr  d4,d7,8,55
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
fff71194:	89 0a 00 0a 	lbz     r8,10(r10)
fff71198:	91 01 01 c4 	stw     r8,452(r1)
    uint8_t *v;

    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
fff7119c:	89 0a 00 08 	lbz     r8,8(r10)
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
fff711a0:	17 81 01 c0 	lvd     d28,448(r1)
fff711a4:	7b 86 83 e4 	rldicr  d6,d28,16,47
fff711a8:	8b aa 00 0b 	lbz     r29,11(r10)
fff711ac:	7c a3 3b 78 	or      r3,r5,r7
fff711b0:	38 a0 00 00 	li      r5,0
fff711b4:	90 a1 01 d0 	stw     r5,464(r1)
fff711b8:	93 a1 01 d4 	stw     r29,468(r1)
fff711bc:	7c 84 33 78 	or      r4,r4,r6
fff711c0:	17 81 01 d0 	lvd     d28,464(r1)
            (((uint64_t) v[4]) << 32) | (((uint64_t) v[5]) << 40) |
fff711c4:	90 a1 01 d8 	stw     r5,472(r1)

    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
fff711c8:	7b 86 c1 e4 	rldicr  d6,d28,24,39
            (((uint64_t) v[4]) << 32) | (((uint64_t) v[5]) << 40) |
fff711cc:	8b aa 00 0d 	lbz     r29,13(r10)
    uint8_t *v;

    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
fff711d0:	7c 63 43 78 	or      r3,r3,r8
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
            (((uint64_t) v[4]) << 32) | (((uint64_t) v[5]) << 40) |
fff711d4:	93 a1 01 dc 	stw     r29,476(r1)
fff711d8:	89 0a 00 0c 	lbz     r8,12(r10)
fff711dc:	17 81 01 d8 	lvd     d28,472(r1)

    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
fff711e0:	7c 84 33 78 	or      r4,r4,r6
fff711e4:	7c 88 43 78 	or      r8,r4,r8
            (((uint64_t) v[4]) << 32) | (((uint64_t) v[5]) << 40) |
fff711e8:	7b 84 45 c6 	rldicr  d4,d28,40,23
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
fff711ec:	8b aa 00 0e 	lbz     r29,14(r10)
fff711f0:	38 a0 00 00 	li      r5,0
fff711f4:	90 a1 01 e0 	stw     r5,480(r1)
fff711f8:	93 a1 01 e4 	stw     r29,484(r1)
    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
            (((uint64_t) v[4]) << 32) | (((uint64_t) v[5]) << 40) |
fff711fc:	7d 08 23 78 	or      r8,r8,r4
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
fff71200:	17 81 01 e0 	lvd     d28,480(r1)
fff71204:	7c 63 3b 78 	or      r3,r3,r7
fff71208:	7b 84 83 c6 	rldicr  d4,d28,48,15
fff7120c:	8b aa 00 0f 	lbz     r29,15(r10)
fff71210:	3b 80 00 00 	li      r28,0
    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        st[i] = ((uint64_t) v[0])     | (((uint64_t) v[1]) << 8) |
            (((uint64_t) v[2]) << 16) | (((uint64_t) v[3]) << 24) |
            (((uint64_t) v[4]) << 32) | (((uint64_t) v[5]) << 40) |
fff71214:	7d 04 23 78 	or      r4,r8,r4
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
fff71218:	7b 88 c1 c6 	rldicr  d8,d28,56,7
fff7121c:	7c 88 43 78 	or      r8,r4,r8
fff71220:	95 0a 00 08 	stwu    r8,8(r10)
fff71224:	90 6a 00 04 	stw     r3,4(r10)


    uint8_t *v;

    // endianess conversion. this is redundant on little-endian targets
    for (i = 0; i < 25; i++) {
fff71228:	42 00 ff 50 	bdnz    fff71178 <_Z12sha3_keccakfPy+0x68>
        // Theta
        for (i = 0; i < 5; i++)
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];

        for (i = 0; i < 5; i++) {
            t = bc[(i + 4) % 5] ^ ROTL64(bc[(i + 1) % 5], 1);
fff7122c:	3b a1 00 08 	addi    r29,r1,8
fff71230:	38 e0 00 05 	li      r7,5
fff71234:	7c e9 03 a6 	mtctr   r7
        27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44
    };
    const int keccakf_piln[24] = {
        10, 7,  11, 17, 18, 3, 5,  16, 8,  21, 24, 4,
        15, 23, 19, 13, 12, 2, 20, 14, 22, 9,  6,  1
    };
fff71238:	7f e9 fb 78 	mr      r9,r31
fff7123c:	39 40 00 00 	li      r10,0
fff71240:	39 29 00 08 	addi    r9,r9,8
fff71244:	80 89 00 2c 	lwz     r4,44(r9)
fff71248:	81 09 00 04 	lwz     r8,4(r9)
    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {

        // Theta
        for (i = 0; i < 5; i++)
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];
fff7124c:	83 89 00 54 	lwz     r28,84(r9)
fff71250:	38 e1 01 88 	addi    r7,r1,392
fff71254:	7c 88 42 78 	xor     r8,r4,r8
fff71258:	80 69 00 28 	lwz     r3,40(r9)
fff7125c:	80 c9 00 00 	lwz     r6,0(r9)
fff71260:	7c a7 52 14 	add     r5,r7,r10
fff71264:	7d 08 e2 78 	xor     r8,r8,r28
fff71268:	80 e9 00 50 	lwz     r7,80(r9)
fff7126c:	83 89 00 7c 	lwz     r28,124(r9)
fff71270:	7c 66 32 78 	xor     r6,r3,r6
fff71274:	80 89 00 78 	lwz     r4,120(r9)
fff71278:	7d 08 e2 78 	xor     r8,r8,r28
fff7127c:	7c c6 3a 78 	xor     r6,r6,r7
fff71280:	83 89 00 a4 	lwz     r28,164(r9)
fff71284:	80 e9 00 a0 	lwz     r7,160(r9)
fff71288:	7c c6 22 78 	xor     r6,r6,r4
fff7128c:	7d 1c e2 78 	xor     r28,r8,r28
fff71290:	7c c6 3a 78 	xor     r6,r6,r7
fff71294:	39 01 01 88 	addi    r8,r1,392
fff71298:	7c c8 51 2e 	stwx    r6,r8,r10
fff7129c:	93 85 00 04 	stw     r28,4(r5)
fff712a0:	39 4a 00 08 	addi    r10,r10,8
fff712a4:	42 00 ff 9c 	bdnz    fff71240 <_Z12sha3_keccakfPy+0x130>
fff712a8:	7f ca f3 78 	mr      r10,r30

    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {

        // Theta
        for (i = 0; i < 5; i++)
fff712ac:	3b 80 00 00 	li      r28,0
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];

        for (i = 0; i < 5; i++) {
            t = bc[(i + 4) % 5] ^ ROTL64(bc[(i + 1) % 5], 1);
fff712b0:	38 7c 00 04 	addi    r3,r28,4
fff712b4:	38 80 00 05 	li      r4,5
fff712b8:	91 41 01 f4 	stw     r10,500(r1)
fff712bc:	48 00 8f 4d 	bl      fff7a208 <__umodsi3>
fff712c0:	54 63 18 38 	rlwinm  r3,r3,3,0,28
fff712c4:	7c 7d 1a 14 	add     r3,r29,r3
fff712c8:	80 c3 01 80 	lwz     r6,384(r3)
fff712cc:	81 03 01 84 	lwz     r8,388(r3)
fff712d0:	3b 9c 00 01 	addi    r28,r28,1
fff712d4:	38 80 00 05 	li      r4,5
fff712d8:	7f 83 e3 78 	mr      r3,r28
fff712dc:	90 c1 01 ec 	stw     r6,492(r1)
fff712e0:	91 01 01 e8 	stw     r8,488(r1)
fff712e4:	48 00 8f 25 	bl      fff7a208 <__umodsi3>
fff712e8:	54 63 18 38 	rlwinm  r3,r3,3,0,28
fff712ec:	7c bd 1a 14 	add     r5,r29,r3
fff712f0:	81 25 01 84 	lwz     r9,388(r5)
fff712f4:	80 a5 01 80 	lwz     r5,384(r5)
fff712f8:	55 23 0f fe 	rlwinm  r3,r9,1,31,31
fff712fc:	54 a4 08 3c 	rlwinm  r4,r5,1,0,30
fff71300:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
fff71304:	54 a5 0f fe 	rlwinm  r5,r5,1,31,31
fff71308:	7c a9 4b 78 	or      r9,r5,r9
fff7130c:	38 a0 00 05 	li      r5,5
fff71310:	7c a9 03 a6 	mtctr   r5
fff71314:	81 01 01 e8 	lwz     r8,488(r1)
fff71318:	80 c1 01 ec 	lwz     r6,492(r1)
fff7131c:	7c 63 23 78 	or      r3,r3,r4
fff71320:	81 41 01 f4 	lwz     r10,500(r1)
fff71324:	7d 29 42 78 	xor     r9,r9,r8
fff71328:	7c 63 32 78 	xor     r3,r3,r6
fff7132c:	39 00 00 00 	li      r8,0
fff71330:	7c 8a 42 14 	add     r4,r10,r8
            for (j = 0; j < 25; j += 5)
                st[j + i] ^= t;
fff71334:	7c aa 40 2e 	lwzx    r5,r10,r8
fff71338:	80 c4 00 04 	lwz     r6,4(r4)
fff7133c:	7c a5 1a 78 	xor     r5,r5,r3
fff71340:	7c c6 4a 78 	xor     r6,r6,r9
fff71344:	7c aa 41 2e 	stwx    r5,r10,r8
fff71348:	90 c4 00 04 	stw     r6,4(r4)
fff7134c:	39 08 00 28 	addi    r8,r8,40
        for (i = 0; i < 5; i++)
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];

        for (i = 0; i < 5; i++) {
            t = bc[(i + 4) % 5] ^ ROTL64(bc[(i + 1) % 5], 1);
            for (j = 0; j < 25; j += 5)
fff71350:	42 00 ff e0 	bdnz    fff71330 <_Z12sha3_keccakfPy+0x220>
fff71354:	39 4a 00 08 	addi    r10,r10,8

        // Theta
        for (i = 0; i < 5; i++)
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];

        for (i = 0; i < 5; i++) {
fff71358:	06 5c 2f ac 	cmpwibne r28,5,fff712b0 <_Z12sha3_keccakfPy+0x1a0>
            for (j = 0; j < 25; j += 5)
                st[j + i] ^= t;
        }

        // Rho Pi
        t = st[1];
fff7135c:	38 e0 00 18 	li      r7,24
fff71360:	7c e9 03 a6 	mtctr   r7
fff71364:	15 1e 00 08 	lvd     d8,8(r30)
fff71368:	39 40 00 00 	li      r10,0
        for (i = 0; i < 24; i++) {
            j = keccakf_piln[i];
fff7136c:	38 c1 00 c8 	addi    r6,r1,200
            bc[0] = st[j];
            st[j] = ROTL64(t, keccakf_rotc[i]);
fff71370:	3b 81 01 28 	addi    r28,r1,296

        // Rho Pi
        t = st[1];
        for (i = 0; i < 24; i++) {
            j = keccakf_piln[i];
            bc[0] = st[j];
fff71374:	7c ca 30 2e 	lwzx    r6,r10,r6
            st[j] = ROTL64(t, keccakf_rotc[i]);
fff71378:	7f 8a e0 2e 	lwzx    r28,r10,r28

        // Rho Pi
        t = st[1];
        for (i = 0; i < 24; i++) {
            j = keccakf_piln[i];
            bc[0] = st[j];
fff7137c:	54 c0 18 38 	rlwinm  r0,r6,3,0,28
            st[j] = ROTL64(t, keccakf_rotc[i]);
fff71380:	7d 06 e0 76 	slvd    d6,d8,r28
fff71384:	7f 9c 00 d0 	neg     r28,r28

        // Rho Pi
        t = st[1];
        for (i = 0; i < 24; i++) {
            j = keccakf_piln[i];
            bc[0] = st[j];
fff71388:	7c be 02 14 	add     r5,r30,r0
            st[j] = ROTL64(t, keccakf_rotc[i]);
fff7138c:	57 9c 06 be 	clrlwi  r28,r28,26

        // Rho Pi
        t = st[1];
        for (i = 0; i < 24; i++) {
            j = keccakf_piln[i];
            bc[0] = st[j];
fff71390:	14 65 00 00 	lvd     d3,0(r5)
            st[j] = ROTL64(t, keccakf_rotc[i]);
fff71394:	7d 08 e4 76 	srvd    d8,d8,r28
fff71398:	7c c8 43 78 	or      r8,r6,r8
fff7139c:	7c e9 4b 78 	or      r9,r7,r9
fff713a0:	7d 1e 01 2e 	stwx    r8,r30,r0
fff713a4:	39 4a 00 04 	addi    r10,r10,4
fff713a8:	91 25 00 04 	stw     r9,4(r5)
            t = bc[0];
fff713ac:	7c 68 1b 78 	mr      r8,r3
fff713b0:	7c 89 23 78 	mr      r9,r4
                st[j + i] ^= t;
        }

        // Rho Pi
        t = st[1];
        for (i = 0; i < 24; i++) {
fff713b4:	42 00 ff b8 	bdnz    fff7136c <_Z12sha3_keccakfPy+0x25c>
fff713b8:	19 01 01 88 	stvd    d8,392(r1)
fff713bc:	7f ea fb 78 	mr      r10,r31
fff713c0:	3b 80 00 05 	li      r28,5
fff713c4:	7f 89 03 a6 	mtctr   r28
            for (j = 0; j < 25; j += 5)
                st[j + i] ^= t;
        }

        // Rho Pi
        t = st[1];
fff713c8:	38 c0 00 00 	li      r6,0
fff713cc:	38 aa 00 08 	addi    r5,r10,8
fff713d0:	39 01 01 88 	addi    r8,r1,392
fff713d4:	7d 25 32 14 	add     r9,r5,r6
fff713d8:	7c 88 32 14 	add     r4,r8,r6
        }

        //  Chi
        for (j = 0; j < 25; j += 5) {
            for (i = 0; i < 5; i++)
                bc[i] = st[j + i];
fff713dc:	15 09 00 00 	lvd     d8,0(r9)
fff713e0:	38 c6 00 08 	addi    r6,r6,8
fff713e4:	19 04 00 00 	stvd    d8,0(r4)
            t = bc[0];
        }

        //  Chi
        for (j = 0; j < 25; j += 5) {
            for (i = 0; i < 5; i++)
fff713e8:	42 00 ff e8 	bdnz    fff713d0 <_Z12sha3_keccakfPy+0x2c0>
fff713ec:	7d 49 53 78 	mr      r9,r10
fff713f0:	38 60 00 00 	li      r3,0
                bc[i] = st[j + i];
            for (i = 0; i < 5; i++)
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
fff713f4:	3b 83 00 01 	addi    r28,r3,1
fff713f8:	38 80 00 05 	li      r4,5
fff713fc:	38 63 00 02 	addi    r3,r3,2
fff71400:	19 21 01 f0 	stvd    d9,496(r1)
fff71404:	48 00 8e 05 	bl      fff7a208 <__umodsi3>
fff71408:	54 63 18 38 	rlwinm  r3,r3,3,0,28
fff7140c:	7c bd 1a 14 	add     r5,r29,r3
fff71410:	38 c5 01 80 	addi    r6,r5,384
fff71414:	38 80 00 05 	li      r4,5
fff71418:	7f 83 e3 78 	mr      r3,r28
fff7141c:	18 a1 01 e8 	stvd    d5,488(r1)
fff71420:	48 00 8d e9 	bl      fff7a208 <__umodsi3>
fff71424:	54 63 18 38 	rlwinm  r3,r3,3,0,28
fff71428:	80 a1 01 e8 	lwz     r5,488(r1)
fff7142c:	7c 7d 1a 14 	add     r3,r29,r3
fff71430:	80 c1 01 ec 	lwz     r6,492(r1)
fff71434:	81 21 01 f0 	lwz     r9,496(r1)
fff71438:	80 83 01 80 	lwz     r4,384(r3)
fff7143c:	81 03 01 84 	lwz     r8,388(r3)
fff71440:	80 65 01 80 	lwz     r3,384(r5)
fff71444:	80 a6 00 04 	lwz     r5,4(r6)
fff71448:	7c 66 20 78 	andc    r6,r3,r4
fff7144c:	84 89 00 08 	lwzu    r4,8(r9)
fff71450:	7c a8 40 78 	andc    r8,r5,r8
fff71454:	80 a9 00 04 	lwz     r5,4(r9)
fff71458:	7c 86 32 78 	xor     r6,r4,r6
fff7145c:	7c a8 42 78 	xor     r8,r5,r8
fff71460:	90 c9 00 00 	stw     r6,0(r9)
fff71464:	91 09 00 04 	stw     r8,4(r9)
fff71468:	7f 83 e3 78 	mr      r3,r28

        //  Chi
        for (j = 0; j < 25; j += 5) {
            for (i = 0; i < 5; i++)
                bc[i] = st[j + i];
            for (i = 0; i < 5; i++)
fff7146c:	81 41 01 f4 	lwz     r10,500(r1)
fff71470:	06 5c 2f c2 	cmpwibne r28,5,fff713f4 <_Z12sha3_keccakfPy+0x2e4>
            st[j] = ROTL64(t, keccakf_rotc[i]);
            t = bc[0];
        }

        //  Chi
        for (j = 0; j < 25; j += 5) {
fff71474:	81 21 01 c8 	lwz     r9,456(r1)
fff71478:	39 4a 00 28 	addi    r10,r10,40
fff7147c:	04 49 57 a2 	cmpwbne r9,r10,fff713c0 <_Z12sha3_keccakfPy+0x2b0>
fff71480:	80 a1 01 b8 	lwz     r5,440(r1)
            for (i = 0; i < 5; i++)
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
        }

        //  Iota
        st[0] ^= keccakf_rndc[r];
fff71484:	80 de 00 00 	lwz     r6,0(r30)
fff71488:	7d 3d 2a 14 	add     r9,r29,r5
fff7148c:	81 1e 00 04 	lwz     r8,4(r30)
fff71490:	7d 5d 28 2e 	lwzx    r10,r29,r5
fff71494:	81 29 00 04 	lwz     r9,4(r9)
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
    }


    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
fff71498:	2c 05 00 b8 	cmpwi   r5,184
            for (i = 0; i < 5; i++)
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
        }

        //  Iota
        st[0] ^= keccakf_rndc[r];
fff7149c:	7c ca 52 78 	xor     r10,r6,r10
fff714a0:	7d 09 4a 78 	xor     r9,r8,r9
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
    }


    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
fff714a4:	38 a5 00 08 	addi    r5,r5,8
            for (i = 0; i < 5; i++)
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
        }

        //  Iota
        st[0] ^= keccakf_rndc[r];
fff714a8:	91 5e 00 00 	stw     r10,0(r30)
fff714ac:	91 3e 00 04 	stw     r9,4(r30)
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
    }


    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
fff714b0:	90 a1 01 b8 	stw     r5,440(r1)
fff714b4:	40 82 fd 7c 	bne     fff71230 <_Z12sha3_keccakfPy+0x120>
        st[0] ^= keccakf_rndc[r];
    }

    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        t = st[i];
fff714b8:	25 1f 00 08 	lvdu    d8,8(r31)
        v[0] = t & 0xFF;
        v[1] = (t >> 8) & 0xFF;
fff714bc:	79 06 c2 02 	rldicl  d6,d8,56,8
fff714c0:	98 ff 00 01 	stb     r7,1(r31)
        v[2] = (t >> 16) & 0xFF;
fff714c4:	79 06 84 02 	rldicl  d6,d8,48,16
fff714c8:	98 ff 00 02 	stb     r7,2(r31)
        v[3] = (t >> 24) & 0xFF;
fff714cc:	79 06 46 02 	rldicl  d6,d8,40,24
fff714d0:	98 ff 00 03 	stb     r7,3(r31)
        v[4] = (t >> 32) & 0xFF;
        v[5] = (t >> 40) & 0xFF;
fff714d4:	79 06 c2 20 	rldicl  d6,d8,24,40
    }

    for (i = 0; i < 25; i++) {
        v = (uint8_t *) &st[i];
        t = st[i];
        v[0] = t & 0xFF;
fff714d8:	99 3f 00 00 	stb     r9,0(r31)
        v[1] = (t >> 8) & 0xFF;
        v[2] = (t >> 16) & 0xFF;
        v[3] = (t >> 24) & 0xFF;
        v[4] = (t >> 32) & 0xFF;
fff714dc:	99 1f 00 04 	stb     r8,4(r31)
        v[5] = (t >> 40) & 0xFF;
fff714e0:	98 ff 00 05 	stb     r7,5(r31)
        v[6] = (t >> 48) & 0xFF;
fff714e4:	79 06 84 20 	rldicl  d6,d8,16,48
        v[7] = (t >> 56) & 0xFF;
fff714e8:	79 08 46 20 	rldicl  d8,d8,8,56

        //  Iota
        st[0] ^= keccakf_rndc[r];
    }

    for (i = 0; i < 25; i++) {
fff714ec:	81 01 01 c8 	lwz     r8,456(r1)
        v[1] = (t >> 8) & 0xFF;
        v[2] = (t >> 16) & 0xFF;
        v[3] = (t >> 24) & 0xFF;
        v[4] = (t >> 32) & 0xFF;
        v[5] = (t >> 40) & 0xFF;
        v[6] = (t >> 48) & 0xFF;
fff714f0:	98 ff 00 06 	stb     r7,6(r31)
        v[7] = (t >> 56) & 0xFF;
fff714f4:	99 3f 00 07 	stb     r9,7(r31)

        //  Iota
        st[0] ^= keccakf_rndc[r];
    }

    for (i = 0; i < 25; i++) {
fff714f8:	04 48 ff e0 	cmpwbne r8,r31,fff714b8 <_Z12sha3_keccakfPy+0x3a8>
        v[4] = (t >> 32) & 0xFF;
        v[5] = (t >> 40) & 0xFF;
        v[6] = (t >> 48) & 0xFF;
        v[7] = (t >> 56) & 0xFF;
    }
}
fff714fc:	80 01 02 0c 	lwz     r0,524(r1)
fff71500:	17 81 01 f8 	lvd     d28,504(r1)
fff71504:	7c 08 03 a6 	mtlr    r0
fff71508:	17 c1 02 00 	lvd     d30,512(r1)
fff7150c:	38 21 02 08 	addi    r1,r1,520
fff71510:	4e 80 00 20 	blr

fff71514 <_Z9sha3_initP10sha3_ctx_t>:
int sha3_init(sha3_ctx_t *c)
{
    int i;

    for (i = 0; i < 25; i++)
        c->st.q[i] = 0;
fff71514:	39 40 00 19 	li      r10,25
fff71518:	7d 49 03 a6 	mtctr   r10
fff7151c:	39 23 ff f8 	addi    r9,r3,-8
fff71520:	38 c0 00 00 	li      r6,0
fff71524:	38 e0 00 00 	li      r7,0
fff71528:	58 c9 00 08 	stvdu   d6,8(r9)

int sha3_init(sha3_ctx_t *c)
{
    int i;

    for (i = 0; i < 25; i++)
fff7152c:	42 00 ff fc 	bdnz    fff71528 <_Z9sha3_initP10sha3_ctx_t+0x14>
        c->st.q[i] = 0;
    c->mdlen = 64;
fff71530:	39 20 00 40 	li      r9,64
fff71534:	91 23 00 d0 	stw     r9,208(r3)
    c->rsiz = 200 - 2 * 64;
fff71538:	39 20 00 48 	li      r9,72
fff7153c:	91 23 00 cc 	stw     r9,204(r3)
    c->pt = 0;
fff71540:	39 20 00 00 	li      r9,0
fff71544:	91 23 00 c8 	stw     r9,200(r3)

    return 1;
}
fff71548:	38 60 00 01 	li      r3,1
fff7154c:	4e 80 00 20 	blr

fff71550 <_Z11sha3_updateP10sha3_ctx_tPKvj>:

// update state with more data

int sha3_update(sha3_ctx_t *c, const void *data, size_t len)
{
fff71550:	94 21 ff e8 	stwu    r1,-24(r1)
fff71554:	7c 08 02 a6 	mflr    r0
fff71558:	1b c1 00 10 	stvd    d30,16(r1)
fff7155c:	1b 81 00 08 	stvd    d28,8(r1)
fff71560:	90 01 00 1c 	stw     r0,28(r1)
fff71564:	38 a5 ff ff 	addi    r5,r5,-1
    size_t i;
    int j;

    j = c->pt;
fff71568:	81 23 00 c8 	lwz     r9,200(r3)
}

// update state with more data

int sha3_update(sha3_ctx_t *c, const void *data, size_t len)
{
fff7156c:	7c 7f 1b 78 	mr      r31,r3
fff71570:	3b a4 ff ff 	addi    r29,r4,-1
fff71574:	7f c4 2a 14 	add     r30,r4,r5
    size_t i;
    int j;

    j = c->pt;
    for (i = 0; i < len; i++) {
fff71578:	04 dd f0 1a 	cmpwbeq r29,r30,fff715ac <_Z11sha3_updateP10sha3_ctx_tPKvj+0x5c>
        c->st.b[j++] ^= ((const uint8_t*) data)[i];
fff7157c:	7d 1f 48 ae 	lbzx    r8,r31,r9
fff71580:	8c fd 00 01 	lbzu    r7,1(r29)
fff71584:	39 49 00 01 	addi    r10,r9,1
fff71588:	7c e8 42 78 	xor     r8,r7,r8
fff7158c:	7d 1f 49 ae 	stbx    r8,r31,r9
        if (j >= c->rsiz) {
fff71590:	81 3f 00 cc 	lwz     r9,204(r31)
fff71594:	04 8a 48 08 	cmpwblt r10,r9,fff715a4 <_Z11sha3_updateP10sha3_ctx_tPKvj+0x54>
            sha3_keccakf(c->st.q);
fff71598:	7f e3 fb 78 	mr      r3,r31
fff7159c:	4b ff fb 75 	bl      fff71110 <_Z12sha3_keccakfPy>
            j = 0;
fff715a0:	39 40 00 00 	li      r10,0
fff715a4:	7d 49 53 78 	mr      r9,r10
fff715a8:	4b ff ff d0 	b       fff71578 <_Z11sha3_updateP10sha3_ctx_tPKvj+0x28>
        }
    }
    c->pt = j;
fff715ac:	91 3f 00 c8 	stw     r9,200(r31)

    return 1;
}
fff715b0:	38 60 00 01 	li      r3,1
fff715b4:	80 01 00 1c 	lwz     r0,28(r1)
fff715b8:	17 81 00 08 	lvd     d28,8(r1)
fff715bc:	7c 08 03 a6 	mtlr    r0
fff715c0:	17 c1 00 10 	lvd     d30,16(r1)
fff715c4:	38 21 00 18 	addi    r1,r1,24
fff715c8:	4e 80 00 20 	blr

fff715cc <_Z10sha3_finalPA64_hP10sha3_ctx_t>:

int sha3_final(sha3_t *result, sha3_ctx_t *c)
{
    int i;

    c->st.b[c->pt] ^= 0x06;
fff715cc:	81 44 00 c8 	lwz     r10,200(r4)
}

// finalize and output a hash

int sha3_final(sha3_t *result, sha3_ctx_t *c)
{
fff715d0:	94 21 ff f0 	stwu    r1,-16(r1)
    int i;

    c->st.b[c->pt] ^= 0x06;
fff715d4:	7d 24 50 ae 	lbzx    r9,r4,r10
}

// finalize and output a hash

int sha3_final(sha3_t *result, sha3_ctx_t *c)
{
fff715d8:	7c 08 02 a6 	mflr    r0
    int i;

    c->st.b[c->pt] ^= 0x06;
fff715dc:	69 29 00 06 	xori    r9,r9,6
fff715e0:	7d 24 51 ae 	stbx    r9,r4,r10
    c->st.b[c->rsiz - 1] ^= 0x80;
fff715e4:	39 40 ff 80 	li      r10,-128
fff715e8:	81 24 00 cc 	lwz     r9,204(r4)
}

// finalize and output a hash

int sha3_final(sha3_t *result, sha3_ctx_t *c)
{
fff715ec:	1b c1 00 08 	stvd    d30,8(r1)
    int i;

    c->st.b[c->pt] ^= 0x06;
    c->st.b[c->rsiz - 1] ^= 0x80;
fff715f0:	39 29 ff ff 	addi    r9,r9,-1
fff715f4:	7d 04 48 ae 	lbzx    r8,r4,r9
}

// finalize and output a hash

int sha3_final(sha3_t *result, sha3_ctx_t *c)
{
fff715f8:	7c 7e 1b 78 	mr      r30,r3
    int i;

    c->st.b[c->pt] ^= 0x06;
    c->st.b[c->rsiz - 1] ^= 0x80;
fff715fc:	7d 0a 52 78 	xor     r10,r8,r10
fff71600:	7d 44 49 ae 	stbx    r10,r4,r9
    sha3_keccakf(c->st.q);
fff71604:	7c 83 23 78 	mr      r3,r4
}

// finalize and output a hash

int sha3_final(sha3_t *result, sha3_ctx_t *c)
{
fff71608:	90 01 00 14 	stw     r0,20(r1)
fff7160c:	7c 9f 23 78 	mr      r31,r4
    int i;

    c->st.b[c->pt] ^= 0x06;
    c->st.b[c->rsiz - 1] ^= 0x80;
    sha3_keccakf(c->st.q);
fff71610:	4b ff fb 01 	bl      fff71110 <_Z12sha3_keccakfPy>

    for (i = 0; i < c->mdlen; i++) {
fff71614:	39 20 00 00 	li      r9,0
fff71618:	81 5f 00 d0 	lwz     r10,208(r31)
fff7161c:	04 09 50 0a 	cmpwbge r9,r10,fff71630 <_Z10sha3_finalPA64_hP10sha3_ctx_t+0x64>
        ((uint8_t *) result)[i] = c->st.b[i];
fff71620:	7d 5f 48 ae 	lbzx    r10,r31,r9
fff71624:	7d 5e 49 ae 	stbx    r10,r30,r9

    c->st.b[c->pt] ^= 0x06;
    c->st.b[c->rsiz - 1] ^= 0x80;
    sha3_keccakf(c->st.q);

    for (i = 0; i < c->mdlen; i++) {
fff71628:	39 29 00 01 	addi    r9,r9,1
fff7162c:	4b ff ff ec 	b       fff71618 <_Z10sha3_finalPA64_hP10sha3_ctx_t+0x4c>
        ((uint8_t *) result)[i] = c->st.b[i];
    }

    return 1;
}
fff71630:	80 01 00 14 	lwz     r0,20(r1)
fff71634:	17 c1 00 08 	lvd     d30,8(r1)
fff71638:	7c 08 03 a6 	mtlr    r0
fff7163c:	38 60 00 01 	li      r3,1
fff71640:	38 21 00 10 	addi    r1,r1,16
fff71644:	4e 80 00 20 	blr

fff71648 <_Z9sha3_HashPKhjPA64_h>:

void sha3_Hash(const sha3_byte *data, size_t len, sha3_t *result)
{
fff71648:	94 21 ff 08 	stwu    r1,-248(r1)
fff7164c:	7c 08 02 a6 	mflr    r0
fff71650:	1b 81 00 e8 	stvd    d28,232(r1)
fff71654:	1b c1 00 f0 	stvd    d30,240(r1)
fff71658:	7c 7d 1b 78 	mr      r29,r3
fff7165c:	7c 9e 23 78 	mr      r30,r4
    sha3_ctx_t context;

    sha3_init(&context);
fff71660:	38 61 00 08 	addi    r3,r1,8

    return 1;
}

void sha3_Hash(const sha3_byte *data, size_t len, sha3_t *result)
{
fff71664:	90 01 00 fc 	stw     r0,252(r1)
fff71668:	7c bf 2b 78 	mr      r31,r5
    sha3_ctx_t context;

    sha3_init(&context);
fff7166c:	4b ff fe a9 	bl      fff71514 <_Z9sha3_initP10sha3_ctx_t>
    sha3_update(&context, data, len);
fff71670:	7f a4 eb 78 	mr      r4,r29
fff71674:	7f c5 f3 78 	mr      r5,r30
fff71678:	38 61 00 08 	addi    r3,r1,8
fff7167c:	4b ff fe d5 	bl      fff71550 <_Z11sha3_updateP10sha3_ctx_tPKvj>
    sha3_final(result, &context);
fff71680:	7f e3 fb 78 	mr      r3,r31
fff71684:	38 81 00 08 	addi    r4,r1,8
fff71688:	4b ff ff 45 	bl      fff715cc <_Z10sha3_finalPA64_hP10sha3_ctx_t>
}
fff7168c:	80 01 00 fc 	lwz     r0,252(r1)
fff71690:	17 81 00 e8 	lvd     d28,232(r1)
fff71694:	7c 08 03 a6 	mtlr    r0
fff71698:	17 c1 00 f0 	lvd     d30,240(r1)
fff7169c:	38 21 00 f8 	addi    r1,r1,248
fff716a0:	4e 80 00 20 	blr
	...
fff716ac:	00 00 00 01 	.long 0x1
fff716b0:	00 00 00 00 	.long 0x0
fff716b4:	00 00 80 82 	.long 0x8082
fff716b8:	80 00 00 00 	lwz     r0,0(0)
fff716bc:	00 00 80 8a 	.long 0x808a
fff716c0:	80 00 00 00 	lwz     r0,0(0)
fff716c4:	80 00 80 00 	lwz     r0,-32768(0)
fff716c8:	00 00 00 00 	.long 0x0
fff716cc:	00 00 80 8b 	.long 0x808b
fff716d0:	00 00 00 00 	.long 0x0
fff716d4:	80 00 00 01 	lwz     r0,1(0)
fff716d8:	80 00 00 00 	lwz     r0,0(0)
fff716dc:	80 00 80 81 	lwz     r0,-32639(0)
fff716e0:	80 00 00 00 	lwz     r0,0(0)
fff716e4:	00 00 80 09 	.long 0x8009
fff716e8:	00 00 00 00 	.long 0x0
fff716ec:	00 00 00 8a 	.long 0x8a
fff716f0:	00 00 00 00 	.long 0x0
fff716f4:	00 00 00 88 	.long 0x88
fff716f8:	00 00 00 00 	.long 0x0
fff716fc:	80 00 80 09 	lwz     r0,-32759(0)
fff71700:	00 00 00 00 	.long 0x0
fff71704:	80 00 00 0a 	lwz     r0,10(0)
fff71708:	00 00 00 00 	.long 0x0
fff7170c:	80 00 80 8b 	lwz     r0,-32629(0)
fff71710:	80 00 00 00 	lwz     r0,0(0)
fff71714:	00 00 00 8b 	.long 0x8b
fff71718:	80 00 00 00 	lwz     r0,0(0)
fff7171c:	00 00 80 89 	.long 0x8089
fff71720:	80 00 00 00 	lwz     r0,0(0)
fff71724:	00 00 80 03 	.long 0x8003
fff71728:	80 00 00 00 	lwz     r0,0(0)
fff7172c:	00 00 80 02 	.long 0x8002
fff71730:	80 00 00 00 	lwz     r0,0(0)
fff71734:	00 00 00 80 	.long 0x80
fff71738:	00 00 00 00 	.long 0x0
fff7173c:	00 00 80 0a 	.long 0x800a
fff71740:	80 00 00 00 	lwz     r0,0(0)
fff71744:	80 00 00 0a 	lwz     r0,10(0)
fff71748:	80 00 00 00 	lwz     r0,0(0)
fff7174c:	80 00 80 81 	lwz     r0,-32639(0)
fff71750:	80 00 00 00 	lwz     r0,0(0)
fff71754:	00 00 80 80 	.long 0x8080
fff71758:	00 00 00 00 	.long 0x0
fff7175c:	80 00 00 01 	lwz     r0,1(0)
fff71760:	80 00 00 00 	lwz     r0,0(0)
fff71764:	80 00 80 08 	lwz     r0,-32760(0)
fff71768:	00 00 00 01 	.long 0x1
fff7176c:	00 00 00 03 	.long 0x3
fff71770:	00 00 00 06 	.long 0x6
fff71774:	00 00 00 0a 	.long 0xa
fff71778:	00 00 00 0f 	.long 0xf
fff7177c:	00 00 00 15 	.long 0x15
fff71780:	00 00 00 1c 	.long 0x1c
fff71784:	00 00 00 24 	.long 0x24
fff71788:	00 00 00 2d 	.long 0x2d
fff7178c:	00 00 00 37 	.long 0x37
fff71790:	00 00 00 02 	.long 0x2
fff71794:	00 00 00 0e 	.long 0xe
fff71798:	00 00 00 1b 	.long 0x1b
fff7179c:	00 00 00 29 	.long 0x29
fff717a0:	00 00 00 38 	.long 0x38
fff717a4:	00 00 00 08 	.long 0x8
fff717a8:	00 00 00 19 	.long 0x19
fff717ac:	00 00 00 2b 	.long 0x2b
fff717b0:	00 00 00 3e 	.long 0x3e
fff717b4:	00 00 00 12 	.long 0x12
fff717b8:	00 00 00 27 	.long 0x27
fff717bc:	00 00 00 3d 	.long 0x3d
fff717c0:	00 00 00 14 	.long 0x14
fff717c4:	00 00 00 2c 	.long 0x2c
fff717c8:	00 00 00 0a 	.long 0xa
fff717cc:	00 00 00 07 	.long 0x7
fff717d0:	00 00 00 0b 	.long 0xb
fff717d4:	00 00 00 11 	.long 0x11
fff717d8:	00 00 00 12 	.long 0x12
fff717dc:	00 00 00 03 	.long 0x3
fff717e0:	00 00 00 05 	.long 0x5
fff717e4:	00 00 00 10 	.long 0x10
fff717e8:	00 00 00 08 	.long 0x8
fff717ec:	00 00 00 15 	.long 0x15
fff717f0:	00 00 00 18 	.long 0x18
fff717f4:	00 00 00 04 	.long 0x4
fff717f8:	00 00 00 0f 	.long 0xf
fff717fc:	00 00 00 17 	.long 0x17
fff71800:	00 00 00 13 	.long 0x13
fff71804:	00 00 00 0d 	.long 0xd
fff71808:	00 00 00 0c 	.long 0xc
fff7180c:	00 00 00 02 	.long 0x2
fff71810:	00 00 00 14 	.long 0x14
fff71814:	00 00 00 0e 	.long 0xe
fff71818:	00 00 00 16 	.long 0x16
fff7181c:	00 00 00 09 	.long 0x9
fff71820:	00 00 00 06 	.long 0x6
fff71824:	00 00 00 01 	.long 0x1

Disassembly of section .ecdsaalgo:

fff71c28 <_Z7BN_COPYPmPKm>:
#include <ppe42_string.h>

bn_t *lookup[16][3];

void __attribute__((noinline)) BN_COPY (bn_t *dst, const bn_t *src)
{
fff71c28:	39 40 00 11 	li      r10,17
fff71c2c:	7d 49 03 a6 	mtctr   r10
fff71c30:	39 20 00 00 	li      r9,0
    size_t i;
    for(i=0;i<NWORDS;i++)
    {
        *dst++ = *src++;
fff71c34:	7d 44 48 2e 	lwzx    r10,r4,r9
fff71c38:	7d 43 49 2e 	stwx    r10,r3,r9
fff71c3c:	39 29 00 04 	addi    r9,r9,4
bn_t *lookup[16][3];

void __attribute__((noinline)) BN_COPY (bn_t *dst, const bn_t *src)
{
    size_t i;
    for(i=0;i<NWORDS;i++)
fff71c40:	42 00 ff f4 	bdnz    fff71c34 <_Z7BN_COPYPmPKm+0xc>
    {
        *dst++ = *src++;
    }
}
fff71c44:	4e 80 00 20 	blr

fff71c48 <_Z6bn_shlPmm>:
// acc contains MSW of lower half
//
bn_t bn_shl (bn_t *a, bn_t acc)
{
    bnindex_t i = NWORDS;
    bn_t cf = 0;
fff71c48:	39 40 00 12 	li      r10,18
fff71c4c:	7d 49 03 a6 	mtctr   r10

    EC_ASSERT(NULL != a);
    EC_ASSERT(0 == a[0]);

    a += NWORDS;
fff71c50:	39 23 00 44 	addi    r9,r3,68
// acc contains MSW of lower half
//
bn_t bn_shl (bn_t *a, bn_t acc)
{
    bnindex_t i = NWORDS;
    bn_t cf = 0;
fff71c54:	38 60 00 00 	li      r3,0
    EC_ASSERT(NULL != a);
    EC_ASSERT(0 == a[0]);

    a += NWORDS;

    while (0<i--)
fff71c58:	42 40 00 20 	bdz     fff71c78 <_Z6bn_shlPmm+0x30>
    {
        cf = *(--a);
fff71c5c:	84 69 ff fc 	lwzu    r3,-4(r9)
        *a <<= BN_MSW_UNUSED_BITS;
        *a |= BN_MSW_UNUSED_MASK & (acc >> BN_PRIME_MSW_BITS);
fff71c60:	54 84 ba 7e 	rlwinm  r4,r4,23,9,31
    a += NWORDS;

    while (0<i--)
    {
        cf = *(--a);
        *a <<= BN_MSW_UNUSED_BITS;
fff71c64:	54 6a b8 10 	rlwinm  r10,r3,23,0,8
        *a |= BN_MSW_UNUSED_MASK & (acc >> BN_PRIME_MSW_BITS);
fff71c68:	7d 44 23 78 	or      r4,r10,r4
fff71c6c:	90 89 00 00 	stw     r4,0(r9)
        acc = cf;
fff71c70:	7c 64 1b 78 	mr      r4,r3
fff71c74:	4b ff ff e4 	b       fff71c58 <_Z6bn_shlPmm+0x10>
    }

    return cf;
}
fff71c78:	4e 80 00 20 	blr

fff71c7c <_Z7bn_dmulmm>:
    bn_t t;

    al = a;
    ah = (hbn_t) (a >> HBN_BITS);
    bl = b;
    bh = (hbn_t) (b >> HBN_BITS);
fff71c7c:	54 88 84 3e 	rlwinm  r8,r4,16,16,31
#else
    hbn_t ah, al, bh, bl;
    bn_t t;

    al = a;
    ah = (hbn_t) (a >> HBN_BITS);
fff71c80:	54 6a 84 3e 	rlwinm  r10,r3,16,16,31
    bl = b;
    bh = (hbn_t) (b >> HBN_BITS);
    a = ((bn_t) ah) * bh;         // collects high word
    b = ((bn_t) al) * bl;         // collects low  word
fff71c84:	54 84 04 3e 	clrlwi  r4,r4,16

    al = a;
    ah = (hbn_t) (a >> HBN_BITS);
    bl = b;
    bh = (hbn_t) (b >> HBN_BITS);
    a = ((bn_t) ah) * bh;         // collects high word
fff71c88:	7c ea 41 d6 	mullw   r7,r10,r8
    b = ((bn_t) al) * bl;         // collects low  word
fff71c8c:	54 69 04 3e 	clrlwi  r9,r3,16

    t = ((bn_t) ah) * bl;
fff71c90:	7d 4a 21 d6 	mullw   r10,r10,r4
    a += t >> HBN_BITS;
fff71c94:	55 43 84 3e 	rlwinm  r3,r10,16,16,31
    t <<= HBN_BITS;
fff71c98:	55 4a 80 1e 	rlwinm  r10,r10,16,0,15
    al = a;
    ah = (hbn_t) (a >> HBN_BITS);
    bl = b;
    bh = (hbn_t) (b >> HBN_BITS);
    a = ((bn_t) ah) * bh;         // collects high word
    b = ((bn_t) al) * bl;         // collects low  word
fff71c9c:	7c 89 21 d6 	mullw   r4,r9,r4

    t = ((bn_t) ah) * bl;
    a += t >> HBN_BITS;
    t <<= HBN_BITS;
    if (b+t < t)
fff71ca0:	7c 8a 22 14 	add     r4,r10,r4
    {
        ++a;
fff71ca4:	7d 4a 20 10 	subfc   r10,r10,r4
fff71ca8:	7d 4a 51 10 	subfe   r10,r10,r10
    }
    b += t;

    t = ((bn_t) al) * bh;
fff71cac:	7d 29 41 d6 	mullw   r9,r9,r8
    bh = (hbn_t) (b >> HBN_BITS);
    a = ((bn_t) ah) * bh;         // collects high word
    b = ((bn_t) al) * bl;         // collects low  word

    t = ((bn_t) ah) * bl;
    a += t >> HBN_BITS;
fff71cb0:	7c 63 3a 14 	add     r3,r3,r7
    t <<= HBN_BITS;
    if (b+t < t)
    {
        ++a;
fff71cb4:	7d 4a 00 d0 	neg     r10,r10
fff71cb8:	7c 63 52 14 	add     r3,r3,r10
    }
    b += t;

    t = ((bn_t) al) * bh;
    a += t >> HBN_BITS;
fff71cbc:	55 2a 84 3e 	rlwinm  r10,r9,16,16,31
    t <<= HBN_BITS;
fff71cc0:	55 29 80 1e 	rlwinm  r9,r9,16,0,15
    if (b+t < t)
fff71cc4:	7c 84 4a 14 	add     r4,r4,r9
    {
        ++a;
fff71cc8:	7d 29 20 10 	subfc   r9,r9,r4
fff71ccc:	7d 29 49 10 	subfe   r9,r9,r9
        ++a;
    }
    b += t;

    t = ((bn_t) al) * bh;
    a += t >> HBN_BITS;
fff71cd0:	7c 63 52 14 	add     r3,r3,r10
    t <<= HBN_BITS;
    if (b+t < t)
    {
        ++a;
fff71cd4:	7d 29 00 d0 	neg     r9,r9
fff71cd8:	7c 63 4a 14 	add     r3,r3,r9
    }
    return a;
#endif
}
fff71cdc:	4e 80 00 20 	blr

fff71ce0 <_Z6bn_mulPmPKmS1_>:
 *  delaying carry-collection simplifies multiply loop
 */
// XXX split to half-words' array; get rid of bn_dmul()
//
void bn_mul (bn_t *r, const bn_t *a, const bn_t *b)
{
fff71ce0:	94 21 ff 98 	stwu    r1,-104(r1)
fff71ce4:	7c 08 02 a6 	mflr    r0
fff71ce8:	1b 81 00 58 	stvd    d28,88(r1)
fff71cec:	18 81 00 38 	stvd    d4,56(r1)

    EC_ASSERT(NULL != r);
    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    bn_dclear(r);
fff71cf0:	38 80 00 00 	li      r4,0
fff71cf4:	38 a0 00 88 	li      r5,136
    memset(cf, 0, sizeof(cf));
fff71cf8:	3b a1 00 08 	addi    r29,r1,8
 *  delaying carry-collection simplifies multiply loop
 */
// XXX split to half-words' array; get rid of bn_dmul()
//
void bn_mul (bn_t *r, const bn_t *a, const bn_t *b)
{
fff71cfc:	90 01 00 6c 	stw     r0,108(r1)
fff71d00:	1b c1 00 60 	stvd    d30,96(r1)
fff71d04:	7c 7c 1b 78 	mr      r28,r3

    EC_ASSERT(NULL != r);
    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    bn_dclear(r);
fff71d08:	48 00 85 dd 	bl      fff7a2e4 <memset>
    memset(cf, 0, sizeof(cf));
fff71d0c:	7f a3 eb 78 	mr      r3,r29
fff71d10:	38 80 00 00 	li      r4,0
fff71d14:	38 a0 00 22 	li      r5,34
fff71d18:	48 00 85 cd 	bl      fff7a2e4 <memset>
fff71d1c:	81 01 00 38 	lwz     r8,56(r1)

    for (j=0; j<NWORDS; ++j)
fff71d20:	3b c0 00 00 	li      r30,0
fff71d24:	39 08 00 40 	addi    r8,r8,64
fff71d28:	91 01 00 40 	stw     r8,64(r1)
fff71d2c:	81 01 00 38 	lwz     r8,56(r1)
fff71d30:	57 c5 10 3a 	rlwinm  r5,r30,2,0,29
fff71d34:	38 c8 ff fc 	addi    r6,r8,-4
fff71d38:	7d 3c 2a 14 	add     r9,r28,r5
fff71d3c:	7f fd f2 14 	add     r31,r29,r30
    {
        for (i=0; i<NWORDS; ++i)
        {
            ph = bn_dmul(a[i], b[j]);
fff71d40:	81 01 00 3c 	lwz     r8,60(r1)
fff71d44:	85 46 00 04 	lwzu    r10,4(r6)
fff71d48:	7c 08 28 2e 	lwzx    r0,r8,r5
fff71d4c:	7d 43 53 78 	mr      r3,r10
fff71d50:	7c 04 03 78 	mr      r4,r0
fff71d54:	90 01 00 48 	stw     r0,72(r1)
fff71d58:	90 a1 00 54 	stw     r5,84(r1)
fff71d5c:	90 c1 00 4c 	stw     r6,76(r1)
fff71d60:	91 21 00 50 	stw     r9,80(r1)
fff71d64:	91 41 00 44 	stw     r10,68(r1)
fff71d68:	4b ff ff 15 	bl      fff71c7c <_Z7bn_dmulmm>
                "addze   %1,%3"
                : "=r" (r[i+j+1]), "=r" (cf[i+j+1])
                : "0" (r[i+j+1]), "1" (cf[i+j+1]), "r" (pl)
                );
#else
            r[i+j] += ph;
fff71d6c:	81 21 00 50 	lwz     r9,80(r1)
    for (j=0; j<NWORDS; ++j)
    {
        for (i=0; i<NWORDS; ++i)
        {
            ph = bn_dmul(a[i], b[j]);
            pl = a[i] * b[j];
fff71d70:	80 01 00 48 	lwz     r0,72(r1)
                "addze   %1,%3"
                : "=r" (r[i+j+1]), "=r" (cf[i+j+1])
                : "0" (r[i+j+1]), "1" (cf[i+j+1]), "r" (pl)
                );
#else
            r[i+j] += ph;
fff71d74:	80 89 00 00 	lwz     r4,0(r9)
    for (j=0; j<NWORDS; ++j)
    {
        for (i=0; i<NWORDS; ++i)
        {
            ph = bn_dmul(a[i], b[j]);
            pl = a[i] * b[j];
fff71d78:	81 41 00 44 	lwz     r10,68(r1)
                "addze   %1,%3"
                : "=r" (r[i+j+1]), "=r" (cf[i+j+1])
                : "0" (r[i+j+1]), "1" (cf[i+j+1]), "r" (pl)
                );
#else
            r[i+j] += ph;
fff71d7c:	7c 83 22 14 	add     r4,r3,r4
fff71d80:	90 89 00 00 	stw     r4,0(r9)
    for (j=0; j<NWORDS; ++j)
    {
        for (i=0; i<NWORDS; ++i)
        {
            ph = bn_dmul(a[i], b[j]);
            pl = a[i] * b[j];
fff71d84:	7d 40 51 d6 	mullw   r10,r0,r10
                : "=r" (r[i+j+1]), "=r" (cf[i+j+1])
                : "0" (r[i+j+1]), "1" (cf[i+j+1]), "r" (pl)
                );
#else
            r[i+j] += ph;
            if (r[i+j] < ph)
fff71d88:	80 a1 00 54 	lwz     r5,84(r1)
fff71d8c:	80 c1 00 4c 	lwz     r6,76(r1)
fff71d90:	05 04 18 08 	cmplwbge r4,r3,fff71da0 <_Z6bn_mulPmPKmS1_+0xc0>
            {
                EC_ASSERT(i+j>0);    // MSW can't carry to left
                (cf[i+j-1])++;
fff71d94:	88 9f ff ff 	lbz     r4,-1(r31)
fff71d98:	38 84 00 01 	addi    r4,r4,1
fff71d9c:	98 9f ff ff 	stb     r4,-1(r31)
            }

            r[i+j+1] += pl;
fff71da0:	84 89 00 04 	lwzu    r4,4(r9)
fff71da4:	7c 8a 22 14 	add     r4,r10,r4
fff71da8:	90 89 00 00 	stw     r4,0(r9)
            if (r[i+j+1] < pl)
fff71dac:	05 04 50 08 	cmplwbge r4,r10,fff71dbc <_Z6bn_mulPmPKmS1_+0xdc>
            {
                (cf[i+j])++;
fff71db0:	89 5f 00 00 	lbz     r10,0(r31)
fff71db4:	39 4a 00 01 	addi    r10,r10,1
fff71db8:	99 5f 00 00 	stb     r10,0(r31)
    bn_dclear(r);
    memset(cf, 0, sizeof(cf));

    for (j=0; j<NWORDS; ++j)
    {
        for (i=0; i<NWORDS; ++i)
fff71dbc:	81 41 00 40 	lwz     r10,64(r1)
fff71dc0:	3b ff 00 01 	addi    r31,r31,1
fff71dc4:	04 4a 37 be 	cmpwbne r10,r6,fff71d40 <_Z6bn_mulPmPKmS1_+0x60>
    EC_ASSERT(NULL != b);

    bn_dclear(r);
    memset(cf, 0, sizeof(cf));

    for (j=0; j<NWORDS; ++j)
fff71dc8:	3b de 00 01 	addi    r30,r30,1
fff71dcc:	06 5e 8f b0 	cmpwibne r30,17,fff71d2c <_Z6bn_mulPmPKmS1_+0x4c>
fff71dd0:	39 20 00 22 	li      r9,34
fff71dd4:	7d 29 03 a6 	mtctr   r9
            : "0" (r[i]), "r" (cf[i+1])
            );
#else
    for (i=NWORDS+NWORDS; 0<i; )
    {
        if (cf[--i])
fff71dd8:	39 29 ff ff 	addi    r9,r9,-1
fff71ddc:	7c dd 48 ae 	lbzx    r6,r29,r9
fff71de0:	06 c6 00 14 	bwz     r6,fff71e08 <_Z6bn_mulPmPKmS1_+0x128>
fff71de4:	55 25 10 3a 	rlwinm  r5,r9,2,0,29
        {
            r[i] += cf[i];
fff71de8:	7d 5c 28 2e 	lwzx    r10,r28,r5
fff71dec:	7d 46 52 14 	add     r10,r6,r10
fff71df0:	7d 5c 29 2e 	stwx    r10,r28,r5
            if (r[i] < cf[i])
fff71df4:	05 0a 30 0a 	cmplwbge r10,r6,fff71e08 <_Z6bn_mulPmPKmS1_+0x128>
fff71df8:	7c dd 4a 14 	add     r6,r29,r9
            {
                EC_ASSERT(0 < i);
                cf[i-1]++;
fff71dfc:	89 46 ff ff 	lbz     r10,-1(r6)
fff71e00:	39 4a 00 01 	addi    r10,r10,1
fff71e04:	99 46 ff ff 	stb     r10,-1(r6)
fff71e08:	42 00 ff d0 	bdnz    fff71dd8 <_Z6bn_mulPmPKmS1_+0xf8>
            }
        }
#endif
    }
}
fff71e0c:	80 01 00 6c 	lwz     r0,108(r1)
fff71e10:	17 81 00 58 	lvd     d28,88(r1)
fff71e14:	7c 08 03 a6 	mtlr    r0
fff71e18:	17 c1 00 60 	lvd     d30,96(r1)
fff71e1c:	38 21 00 68 	addi    r1,r1,104
fff71e20:	4e 80 00 20 	blr

fff71e24 <_Z6bn_cmpPKmS0_>:
}

#else /*  defined(__BIG_ENDIAN) */

int __attribute__((noinline)) bn_cmp (const bn_t *a, const bn_t *b)
{
fff71e24:	39 40 00 11 	li      r10,17
fff71e28:	7d 49 03 a6 	mtctr   r10
fff71e2c:	39 20 00 00 	li      r9,0
    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    for (i=0; i<NWORDS; ++i)
    {
        if (a[i] != b[i])
fff71e30:	7d 43 48 2e 	lwzx    r10,r3,r9
fff71e34:	7d 04 48 2e 	lwzx    r8,r4,r9
fff71e38:	7c 0a 40 40 	cmplw   r10,r8
fff71e3c:	41 a2 00 10 	beq     fff71e4c <_Z6bn_cmpPKmS0_+0x28>
        {
            return 1 - ((a[i] < b[i]) <<1);
fff71e40:	41 80 00 1c 	blt     fff71e5c <_Z6bn_cmpPKmS0_+0x38>
fff71e44:	38 60 00 01 	li      r3,1
fff71e48:	4e 80 00 20 	blr
fff71e4c:	39 29 00 04 	addi    r9,r9,4
    bnindex_t i;

    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    for (i=0; i<NWORDS; ++i)
fff71e50:	42 00 ff e0 	bdnz    fff71e30 <_Z6bn_cmpPKmS0_+0xc>
        {
            return 1 - ((a[i] < b[i]) <<1);
        }
    }

    return 0;
fff71e54:	38 60 00 00 	li      r3,0
fff71e58:	4e 80 00 20 	blr

    for (i=0; i<NWORDS; ++i)
    {
        if (a[i] != b[i])
        {
            return 1 - ((a[i] < b[i]) <<1);
fff71e5c:	38 60 ff ff 	li      r3,-1
        }
    }

    return 0;
}
fff71e60:	4e 80 00 20 	blr

fff71e64 <_Z10bn_is_zeroPKmj>:
{
    EC_ASSERT(NULL != m);
    EC_ASSERT(mn < NWORDS);

    const unsigned char *p2 = (const unsigned char *) m;
    size_t n=sizeof(bn_t)*(NWORDS-mn);
fff71e64:	20 84 00 11 	subfic  r4,r4,17
fff71e68:	54 84 10 3a 	rlwinm  r4,r4,2,0,29

    while (n-- > 0)
fff71e6c:	38 84 00 01 	addi    r4,r4,1
fff71e70:	7c 89 03 a6 	mtctr   r4
fff71e74:	39 20 00 00 	li      r9,0
fff71e78:	42 40 00 1c 	bdz     fff71e94 <_Z10bn_is_zeroPKmj+0x30>
fff71e7c:	39 29 00 01 	addi    r9,r9,1
fff71e80:	7d 43 4a 14 	add     r10,r3,r9
    {
        if (0 != *p2)
fff71e84:	89 4a ff ff 	lbz     r10,-1(r10)
fff71e88:	06 ca 07 f8 	bwz     r10,fff71e78 <_Z10bn_is_zeroPKmj+0x14>
        {
            return !(0 - *p2);
fff71e8c:	38 60 00 00 	li      r3,0
        }
        p2 += 1;
    }

    return !0;
}
fff71e90:	4e 80 00 20 	blr
            return !(0 - *p2);
        }
        p2 += 1;
    }

    return !0;
fff71e94:	38 60 00 01 	li      r3,1
fff71e98:	4e 80 00 20 	blr

fff71e9c <_Z6bn_addPmPKm>:
        if (cf)
        {
            cf = (0 == ++aw);
        }
        aw += *b;
        cf |= (aw < *(b--));
fff71e9c:	39 40 00 12 	li      r10,18
fff71ea0:	7d 49 03 a6 	mtctr   r10
fff71ea4:	38 84 00 44 	addi    r4,r4,68
fff71ea8:	38 63 00 44 	addi    r3,r3,68
}


void __attribute__((noinline)) bn_add (bn_t *a, const bn_t *b)
{
    bn_t aw, cf = 0;           /* aw: copy of current word to allow a==b */
fff71eac:	39 20 00 00 	li      r9,0
    EC_ASSERT(NULL != b);

    a += NWORDS-1;
    b += NWORDS-1;

    while (0 < i--)
fff71eb0:	42 40 00 44 	bdz     fff71ef4 <_Z6bn_addPmPKm+0x58>
    {
        aw = *a;
fff71eb4:	85 43 ff fc 	lwzu    r10,-4(r3)
        if (cf)
fff71eb8:	06 c9 00 0e 	bwz     r9,fff71ed4 <_Z6bn_addPmPKm+0x38>
        {
            cf = (0 == ++aw);
fff71ebc:	39 4a 00 01 	addi    r10,r10,1
fff71ec0:	7d 2a 00 d0 	neg     r9,r10
fff71ec4:	7d 49 48 38 	and     r9,r10,r9
fff71ec8:	7d 29 00 34 	cntlzw  r9,r9
fff71ecc:	21 29 00 1f 	subfic  r9,r9,31
fff71ed0:	55 29 0f fe 	rlwinm  r9,r9,1,31,31
        }
        aw += *b;
fff71ed4:	84 e4 ff fc 	lwzu    r7,-4(r4)
fff71ed8:	7d 4a 3a 14 	add     r10,r10,r7
        cf |= (aw < *(b--));
fff71edc:	7d 07 50 10 	subfc   r8,r7,r10
fff71ee0:	7d 08 41 10 	subfe   r8,r8,r8
fff71ee4:	7d 08 00 d0 	neg     r8,r8
fff71ee8:	7d 29 43 78 	or      r9,r9,r8
        *(a--) = aw;
fff71eec:	91 43 00 00 	stw     r10,0(r3)
fff71ef0:	4b ff ff c0 	b       fff71eb0 <_Z6bn_addPmPKm+0x14>
    }
}
fff71ef4:	4e 80 00 20 	blr

fff71ef8 <_Z6bn_subPmPKm>:
        if (cf)
        {
            cf = (0 == (*a)--);
        }
        bw = *b;
        cf |= (*a < *(b--));
fff71ef8:	39 20 00 12 	li      r9,18
fff71efc:	7d 29 03 a6 	mtctr   r9
fff71f00:	39 43 00 44 	addi    r10,r3,68
fff71f04:	38 84 00 44 	addi    r4,r4,68

// never with order as base
bn_t bn_sub (bn_t *a, const bn_t *b)
{
    bnindex_t i = NWORDS;
    bn_t bw, cf = 0;
fff71f08:	38 60 00 00 	li      r3,0
    EC_ASSERT(NULL != b);

    a += NWORDS-1;
    b += NWORDS-1;

    while (0 < i--) {
fff71f0c:	42 40 00 4c 	bdz     fff71f58 <_Z6bn_subPmPKm+0x60>
        if (cf)
fff71f10:	06 c3 00 12 	bwz     r3,fff71f34 <_Z6bn_subPmPKm+0x3c>
        {
            cf = (0 == (*a)--);
fff71f14:	80 6a ff fc 	lwz     r3,-4(r10)
fff71f18:	39 23 ff ff 	addi    r9,r3,-1
fff71f1c:	91 2a ff fc 	stw     r9,-4(r10)
fff71f20:	7d 23 00 d0 	neg     r9,r3
fff71f24:	7c 63 48 38 	and     r3,r3,r9
fff71f28:	7c 63 00 34 	cntlzw  r3,r3
fff71f2c:	20 63 00 1f 	subfic  r3,r3,31
fff71f30:	54 63 0f fe 	rlwinm  r3,r3,1,31,31
        }
        bw = *b;
fff71f34:	84 e4 ff fc 	lwzu    r7,-4(r4)
        cf |= (*a < *(b--));
fff71f38:	85 2a ff fc 	lwzu    r9,-4(r10)
fff71f3c:	7d 07 48 10 	subfc   r8,r7,r9
fff71f40:	7d 08 41 10 	subfe   r8,r8,r8
fff71f44:	7d 08 00 d0 	neg     r8,r8
        *(a--) -= bw;
fff71f48:	7d 27 48 50 	subf    r9,r7,r9
        if (cf)
        {
            cf = (0 == (*a)--);
        }
        bw = *b;
        cf |= (*a < *(b--));
fff71f4c:	7c 63 43 78 	or      r3,r3,r8
        *(a--) -= bw;
fff71f50:	91 2a 00 00 	stw     r9,0(r10)
fff71f54:	4b ff ff b8 	b       fff71f0c <_Z6bn_subPmPKm+0x14>
    }

    return cf;
}
fff71f58:	4e 80 00 20 	blr

fff71f5c <_Z14bn_modred_p521PmS_>:
// P521: specific form
// destroys LS bignumber of (a,2*NWORDS)
//
#ifndef EC_POWER64_RED
void bn_modred_p521 (bn_t *r, bn_t *a)
{
fff71f5c:	94 21 ff e8 	stwu    r1,-24(r1)
fff71f60:	7c 08 02 a6 	mflr    r0
fff71f64:	1b c1 00 10 	stvd    d30,16(r1)
fff71f68:	7c 9f 23 78 	mr      r31,r4
fff71f6c:	90 01 00 1c 	stw     r0,28(r1)
fff71f70:	1b 81 00 08 	stvd    d28,8(r1)
fff71f74:	7c 7e 1b 78 	mr      r30,r3

    EC_ASSERT(NULL != r);
    EC_ASSERT(NULL != a);
    EC_ASSERT((const bn_t *) r != a);

    al = a+NWORDS;
fff71f78:	3b a4 00 44 	addi    r29,r4,68

    // P521: product is 1042 bits, MSW of double-width bignum always 0
    //
    EC_ASSERT(0 == a[0]);

    BN_COPY(rc, a);
fff71f7c:	4b ff fc ad 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_shl(rc, *al);
fff71f80:	80 9f 00 44 	lwz     r4,68(r31)
fff71f84:	7f c3 f3 78 	mr      r3,r30
fff71f88:	4b ff fc c1 	bl      fff71c48 <_Z6bn_shlPmm>

    *al &= BN_PRIME_MSW_MASK;
fff71f8c:	81 3f 00 44 	lwz     r9,68(r31)

    if (bn_cmp(rc, consts_p()->ec_prime) >= 0)
fff71f90:	7f c3 f3 78 	mr      r3,r30
    EC_ASSERT(0 == a[0]);

    BN_COPY(rc, a);
    bn_shl(rc, *al);

    *al &= BN_PRIME_MSW_MASK;
fff71f94:	55 29 05 fe 	clrlwi  r9,r9,23
fff71f98:	91 3f 00 44 	stw     r9,68(r31)

    if (bn_cmp(rc, consts_p()->ec_prime) >= 0)
fff71f9c:	3f e0 ff f7 	lis     r31,-9
fff71fa0:	3b ff 33 58 	addi    r31,r31,13144
fff71fa4:	7f e4 fb 78 	mr      r4,r31
fff71fa8:	4b ff fe 7d 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff71fac:	06 83 00 08 	bwltz   r3,fff71fbc <_Z14bn_modred_p521PmS_+0x60>
    {
        bn_sub(rc, consts_p()->ec_prime); // XXX can this happen? (mod-based input)
fff71fb0:	7f c3 f3 78 	mr      r3,r30
fff71fb4:	7f e4 fb 78 	mr      r4,r31
fff71fb8:	4b ff ff 41 	bl      fff71ef8 <_Z6bn_subPmPKm>
    }

    if (bn_cmp(al, consts_p()->ec_prime) >= 0)
fff71fbc:	7f a3 eb 78 	mr      r3,r29
fff71fc0:	7f e4 fb 78 	mr      r4,r31
fff71fc4:	4b ff fe 61 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff71fc8:	06 83 00 08 	bwltz   r3,fff71fd8 <_Z14bn_modred_p521PmS_+0x7c>
       bn_sub(al, consts_p()->ec_prime);
fff71fcc:	7f a3 eb 78 	mr      r3,r29
fff71fd0:	7f e4 fb 78 	mr      r4,r31
fff71fd4:	4b ff ff 25 	bl      fff71ef8 <_Z6bn_subPmPKm>
    {
        EC_ASSERT(!bn_ge_prime(al));         // al must have bitlen <= ec_prime
    }

    bn_add(rc, al);
fff71fd8:	7f c3 f3 78 	mr      r3,r30
fff71fdc:	7f a4 eb 78 	mr      r4,r29
fff71fe0:	4b ff fe bd 	bl      fff71e9c <_Z6bn_addPmPKm>
    if (bn_cmp(rc, consts_p()->ec_prime) >= 0)
fff71fe4:	7f c3 f3 78 	mr      r3,r30
fff71fe8:	7f e4 fb 78 	mr      r4,r31
fff71fec:	4b ff fe 39 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff71ff0:	06 83 00 12 	bwltz   r3,fff72014 <_Z14bn_modred_p521PmS_+0xb8>
    {
        bn_sub(rc, consts_p()->ec_prime);
    }
}
fff71ff4:	80 01 00 1c 	lwz     r0,28(r1)
fff71ff8:	17 81 00 08 	lvd     d28,8(r1)
fff71ffc:	7c 08 03 a6 	mtlr    r0
    }

    bn_add(rc, al);
    if (bn_cmp(rc, consts_p()->ec_prime) >= 0)
    {
        bn_sub(rc, consts_p()->ec_prime);
fff72000:	7f c3 f3 78 	mr      r3,r30
fff72004:	7f e4 fb 78 	mr      r4,r31
    }
}
fff72008:	17 c1 00 10 	lvd     d30,16(r1)
fff7200c:	38 21 00 18 	addi    r1,r1,24
    }

    bn_add(rc, al);
    if (bn_cmp(rc, consts_p()->ec_prime) >= 0)
    {
        bn_sub(rc, consts_p()->ec_prime);
fff72010:	4b ff fe e8 	b       fff71ef8 <_Z6bn_subPmPKm>
    }
}
fff72014:	80 01 00 1c 	lwz     r0,28(r1)
fff72018:	17 81 00 08 	lvd     d28,8(r1)
fff7201c:	7c 08 03 a6 	mtlr    r0
fff72020:	17 c1 00 10 	lvd     d30,16(r1)
fff72024:	38 21 00 18 	addi    r1,r1,24
fff72028:	4e 80 00 20 	blr

fff7202c <_Z15bn_modmul_primePmPKm>:
    }
}
#endif

void bn_modmul_prime (bn_t *a, const bn_t *b)
{
fff7202c:	94 21 ff 60 	stwu    r1,-160(r1)
fff72030:	7c 08 02 a6 	mflr    r0
fff72034:	1b c1 00 98 	stvd    d30,152(r1)
fff72038:	7c 7f 1b 78 	mr      r31,r3
fff7203c:	7c 85 23 78 	mr      r5,r4
    bn_t prod[ NWORDS+NWORDS ];

    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    bn_mul(prod, a, b);
fff72040:	38 61 00 08 	addi    r3,r1,8
fff72044:	7f e4 fb 78 	mr      r4,r31
    }
}
#endif

void bn_modmul_prime (bn_t *a, const bn_t *b)
{
fff72048:	90 01 00 a4 	stw     r0,164(r1)
    bn_t prod[ NWORDS+NWORDS ];

    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    bn_mul(prod, a, b);
fff7204c:	4b ff fc 95 	bl      fff71ce0 <_Z6bn_mulPmPKmS1_>
#ifdef EC_POWER64_RED
    bn_modred_fast(a, prod);  // accepts upto 46 extra bits => outputs at most 1 extra bit (522)
#else
    bn_modred_p521(a, prod);
fff72050:	7f e3 fb 78 	mr      r3,r31
fff72054:	38 81 00 08 	addi    r4,r1,8
fff72058:	4b ff ff 05 	bl      fff71f5c <_Z14bn_modred_p521PmS_>
#endif
}
fff7205c:	80 01 00 a4 	lwz     r0,164(r1)
fff72060:	17 c1 00 98 	lvd     d30,152(r1)
fff72064:	7c 08 03 a6 	mtlr    r0
fff72068:	38 21 00 a0 	addi    r1,r1,160
fff7206c:	4e 80 00 20 	blr

fff72070 <_Z20bn_modred_p521_orderPmPKm>:
// so, keep subtracting N until result <N; up to twice is enough
//
// r,a must not overlap
//
void bn_modred_p521_order (bn_t *r, const bn_t *a)
{
fff72070:	94 21 ff 58 	stwu    r1,-168(r1)
fff72074:	7c 08 02 a6 	mflr    r0
fff72078:	1b 81 00 98 	stvd    d28,152(r1)
fff7207c:	7c 9d 23 78 	mr      r29,r4
fff72080:	90 01 00 ac 	stw     r0,172(r1)
fff72084:	1b c1 00 a0 	stvd    d30,160(r1)
fff72088:	7c 7e 1b 78 	mr      r30,r3
    EC_ASSERT(0 == a[0]);

    BN_COPY(r, a);
    bn_shl(r, a[NWORDS]);

    bn_mul(dbl, r, consts_p()->ec_order_qn);
fff7208c:	3f e0 ff f7 	lis     r31,-9

    // P521: product is 1042 bits, MSW of double-width bignum always 0
    //
    EC_ASSERT(0 == a[0]);

    BN_COPY(r, a);
fff72090:	4b ff fb 99 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_shl(r, a[NWORDS]);
fff72094:	84 9d 00 44 	lwzu    r4,68(r29)

    bn_mul(dbl, r, consts_p()->ec_order_qn);
fff72098:	3b ff 33 58 	addi    r31,r31,13144
    // P521: product is 1042 bits, MSW of double-width bignum always 0
    //
    EC_ASSERT(0 == a[0]);

    BN_COPY(r, a);
    bn_shl(r, a[NWORDS]);
fff7209c:	7f c3 f3 78 	mr      r3,r30
fff720a0:	4b ff fb a9 	bl      fff71c48 <_Z6bn_shlPmm>

    bn_mul(dbl, r, consts_p()->ec_order_qn);
    bn_shl(dbl, dbl[NWORDS]);            // MS 521 bits of product
fff720a4:	7c 3c 0b 78 	mr      r28,r1
    EC_ASSERT(0 == a[0]);

    BN_COPY(r, a);
    bn_shl(r, a[NWORDS]);

    bn_mul(dbl, r, consts_p()->ec_order_qn);
fff720a8:	38 bf 01 10 	addi    r5,r31,272
fff720ac:	38 61 00 08 	addi    r3,r1,8
fff720b0:	7f c4 f3 78 	mr      r4,r30
fff720b4:	4b ff fc 2d 	bl      fff71ce0 <_Z6bn_mulPmPKmS1_>
    bn_shl(dbl, dbl[NWORDS]);            // MS 521 bits of product
fff720b8:	84 9c 00 4c 	lwzu    r4,76(r28)
fff720bc:	38 61 00 08 	addi    r3,r1,8
fff720c0:	4b ff fb 89 	bl      fff71c48 <_Z6bn_shlPmm>
    bn_add(r, dbl);

    bn_mul(dbl, r, consts_p()->ec_order);            // N * floor(A / N)
fff720c4:	3b ff 00 44 	addi    r31,r31,68
    BN_COPY(r, a);
    bn_shl(r, a[NWORDS]);

    bn_mul(dbl, r, consts_p()->ec_order_qn);
    bn_shl(dbl, dbl[NWORDS]);            // MS 521 bits of product
    bn_add(r, dbl);
fff720c8:	7f c3 f3 78 	mr      r3,r30
fff720cc:	38 81 00 08 	addi    r4,r1,8
fff720d0:	4b ff fd cd 	bl      fff71e9c <_Z6bn_addPmPKm>

    bn_mul(dbl, r, consts_p()->ec_order);            // N * floor(A / N)
fff720d4:	7f e5 fb 78 	mr      r5,r31
fff720d8:	38 61 00 08 	addi    r3,r1,8
fff720dc:	7f c4 f3 78 	mr      r4,r30
fff720e0:	4b ff fc 01 	bl      fff71ce0 <_Z6bn_mulPmPKmS1_>
    EC_ASSERT(bn_cmp(dbl, a) <= 0);
    EC_ASSERT(bn_cmp(dbl+NWORDS, a+NWORDS) <= 0);

    BN_COPY(r, a+NWORDS);
fff720e4:	7f c3 f3 78 	mr      r3,r30
fff720e8:	7f a4 eb 78 	mr      r4,r29
fff720ec:	4b ff fb 3d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_sub(r, dbl+NWORDS);               // A - (N * floor(A/N))
fff720f0:	7f 84 e3 78 	mr      r4,r28
fff720f4:	7f c3 f3 78 	mr      r3,r30
fff720f8:	4b ff fe 01 	bl      fff71ef8 <_Z6bn_subPmPKm>

    if (bn_cmp(r, consts_p()->ec_order) >= 0)
fff720fc:	7f c3 f3 78 	mr      r3,r30
fff72100:	7f e4 fb 78 	mr      r4,r31
fff72104:	4b ff fd 21 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff72108:	06 83 00 08 	bwltz   r3,fff72118 <_Z20bn_modred_p521_orderPmPKm+0xa8>
    {
        bn_sub(r, consts_p()->ec_order);
fff7210c:	7f c3 f3 78 	mr      r3,r30
fff72110:	7f e4 fb 78 	mr      r4,r31
fff72114:	4b ff fd e5 	bl      fff71ef8 <_Z6bn_subPmPKm>
    }

    if (bn_cmp(r, consts_p()->ec_order) >= 0)
fff72118:	7f c3 f3 78 	mr      r3,r30
fff7211c:	7f e4 fb 78 	mr      r4,r31
fff72120:	4b ff fd 05 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff72124:	06 83 00 08 	bwltz   r3,fff72134 <_Z20bn_modred_p521_orderPmPKm+0xc4>
    {
        bn_sub(r, consts_p()->ec_order);       // XXX can this still be 2+ over?
fff72128:	7f c3 f3 78 	mr      r3,r30
fff7212c:	7f e4 fb 78 	mr      r4,r31
fff72130:	4b ff fd c9 	bl      fff71ef8 <_Z6bn_subPmPKm>
    }

    EC_ASSERT(bn_cmp(r, consts_p()->ec_order) < 0);
}
fff72134:	80 01 00 ac 	lwz     r0,172(r1)
fff72138:	17 81 00 98 	lvd     d28,152(r1)
fff7213c:	7c 08 03 a6 	mtlr    r0
fff72140:	17 c1 00 a0 	lvd     d30,160(r1)
fff72144:	38 21 00 a8 	addi    r1,r1,168
fff72148:	4e 80 00 20 	blr

fff7214c <_Z15bn_modmul_orderPmPKm>:


void bn_modmul_order (bn_t *a, const bn_t *b)
{
fff7214c:	94 21 ff 60 	stwu    r1,-160(r1)
fff72150:	7c 08 02 a6 	mflr    r0
fff72154:	1b c1 00 98 	stvd    d30,152(r1)
fff72158:	7c 7f 1b 78 	mr      r31,r3
fff7215c:	7c 85 23 78 	mr      r5,r4
    bn_t prod[ NWORDS+NWORDS ];

    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    bn_mul(prod, a, b);
fff72160:	38 61 00 08 	addi    r3,r1,8
fff72164:	7f e4 fb 78 	mr      r4,r31
    EC_ASSERT(bn_cmp(r, consts_p()->ec_order) < 0);
}


void bn_modmul_order (bn_t *a, const bn_t *b)
{
fff72168:	90 01 00 a4 	stw     r0,164(r1)
    bn_t prod[ NWORDS+NWORDS ];

    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);

    bn_mul(prod, a, b);
fff7216c:	4b ff fb 75 	bl      fff71ce0 <_Z6bn_mulPmPKmS1_>
    bn_modred_p521_order(a, prod);
fff72170:	7f e3 fb 78 	mr      r3,r31
fff72174:	38 81 00 08 	addi    r4,r1,8
fff72178:	4b ff fe f9 	bl      fff72070 <_Z20bn_modred_p521_orderPmPKm>
}
fff7217c:	80 01 00 a4 	lwz     r0,164(r1)
fff72180:	17 c1 00 98 	lvd     d30,152(r1)
fff72184:	7c 08 03 a6 	mtlr    r0
fff72188:	38 21 00 a0 	addi    r1,r1,160
fff7218c:	4e 80 00 20 	blr

fff72190 <_Z9bn_modaddPmPKm>:

// a,b < prime
// never with order as base
//
void bn_modadd (bn_t *a, const bn_t *b)
{
fff72190:	94 21 ff f0 	stwu    r1,-16(r1)
fff72194:	7c 08 02 a6 	mflr    r0
fff72198:	1b c1 00 08 	stvd    d30,8(r1)

    bn_add(a, b);         // P521: can not generate carry (unused MSW bits)
                          //       other curves need to handle this carry

#ifndef EC_POWER64_RED
    if (bn_ge_prime(a))
fff7219c:	3f e0 ff f7 	lis     r31,-9

// a,b < prime
// never with order as base
//
void bn_modadd (bn_t *a, const bn_t *b)
{
fff721a0:	7c 7e 1b 78 	mr      r30,r3

    bn_add(a, b);         // P521: can not generate carry (unused MSW bits)
                          //       other curves need to handle this carry

#ifndef EC_POWER64_RED
    if (bn_ge_prime(a))
fff721a4:	3b ff 33 58 	addi    r31,r31,13144

// a,b < prime
// never with order as base
//
void bn_modadd (bn_t *a, const bn_t *b)
{
fff721a8:	90 01 00 14 	stw     r0,20(r1)
    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);
    //EC_ASSERT(!bn_ge_prime(a));
    //EC_ASSERT(!bn_ge_prime(b));

    bn_add(a, b);         // P521: can not generate carry (unused MSW bits)
fff721ac:	4b ff fc f1 	bl      fff71e9c <_Z6bn_addPmPKm>
                          //       other curves need to handle this carry

#ifndef EC_POWER64_RED
    if (bn_ge_prime(a))
fff721b0:	7f c3 f3 78 	mr      r3,r30
fff721b4:	7f e4 fb 78 	mr      r4,r31
fff721b8:	4b ff fc 6d 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff721bc:	06 83 00 10 	bwltz   r3,fff721dc <_Z9bn_modaddPmPKm+0x4c>
    {
        bn_sub(a, consts_p()->ec_prime);
    }
#endif
}
fff721c0:	80 01 00 14 	lwz     r0,20(r1)
                          //       other curves need to handle this carry

#ifndef EC_POWER64_RED
    if (bn_ge_prime(a))
    {
        bn_sub(a, consts_p()->ec_prime);
fff721c4:	7f c3 f3 78 	mr      r3,r30
    }
#endif
}
fff721c8:	7c 08 03 a6 	mtlr    r0
                          //       other curves need to handle this carry

#ifndef EC_POWER64_RED
    if (bn_ge_prime(a))
    {
        bn_sub(a, consts_p()->ec_prime);
fff721cc:	7f e4 fb 78 	mr      r4,r31
    }
#endif
}
fff721d0:	17 c1 00 08 	lvd     d30,8(r1)
fff721d4:	38 21 00 10 	addi    r1,r1,16
                          //       other curves need to handle this carry

#ifndef EC_POWER64_RED
    if (bn_ge_prime(a))
    {
        bn_sub(a, consts_p()->ec_prime);
fff721d8:	4b ff fd 20 	b       fff71ef8 <_Z6bn_subPmPKm>
    }
#endif
}
fff721dc:	80 01 00 14 	lwz     r0,20(r1)
fff721e0:	17 c1 00 08 	lvd     d30,8(r1)
fff721e4:	7c 08 03 a6 	mtlr    r0
fff721e8:	38 21 00 10 	addi    r1,r1,16
fff721ec:	4e 80 00 20 	blr

fff721f0 <_Z9bn_modsubPmPKm>:

// never modular-subtracting with ec_order[], only with ec_prime[]
// therefore, implicit modulus
//
void bn_modsub (bn_t *a, const bn_t *b)
{
fff721f0:	94 21 ff f0 	stwu    r1,-16(r1)
fff721f4:	7c 08 02 a6 	mflr    r0
fff721f8:	1b c1 00 08 	stvd    d30,8(r1)
fff721fc:	90 01 00 14 	stw     r0,20(r1)
fff72200:	7c 7f 1b 78 	mr      r31,r3
    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != b);
    EC_ASSERT(!bn_ge_prime(b));

    if (bn_sub(a, b))
fff72204:	4b ff fc f5 	bl      fff71ef8 <_Z6bn_subPmPKm>
fff72208:	06 c3 00 12 	bwz     r3,fff7222c <_Z9bn_modsubPmPKm+0x3c>
    {
        bn_add(a, consts_p()->ec_prime);
    }
}
fff7220c:	80 01 00 14 	lwz     r0,20(r1)
    EC_ASSERT(NULL != b);
    EC_ASSERT(!bn_ge_prime(b));

    if (bn_sub(a, b))
    {
        bn_add(a, consts_p()->ec_prime);
fff72210:	7f e3 fb 78 	mr      r3,r31
    }
}
fff72214:	7c 08 03 a6 	mtlr    r0
fff72218:	17 c1 00 08 	lvd     d30,8(r1)
    EC_ASSERT(NULL != b);
    EC_ASSERT(!bn_ge_prime(b));

    if (bn_sub(a, b))
    {
        bn_add(a, consts_p()->ec_prime);
fff7221c:	3c 80 ff f7 	lis     r4,-9
fff72220:	38 84 33 58 	addi    r4,r4,13144
    }
}
fff72224:	38 21 00 10 	addi    r1,r1,16
    EC_ASSERT(NULL != b);
    EC_ASSERT(!bn_ge_prime(b));

    if (bn_sub(a, b))
    {
        bn_add(a, consts_p()->ec_prime);
fff72228:	4b ff fc 74 	b       fff71e9c <_Z6bn_addPmPKm>
    }
}
fff7222c:	80 01 00 14 	lwz     r0,20(r1)
fff72230:	17 c1 00 08 	lvd     d30,8(r1)
fff72234:	7c 08 03 a6 	mtlr    r0
fff72238:	38 21 00 10 	addi    r1,r1,16
fff7223c:	4e 80 00 20 	blr

fff72240 <_Z8bn_shl_nPmjj>:

// only rn LS words are touched
//
void bn_shl_n (bn_t r[NWORDS], unsigned int rn, unsigned int bits)
{
fff72240:	94 21 ff e0 	stwu    r1,-32(r1)
    EC_DEVASSERT(NULL != r);
    EC_ASSERT(rn <= NWORDS);

    r += NWORDS-rn;

    if (bits >= BN_BITS) // unlikely, most modinv shift is <5 bits
fff72244:	28 05 00 1f 	cmplwi  r5,31
}

// only rn LS words are touched
//
void bn_shl_n (bn_t r[NWORDS], unsigned int rn, unsigned int bits)
{
fff72248:	1b c1 00 18 	stvd    d30,24(r1)
fff7224c:	7c 08 02 a6 	mflr    r0
    bn_t cf = 0, cfin;

    EC_DEVASSERT(NULL != r);
    EC_ASSERT(rn <= NWORDS);

    r += NWORDS-rn;
fff72250:	23 e4 00 11 	subfic  r31,r4,17
fff72254:	57 ff 10 3a 	rlwinm  r31,r31,2,0,29
}

// only rn LS words are touched
//
void bn_shl_n (bn_t r[NWORDS], unsigned int rn, unsigned int bits)
{
fff72258:	1b 81 00 10 	stvd    d28,16(r1)
fff7225c:	90 01 00 24 	stw     r0,36(r1)
fff72260:	7c 9e 23 78 	mr      r30,r4
fff72264:	7c bd 2b 78 	mr      r29,r5
    bn_t cf = 0, cfin;

    EC_DEVASSERT(NULL != r);
    EC_ASSERT(rn <= NWORDS);

    r += NWORDS-rn;
fff72268:	7f e3 fa 14 	add     r31,r3,r31

    if (bits >= BN_BITS) // unlikely, most modinv shift is <5 bits
fff7226c:	40 a1 00 40 	ble     fff722ac <_Z8bn_shl_nPmjj+0x6c>
    {
        cfin = bits / BN_BITS;    // whole words
fff72270:	54 bc d9 7e 	rlwinm  r28,r5,27,5,31

        memmove(r, r+cfin, (NWORDS-cfin)*sizeof(bn_t));
fff72274:	57 89 10 3a 	rlwinm  r9,r28,2,0,29
fff72278:	23 9c 00 11 	subfic  r28,r28,17
fff7227c:	57 9c 10 3a 	rlwinm  r28,r28,2,0,29
fff72280:	7c 9f 4a 14 	add     r4,r31,r9
fff72284:	7f 85 e3 78 	mr      r5,r28
fff72288:	7f e3 fb 78 	mr      r3,r31
fff7228c:	91 21 00 08 	stw     r9,8(r1)
fff72290:	48 00 81 7d 	bl      fff7a40c <memmove>
#ifndef BN_POWER64_CLR
        memset(r+NWORDS-cfin, 0, cfin*sizeof(bn_t));
fff72294:	81 21 00 08 	lwz     r9,8(r1)
fff72298:	7c 7f e2 14 	add     r3,r31,r28
fff7229c:	38 80 00 00 	li      r4,0
fff722a0:	7d 25 4b 78 	mr      r5,r9
fff722a4:	48 00 80 41 	bl      fff7a2e4 <memset>
#else
        bn_clr(r+NWORDS-cfin, cfin);
#endif

        bits %= BN_BITS;
fff722a8:	57 bd 06 fe 	clrlwi  r29,r29,27
    }

    if (bits)
fff722ac:	06 dd 00 1c 	bwz     r29,fff722e4 <_Z8bn_shl_nPmjj+0xa4>
fff722b0:	57 c9 10 3a 	rlwinm  r9,r30,2,0,29
    {
        r += rn-1;
        while (0<rn--)
        {
            cfin = cf;
            cf = (*r >> (BN_BITS - bits));
fff722b4:	3b de 00 01 	addi    r30,r30,1
fff722b8:	7f c9 03 a6 	mtctr   r30
fff722bc:	7f ff 4a 14 	add     r31,r31,r9

// only rn LS words are touched
//
void bn_shl_n (bn_t r[NWORDS], unsigned int rn, unsigned int bits)
{
    bn_t cf = 0, cfin;
fff722c0:	39 40 00 00 	li      r10,0
    {
        r += rn-1;
        while (0<rn--)
        {
            cfin = cf;
            cf = (*r >> (BN_BITS - bits));
fff722c4:	20 fd 00 20 	subfic  r7,r29,32
    }

    if (bits)
    {
        r += rn-1;
        while (0<rn--)
fff722c8:	42 40 00 1c 	bdz     fff722e4 <_Z8bn_shl_nPmjj+0xa4>
        {
            cfin = cf;
            cf = (*r >> (BN_BITS - bits));
fff722cc:	85 1f ff fc 	lwzu    r8,-4(r31)
            *r <<= bits;
fff722d0:	7d 09 e8 30 	slw     r9,r8,r29
            *r |=  cfin;
fff722d4:	7d 49 4b 78 	or      r9,r10,r9
fff722d8:	91 3f 00 00 	stw     r9,0(r31)
    {
        r += rn-1;
        while (0<rn--)
        {
            cfin = cf;
            cf = (*r >> (BN_BITS - bits));
fff722dc:	7d 0a 3c 30 	srw     r10,r8,r7
fff722e0:	4b ff ff e8 	b       fff722c8 <_Z8bn_shl_nPmjj+0x88>
            *r <<= bits;
            *r |=  cfin;
            --r;
        }
    }
}
fff722e4:	80 01 00 24 	lwz     r0,36(r1)
fff722e8:	17 81 00 10 	lvd     d28,16(r1)
fff722ec:	7c 08 03 a6 	mtlr    r0
fff722f0:	17 c1 00 18 	lvd     d30,24(r1)
fff722f4:	38 21 00 20 	addi    r1,r1,32
fff722f8:	4e 80 00 20 	blr

fff722fc <_Z7bn_bitsPKm>:

unsigned int bn_bits (const bn_t *a)
{
    unsigned int full = 8*BNBYTES;
fff722fc:	39 20 00 11 	li      r9,17
fff72300:	7d 29 03 a6 	mtctr   r9
fff72304:	39 43 ff fc 	addi    r10,r3,-4
fff72308:	38 60 02 20 	li      r3,544
    bn_t an;

    for (i=0; i<NWORDS; ++i)
    {
        full -= BN_BITS;
        an = a[i];
fff7230c:	85 2a 00 04 	lwzu    r9,4(r10)
    bnindex_t i;
    bn_t an;

    for (i=0; i<NWORDS; ++i)
    {
        full -= BN_BITS;
fff72310:	38 63 ff e0 	addi    r3,r3,-32
        an = a[i];

        if (!an)
fff72314:	06 c9 00 14 	bwz     r9,fff7233c <_Z7bn_bitsPKm+0x40>
        {
            continue;
        }

        while (an > 0xff)
fff72318:	28 09 00 ff 	cmplwi  r9,255
fff7231c:	40 81 00 10 	ble     fff7232c <_Z7bn_bitsPKm+0x30>
        {
            full += 8;
fff72320:	38 63 00 08 	addi    r3,r3,8
            an >>= 8;
fff72324:	55 29 c2 3e 	rlwinm  r9,r9,24,8,31
fff72328:	4b ff ff f0 	b       fff72318 <_Z7bn_bitsPKm+0x1c>
        }

        while (an)
        {
            ++full;
            an >>= 1;
fff7232c:	55 29 f8 7e 	rlwinm  r9,r9,31,1,31
            an >>= 8;
        }

        while (an)
        {
            ++full;
fff72330:	38 63 00 01 	addi    r3,r3,1
        {
            full += 8;
            an >>= 8;
        }

        while (an)
fff72334:	06 49 07 fc 	bwnz    r9,fff7232c <_Z7bn_bitsPKm+0x30>
fff72338:	4e 80 00 20 	blr
fff7233c:	42 00 ff d0 	bdnz    fff7230c <_Z7bn_bitsPKm+0x10>
            ++full;
            an >>= 1;
        }
        return full;
    }
    return 0;
fff72340:	38 60 00 00 	li      r3,0
}
fff72344:	4e 80 00 20 	blr

fff72348 <_Z9bn_modinvPmPKmS1_>:
#define  bn_is_negative(p)  (0x1000 & (*(p)))

// inv stores S during run
//
int bn_modinv(bn_t *inv, const bn_t *a, const bn_t *n)
{
fff72348:	94 21 fe 38 	stwu    r1,-456(r1)
fff7234c:	7c 08 02 a6 	mflr    r0
fff72350:	1b c1 01 c0 	stvd    d30,448(r1)
fff72354:	90 61 01 b0 	stw     r3,432(r1)
fff72358:	7c 9f 23 78 	mr      r31,r4
fff7235c:	90 a1 01 ac 	stw     r5,428(r1)
    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != n);
    EC_ASSERT(bn_cmp(a,n) < 0);
    EC_ASSERT(!bn_is_zero(a,0));

    bn_clear(r);
fff72360:	38 80 00 00 	li      r4,0
fff72364:	38 a0 00 44 	li      r5,68
fff72368:	38 61 01 5c 	addi    r3,r1,348
#define  bn_is_negative(p)  (0x1000 & (*(p)))

// inv stores S during run
//
int bn_modinv(bn_t *inv, const bn_t *a, const bn_t *n)
{
fff7236c:	90 01 01 cc 	stw     r0,460(r1)
fff72370:	1b 81 01 b8 	stvd    d28,440(r1)
    EC_ASSERT(NULL != a);
    EC_ASSERT(NULL != n);
    EC_ASSERT(bn_cmp(a,n) < 0);
    EC_ASSERT(!bn_is_zero(a,0));

    bn_clear(r);
fff72374:	48 00 7f 71 	bl      fff7a2e4 <memset>
    bn_clear(s);
fff72378:	38 a0 00 44 	li      r5,68
fff7237c:	38 80 00 00 	li      r4,0
fff72380:	38 61 01 18 	addi    r3,r1,280
fff72384:	48 00 7f 61 	bl      fff7a2e4 <memset>
    BN_LSW(s) = 1;

    BN_COPY(u, n);
fff72388:	80 81 01 ac 	lwz     r4,428(r1)
    EC_ASSERT(bn_cmp(a,n) < 0);
    EC_ASSERT(!bn_is_zero(a,0));

    bn_clear(r);
    bn_clear(s);
    BN_LSW(s) = 1;
fff7238c:	39 20 00 01 	li      r9,1

    BN_COPY(u, n);
fff72390:	38 61 00 d4 	addi    r3,r1,212
    EC_ASSERT(bn_cmp(a,n) < 0);
    EC_ASSERT(!bn_is_zero(a,0));

    bn_clear(r);
    bn_clear(s);
    BN_LSW(s) = 1;
fff72394:	91 21 01 58 	stw     r9,344(r1)

    BN_COPY(u, n);
fff72398:	4b ff f8 91 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(v, a);
fff7239c:	7f e4 fb 78 	mr      r4,r31
fff723a0:	38 61 00 90 	addi    r3,r1,144
fff723a4:	4b ff f8 85 	bl      fff71c28 <_Z7BN_COPYPmPKm>

    // ub = bn_bits(u);
    ub = EC_PRIMEBITS;    // P521: only ec_prime or ec_order possible
    vb = bn_bits(v);
fff723a8:	38 61 00 90 	addi    r3,r1,144
fff723ac:	4b ff ff 51 	bl      fff722fc <_Z7bn_bitsPKm>
{

    bn_t r[ NWORDS ], s[ NWORDS ],  u[ NWORDS ], v[ NWORDS ],
                     ss[ NWORDS ], vs[ NWORDS ];   // shifted S,V
    unsigned int shl, ub, vb;                      // shift amount; bitcount
    bn_t *pr = r, *ps = s, *pu = u, *pv = v, *pt;
fff723b0:	39 21 01 5c 	addi    r9,r1,348
fff723b4:	91 21 01 a8 	stw     r9,424(r1)
    BN_COPY(u, n);
    BN_COPY(v, a);

    // ub = bn_bits(u);
    ub = EC_PRIMEBITS;    // P521: only ec_prime or ec_order possible
    vb = bn_bits(v);
fff723b8:	7c 7d 1b 78 	mr      r29,r3
{

    bn_t r[ NWORDS ], s[ NWORDS ],  u[ NWORDS ], v[ NWORDS ],
                     ss[ NWORDS ], vs[ NWORDS ];   // shifted S,V
    unsigned int shl, ub, vb;                      // shift amount; bitcount
    bn_t *pr = r, *ps = s, *pu = u, *pv = v, *pt;
fff723bc:	3b 81 00 90 	addi    r28,r1,144
fff723c0:	3b c1 00 d4 	addi    r30,r1,212
fff723c4:	3b e1 01 18 	addi    r31,r1,280

    BN_COPY(u, n);
    BN_COPY(v, a);

    // ub = bn_bits(u);
    ub = EC_PRIMEBITS;    // P521: only ec_prime or ec_order possible
fff723c8:	38 60 02 09 	li      r3,521
    vb = bn_bits(v);

    while (1 < vb)
fff723cc:	28 1d 00 01 	cmplwi  r29,1
fff723d0:	40 81 00 e8 	ble     fff724b8 <_Z9bn_modinvPmPKmS1_+0x170>
    {
        EC_ASSERT(ub >= vb);
        shl = ub-vb;
fff723d4:	7d 3d 18 50 	subf    r9,r29,r3

        BN_COPY(vs, pv);
fff723d8:	7f 84 e3 78 	mr      r4,r28
fff723dc:	38 61 00 08 	addi    r3,r1,8
fff723e0:	91 21 01 b4 	stw     r9,436(r1)
fff723e4:	4b ff f8 45 	bl      fff71c28 <_Z7BN_COPYPmPKm>
        BN_COPY(ss, ps);
fff723e8:	38 61 00 4c 	addi    r3,r1,76
fff723ec:	7f e4 fb 78 	mr      r4,r31
fff723f0:	4b ff f8 39 	bl      fff71c28 <_Z7BN_COPYPmPKm>
        if (shl)
fff723f4:	81 21 01 b4 	lwz     r9,436(r1)
fff723f8:	06 c9 00 14 	bwz     r9,fff72420 <_Z9bn_modinvPmPKmS1_+0xd8>
        {
            bn_shl_n(vs, NWORDS, shl);
fff723fc:	7d 25 4b 78 	mr      r5,r9
fff72400:	38 61 00 08 	addi    r3,r1,8
fff72404:	38 80 00 11 	li      r4,17
fff72408:	4b ff fe 39 	bl      fff72240 <_Z8bn_shl_nPmjj>
            bn_shl_n(ss, NWORDS, shl);
fff7240c:	81 21 01 b4 	lwz     r9,436(r1)
fff72410:	38 61 00 4c 	addi    r3,r1,76
fff72414:	38 80 00 11 	li      r4,17
fff72418:	7d 25 4b 78 	mr      r5,r9
fff7241c:	4b ff fe 25 	bl      fff72240 <_Z8bn_shl_nPmjj>
        }

        if (bn_is_negative(pv) == bn_is_negative(pu))
fff72420:	81 5e 00 00 	lwz     r10,0(r30)
fff72424:	81 3c 00 00 	lwz     r9,0(r28)
        {
            bn_sub(pu, vs);
fff72428:	7f c3 f3 78 	mr      r3,r30
        {
            bn_shl_n(vs, NWORDS, shl);
            bn_shl_n(ss, NWORDS, shl);
        }

        if (bn_is_negative(pv) == bn_is_negative(pu))
fff7242c:	7d 49 4a 78 	xor     r9,r10,r9
        {
            bn_sub(pu, vs);
fff72430:	38 81 00 08 	addi    r4,r1,8
        {
            bn_shl_n(vs, NWORDS, shl);
            bn_shl_n(ss, NWORDS, shl);
        }

        if (bn_is_negative(pv) == bn_is_negative(pu))
fff72434:	07 09 98 0c 	bb1wi   r9,19,fff7244c <_Z9bn_modinvPmPKmS1_+0x104>
        {
            bn_sub(pu, vs);
fff72438:	4b ff fa c1 	bl      fff71ef8 <_Z6bn_subPmPKm>
            bn_sub(pr, ss);
fff7243c:	80 61 01 a8 	lwz     r3,424(r1)
fff72440:	38 81 00 4c 	addi    r4,r1,76
fff72444:	4b ff fa b5 	bl      fff71ef8 <_Z6bn_subPmPKm>
fff72448:	48 00 00 14 	b       fff7245c <_Z9bn_modinvPmPKmS1_+0x114>
        }
        else
        {
            bn_add(pu, vs);
fff7244c:	4b ff fa 51 	bl      fff71e9c <_Z6bn_addPmPKm>
            bn_add(pr, ss);
fff72450:	80 61 01 a8 	lwz     r3,424(r1)
fff72454:	38 81 00 4c 	addi    r4,r1,76
fff72458:	4b ff fa 45 	bl      fff71e9c <_Z6bn_addPmPKm>
        }

        if (bn_is_negative(pu))
fff7245c:	81 3e 00 00 	lwz     r9,0(r30)
            bn_sub(ss, pu);
            ub = bn_bits(ss);
        }
        else
        {
            ub = bn_bits(pu);
fff72460:	7f c3 f3 78 	mr      r3,r30
        {
            bn_add(pu, vs);
            bn_add(pr, ss);
        }

        if (bn_is_negative(pu))
fff72464:	07 89 98 12 	bb0wi   r9,19,fff72488 <_Z9bn_modinvPmPKmS1_+0x140>
        {
            bn_clear(ss);
fff72468:	38 80 00 00 	li      r4,0
fff7246c:	38 a0 00 44 	li      r5,68
fff72470:	38 61 00 4c 	addi    r3,r1,76
fff72474:	48 00 7e 71 	bl      fff7a2e4 <memset>
            bn_sub(ss, pu);
fff72478:	38 61 00 4c 	addi    r3,r1,76
fff7247c:	7f c4 f3 78 	mr      r4,r30
fff72480:	4b ff fa 79 	bl      fff71ef8 <_Z6bn_subPmPKm>
            ub = bn_bits(ss);
fff72484:	38 61 00 4c 	addi    r3,r1,76
        }
        else
        {
            ub = bn_bits(pu);
fff72488:	4b ff fe 75 	bl      fff722fc <_Z7bn_bitsPKm>
        }

        if (ub < vb)
fff7248c:	05 03 ef a0 	cmplwbge r3,r29,fff723cc <_Z9bn_modinvPmPKmS1_+0x84>
fff72490:	7f c9 f3 78 	mr      r9,r30
fff72494:	7f 9e e3 78 	mr      r30,r28
fff72498:	7d 3c 4b 78 	mr      r28,r9
fff7249c:	81 21 01 a8 	lwz     r9,424(r1)
fff724a0:	93 e1 01 a8 	stw     r31,424(r1)
            pt = pu;
            pu = pv;
            pv = pt;

            pt = ps;
            ps = pr;
fff724a4:	7d 3f 4b 78 	mr      r31,r9
        else
        {
            ub = bn_bits(pu);
        }

        if (ub < vb)
fff724a8:	7c 69 1b 78 	mr      r9,r3
fff724ac:	7f a3 eb 78 	mr      r3,r29
fff724b0:	7d 3d 4b 78 	mr      r29,r9
fff724b4:	4b ff ff 18 	b       fff723cc <_Z9bn_modinvPmPKmS1_+0x84>
            ps = pr;
            pr = pt;
        }
    }

    if (bn_is_negative(pv))
fff724b8:	81 3c 00 00 	lwz     r9,0(r28)
fff724bc:	07 89 98 16 	bb0wi   r9,19,fff724e8 <_Z9bn_modinvPmPKmS1_+0x1a0>
    {
        BN_COPY(ss, ps);
fff724c0:	38 61 00 4c 	addi    r3,r1,76
fff724c4:	7f e4 fb 78 	mr      r4,r31
fff724c8:	4b ff f7 61 	bl      fff71c28 <_Z7BN_COPYPmPKm>
        bn_clear(ps);
fff724cc:	38 80 00 00 	li      r4,0
fff724d0:	7f e3 fb 78 	mr      r3,r31
fff724d4:	38 a0 00 44 	li      r5,68
fff724d8:	48 00 7e 0d 	bl      fff7a2e4 <memset>
        bn_sub(ps, ss);
fff724dc:	7f e3 fb 78 	mr      r3,r31
fff724e0:	38 81 00 4c 	addi    r4,r1,76
fff724e4:	4b ff fa 15 	bl      fff71ef8 <_Z6bn_subPmPKm>
    }

    if (bn_is_negative(ps))
fff724e8:	81 3f 00 00 	lwz     r9,0(r31)
fff724ec:	07 89 98 08 	bb0wi   r9,19,fff724fc <_Z9bn_modinvPmPKmS1_+0x1b4>
    {
        bn_add(ps, n);
fff724f0:	80 81 01 ac 	lwz     r4,428(r1)
fff724f4:	7f e3 fb 78 	mr      r3,r31
fff724f8:	4b ff f9 a5 	bl      fff71e9c <_Z6bn_addPmPKm>
    }

    if (bn_cmp(ps, n) >= 0)
fff724fc:	80 81 01 ac 	lwz     r4,428(r1)
fff72500:	7f e3 fb 78 	mr      r3,r31
fff72504:	4b ff f9 21 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff72508:	06 83 00 08 	bwltz   r3,fff72518 <_Z9bn_modinvPmPKmS1_+0x1d0>
    {
        bn_sub(ps, n);
fff7250c:	80 81 01 ac 	lwz     r4,428(r1)
fff72510:	7f e3 fb 78 	mr      r3,r31
fff72514:	4b ff f9 e5 	bl      fff71ef8 <_Z6bn_subPmPKm>
    }

    BN_COPY(inv, ps);
fff72518:	80 61 01 b0 	lwz     r3,432(r1)
fff7251c:	7f e4 fb 78 	mr      r4,r31
fff72520:	4b ff f7 09 	bl      fff71c28 <_Z7BN_COPYPmPKm>

    return 1;
}
fff72524:	80 01 01 cc 	lwz     r0,460(r1)
fff72528:	17 81 01 b8 	lvd     d28,440(r1)
fff7252c:	7c 08 03 a6 	mtlr    r0
fff72530:	17 c1 01 c0 	lvd     d30,448(r1)
fff72534:	38 60 00 01 	li      r3,1
fff72538:	38 21 01 c8 	addi    r1,r1,456
fff7253c:	4e 80 00 20 	blr

fff72540 <_Z7bn_readPmPKhj>:
}

#else

void bn_read(bn_t *r, const unsigned char *data, size_t dlen)
{
fff72540:	94 21 ff e0 	stwu    r1,-32(r1)
fff72544:	7c 08 02 a6 	mflr    r0
fff72548:	1b c1 00 18 	stvd    d30,24(r1)
    bnindex_t i, whole = dlen / sizeof(bn_t),
                   rem = dlen % sizeof(bn_t);
fff7254c:	54 be 07 be 	clrlwi  r30,r5,30

    EC_ASSERT(NULL != r);
    EC_ASSERT(NULL != data);
    EC_ASSERT(dlen <= EC_PRIMEBYTES);

    acc = whole + (!!rem);
fff72550:	7f fe 00 d0 	neg     r31,r30
fff72554:	7f df f8 38 	and     r31,r30,r31
fff72558:	7f ff 00 34 	cntlzw  r31,r31
fff7255c:	3b ff ff e0 	addi    r31,r31,-32
}

#else

void bn_read(bn_t *r, const unsigned char *data, size_t dlen)
{
fff72560:	1b 81 00 10 	stvd    d28,16(r1)

    EC_ASSERT(NULL != r);
    EC_ASSERT(NULL != data);
    EC_ASSERT(dlen <= EC_PRIMEBYTES);

    acc = whole + (!!rem);
fff72564:	57 ff 0f fe 	rlwinm  r31,r31,1,31,31

#else

void bn_read(bn_t *r, const unsigned char *data, size_t dlen)
{
    bnindex_t i, whole = dlen / sizeof(bn_t),
fff72568:	54 bc f0 be 	rlwinm  r28,r5,30,2,31

    EC_ASSERT(NULL != r);
    EC_ASSERT(NULL != data);
    EC_ASSERT(dlen <= EC_PRIMEBYTES);

    acc = whole + (!!rem);
fff7256c:	7f bf e2 14 	add     r29,r31,r28
    if (acc < NWORDS) // unused MS words
fff72570:	28 1d 00 10 	cmplwi  r29,16
}

#else

void bn_read(bn_t *r, const unsigned char *data, size_t dlen)
{
fff72574:	90 01 00 24 	stw     r0,36(r1)
fff72578:	7c 69 1b 78 	mr      r9,r3
fff7257c:	7c 8a 23 78 	mr      r10,r4
    EC_ASSERT(NULL != r);
    EC_ASSERT(NULL != data);
    EC_ASSERT(dlen <= EC_PRIMEBYTES);

    acc = whole + (!!rem);
    if (acc < NWORDS) // unused MS words
fff72580:	41 a1 00 28 	bgt     fff725a8 <_Z7bn_readPmPKhj+0x68>
    {
        acc = NWORDS - acc;
fff72584:	23 bd 00 11 	subfic  r29,r29,17
#ifndef BN_POWER64_CLR
        memset(r, 0, acc*sizeof(bn_t));
fff72588:	57 bd 10 3a 	rlwinm  r29,r29,2,0,29
fff7258c:	38 80 00 00 	li      r4,0
fff72590:	7f a5 eb 78 	mr      r5,r29
fff72594:	91 41 00 0c 	stw     r10,12(r1)
fff72598:	90 61 00 08 	stw     r3,8(r1)
fff7259c:	48 00 7d 49 	bl      fff7a2e4 <memset>
#else
        bn_clr(r, acc);
#endif
        r += acc;
fff725a0:	15 21 00 08 	lvd     d9,8(r1)
fff725a4:	7d 29 ea 14 	add     r9,r9,r29
    }

    acc = 0;
    if (rem)
fff725a8:	06 df 00 06 	bwz     r31,fff725b4 <_Z7bn_readPmPKhj+0x74>
    {
        ++whole;
fff725ac:	3b 9c 00 01 	addi    r28,r28,1
fff725b0:	48 00 00 08 	b       fff725b8 <_Z7bn_readPmPKhj+0x78>
    }
    else
    {
        rem = sizeof(bn_t);
fff725b4:	3b c0 00 04 	li      r30,4
fff725b8:	39 29 ff fc 	addi    r9,r9,-4
    }

    while (0 < whole--)
fff725bc:	2c 1c 00 00 	cmpwi   r28,0
fff725c0:	3b 9c ff ff 	addi    r28,r28,-1
fff725c4:	41 82 00 34 	beq     fff725f8 <_Z7bn_readPmPKhj+0xb8>
fff725c8:	7f c9 03 a6 	mtctr   r30
fff725cc:	39 00 00 00 	li      r8,0
fff725d0:	38 e0 00 00 	li      r7,0
    {
        for (i=0; i<rem; ++i)
        {
            acc = (acc <<8) + *(data++);
fff725d4:	7c ca 38 ae 	lbzx    r6,r10,r7
fff725d8:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
fff725dc:	7d 06 42 14 	add     r8,r6,r8
        rem = sizeof(bn_t);
    }

    while (0 < whole--)
    {
        for (i=0; i<rem; ++i)
fff725e0:	38 e7 00 01 	addi    r7,r7,1
fff725e4:	42 00 ff f0 	bdnz    fff725d4 <_Z7bn_readPmPKhj+0x94>
fff725e8:	7d 4a f2 14 	add     r10,r10,r30
        {
            acc = (acc <<8) + *(data++);
        }
        *(r++) = acc;
fff725ec:	95 09 00 04 	stwu    r8,4(r9)
        acc = 0;
        rem = sizeof(bn_t);
fff725f0:	3b c0 00 04 	li      r30,4
fff725f4:	4b ff ff c8 	b       fff725bc <_Z7bn_readPmPKhj+0x7c>
    }
}
fff725f8:	80 01 00 24 	lwz     r0,36(r1)
fff725fc:	17 81 00 10 	lvd     d28,16(r1)
fff72600:	7c 08 03 a6 	mtlr    r0
fff72604:	17 c1 00 18 	lvd     d30,24(r1)
fff72608:	38 21 00 20 	addi    r1,r1,32
fff7260c:	4e 80 00 20 	blr

fff72610 <_Z10bn_read_ptPmPKh>:

void bn_read_pt(bn_t *r, const unsigned char *data)
{
    return bn_read(r, data, EC_PRIMEBYTES);
fff72610:	38 a0 00 42 	li      r5,66
fff72614:	4b ff ff 2c 	b       fff72540 <_Z7bn_readPmPKhj>

fff72618 <_Z12bn_read_hashPmPKh>:
}

void bn_read_hash(bn_t *r, const unsigned char *data)
{
    return bn_read(r, data, EC_HASHBYTES);
fff72618:	38 a0 00 40 	li      r5,64
fff7261c:	4b ff ff 24 	b       fff72540 <_Z7bn_readPmPKhj>

fff72620 <_Z20ec_projective2affinePmS_PKm>:
#define  ec_set_infinity(p)  bn_clear(p)

// (x) is transformed back to affine from projective (X*Z)
//
void ec_projective2affine (bn_t *x, bn_t *y, const bn_t *z)
{
fff72620:	94 21 ff a0 	stwu    r1,-96(r1)
fff72624:	7c 08 02 a6 	mflr    r0
fff72628:	1b c1 00 58 	stvd    d30,88(r1)
fff7262c:	7c 9f 23 78 	mr      r31,r4

    EC_ASSERT(!bn_ge_prime(x));
    EC_ASSERT(!bn_ge_prime(y));
    EC_ASSERT(!bn_ge_prime(z));

    bn_modinv(zinv, z, consts_p()->ec_prime);
fff72630:	7c a4 2b 78 	mr      r4,r5
fff72634:	3c a0 ff f7 	lis     r5,-9
#define  ec_set_infinity(p)  bn_clear(p)

// (x) is transformed back to affine from projective (X*Z)
//
void ec_projective2affine (bn_t *x, bn_t *y, const bn_t *z)
{
fff72638:	7c 7e 1b 78 	mr      r30,r3

    EC_ASSERT(!bn_ge_prime(x));
    EC_ASSERT(!bn_ge_prime(y));
    EC_ASSERT(!bn_ge_prime(z));

    bn_modinv(zinv, z, consts_p()->ec_prime);
fff7263c:	38 a5 33 58 	addi    r5,r5,13144
fff72640:	38 61 00 08 	addi    r3,r1,8
#define  ec_set_infinity(p)  bn_clear(p)

// (x) is transformed back to affine from projective (X*Z)
//
void ec_projective2affine (bn_t *x, bn_t *y, const bn_t *z)
{
fff72644:	90 01 00 64 	stw     r0,100(r1)

    EC_ASSERT(!bn_ge_prime(x));
    EC_ASSERT(!bn_ge_prime(y));
    EC_ASSERT(!bn_ge_prime(z));

    bn_modinv(zinv, z, consts_p()->ec_prime);
fff72648:	4b ff fd 01 	bl      fff72348 <_Z9bn_modinvPmPKmS1_>
    bn_modmul_prime(x, zinv);
fff7264c:	7f c3 f3 78 	mr      r3,r30
fff72650:	38 81 00 08 	addi    r4,r1,8
fff72654:	4b ff f9 d9 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modmul_prime(y, zinv);  //Can be removed but we'll retain for future extensibility
fff72658:	7f e3 fb 78 	mr      r3,r31
fff7265c:	38 81 00 08 	addi    r4,r1,8
fff72660:	4b ff f9 cd 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

#ifdef EC_POWER64_RED
    bn_modred_slow(x);
#endif
}
fff72664:	80 01 00 64 	lwz     r0,100(r1)
fff72668:	17 c1 00 58 	lvd     d30,88(r1)
fff7266c:	7c 08 03 a6 	mtlr    r0
fff72670:	38 21 00 60 	addi    r1,r1,96
fff72674:	4e 80 00 20 	blr

fff72678 <_Z9ec_doublePmS_S_>:
// P521: curve has a==-3
//
// return 1 if point in infinity
//
int ec_double (bn_t *x, bn_t *y, bn_t *z)
{
fff72678:	94 21 fe d8 	stwu    r1,-296(r1)
fff7267c:	7c 08 02 a6 	mflr    r0
fff72680:	1b c1 01 20 	stvd    d30,288(r1)
fff72684:	7c 7f 1b 78 	mr      r31,r3
fff72688:	7c be 2b 78 	mr      r30,r5
fff7268c:	1b 81 01 18 	stvd    d28,280(r1)
#endif
    bn_modsub(a, y);
    BN_COPY(y, a);            // Y = A * (4*C - D) - 8 * y^2 * B^2

#else // !EC_POWER64_ALG
    BN_COPY(a, x);
fff72690:	38 61 00 d4 	addi    r3,r1,212
// P521: curve has a==-3
//
// return 1 if point in infinity
//
int ec_double (bn_t *x, bn_t *y, bn_t *z)
{
fff72694:	7c 9d 23 78 	mr      r29,r4
#endif
    bn_modsub(a, y);
    BN_COPY(y, a);            // Y = A * (4*C - D) - 8 * y^2 * B^2

#else // !EC_POWER64_ALG
    BN_COPY(a, x);
fff72698:	7f e4 fb 78 	mr      r4,r31
// P521: curve has a==-3
//
// return 1 if point in infinity
//
int ec_double (bn_t *x, bn_t *y, bn_t *z)
{
fff7269c:	90 01 01 2c 	stw     r0,300(r1)
#endif
    bn_modsub(a, y);
    BN_COPY(y, a);            // Y = A * (4*C - D) - 8 * y^2 * B^2

#else // !EC_POWER64_ALG
    BN_COPY(a, x);
fff726a0:	4b ff f5 89 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(d, z);
fff726a4:	38 61 00 08 	addi    r3,r1,8
fff726a8:	7f c4 f3 78 	mr      r4,r30
fff726ac:	4b ff f5 7d 	bl      fff71c28 <_Z7BN_COPYPmPKm>

    bn_modsub(a, z);
fff726b0:	38 61 00 d4 	addi    r3,r1,212
fff726b4:	7f c4 f3 78 	mr      r4,r30
fff726b8:	4b ff fb 39 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    bn_modadd(d, x);
fff726bc:	38 61 00 08 	addi    r3,r1,8
fff726c0:	7f e4 fb 78 	mr      r4,r31
fff726c4:	4b ff fa cd 	bl      fff72190 <_Z9bn_modaddPmPKm>
    bn_modmul_prime(a, d);
fff726c8:	38 61 00 d4 	addi    r3,r1,212
fff726cc:	38 81 00 08 	addi    r4,r1,8
fff726d0:	4b ff f9 5d 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    BN_COPY(d, a);
fff726d4:	38 61 00 08 	addi    r3,r1,8
fff726d8:	38 81 00 d4 	addi    r4,r1,212
fff726dc:	4b ff f5 4d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modadd(a, a);
fff726e0:	38 61 00 d4 	addi    r3,r1,212
fff726e4:	7c 64 1b 78 	mr      r4,r3
fff726e8:	4b ff fa a9 	bl      fff72190 <_Z9bn_modaddPmPKm>
    bn_modadd(a, d);          // w = 3*(X1-Z1)*(X1+Z1)
fff726ec:	38 61 00 d4 	addi    r3,r1,212
fff726f0:	38 81 00 08 	addi    r4,r1,8
fff726f4:	4b ff fa 9d 	bl      fff72190 <_Z9bn_modaddPmPKm>

    BN_COPY(b, z);
fff726f8:	38 61 00 90 	addi    r3,r1,144
fff726fc:	7f c4 f3 78 	mr      r4,r30
fff72700:	4b ff f5 29 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(b, y);
fff72704:	38 61 00 90 	addi    r3,r1,144
fff72708:	7f a4 eb 78 	mr      r4,r29
fff7270c:	4b ff f9 21 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modadd(b, b);          // s = 2*Y1*Z1
fff72710:	38 61 00 90 	addi    r3,r1,144
fff72714:	7c 64 1b 78 	mr      r4,r3
fff72718:	4b ff fa 79 	bl      fff72190 <_Z9bn_modaddPmPKm>

    BN_COPY(z, b);
fff7271c:	7f c3 f3 78 	mr      r3,r30
fff72720:	38 81 00 90 	addi    r4,r1,144
fff72724:	4b ff f5 05 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(z, z);    // ss = s*s
fff72728:	7f c3 f3 78 	mr      r3,r30
fff7272c:	7f c4 f3 78 	mr      r4,r30
fff72730:	4b ff f8 fd 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modmul_prime(z, b);    // Z3 = sss = s*ss
fff72734:	7f c3 f3 78 	mr      r3,r30
fff72738:	38 81 00 90 	addi    r4,r1,144
fff7273c:	4b ff f8 f1 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    BN_COPY(c, b);
fff72740:	38 61 00 4c 	addi    r3,r1,76
fff72744:	38 81 00 90 	addi    r4,r1,144
fff72748:	4b ff f4 e1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(c, y);    // R = Y1*s
fff7274c:	38 61 00 4c 	addi    r3,r1,76
fff72750:	7f a4 eb 78 	mr      r4,r29
fff72754:	4b ff f8 d9 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modmul_prime(x, c);
fff72758:	7f e3 fb 78 	mr      r3,r31
fff7275c:	38 81 00 4c 	addi    r4,r1,76
fff72760:	4b ff f8 cd 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modadd(x, x);          // B = 2*X1*R
fff72764:	7f e3 fb 78 	mr      r3,r31
fff72768:	7f e4 fb 78 	mr      r4,r31
fff7276c:	4b ff fa 25 	bl      fff72190 <_Z9bn_modaddPmPKm>
    bn_modmul_prime(c, c);    // RR = R*R
fff72770:	38 61 00 4c 	addi    r3,r1,76
fff72774:	7c 64 1b 78 	mr      r4,r3
fff72778:	4b ff f8 b5 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    BN_COPY(d, a);
fff7277c:	38 61 00 08 	addi    r3,r1,8
fff72780:	38 81 00 d4 	addi    r4,r1,212
fff72784:	4b ff f4 a5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(d, d);
fff72788:	38 61 00 08 	addi    r3,r1,8
fff7278c:	7c 64 1b 78 	mr      r4,r3
fff72790:	4b ff f8 9d 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modsub(d, x);
fff72794:	38 61 00 08 	addi    r3,r1,8
fff72798:	7f e4 fb 78 	mr      r4,r31
fff7279c:	4b ff fa 55 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    bn_modsub(d, x);          // h = w*w - 2*B
fff727a0:	38 61 00 08 	addi    r3,r1,8
fff727a4:	7f e4 fb 78 	mr      r4,r31
fff727a8:	4b ff fa 49 	bl      fff721f0 <_Z9bn_modsubPmPKm>

    bn_modsub(x, d);          // B - h
fff727ac:	7f e3 fb 78 	mr      r3,r31
fff727b0:	38 81 00 08 	addi    r4,r1,8
fff727b4:	4b ff fa 3d 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    bn_modmul_prime(a, x);    // w*(B-h)
fff727b8:	38 61 00 d4 	addi    r3,r1,212
fff727bc:	7f e4 fb 78 	mr      r4,r31
fff727c0:	4b ff f8 6d 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modsub(a, c);
fff727c4:	38 61 00 d4 	addi    r3,r1,212
fff727c8:	38 81 00 4c 	addi    r4,r1,76
fff727cc:	4b ff fa 25 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    bn_modsub(a, c);          // Y3 = w*(B-h) - 2*RR
fff727d0:	38 61 00 d4 	addi    r3,r1,212
fff727d4:	38 81 00 4c 	addi    r4,r1,76
fff727d8:	4b ff fa 19 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    BN_COPY(y, a);
fff727dc:	7f a3 eb 78 	mr      r3,r29
fff727e0:	38 81 00 d4 	addi    r4,r1,212
fff727e4:	4b ff f4 45 	bl      fff71c28 <_Z7BN_COPYPmPKm>

    BN_COPY(x, d);
fff727e8:	7f e3 fb 78 	mr      r3,r31
fff727ec:	38 81 00 08 	addi    r4,r1,8
fff727f0:	4b ff f4 39 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(x, b);    // X3 = h*s
fff727f4:	7f e3 fb 78 	mr      r3,r31
fff727f8:	38 81 00 90 	addi    r4,r1,144
fff727fc:	4b ff f8 31 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

#endif

    return 0;
}
fff72800:	80 01 01 2c 	lwz     r0,300(r1)
fff72804:	17 81 01 18 	lvd     d28,280(r1)
fff72808:	7c 08 03 a6 	mtlr    r0
fff7280c:	17 c1 01 20 	lvd     d30,288(r1)
fff72810:	38 60 00 00 	li      r3,0
fff72814:	38 21 01 28 	addi    r1,r1,296
fff72818:	4e 80 00 20 	blr

fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>:

// returns 1 if result is at infinity, 0 otherwise
//
int ec_add (bn_t *x1,       bn_t *y1,       bn_t *z1,
             const bn_t *x2, const bn_t *y2, const bn_t *z2)
{
fff7281c:	94 21 fe 78 	stwu    r1,-392(r1)
fff72820:	7c 08 02 a6 	mflr    r0
fff72824:	1b c1 01 80 	stvd    d30,384(r1)
fff72828:	7c 9f 23 78 	mr      r31,r4
    EC_ASSERT(!bn_ge_prime(z1));
    EC_ASSERT(!bn_ge_prime(x2));
    EC_ASSERT(!bn_ge_prime(y2));
    EC_ASSERT(!bn_ge_prime(z2));

    inf1 = ec_is_infinity(x1, y1, z1);
fff7282c:	38 80 00 00 	li      r4,0

// returns 1 if result is at infinity, 0 otherwise
//
int ec_add (bn_t *x1,       bn_t *y1,       bn_t *z1,
             const bn_t *x2, const bn_t *y2, const bn_t *z2)
{
fff72830:	1b 81 01 78 	stvd    d28,376(r1)
fff72834:	90 01 01 8c 	stw     r0,396(r1)
fff72838:	7c 7e 1b 78 	mr      r30,r3
fff7283c:	7c bd 2b 78 	mr      r29,r5
fff72840:	18 c1 01 68 	stvd    d6,360(r1)
fff72844:	7d 1c 43 78 	mr      r28,r8
    EC_ASSERT(!bn_ge_prime(z1));
    EC_ASSERT(!bn_ge_prime(x2));
    EC_ASSERT(!bn_ge_prime(y2));
    EC_ASSERT(!bn_ge_prime(z2));

    inf1 = ec_is_infinity(x1, y1, z1);
fff72848:	4b ff f6 1d 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
fff7284c:	39 20 00 00 	li      r9,0
fff72850:	06 c3 00 12 	bwz     r3,fff72874 <_Z6ec_addPmS_S_PKmS1_S1_+0x58>
fff72854:	7f e3 fb 78 	mr      r3,r31
fff72858:	38 80 00 00 	li      r4,0
fff7285c:	4b ff f6 09 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
fff72860:	7d 23 00 d0 	neg     r9,r3
fff72864:	7d 23 18 38 	and     r3,r9,r3
fff72868:	7c 69 00 34 	cntlzw  r9,r3
fff7286c:	39 29 ff e0 	addi    r9,r9,-32
fff72870:	55 29 0f fe 	rlwinm  r9,r9,1,31,31
    inf2 = ec_is_infinity(x2, y2, z2);
fff72874:	80 61 01 68 	lwz     r3,360(r1)
fff72878:	38 80 00 00 	li      r4,0
fff7287c:	91 21 01 70 	stw     r9,368(r1)
fff72880:	4b ff f5 e5 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
fff72884:	81 21 01 70 	lwz     r9,368(r1)
fff72888:	06 c3 00 0e 	bwz     r3,fff728a4 <_Z6ec_addPmS_S_PKmS1_S1_+0x88>
fff7288c:	80 61 01 6c 	lwz     r3,364(r1)
fff72890:	38 80 00 00 	li      r4,0
fff72894:	4b ff f5 d1 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
    EC_ASSERT(!bn_ge_prime(z1));
    EC_ASSERT(!bn_ge_prime(x2));
    EC_ASSERT(!bn_ge_prime(y2));
    EC_ASSERT(!bn_ge_prime(z2));

    inf1 = ec_is_infinity(x1, y1, z1);
fff72898:	81 21 01 70 	lwz     r9,368(r1)
fff7289c:	7d 2a 4b 78 	mr      r10,r9
    inf2 = ec_is_infinity(x2, y2, z2);
fff728a0:	06 43 00 e4 	bwnz    r3,fff72a68 <_Z6ec_addPmS_S_PKmS1_S1_+0x24c>
    if (inf2)
    {
        return inf1;
    }

    if (inf1)
fff728a4:	06 c9 00 16 	bwz     r9,fff728d0 <_Z6ec_addPmS_S_PKmS1_S1_+0xb4>
    {
        BN_COPY(x1, x2);
fff728a8:	80 81 01 68 	lwz     r4,360(r1)
fff728ac:	7f c3 f3 78 	mr      r3,r30
fff728b0:	4b ff f3 79 	bl      fff71c28 <_Z7BN_COPYPmPKm>
        BN_COPY(y1, y2);
fff728b4:	80 81 01 6c 	lwz     r4,364(r1)
fff728b8:	7f e3 fb 78 	mr      r3,r31
fff728bc:	4b ff f3 6d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
        BN_COPY(z1, z2);
fff728c0:	7f a3 eb 78 	mr      r3,r29
fff728c4:	7f 84 e3 78 	mr      r4,r28
fff728c8:	4b ff f3 61 	bl      fff71c28 <_Z7BN_COPYPmPKm>
fff728cc:	48 00 01 98 	b       fff72a64 <_Z6ec_addPmS_S_PKmS1_S1_+0x248>
        return 0;          // (x1,y1,z1) not infinity (checked above)
    }

    if (!bn_cmp(x1, x2) && !bn_cmp(y1, y2))
fff728d0:	80 81 01 68 	lwz     r4,360(r1)
fff728d4:	7f c3 f3 78 	mr      r3,r30
fff728d8:	4b ff f5 4d 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff728dc:	06 43 00 16 	bwnz    r3,fff72908 <_Z6ec_addPmS_S_PKmS1_S1_+0xec>
fff728e0:	80 81 01 6c 	lwz     r4,364(r1)
fff728e4:	7f e3 fb 78 	mr      r3,r31
fff728e8:	4b ff f5 3d 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff728ec:	06 43 00 0e 	bwnz    r3,fff72908 <_Z6ec_addPmS_S_PKmS1_S1_+0xec>
    {
        return ec_double(x1, y1, z1);
fff728f0:	7f c3 f3 78 	mr      r3,r30
fff728f4:	7f e4 fb 78 	mr      r4,r31
fff728f8:	7f a5 eb 78 	mr      r5,r29
fff728fc:	4b ff fd 7d 	bl      fff72678 <_Z9ec_doublePmS_S_>
fff72900:	7c 6a 1b 78 	mr      r10,r3
fff72904:	48 00 01 64 	b       fff72a68 <_Z6ec_addPmS_S_PKmS1_S1_+0x24c>
#ifdef EC_POWER64_RED
    bn_modred_slow(x1);
#endif

#else // !EC_POWER64_ALG
    BN_COPY(t1, y1);
fff72908:	38 61 00 08 	addi    r3,r1,8
fff7290c:	7f e4 fb 78 	mr      r4,r31
fff72910:	4b ff f3 19 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(t1, z2);    // y1z2 = y1 * z2
fff72914:	38 61 00 08 	addi    r3,r1,8
fff72918:	7f 84 e3 78 	mr      r4,r28
fff7291c:	4b ff f7 11 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    BN_COPY(a, y2);
fff72920:	80 81 01 6c 	lwz     r4,364(r1)
fff72924:	38 61 01 18 	addi    r3,r1,280
fff72928:	4b ff f3 01 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(a, z1);
fff7292c:	38 61 01 18 	addi    r3,r1,280
fff72930:	7f a4 eb 78 	mr      r4,r29
fff72934:	4b ff f6 f9 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modsub(a, t1);           // u = y2 * z1 - y1 * z2
fff72938:	38 61 01 18 	addi    r3,r1,280
fff7293c:	38 81 00 08 	addi    r4,r1,8
fff72940:	4b ff f8 b1 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    BN_COPY(y1, a);
fff72944:	7f e3 fb 78 	mr      r3,r31
fff72948:	38 81 01 18 	addi    r4,r1,280
fff7294c:	4b ff f2 dd 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(y1, y1);    // uu = u*u
fff72950:	7f e3 fb 78 	mr      r3,r31
fff72954:	7f e4 fb 78 	mr      r4,r31
fff72958:	4b ff f6 d5 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    bn_modmul_prime(x1, z2);    // x1z2 = x1 * z2     orig x1 no longer used
fff7295c:	7f c3 f3 78 	mr      r3,r30
fff72960:	7f 84 e3 78 	mr      r4,r28
fff72964:	4b ff f6 c9 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    BN_COPY(b, x2);
fff72968:	80 81 01 68 	lwz     r4,360(r1)
fff7296c:	38 61 00 d4 	addi    r3,r1,212
fff72970:	4b ff f2 b9 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(b, z1);
fff72974:	38 61 00 d4 	addi    r3,r1,212
fff72978:	7f a4 eb 78 	mr      r4,r29
fff7297c:	4b ff f6 b1 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modsub(b, x1);           // v = x2 * z1 - x1 * z2
fff72980:	38 61 00 d4 	addi    r3,r1,212
fff72984:	7f c4 f3 78 	mr      r4,r30
fff72988:	4b ff f8 69 	bl      fff721f0 <_Z9bn_modsubPmPKm>

    bn_modmul_prime(z1, z2);    // z1z2 = z1*z2
fff7298c:	7f a3 eb 78 	mr      r3,r29
fff72990:	7f 84 e3 78 	mr      r4,r28
fff72994:	4b ff f6 99 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    BN_COPY(bs, b);
fff72998:	38 61 00 4c 	addi    r3,r1,76
fff7299c:	38 81 00 d4 	addi    r4,r1,212
fff729a0:	4b ff f2 89 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(bs, bs);    // vv = v*v
fff729a4:	38 61 00 4c 	addi    r3,r1,76
fff729a8:	7c 64 1b 78 	mr      r4,r3
fff729ac:	4b ff f6 81 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    BN_COPY(c, b);
fff729b0:	38 61 00 90 	addi    r3,r1,144
fff729b4:	38 81 00 d4 	addi    r4,r1,212
fff729b8:	4b ff f2 71 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(c, bs);     // vvv = v*vv
fff729bc:	38 61 00 90 	addi    r3,r1,144
fff729c0:	38 81 00 4c 	addi    r4,r1,76
fff729c4:	4b ff f6 69 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    bn_modmul_prime(bs, x1);    // R = vv*x1z2
fff729c8:	38 61 00 4c 	addi    r3,r1,76
fff729cc:	7f c4 f3 78 	mr      r4,r30
fff729d0:	4b ff f6 5d 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    bn_modmul_prime(y1, z1);    // uu*z1z2
fff729d4:	7f e3 fb 78 	mr      r3,r31
fff729d8:	7f a4 eb 78 	mr      r4,r29
fff729dc:	4b ff f6 51 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modsub(y1, c);
fff729e0:	7f e3 fb 78 	mr      r3,r31
fff729e4:	38 81 00 90 	addi    r4,r1,144
fff729e8:	4b ff f8 09 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    bn_modsub(y1, bs);
fff729ec:	7f e3 fb 78 	mr      r3,r31
fff729f0:	38 81 00 4c 	addi    r4,r1,76
fff729f4:	4b ff f7 fd 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    bn_modsub(y1, bs);          // A = uu*z1z2-vvv-2*R
fff729f8:	7f e3 fb 78 	mr      r3,r31
fff729fc:	38 81 00 4c 	addi    r4,r1,76
fff72a00:	4b ff f7 f1 	bl      fff721f0 <_Z9bn_modsubPmPKm>

    BN_COPY(x1, b);
fff72a04:	7f c3 f3 78 	mr      r3,r30
fff72a08:	38 81 00 d4 	addi    r4,r1,212
fff72a0c:	4b ff f2 1d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_prime(x1, y1);    // X3 = v*A
fff72a10:	7f c3 f3 78 	mr      r3,r30
fff72a14:	7f e4 fb 78 	mr      r4,r31
fff72a18:	4b ff f6 15 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    bn_modmul_prime(z1, c);     // Z3 = vvv*z1z2
fff72a1c:	7f a3 eb 78 	mr      r3,r29
fff72a20:	38 81 00 90 	addi    r4,r1,144
fff72a24:	4b ff f6 09 	bl      fff7202c <_Z15bn_modmul_primePmPKm>

    bn_modsub(bs, y1);          // R-A
fff72a28:	38 61 00 4c 	addi    r3,r1,76
fff72a2c:	7f e4 fb 78 	mr      r4,r31
fff72a30:	4b ff f7 c1 	bl      fff721f0 <_Z9bn_modsubPmPKm>
    bn_modmul_prime(a, bs);     // u*(R-A)
fff72a34:	38 61 01 18 	addi    r3,r1,280
fff72a38:	38 81 00 4c 	addi    r4,r1,76
fff72a3c:	4b ff f5 f1 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    bn_modmul_prime(t1, c);     // vvv*y1z2
fff72a40:	38 61 00 08 	addi    r3,r1,8
fff72a44:	38 81 00 90 	addi    r4,r1,144
fff72a48:	4b ff f5 e5 	bl      fff7202c <_Z15bn_modmul_primePmPKm>
    BN_COPY(y1, a);
fff72a4c:	7f e3 fb 78 	mr      r3,r31
fff72a50:	38 81 01 18 	addi    r4,r1,280
fff72a54:	4b ff f1 d5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modsub(y1, t1);          // Y3 = u*(R-A)-vvv*y1z2
fff72a58:	7f e3 fb 78 	mr      r3,r31
fff72a5c:	38 81 00 08 	addi    r4,r1,8
fff72a60:	4b ff f7 91 	bl      fff721f0 <_Z9bn_modsubPmPKm>

#endif

    return 0;
fff72a64:	39 40 00 00 	li      r10,0
}
fff72a68:	80 01 01 8c 	lwz     r0,396(r1)
fff72a6c:	17 81 01 78 	lvd     d28,376(r1)
fff72a70:	7c 08 03 a6 	mtlr    r0
fff72a74:	17 c1 01 80 	lvd     d30,384(r1)
fff72a78:	7d 43 53 78 	mr      r3,r10
fff72a7c:	38 21 01 88 	addi    r1,r1,392
fff72a80:	4e 80 00 20 	blr

fff72a84 <_Z11ec_multiplyPmS_S_PKmS1_>:
//
// LIMIT: processes up to EC_PRIMEBITS in coefficient
// z and k must not overlap
//
int ec_multiply (bn_t *x, bn_t *y, bn_t *z, const bn_t *k, const bn_t *k1)
{
fff72a84:	94 21 ff 00 	stwu    r1,-256(r1)
fff72a88:	7c 08 02 a6 	mflr    r0
fff72a8c:	1b c1 00 f8 	stvd    d30,248(r1)
fff72a90:	7c 7e 1b 78 	mr      r30,r3
    EC_ASSERT(NULL != y);
    EC_ASSERT(NULL != k);
    EC_ASSERT(!bn_ge_prime(x));
    EC_ASSERT(!bn_ge_prime(y));

    i=bn_bits(k)+1;
fff72a94:	7c c3 33 78 	mr      r3,r6
//
// LIMIT: processes up to EC_PRIMEBITS in coefficient
// z and k must not overlap
//
int ec_multiply (bn_t *x, bn_t *y, bn_t *z, const bn_t *k, const bn_t *k1)
{
fff72a98:	1b 81 00 f0 	stvd    d28,240(r1)
fff72a9c:	90 01 01 04 	stw     r0,260(r1)
fff72aa0:	7c fc 3b 78 	mr      r28,r7
fff72aa4:	7c 9d 23 78 	mr      r29,r4
fff72aa8:	7c bf 2b 78 	mr      r31,r5
fff72aac:	90 c1 00 d8 	stw     r6,216(r1)
    EC_ASSERT(NULL != y);
    EC_ASSERT(NULL != k);
    EC_ASSERT(!bn_ge_prime(x));
    EC_ASSERT(!bn_ge_prime(y));

    i=bn_bits(k)+1;
fff72ab0:	4b ff f8 4d 	bl      fff722fc <_Z7bn_bitsPKm>
fff72ab4:	39 23 00 01 	addi    r9,r3,1
    i1=bn_bits(k1)+1;
fff72ab8:	7f 83 e3 78 	mr      r3,r28
fff72abc:	91 21 00 e0 	stw     r9,224(r1)
fff72ac0:	4b ff f8 3d 	bl      fff722fc <_Z7bn_bitsPKm>
fff72ac4:	81 21 00 e0 	lwz     r9,224(r1)
fff72ac8:	38 63 00 01 	addi    r3,r3,1
fff72acc:	05 03 48 04 	cmplwbge r3,r9,fff72ad4 <_Z11ec_multiplyPmS_S_PKmS1_+0x50>
fff72ad0:	7d 23 4b 78 	mr      r3,r9
    if(i1>i)
        i = i1;
    int bit = (i-1)%32;
    if(i%2==0)
fff72ad4:	54 68 07 fe 	clrlwi  r8,r3,31

    i=bn_bits(k)+1;
    i1=bn_bits(k1)+1;
    if(i1>i)
        i = i1;
    int bit = (i-1)%32;
fff72ad8:	39 43 ff ff 	addi    r10,r3,-1
    if(i%2==0)
    {
        bit--;
fff72adc:	7d 08 00 34 	cntlzw  r8,r8
fff72ae0:	55 08 d9 7e 	rlwinm  r8,r8,27,5,31

    i=bn_bits(k)+1;
    i1=bn_bits(k1)+1;
    if(i1>i)
        i = i1;
    int bit = (i-1)%32;
fff72ae4:	55 49 06 fe 	clrlwi  r9,r10,27
    if(i%2==0)
    {
        bit--;
fff72ae8:	7d 28 48 50 	subf    r9,r8,r9
    }
    mask = (3<<bit);
fff72aec:	38 00 00 03 	li      r0,3
fff72af0:	7c 00 48 30 	slw     r0,r0,r9
    int word = (i-1)/32;
fff72af4:	55 4a d9 7e 	rlwinm  r10,r10,27,5,31

    BN_COPY(px, x);
fff72af8:	38 61 00 90 	addi    r3,r1,144
fff72afc:	7f c4 f3 78 	mr      r4,r30
fff72b00:	90 01 00 dc 	stw     r0,220(r1)
fff72b04:	91 21 00 e0 	stw     r9,224(r1)
    if(i%2==0)
    {
        bit--;
    }
    mask = (3<<bit);
    int word = (i-1)/32;
fff72b08:	91 41 00 ec 	stw     r10,236(r1)

    BN_COPY(px, x);
fff72b0c:	4b ff f1 1d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(py, y);
fff72b10:	38 61 00 4c 	addi    r3,r1,76
fff72b14:	7f a4 eb 78 	mr      r4,r29
fff72b18:	4b ff f1 11 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_clear(x);
fff72b1c:	38 80 00 00 	li      r4,0
fff72b20:	38 a0 00 44 	li      r5,68
fff72b24:	7f c3 f3 78 	mr      r3,r30
fff72b28:	48 00 77 bd 	bl      fff7a2e4 <memset>
    bn_clear(y);
fff72b2c:	38 80 00 00 	li      r4,0
fff72b30:	38 a0 00 44 	li      r5,68
fff72b34:	7f a3 eb 78 	mr      r3,r29
fff72b38:	48 00 77 ad 	bl      fff7a2e4 <memset>

    bn_clear(z);
fff72b3c:	38 80 00 00 	li      r4,0
fff72b40:	38 a0 00 44 	li      r5,68
fff72b44:	7f e3 fb 78 	mr      r3,r31
fff72b48:	48 00 77 9d 	bl      fff7a2e4 <memset>
    BN_LSW(z) = 1;       // (x,y)   -> (x, y, 1)  in projective coordinates
fff72b4c:	39 00 00 01 	li      r8,1
fff72b50:	91 1f 00 40 	stw     r8,64(r31)
    BN_COPY(pz, z);      // (px,py) -> (px,py,1)
fff72b54:	38 61 00 08 	addi    r3,r1,8
fff72b58:	7f e4 fb 78 	mr      r4,r31
fff72b5c:	4b ff f0 cd 	bl      fff71c28 <_Z7BN_COPYPmPKm>
fff72b60:	80 01 00 dc 	lwz     r0,220(r1)
fff72b64:	81 21 00 e0 	lwz     r9,224(r1)
    BN_DUMP(i,pz);

    while (word>=0)
    {

        ec_double(x, y, z);
fff72b68:	7f a4 eb 78 	mr      r4,r29
fff72b6c:	7f e5 fb 78 	mr      r5,r31
fff72b70:	7f c3 f3 78 	mr      r3,r30
fff72b74:	90 01 00 dc 	stw     r0,220(r1)
fff72b78:	91 21 00 e0 	stw     r9,224(r1)
fff72b7c:	4b ff fa fd 	bl      fff72678 <_Z9ec_doublePmS_S_>
        ec_double(x, y, z);
fff72b80:	7f a4 eb 78 	mr      r4,r29
fff72b84:	7f e5 fb 78 	mr      r5,r31
fff72b88:	7f c3 f3 78 	mr      r3,r30
fff72b8c:	4b ff fa ed 	bl      fff72678 <_Z9ec_doublePmS_S_>

        int index = (((mask & *k)>>bit)<<2) + ((mask & *k1)>>bit);
fff72b90:	81 41 00 d8 	lwz     r10,216(r1)
fff72b94:	80 01 00 dc 	lwz     r0,220(r1)
fff72b98:	80 ea 00 00 	lwz     r7,0(r10)
fff72b9c:	81 21 00 e0 	lwz     r9,224(r1)
fff72ba0:	81 1c 00 00 	lwz     r8,0(r28)
fff72ba4:	7c 07 38 38 	and     r7,r0,r7
fff72ba8:	7c e7 4c 30 	srw     r7,r7,r9
fff72bac:	7c 08 40 38 	and     r8,r0,r8
fff72bb0:	7d 08 4c 30 	srw     r8,r8,r9
fff72bb4:	54 e7 10 3a 	rlwinm  r7,r7,2,0,29
fff72bb8:	7c e7 42 14 	add     r7,r7,r8

        ec_add(x, y, z, lookup[index][0], lookup[index][1], lookup[index][2]);
fff72bbc:	3d 00 ff f8 	lis     r8,-8
fff72bc0:	39 08 65 b0 	addi    r8,r8,26032
fff72bc4:	3d 40 ff f8 	lis     r10,-8
fff72bc8:	1c e7 00 0c 	mulli   r7,r7,12
fff72bcc:	39 4a 65 b0 	addi    r10,r10,26032
fff72bd0:	7d 08 3a 14 	add     r8,r8,r7
fff72bd4:	91 01 00 e8 	stw     r8,232(r1)
fff72bd8:	7c ca 38 2e 	lwzx    r6,r10,r7
fff72bdc:	80 e8 00 04 	lwz     r7,4(r8)
fff72be0:	81 08 00 08 	lwz     r8,8(r8)
fff72be4:	7f c3 f3 78 	mr      r3,r30
fff72be8:	7f a4 eb 78 	mr      r4,r29
fff72bec:	7f e5 fb 78 	mr      r5,r31
fff72bf0:	4b ff fc 2d 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
        BN_DUMP(i,y);
        BN_DUMP(i,z);
        BN_DUMP(i,px);
        BN_DUMP(i,py);
        BN_DUMP(i,pz);
        mask >>= 2;
fff72bf4:	80 01 00 dc 	lwz     r0,220(r1)
        if (!mask)
fff72bf8:	81 21 00 e0 	lwz     r9,224(r1)
        BN_DUMP(i,y);
        BN_DUMP(i,z);
        BN_DUMP(i,px);
        BN_DUMP(i,py);
        BN_DUMP(i,pz);
        mask >>= 2;
fff72bfc:	54 00 f0 be 	rlwinm  r0,r0,30,2,31
        if (!mask)
fff72c00:	06 40 00 1a 	bwnz    r0,fff72c34 <_Z11ec_multiplyPmS_S_PKmS1_+0x1b0>
    BN_DUMP(i,z);
    BN_DUMP(i,px);
    BN_DUMP(i,py);
    BN_DUMP(i,pz);

    while (word>=0)
fff72c04:	81 41 00 ec 	lwz     r10,236(r1)
        BN_DUMP(i,py);
        BN_DUMP(i,pz);
        mask >>= 2;
        if (!mask)
        {
            k += 1;
fff72c08:	81 21 00 d8 	lwz     r9,216(r1)
    BN_DUMP(i,z);
    BN_DUMP(i,px);
    BN_DUMP(i,py);
    BN_DUMP(i,pz);

    while (word>=0)
fff72c0c:	2c 0a 00 00 	cmpwi   r10,0
        BN_DUMP(i,py);
        BN_DUMP(i,pz);
        mask >>= 2;
        if (!mask)
        {
            k += 1;
fff72c10:	39 29 00 04 	addi    r9,r9,4
    BN_DUMP(i,z);
    BN_DUMP(i,px);
    BN_DUMP(i,py);
    BN_DUMP(i,pz);

    while (word>=0)
fff72c14:	39 4a ff ff 	addi    r10,r10,-1
        BN_DUMP(i,py);
        BN_DUMP(i,pz);
        mask >>= 2;
        if (!mask)
        {
            k += 1;
fff72c18:	91 21 00 d8 	stw     r9,216(r1)
            k1 += 1;
fff72c1c:	3b 9c 00 04 	addi    r28,r28,4
    BN_DUMP(i,z);
    BN_DUMP(i,px);
    BN_DUMP(i,py);
    BN_DUMP(i,pz);

    while (word>=0)
fff72c20:	91 41 00 ec 	stw     r10,236(r1)
fff72c24:	41 82 00 18 	beq     fff72c3c <_Z11ec_multiplyPmS_S_PKmS1_+0x1b8>
        if (!mask)
        {
            k += 1;
            k1 += 1;
            mask = 0xC0000000;
            bit = 30;
fff72c28:	39 20 00 1e 	li      r9,30
        mask >>= 2;
        if (!mask)
        {
            k += 1;
            k1 += 1;
            mask = 0xC0000000;
fff72c2c:	3c 00 c0 00 	lis     r0,-16384
fff72c30:	4b ff ff 38 	b       fff72b68 <_Z11ec_multiplyPmS_S_PKmS1_+0xe4>
            bit = 30;
            word--;
        }
        else
        {
            bit -= 2;
fff72c34:	39 29 ff fe 	addi    r9,r9,-2
fff72c38:	4b ff ff 30 	b       fff72b68 <_Z11ec_multiplyPmS_S_PKmS1_+0xe4>
        }
    }
        BN_EXIT();

    return 0;
}
fff72c3c:	80 01 01 04 	lwz     r0,260(r1)
fff72c40:	17 81 00 f0 	lvd     d28,240(r1)
fff72c44:	7c 08 03 a6 	mtlr    r0
fff72c48:	17 c1 00 f8 	lvd     d30,248(r1)
fff72c4c:	38 60 00 00 	li      r3,0
fff72c50:	38 21 01 00 	addi    r1,r1,256
fff72c54:	4e 80 00 20 	blr

fff72c58 <_Z9ec_verifyPKhS0_S0_>:
//=====================================================  public function  ====

int ec_verify (const unsigned char *publicpt,    /* 2*EC_COORDBYTES */
               const unsigned char *hash,        /*   EC_HASHBYTES  */
               const unsigned char *signature)   /* 2*EC_COORDBYTES */
{
fff72c58:	94 21 f1 b8 	stwu    r1,-3656(r1)
fff72c5c:	7c 08 02 a6 	mflr    r0
fff72c60:	1b c1 0e 40 	stvd    d30,3648(r1)
fff72c64:	1b 81 0e 38 	stvd    d28,3640(r1)
fff72c68:	7c 7f 1b 78 	mr      r31,r3
fff72c6c:	7c 9e 23 78 	mr      r30,r4
fff72c70:	7c bd 2b 78 	mr      r29,r5
        px_cpy[ NWORDS ], py_cpy[ NWORDS ],
        px_2[ NWORDS ], py_2[ NWORDS ], pz_2[ NWORDS ],
        px_3[ NWORDS ], py_3[ NWORDS ], pz_3[ NWORDS ],
        qx_2[ NWORDS ], qy_2[ NWORDS ], qz_2[ NWORDS ],
        qx_3[ NWORDS ], qy_3[ NWORDS ], qz_3[ NWORDS ];
    bn_t bn_zero[NWORDS] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
fff72c74:	38 80 00 00 	li      r4,0
fff72c78:	38 a0 00 44 	li      r5,68
fff72c7c:	38 61 08 00 	addi    r3,r1,2048
//=====================================================  public function  ====

int ec_verify (const unsigned char *publicpt,    /* 2*EC_COORDBYTES */
               const unsigned char *hash,        /*   EC_HASHBYTES  */
               const unsigned char *signature)   /* 2*EC_COORDBYTES */
{
fff72c80:	90 01 0e 4c 	stw     r0,3660(r1)
        px_cpy[ NWORDS ], py_cpy[ NWORDS ],
        px_2[ NWORDS ], py_2[ NWORDS ], pz_2[ NWORDS ],
        px_3[ NWORDS ], py_3[ NWORDS ], pz_3[ NWORDS ],
        qx_2[ NWORDS ], qy_2[ NWORDS ], qz_2[ NWORDS ],
        qx_3[ NWORDS ], qy_3[ NWORDS ], qz_3[ NWORDS ];
    bn_t bn_zero[NWORDS] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
fff72c84:	48 00 76 61 	bl      fff7a2e4 <memset>
    bn_t bn_one[NWORDS] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
fff72c88:	38 61 07 bc 	addi    r3,r1,1980
fff72c8c:	38 80 00 00 	li      r4,0
fff72c90:	38 a0 00 44 	li      r5,68
fff72c94:	48 00 76 51 	bl      fff7a2e4 <memset>
fff72c98:	39 20 00 01 	li      r9,1
fff72c9c:	91 21 07 fc 	stw     r9,2044(r1)
    bn_t res_x[NWORDS], res_y[NWORDS];

    if ((NULL == publicpt) || (NULL == signature) || (NULL == hash))
fff72ca0:	06 5f 00 06 	bwnz    r31,fff72cac <_Z9ec_verifyPKhS0_S0_+0x54>
    {
        return -1;
fff72ca4:	3b e0 ff ff 	li      r31,-1
fff72ca8:	48 00 06 94 	b       fff7333c <_Z9ec_verifyPKhS0_S0_+0x6e4>
        qx_3[ NWORDS ], qy_3[ NWORDS ], qz_3[ NWORDS ];
    bn_t bn_zero[NWORDS] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    bn_t bn_one[NWORDS] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
    bn_t res_x[NWORDS], res_y[NWORDS];

    if ((NULL == publicpt) || (NULL == signature) || (NULL == hash))
fff72cac:	06 dd 07 fc 	bwz     r29,fff72ca4 <_Z9ec_verifyPKhS0_S0_+0x4c>
fff72cb0:	06 de 07 fa 	bwz     r30,fff72ca4 <_Z9ec_verifyPKhS0_S0_+0x4c>
    {
        return -1;
    }

    bn_read_pt  (r,  signature);
fff72cb4:	7f a4 eb 78 	mr      r4,r29
fff72cb8:	38 61 0d d8 	addi    r3,r1,3544
fff72cbc:	4b ff f9 55 	bl      fff72610 <_Z10bn_read_ptPmPKh>
    bn_read_pt  (s,  signature +EC_COORDBYTES);
fff72cc0:	38 9d 00 42 	addi    r4,r29,66
fff72cc4:	38 61 0d 94 	addi    r3,r1,3476
fff72cc8:	4b ff f9 49 	bl      fff72610 <_Z10bn_read_ptPmPKh>
    bn_read_hash(e,  hash);
fff72ccc:	7f c4 f3 78 	mr      r4,r30
fff72cd0:	38 61 0d 50 	addi    r3,r1,3408
    bn_read_pt  (px, publicpt);
    bn_read_pt  (py, publicpt +EC_COORDBYTES);
fff72cd4:	3b df 00 42 	addi    r30,r31,66
        return -1;
    }

    bn_read_pt  (r,  signature);
    bn_read_pt  (s,  signature +EC_COORDBYTES);
    bn_read_hash(e,  hash);
fff72cd8:	4b ff f9 41 	bl      fff72618 <_Z12bn_read_hashPmPKh>
    bn_read_pt  (px, publicpt);
fff72cdc:	7f e4 fb 78 	mr      r4,r31
fff72ce0:	38 61 0d 0c 	addi    r3,r1,3340
fff72ce4:	4b ff f9 2d 	bl      fff72610 <_Z10bn_read_ptPmPKh>
    bn_read_pt  (py, publicpt +EC_COORDBYTES);
fff72ce8:	7f c4 f3 78 	mr      r4,r30
fff72cec:	38 61 0c c8 	addi    r3,r1,3272
fff72cf0:	4b ff f9 21 	bl      fff72610 <_Z10bn_read_ptPmPKh>
    bn_read_pt  (px_cpy, publicpt);
fff72cf4:	7f e4 fb 78 	mr      r4,r31
fff72cf8:	38 61 0b b8 	addi    r3,r1,3000
fff72cfc:	4b ff f9 15 	bl      fff72610 <_Z10bn_read_ptPmPKh>
    bn_read_pt  (py_cpy, publicpt +EC_COORDBYTES);
fff72d00:	7f c4 f3 78 	mr      r4,r30

    if (bn_ge_order(r)  || bn_ge_order(s)  ||
fff72d04:	3f c0 ff f7 	lis     r30,-9
fff72d08:	3b de 33 58 	addi    r30,r30,13144
    bn_read_pt  (s,  signature +EC_COORDBYTES);
    bn_read_hash(e,  hash);
    bn_read_pt  (px, publicpt);
    bn_read_pt  (py, publicpt +EC_COORDBYTES);
    bn_read_pt  (px_cpy, publicpt);
    bn_read_pt  (py_cpy, publicpt +EC_COORDBYTES);
fff72d0c:	38 61 0b 74 	addi    r3,r1,2932

    if (bn_ge_order(r)  || bn_ge_order(s)  ||
fff72d10:	3b be 00 44 	addi    r29,r30,68
    bn_read_pt  (s,  signature +EC_COORDBYTES);
    bn_read_hash(e,  hash);
    bn_read_pt  (px, publicpt);
    bn_read_pt  (py, publicpt +EC_COORDBYTES);
    bn_read_pt  (px_cpy, publicpt);
    bn_read_pt  (py_cpy, publicpt +EC_COORDBYTES);
fff72d14:	4b ff f8 fd 	bl      fff72610 <_Z10bn_read_ptPmPKh>

    if (bn_ge_order(r)  || bn_ge_order(s)  ||
fff72d18:	38 61 0d d8 	addi    r3,r1,3544
fff72d1c:	7f a4 eb 78 	mr      r4,r29
fff72d20:	4b ff f1 05 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
        bn_is_zero(s,0) || bn_is_zero(r,0))
    {
        return 0;                // assume user messed with signature
fff72d24:	3b e0 00 00 	li      r31,0
    bn_read_pt  (py, publicpt +EC_COORDBYTES);
    bn_read_pt  (px_cpy, publicpt);
    bn_read_pt  (py_cpy, publicpt +EC_COORDBYTES);

    if (bn_ge_order(r)  || bn_ge_order(s)  ||
        bn_is_zero(s,0) || bn_is_zero(r,0))
fff72d28:	06 03 03 0a 	bwgez   r3,fff7333c <_Z9ec_verifyPKhS0_S0_+0x6e4>
    bn_read_pt  (px, publicpt);
    bn_read_pt  (py, publicpt +EC_COORDBYTES);
    bn_read_pt  (px_cpy, publicpt);
    bn_read_pt  (py_cpy, publicpt +EC_COORDBYTES);

    if (bn_ge_order(r)  || bn_ge_order(s)  ||
fff72d2c:	38 61 0d 94 	addi    r3,r1,3476
fff72d30:	7f a4 eb 78 	mr      r4,r29
fff72d34:	4b ff f0 f1 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff72d38:	06 03 03 02 	bwgez   r3,fff7333c <_Z9ec_verifyPKhS0_S0_+0x6e4>
        bn_is_zero(s,0) || bn_is_zero(r,0))
fff72d3c:	38 61 0d 94 	addi    r3,r1,3476
fff72d40:	38 80 00 00 	li      r4,0
fff72d44:	4b ff f1 21 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
fff72d48:	7c 7f 1b 78 	mr      r31,r3
    bn_read_pt  (px, publicpt);
    bn_read_pt  (py, publicpt +EC_COORDBYTES);
    bn_read_pt  (px_cpy, publicpt);
    bn_read_pt  (py_cpy, publicpt +EC_COORDBYTES);

    if (bn_ge_order(r)  || bn_ge_order(s)  ||
fff72d4c:	06 43 00 0c 	bwnz    r3,fff72d64 <_Z9ec_verifyPKhS0_S0_+0x10c>
        bn_is_zero(s,0) || bn_is_zero(r,0))
fff72d50:	38 61 0d d8 	addi    r3,r1,3544
fff72d54:	38 80 00 00 	li      r4,0
fff72d58:	4b ff f1 0d 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
fff72d5c:	06 43 02 f0 	bwnz    r3,fff7333c <_Z9ec_verifyPKhS0_S0_+0x6e4>
fff72d60:	48 00 00 0c 	b       fff72d6c <_Z9ec_verifyPKhS0_S0_+0x114>
    {
        return 0;                // assume user messed with signature
fff72d64:	3b e0 00 00 	li      r31,0
fff72d68:	48 00 05 d4 	b       fff7333c <_Z9ec_verifyPKhS0_S0_+0x6e4>
    }

    if (bn_ge_prime(px)  || bn_ge_prime(py)  ||
fff72d6c:	38 61 0d 0c 	addi    r3,r1,3340
fff72d70:	7f c4 f3 78 	mr      r4,r30
fff72d74:	4b ff f0 b1 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
        bn_is_zero(px,0) || bn_is_zero(py,0))
fff72d78:	06 03 07 96 	bwgez   r3,fff72ca4 <_Z9ec_verifyPKhS0_S0_+0x4c>
        bn_is_zero(s,0) || bn_is_zero(r,0))
    {
        return 0;                // assume user messed with signature
    }

    if (bn_ge_prime(px)  || bn_ge_prime(py)  ||
fff72d7c:	38 61 0c c8 	addi    r3,r1,3272
fff72d80:	7f c4 f3 78 	mr      r4,r30
fff72d84:	4b ff f0 a1 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff72d88:	06 03 07 8e 	bwgez   r3,fff72ca4 <_Z9ec_verifyPKhS0_S0_+0x4c>
        bn_is_zero(px,0) || bn_is_zero(py,0))
fff72d8c:	38 61 0d 0c 	addi    r3,r1,3340
fff72d90:	38 80 00 00 	li      r4,0
fff72d94:	4b ff f0 d1 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
        bn_is_zero(s,0) || bn_is_zero(r,0))
    {
        return 0;                // assume user messed with signature
    }

    if (bn_ge_prime(px)  || bn_ge_prime(py)  ||
fff72d98:	06 43 07 86 	bwnz    r3,fff72ca4 <_Z9ec_verifyPKhS0_S0_+0x4c>
        bn_is_zero(px,0) || bn_is_zero(py,0))
fff72d9c:	38 61 0c c8 	addi    r3,r1,3272
fff72da0:	38 80 00 00 	li      r4,0
fff72da4:	4b ff f0 c1 	bl      fff71e64 <_Z10bn_is_zeroPKmj>
fff72da8:	06 43 07 7e 	bwnz    r3,fff72ca4 <_Z9ec_verifyPKhS0_S0_+0x4c>
    {
        return -1;               // admin fault; should not happen
    }

    //0
    lookup[0][0] = lookup[0][1] = bn_zero;
fff72dac:	3d 20 ff f8 	lis     r9,-8
fff72db0:	39 41 08 00 	addi    r10,r1,2048
fff72db4:	3b e9 65 b0 	addi    r31,r9,26032
    lookup[1][0] = px_cpy;
    lookup[1][1] = py_cpy;
    lookup[1][2] = bn_one;

    //2P
    BN_COPY(px_2, lookup[1][0]);
fff72db8:	38 c1 0b 30 	addi    r6,r1,2864
    {
        return -1;               // admin fault; should not happen
    }

    //0
    lookup[0][0] = lookup[0][1] = bn_zero;
fff72dbc:	91 49 65 b0 	stw     r10,26032(r9)
    lookup[0][2] = bn_one;
fff72dc0:	39 21 07 bc 	addi    r9,r1,1980
    lookup[1][0] = px_cpy;
    lookup[1][1] = py_cpy;
    lookup[1][2] = bn_one;

    //2P
    BN_COPY(px_2, lookup[1][0]);
fff72dc4:	7c c3 33 78 	mr      r3,r6
    {
        return -1;               // admin fault; should not happen
    }

    //0
    lookup[0][0] = lookup[0][1] = bn_zero;
fff72dc8:	91 5f 00 04 	stw     r10,4(r31)
    lookup[0][2] = bn_one;
fff72dcc:	91 3f 00 08 	stw     r9,8(r31)

    //P
    lookup[1][0] = px_cpy;
    lookup[1][1] = py_cpy;
    lookup[1][2] = bn_one;
fff72dd0:	39 41 07 bc 	addi    r10,r1,1980
    lookup[0][0] = lookup[0][1] = bn_zero;
    lookup[0][2] = bn_one;

    //P
    lookup[1][0] = px_cpy;
    lookup[1][1] = py_cpy;
fff72dd4:	39 21 0b 74 	addi    r9,r1,2932
    //0
    lookup[0][0] = lookup[0][1] = bn_zero;
    lookup[0][2] = bn_one;

    //P
    lookup[1][0] = px_cpy;
fff72dd8:	38 81 0b b8 	addi    r4,r1,3000
    lookup[1][1] = py_cpy;
fff72ddc:	19 3f 00 10 	stvd    d9,16(r31)
    lookup[1][2] = bn_one;

    //2P
    BN_COPY(px_2, lookup[1][0]);
    BN_COPY(py_2, lookup[1][1]);
fff72de0:	3b 81 0a ec 	addi    r28,r1,2796
    //0
    lookup[0][0] = lookup[0][1] = bn_zero;
    lookup[0][2] = bn_one;

    //P
    lookup[1][0] = px_cpy;
fff72de4:	90 9f 00 0c 	stw     r4,12(r31)
    lookup[1][1] = py_cpy;
    lookup[1][2] = bn_one;

    //2P
    BN_COPY(px_2, lookup[1][0]);
fff72de8:	90 c1 0e 2c 	stw     r6,3628(r1)
fff72dec:	4b ff ee 3d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(py_2, lookup[1][1]);
fff72df0:	80 9f 00 10 	lwz     r4,16(r31)
fff72df4:	7f 83 e3 78 	mr      r3,r28
fff72df8:	4b ff ee 31 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(pz_2, lookup[1][2]);
fff72dfc:	3b a1 0a a8 	addi    r29,r1,2728
fff72e00:	80 9f 00 14 	lwz     r4,20(r31)
fff72e04:	7f a3 eb 78 	mr      r3,r29
fff72e08:	4b ff ee 21 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_double(px_2, py_2, pz_2);
fff72e0c:	80 c1 0e 2c 	lwz     r6,3628(r1)
fff72e10:	7f a5 eb 78 	mr      r5,r29
fff72e14:	7f 84 e3 78 	mr      r4,r28
fff72e18:	7c c3 33 78 	mr      r3,r6
fff72e1c:	4b ff f8 5d 	bl      fff72678 <_Z9ec_doublePmS_S_>
    lookup[2][0] = px_2;
fff72e20:	80 c1 0e 2c 	lwz     r6,3628(r1)
    lookup[2][1] = py_2;
    lookup[2][2] = pz_2;

    //3P
    BN_COPY(px_3, lookup[1][0]);
fff72e24:	38 01 0a 64 	addi    r0,r1,2660
fff72e28:	80 9f 00 0c 	lwz     r4,12(r31)
fff72e2c:	7c 03 03 78 	mr      r3,r0
    //2P
    BN_COPY(px_2, lookup[1][0]);
    BN_COPY(py_2, lookup[1][1]);
    BN_COPY(pz_2, lookup[1][2]);
    ec_double(px_2, py_2, pz_2);
    lookup[2][0] = px_2;
fff72e30:	90 df 00 18 	stw     r6,24(r31)
    lookup[2][1] = py_2;
fff72e34:	93 9f 00 1c 	stw     r28,28(r31)
    lookup[2][2] = pz_2;
fff72e38:	93 bf 00 20 	stw     r29,32(r31)

    //3P
    BN_COPY(px_3, lookup[1][0]);
fff72e3c:	90 01 0e 34 	stw     r0,3636(r1)
fff72e40:	90 c1 0e 2c 	stw     r6,3628(r1)
fff72e44:	4b ff ed e5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(py_3, lookup[1][1]);
fff72e48:	39 41 0a 20 	addi    r10,r1,2592
fff72e4c:	80 9f 00 10 	lwz     r4,16(r31)
fff72e50:	7d 43 53 78 	mr      r3,r10
fff72e54:	91 41 0e 30 	stw     r10,3632(r1)
fff72e58:	4b ff ed d1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(pz_3, lookup[1][2]);
fff72e5c:	39 21 09 dc 	addi    r9,r1,2524
fff72e60:	80 9f 00 14 	lwz     r4,20(r31)
fff72e64:	7d 23 4b 78 	mr      r3,r9
fff72e68:	91 21 0e 28 	stw     r9,3624(r1)
fff72e6c:	4b ff ed bd 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(px_3, py_3, pz_3, px_2, py_2, pz_2);
fff72e70:	80 01 0e 34 	lwz     r0,3636(r1)
fff72e74:	81 41 0e 30 	lwz     r10,3632(r1)
fff72e78:	81 21 0e 28 	lwz     r9,3624(r1)
fff72e7c:	80 c1 0e 2c 	lwz     r6,3628(r1)
fff72e80:	7f 87 e3 78 	mr      r7,r28
fff72e84:	7f a8 eb 78 	mr      r8,r29
fff72e88:	7d 44 53 78 	mr      r4,r10
fff72e8c:	7d 25 4b 78 	mr      r5,r9
fff72e90:	7c 03 03 78 	mr      r3,r0
fff72e94:	4b ff f9 89 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[3][0] = px_3;
fff72e98:	80 01 0e 34 	lwz     r0,3636(r1)
    lookup[3][1] = py_3;
    lookup[3][2] = pz_3;

    bn_modinv(u1, s, consts_p()->ec_order);      // s no longer needed (NLN)
fff72e9c:	3b 81 0d 94 	addi    r28,r1,3476
    //3P
    BN_COPY(px_3, lookup[1][0]);
    BN_COPY(py_3, lookup[1][1]);
    BN_COPY(pz_3, lookup[1][2]);
    ec_add(px_3, py_3, pz_3, px_2, py_2, pz_2);
    lookup[3][0] = px_3;
fff72ea0:	90 1f 00 24 	stw     r0,36(r31)
    lookup[3][1] = py_3;
    lookup[3][2] = pz_3;

    bn_modinv(u1, s, consts_p()->ec_order);      // s no longer needed (NLN)
fff72ea4:	38 1e 00 44 	addi    r0,r30,68
    BN_COPY(px_3, lookup[1][0]);
    BN_COPY(py_3, lookup[1][1]);
    BN_COPY(pz_3, lookup[1][2]);
    ec_add(px_3, py_3, pz_3, px_2, py_2, pz_2);
    lookup[3][0] = px_3;
    lookup[3][1] = py_3;
fff72ea8:	81 41 0e 30 	lwz     r10,3632(r1)
    lookup[3][2] = pz_3;

    bn_modinv(u1, s, consts_p()->ec_order);      // s no longer needed (NLN)
fff72eac:	7c 05 03 78 	mr      r5,r0
    BN_COPY(px_3, lookup[1][0]);
    BN_COPY(py_3, lookup[1][1]);
    BN_COPY(pz_3, lookup[1][2]);
    ec_add(px_3, py_3, pz_3, px_2, py_2, pz_2);
    lookup[3][0] = px_3;
    lookup[3][1] = py_3;
fff72eb0:	91 5f 00 28 	stw     r10,40(r31)
    lookup[3][2] = pz_3;

    bn_modinv(u1, s, consts_p()->ec_order);      // s no longer needed (NLN)
fff72eb4:	7f 84 e3 78 	mr      r4,r28
    BN_COPY(py_3, lookup[1][1]);
    BN_COPY(pz_3, lookup[1][2]);
    ec_add(px_3, py_3, pz_3, px_2, py_2, pz_2);
    lookup[3][0] = px_3;
    lookup[3][1] = py_3;
    lookup[3][2] = pz_3;
fff72eb8:	81 21 0e 28 	lwz     r9,3624(r1)

    bn_modinv(u1, s, consts_p()->ec_order);      // s no longer needed (NLN)
fff72ebc:	38 61 0c 40 	addi    r3,r1,3136
    BN_COPY(py_3, lookup[1][1]);
    BN_COPY(pz_3, lookup[1][2]);
    ec_add(px_3, py_3, pz_3, px_2, py_2, pz_2);
    lookup[3][0] = px_3;
    lookup[3][1] = py_3;
    lookup[3][2] = pz_3;
fff72ec0:	91 3f 00 2c 	stw     r9,44(r31)

    bn_modinv(u1, s, consts_p()->ec_order);      // s no longer needed (NLN)
fff72ec4:	90 01 0e 34 	stw     r0,3636(r1)
fff72ec8:	4b ff f4 81 	bl      fff72348 <_Z9bn_modinvPmPKmS1_>
    BN_COPY(u2, r);
fff72ecc:	38 61 0b fc 	addi    r3,r1,3068
fff72ed0:	38 81 0d d8 	addi    r4,r1,3544
fff72ed4:	4b ff ed 55 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    bn_modmul_order(u2, u1);
    bn_modmul_order(u1, e);          // e NLN
fff72ed8:	3b a1 0d 50 	addi    r29,r1,3408
    lookup[3][1] = py_3;
    lookup[3][2] = pz_3;

    bn_modinv(u1, s, consts_p()->ec_order);      // s no longer needed (NLN)
    BN_COPY(u2, r);
    bn_modmul_order(u2, u1);
fff72edc:	38 61 0b fc 	addi    r3,r1,3068
fff72ee0:	38 81 0c 40 	addi    r4,r1,3136
fff72ee4:	4b ff f2 69 	bl      fff7214c <_Z15bn_modmul_orderPmPKm>
    bn_modmul_order(u1, e);          // e NLN
fff72ee8:	7f a4 eb 78 	mr      r4,r29
fff72eec:	38 61 0c 40 	addi    r3,r1,3136
fff72ef0:	4b ff f2 5d 	bl      fff7214c <_Z15bn_modmul_orderPmPKm>

    // reuse (e,s) for base multiplication
    BN_COPY(e, consts_p()->prime_px);            // (e,s) <- (base point)
fff72ef4:	7f a3 eb 78 	mr      r3,r29
fff72ef8:	38 9e 00 88 	addi    r4,r30,136
fff72efc:	4b ff ed 2d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(s, consts_p()->prime_py);
fff72f00:	7f 83 e3 78 	mr      r3,r28
fff72f04:	38 9e 00 cc 	addi    r4,r30,204
fff72f08:	4b ff ed 21 	bl      fff71c28 <_Z7BN_COPYPmPKm>

    //Q
    lookup[4][0] = e;
    lookup[4][1] = s;
fff72f0c:	93 9f 00 34 	stw     r28,52(r31)
    lookup[4][2] = bn_one;

    //2Q
    BN_COPY(qx_2, lookup[4][0]);
fff72f10:	3b 81 09 98 	addi    r28,r1,2456
    BN_COPY(s, consts_p()->prime_py);

    //Q
    lookup[4][0] = e;
    lookup[4][1] = s;
    lookup[4][2] = bn_one;
fff72f14:	39 21 07 bc 	addi    r9,r1,1980

    //2Q
    BN_COPY(qx_2, lookup[4][0]);
fff72f18:	7f 83 e3 78 	mr      r3,r28
fff72f1c:	7f a4 eb 78 	mr      r4,r29
    BN_COPY(s, consts_p()->prime_py);

    //Q
    lookup[4][0] = e;
    lookup[4][1] = s;
    lookup[4][2] = bn_one;
fff72f20:	91 3f 00 38 	stw     r9,56(r31)
    // reuse (e,s) for base multiplication
    BN_COPY(e, consts_p()->prime_px);            // (e,s) <- (base point)
    BN_COPY(s, consts_p()->prime_py);

    //Q
    lookup[4][0] = e;
fff72f24:	93 bf 00 30 	stw     r29,48(r31)
    lookup[4][1] = s;
    lookup[4][2] = bn_one;

    //2Q
    BN_COPY(qx_2, lookup[4][0]);
fff72f28:	4b ff ed 01 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(qy_2, lookup[4][1]);
fff72f2c:	3b a1 09 54 	addi    r29,r1,2388
fff72f30:	80 9f 00 34 	lwz     r4,52(r31)
fff72f34:	7f a3 eb 78 	mr      r3,r29
fff72f38:	4b ff ec f1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(qz_2, lookup[4][2]);
fff72f3c:	3b c1 09 10 	addi    r30,r1,2320
fff72f40:	80 9f 00 38 	lwz     r4,56(r31)
fff72f44:	7f c3 f3 78 	mr      r3,r30
fff72f48:	4b ff ec e1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_double(qx_2, qy_2, qz_2);
fff72f4c:	7f c5 f3 78 	mr      r5,r30
fff72f50:	7f a4 eb 78 	mr      r4,r29
fff72f54:	7f 83 e3 78 	mr      r3,r28
fff72f58:	4b ff f7 21 	bl      fff72678 <_Z9ec_doublePmS_S_>
    lookup[8][0] = qx_2;
    lookup[8][1] = qy_2;
    lookup[8][2] = qz_2;

    //3Q
    BN_COPY(qx_3, lookup[4][0]);
fff72f5c:	39 41 08 cc 	addi    r10,r1,2252
fff72f60:	80 9f 00 30 	lwz     r4,48(r31)
fff72f64:	7d 43 53 78 	mr      r3,r10
    //2Q
    BN_COPY(qx_2, lookup[4][0]);
    BN_COPY(qy_2, lookup[4][1]);
    BN_COPY(qz_2, lookup[4][2]);
    ec_double(qx_2, qy_2, qz_2);
    lookup[8][0] = qx_2;
fff72f68:	1b 9f 00 60 	stvd    d28,96(r31)
    lookup[8][1] = qy_2;
    lookup[8][2] = qz_2;
fff72f6c:	93 df 00 68 	stw     r30,104(r31)

    //3Q
    BN_COPY(qx_3, lookup[4][0]);
fff72f70:	91 41 0e 30 	stw     r10,3632(r1)
fff72f74:	4b ff ec b5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(qy_3, lookup[4][1]);
fff72f78:	39 21 08 88 	addi    r9,r1,2184
fff72f7c:	80 9f 00 34 	lwz     r4,52(r31)
fff72f80:	7d 23 4b 78 	mr      r3,r9
fff72f84:	91 21 0e 28 	stw     r9,3624(r1)
fff72f88:	4b ff ec a1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(qz_3, lookup[4][2]);
fff72f8c:	80 9f 00 38 	lwz     r4,56(r31)
fff72f90:	38 61 08 44 	addi    r3,r1,2116
fff72f94:	4b ff ec 95 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(qx_3, qy_3, qz_3, qx_2, qy_2, qz_2);
fff72f98:	81 41 0e 30 	lwz     r10,3632(r1)
fff72f9c:	81 21 0e 28 	lwz     r9,3624(r1)
fff72fa0:	7f 86 e3 78 	mr      r6,r28
fff72fa4:	7f a7 eb 78 	mr      r7,r29
fff72fa8:	7f c8 f3 78 	mr      r8,r30
fff72fac:	38 a1 08 44 	addi    r5,r1,2116
fff72fb0:	7d 24 4b 78 	mr      r4,r9
fff72fb4:	7d 43 53 78 	mr      r3,r10
fff72fb8:	4b ff f8 65 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[12][0] = qx_3;
fff72fbc:	81 41 0e 30 	lwz     r10,3632(r1)
         p2_g3x[NWORDS], p2_g3y[NWORDS], p2_g3z[NWORDS],
         p3_g2x[NWORDS], p3_g2y[NWORDS], p3_g2z[NWORDS],
         p3_g3x[NWORDS], p3_g3y[NWORDS], p3_g3z[NWORDS];

    //P+Q
    BN_COPY(p_gx, lookup[4][0]);
fff72fc0:	3b 81 06 f0 	addi    r28,r1,1776
    //3Q
    BN_COPY(qx_3, lookup[4][0]);
    BN_COPY(qy_3, lookup[4][1]);
    BN_COPY(qz_3, lookup[4][2]);
    ec_add(qx_3, qy_3, qz_3, qx_2, qy_2, qz_2);
    lookup[12][0] = qx_3;
fff72fc4:	91 5f 00 90 	stw     r10,144(r31)
         p2_g3x[NWORDS], p2_g3y[NWORDS], p2_g3z[NWORDS],
         p3_g2x[NWORDS], p3_g2y[NWORDS], p3_g2z[NWORDS],
         p3_g3x[NWORDS], p3_g3y[NWORDS], p3_g3z[NWORDS];

    //P+Q
    BN_COPY(p_gx, lookup[4][0]);
fff72fc8:	80 9f 00 30 	lwz     r4,48(r31)
    BN_COPY(qx_3, lookup[4][0]);
    BN_COPY(qy_3, lookup[4][1]);
    BN_COPY(qz_3, lookup[4][2]);
    ec_add(qx_3, qy_3, qz_3, qx_2, qy_2, qz_2);
    lookup[12][0] = qx_3;
    lookup[12][1] = qy_3;
fff72fcc:	81 21 0e 28 	lwz     r9,3624(r1)
    lookup[12][2] = qz_3;
fff72fd0:	39 41 08 44 	addi    r10,r1,2116
         p2_g3x[NWORDS], p2_g3y[NWORDS], p2_g3z[NWORDS],
         p3_g2x[NWORDS], p3_g2y[NWORDS], p3_g2z[NWORDS],
         p3_g3x[NWORDS], p3_g3y[NWORDS], p3_g3z[NWORDS];

    //P+Q
    BN_COPY(p_gx, lookup[4][0]);
fff72fd4:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(qx_3, lookup[4][0]);
    BN_COPY(qy_3, lookup[4][1]);
    BN_COPY(qz_3, lookup[4][2]);
    ec_add(qx_3, qy_3, qz_3, qx_2, qy_2, qz_2);
    lookup[12][0] = qx_3;
    lookup[12][1] = qy_3;
fff72fd8:	91 3f 00 94 	stw     r9,148(r31)
    lookup[12][2] = qz_3;
fff72fdc:	91 5f 00 98 	stw     r10,152(r31)
         p3_g2x[NWORDS], p3_g2y[NWORDS], p3_g2z[NWORDS],
         p3_g3x[NWORDS], p3_g3y[NWORDS], p3_g3z[NWORDS];

    //P+Q
    BN_COPY(p_gx, lookup[4][0]);
    BN_COPY(p_gy, lookup[4][1]);
fff72fe0:	3b a1 06 ac 	addi    r29,r1,1708
         p2_g3x[NWORDS], p2_g3y[NWORDS], p2_g3z[NWORDS],
         p3_g2x[NWORDS], p3_g2y[NWORDS], p3_g2z[NWORDS],
         p3_g3x[NWORDS], p3_g3y[NWORDS], p3_g3z[NWORDS];

    //P+Q
    BN_COPY(p_gx, lookup[4][0]);
fff72fe4:	4b ff ec 45 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p_gy, lookup[4][1]);
fff72fe8:	80 9f 00 34 	lwz     r4,52(r31)
fff72fec:	7f a3 eb 78 	mr      r3,r29
fff72ff0:	4b ff ec 39 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p_gz, lookup[4][2]);
fff72ff4:	3b c1 06 68 	addi    r30,r1,1640
fff72ff8:	80 9f 00 38 	lwz     r4,56(r31)
fff72ffc:	7f c3 f3 78 	mr      r3,r30
fff73000:	4b ff ec 29 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p_gx, p_gy, p_gz, lookup[1][0], lookup[1][1], lookup[1][2]);
fff73004:	80 df 00 0c 	lwz     r6,12(r31)
fff73008:	14 ff 00 10 	lvd     d7,16(r31)
fff7300c:	7f c5 f3 78 	mr      r5,r30
fff73010:	7f a4 eb 78 	mr      r4,r29
fff73014:	7f 83 e3 78 	mr      r3,r28
fff73018:	4b ff f8 05 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[5][0] = p_gx;
fff7301c:	93 9f 00 3c 	stw     r28,60(r31)
    lookup[5][1] = p_gy;
    lookup[5][2] = p_gz;

    //2P+Q
    BN_COPY(p2_gx, lookup[4][0]);
fff73020:	80 9f 00 30 	lwz     r4,48(r31)
fff73024:	3b 81 06 24 	addi    r28,r1,1572
fff73028:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p_gx, lookup[4][0]);
    BN_COPY(p_gy, lookup[4][1]);
    BN_COPY(p_gz, lookup[4][2]);
    ec_add(p_gx, p_gy, p_gz, lookup[1][0], lookup[1][1], lookup[1][2]);
    lookup[5][0] = p_gx;
    lookup[5][1] = p_gy;
fff7302c:	1b bf 00 40 	stvd    d29,64(r31)
    lookup[5][2] = p_gz;

    //2P+Q
    BN_COPY(p2_gx, lookup[4][0]);
    BN_COPY(p2_gy, lookup[4][1]);
fff73030:	3b a1 05 e0 	addi    r29,r1,1504
    lookup[5][0] = p_gx;
    lookup[5][1] = p_gy;
    lookup[5][2] = p_gz;

    //2P+Q
    BN_COPY(p2_gx, lookup[4][0]);
fff73034:	4b ff eb f5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p2_gy, lookup[4][1]);
fff73038:	80 9f 00 34 	lwz     r4,52(r31)
fff7303c:	7f a3 eb 78 	mr      r3,r29
fff73040:	4b ff eb e9 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p2_gz, lookup[4][2]);
fff73044:	3b c1 05 9c 	addi    r30,r1,1436
fff73048:	80 9f 00 38 	lwz     r4,56(r31)
fff7304c:	7f c3 f3 78 	mr      r3,r30
fff73050:	4b ff eb d9 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p2_gx, p2_gy, p2_gz, lookup[2][0], lookup[2][1], lookup[2][2]);
fff73054:	14 df 00 18 	lvd     d6,24(r31)
fff73058:	81 1f 00 20 	lwz     r8,32(r31)
fff7305c:	7f c5 f3 78 	mr      r5,r30
fff73060:	7f a4 eb 78 	mr      r4,r29
fff73064:	7f 83 e3 78 	mr      r3,r28
fff73068:	4b ff f7 b5 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[6][0] = p2_gx;
fff7306c:	93 9f 00 48 	stw     r28,72(r31)
    lookup[6][1] = p2_gy;
    lookup[6][2] = p2_gz;

    //3P+Q
    BN_COPY(p3_gx, lookup[4][0]);
fff73070:	80 9f 00 30 	lwz     r4,48(r31)
fff73074:	3b 81 05 58 	addi    r28,r1,1368
fff73078:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p2_gx, lookup[4][0]);
    BN_COPY(p2_gy, lookup[4][1]);
    BN_COPY(p2_gz, lookup[4][2]);
    ec_add(p2_gx, p2_gy, p2_gz, lookup[2][0], lookup[2][1], lookup[2][2]);
    lookup[6][0] = p2_gx;
    lookup[6][1] = p2_gy;
fff7307c:	93 bf 00 4c 	stw     r29,76(r31)
    lookup[6][2] = p2_gz;
fff73080:	93 df 00 50 	stw     r30,80(r31)

    //3P+Q
    BN_COPY(p3_gx, lookup[4][0]);
    BN_COPY(p3_gy, lookup[4][1]);
fff73084:	3b a1 05 14 	addi    r29,r1,1300
    lookup[6][0] = p2_gx;
    lookup[6][1] = p2_gy;
    lookup[6][2] = p2_gz;

    //3P+Q
    BN_COPY(p3_gx, lookup[4][0]);
fff73088:	4b ff eb a1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p3_gy, lookup[4][1]);
fff7308c:	80 9f 00 34 	lwz     r4,52(r31)
fff73090:	7f a3 eb 78 	mr      r3,r29
fff73094:	4b ff eb 95 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p3_gz, lookup[4][2]);
fff73098:	3b c1 04 d0 	addi    r30,r1,1232
fff7309c:	80 9f 00 38 	lwz     r4,56(r31)
fff730a0:	7f c3 f3 78 	mr      r3,r30
fff730a4:	4b ff eb 85 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p3_gx, p3_gy, p3_gz, lookup[3][0], lookup[3][1], lookup[3][2]);
fff730a8:	80 df 00 24 	lwz     r6,36(r31)
fff730ac:	14 ff 00 28 	lvd     d7,40(r31)
fff730b0:	7f c5 f3 78 	mr      r5,r30
fff730b4:	7f a4 eb 78 	mr      r4,r29
fff730b8:	7f 83 e3 78 	mr      r3,r28
fff730bc:	4b ff f7 61 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[7][0] = p3_gx;
fff730c0:	93 9f 00 54 	stw     r28,84(r31)
    lookup[7][1] = p3_gy;
    lookup[7][2] = p3_gz;

    //P+2Q
    BN_COPY(p_g2x, lookup[1][0]);
fff730c4:	80 9f 00 0c 	lwz     r4,12(r31)
fff730c8:	3b 81 04 8c 	addi    r28,r1,1164
fff730cc:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p3_gx, lookup[4][0]);
    BN_COPY(p3_gy, lookup[4][1]);
    BN_COPY(p3_gz, lookup[4][2]);
    ec_add(p3_gx, p3_gy, p3_gz, lookup[3][0], lookup[3][1], lookup[3][2]);
    lookup[7][0] = p3_gx;
    lookup[7][1] = p3_gy;
fff730d0:	1b bf 00 58 	stvd    d29,88(r31)
    lookup[7][2] = p3_gz;

    //P+2Q
    BN_COPY(p_g2x, lookup[1][0]);
    BN_COPY(p_g2y, lookup[1][1]);
fff730d4:	3b a1 04 48 	addi    r29,r1,1096
    lookup[7][0] = p3_gx;
    lookup[7][1] = p3_gy;
    lookup[7][2] = p3_gz;

    //P+2Q
    BN_COPY(p_g2x, lookup[1][0]);
fff730d8:	4b ff eb 51 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p_g2y, lookup[1][1]);
fff730dc:	80 9f 00 10 	lwz     r4,16(r31)
fff730e0:	7f a3 eb 78 	mr      r3,r29
fff730e4:	4b ff eb 45 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p_g2z, lookup[1][2]);
fff730e8:	3b c1 04 04 	addi    r30,r1,1028
fff730ec:	80 9f 00 14 	lwz     r4,20(r31)
fff730f0:	7f c3 f3 78 	mr      r3,r30
fff730f4:	4b ff eb 35 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p_g2x, p_g2y, p_g2z, lookup[8][0], lookup[8][1], lookup[8][2]);
fff730f8:	14 df 00 60 	lvd     d6,96(r31)
fff730fc:	81 1f 00 68 	lwz     r8,104(r31)
fff73100:	7f c5 f3 78 	mr      r5,r30
fff73104:	7f a4 eb 78 	mr      r4,r29
fff73108:	7f 83 e3 78 	mr      r3,r28
fff7310c:	4b ff f7 11 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[9][0] = p_g2x;
fff73110:	93 9f 00 6c 	stw     r28,108(r31)
    lookup[9][1] = p_g2y;
    lookup[9][2] = p_g2z;

    //P+3Q
    BN_COPY(p_g3x, lookup[1][0]);
fff73114:	80 9f 00 0c 	lwz     r4,12(r31)
fff73118:	3b 81 03 c0 	addi    r28,r1,960
fff7311c:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p_g2x, lookup[1][0]);
    BN_COPY(p_g2y, lookup[1][1]);
    BN_COPY(p_g2z, lookup[1][2]);
    ec_add(p_g2x, p_g2y, p_g2z, lookup[8][0], lookup[8][1], lookup[8][2]);
    lookup[9][0] = p_g2x;
    lookup[9][1] = p_g2y;
fff73120:	1b bf 00 70 	stvd    d29,112(r31)
    lookup[9][2] = p_g2z;

    //P+3Q
    BN_COPY(p_g3x, lookup[1][0]);
    BN_COPY(p_g3y, lookup[1][1]);
fff73124:	3b a1 03 7c 	addi    r29,r1,892
    lookup[9][0] = p_g2x;
    lookup[9][1] = p_g2y;
    lookup[9][2] = p_g2z;

    //P+3Q
    BN_COPY(p_g3x, lookup[1][0]);
fff73128:	4b ff eb 01 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p_g3y, lookup[1][1]);
fff7312c:	80 9f 00 10 	lwz     r4,16(r31)
fff73130:	7f a3 eb 78 	mr      r3,r29
fff73134:	4b ff ea f5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p_g3z, lookup[1][2]);
fff73138:	3b c1 03 38 	addi    r30,r1,824
fff7313c:	80 9f 00 14 	lwz     r4,20(r31)
fff73140:	7f c3 f3 78 	mr      r3,r30
fff73144:	4b ff ea e5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p_g3x, p_g3y, p_g3z, lookup[12][0], lookup[12][1], lookup[12][2]);
fff73148:	14 df 00 90 	lvd     d6,144(r31)
fff7314c:	81 1f 00 98 	lwz     r8,152(r31)
fff73150:	7f c5 f3 78 	mr      r5,r30
fff73154:	7f a4 eb 78 	mr      r4,r29
fff73158:	7f 83 e3 78 	mr      r3,r28
fff7315c:	4b ff f6 c1 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[13][0] = p_g3x;
fff73160:	93 9f 00 9c 	stw     r28,156(r31)
    lookup[13][1] = p_g3y;
    lookup[13][2] = p_g3z;

    //2P+2Q
    BN_COPY(p2_g2x, lookup[2][0]);
fff73164:	80 9f 00 18 	lwz     r4,24(r31)
fff73168:	3b 81 02 f4 	addi    r28,r1,756
fff7316c:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p_g3x, lookup[1][0]);
    BN_COPY(p_g3y, lookup[1][1]);
    BN_COPY(p_g3z, lookup[1][2]);
    ec_add(p_g3x, p_g3y, p_g3z, lookup[12][0], lookup[12][1], lookup[12][2]);
    lookup[13][0] = p_g3x;
    lookup[13][1] = p_g3y;
fff73170:	1b bf 00 a0 	stvd    d29,160(r31)
    lookup[13][2] = p_g3z;

    //2P+2Q
    BN_COPY(p2_g2x, lookup[2][0]);
    BN_COPY(p2_g2y, lookup[2][1]);
fff73174:	3b a1 02 b0 	addi    r29,r1,688
    lookup[13][0] = p_g3x;
    lookup[13][1] = p_g3y;
    lookup[13][2] = p_g3z;

    //2P+2Q
    BN_COPY(p2_g2x, lookup[2][0]);
fff73178:	4b ff ea b1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p2_g2y, lookup[2][1]);
fff7317c:	80 9f 00 1c 	lwz     r4,28(r31)
fff73180:	7f a3 eb 78 	mr      r3,r29
fff73184:	4b ff ea a5 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p2_g2z, lookup[2][2]);
fff73188:	3b c1 02 6c 	addi    r30,r1,620
fff7318c:	80 9f 00 20 	lwz     r4,32(r31)
fff73190:	7f c3 f3 78 	mr      r3,r30
fff73194:	4b ff ea 95 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p2_g2x, p2_g2y, p2_g2z, lookup[8][0], lookup[8][1], lookup[8][2]);
fff73198:	14 df 00 60 	lvd     d6,96(r31)
fff7319c:	81 1f 00 68 	lwz     r8,104(r31)
fff731a0:	7f c5 f3 78 	mr      r5,r30
fff731a4:	7f a4 eb 78 	mr      r4,r29
fff731a8:	7f 83 e3 78 	mr      r3,r28
fff731ac:	4b ff f6 71 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[10][0] = p2_g2x;
fff731b0:	93 9f 00 78 	stw     r28,120(r31)
    lookup[10][1] = p2_g2y;
    lookup[10][2] = p2_g2z;

    //3P+2Q
    BN_COPY(p3_g2x, lookup[3][0]);
fff731b4:	80 9f 00 24 	lwz     r4,36(r31)
fff731b8:	3b 81 01 5c 	addi    r28,r1,348
fff731bc:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p2_g2x, lookup[2][0]);
    BN_COPY(p2_g2y, lookup[2][1]);
    BN_COPY(p2_g2z, lookup[2][2]);
    ec_add(p2_g2x, p2_g2y, p2_g2z, lookup[8][0], lookup[8][1], lookup[8][2]);
    lookup[10][0] = p2_g2x;
    lookup[10][1] = p2_g2y;
fff731c0:	93 bf 00 7c 	stw     r29,124(r31)
    lookup[10][2] = p2_g2z;
fff731c4:	93 df 00 80 	stw     r30,128(r31)

    //3P+2Q
    BN_COPY(p3_g2x, lookup[3][0]);
    BN_COPY(p3_g2y, lookup[3][1]);
fff731c8:	3b a1 01 18 	addi    r29,r1,280
    lookup[10][0] = p2_g2x;
    lookup[10][1] = p2_g2y;
    lookup[10][2] = p2_g2z;

    //3P+2Q
    BN_COPY(p3_g2x, lookup[3][0]);
fff731cc:	4b ff ea 5d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p3_g2y, lookup[3][1]);
fff731d0:	80 9f 00 28 	lwz     r4,40(r31)
fff731d4:	7f a3 eb 78 	mr      r3,r29
fff731d8:	4b ff ea 51 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p3_g2z, lookup[3][2]);
fff731dc:	3b c1 00 d4 	addi    r30,r1,212
fff731e0:	80 9f 00 2c 	lwz     r4,44(r31)
fff731e4:	7f c3 f3 78 	mr      r3,r30
fff731e8:	4b ff ea 41 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p3_g2x, p3_g2y, p3_g2z, lookup[8][0], lookup[8][1], lookup[8][2]);
fff731ec:	14 df 00 60 	lvd     d6,96(r31)
fff731f0:	81 1f 00 68 	lwz     r8,104(r31)
fff731f4:	7f c5 f3 78 	mr      r5,r30
fff731f8:	7f a4 eb 78 	mr      r4,r29
fff731fc:	7f 83 e3 78 	mr      r3,r28
fff73200:	4b ff f6 1d 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[11][0] = p3_g2x;
fff73204:	93 9f 00 84 	stw     r28,132(r31)
    lookup[11][1] = p3_g2y;
    lookup[11][2] = p3_g2z;

    //2P+3Q
    BN_COPY(p2_g3x, lookup[2][0]);
fff73208:	80 9f 00 18 	lwz     r4,24(r31)
fff7320c:	3b 81 02 28 	addi    r28,r1,552
fff73210:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p3_g2x, lookup[3][0]);
    BN_COPY(p3_g2y, lookup[3][1]);
    BN_COPY(p3_g2z, lookup[3][2]);
    ec_add(p3_g2x, p3_g2y, p3_g2z, lookup[8][0], lookup[8][1], lookup[8][2]);
    lookup[11][0] = p3_g2x;
    lookup[11][1] = p3_g2y;
fff73214:	1b bf 00 88 	stvd    d29,136(r31)
    lookup[11][2] = p3_g2z;

    //2P+3Q
    BN_COPY(p2_g3x, lookup[2][0]);
    BN_COPY(p2_g3y, lookup[2][1]);
fff73218:	3b a1 01 e4 	addi    r29,r1,484
    lookup[11][0] = p3_g2x;
    lookup[11][1] = p3_g2y;
    lookup[11][2] = p3_g2z;

    //2P+3Q
    BN_COPY(p2_g3x, lookup[2][0]);
fff7321c:	4b ff ea 0d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p2_g3y, lookup[2][1]);
fff73220:	80 9f 00 1c 	lwz     r4,28(r31)
fff73224:	7f a3 eb 78 	mr      r3,r29
fff73228:	4b ff ea 01 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p2_g3z, lookup[2][2]);
fff7322c:	3b c1 01 a0 	addi    r30,r1,416
fff73230:	80 9f 00 20 	lwz     r4,32(r31)
fff73234:	7f c3 f3 78 	mr      r3,r30
fff73238:	4b ff e9 f1 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p2_g3x, p2_g3y, p2_g3z, lookup[12][0], lookup[12][1], lookup[12][2]);
fff7323c:	14 df 00 90 	lvd     d6,144(r31)
fff73240:	81 1f 00 98 	lwz     r8,152(r31)
fff73244:	7f c5 f3 78 	mr      r5,r30
fff73248:	7f a4 eb 78 	mr      r4,r29
fff7324c:	7f 83 e3 78 	mr      r3,r28
fff73250:	4b ff f5 cd 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[14][0] = p2_g3x;
fff73254:	93 9f 00 a8 	stw     r28,168(r31)
    lookup[14][1] = p2_g3y;
    lookup[14][2] = p2_g3z;

    //3P+3Q
    BN_COPY(p3_g3x, lookup[3][0]);
fff73258:	80 9f 00 24 	lwz     r4,36(r31)
fff7325c:	3b 81 00 90 	addi    r28,r1,144
fff73260:	7f 83 e3 78 	mr      r3,r28
    BN_COPY(p2_g3x, lookup[2][0]);
    BN_COPY(p2_g3y, lookup[2][1]);
    BN_COPY(p2_g3z, lookup[2][2]);
    ec_add(p2_g3x, p2_g3y, p2_g3z, lookup[12][0], lookup[12][1], lookup[12][2]);
    lookup[14][0] = p2_g3x;
    lookup[14][1] = p2_g3y;
fff73264:	93 bf 00 ac 	stw     r29,172(r31)
    lookup[14][2] = p2_g3z;
fff73268:	93 df 00 b0 	stw     r30,176(r31)

    //3P+3Q
    BN_COPY(p3_g3x, lookup[3][0]);
    BN_COPY(p3_g3y, lookup[3][1]);
fff7326c:	3b a1 00 4c 	addi    r29,r1,76
    lookup[14][0] = p2_g3x;
    lookup[14][1] = p2_g3y;
    lookup[14][2] = p2_g3z;

    //3P+3Q
    BN_COPY(p3_g3x, lookup[3][0]);
fff73270:	4b ff e9 b9 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p3_g3y, lookup[3][1]);
fff73274:	80 9f 00 28 	lwz     r4,40(r31)
fff73278:	7f a3 eb 78 	mr      r3,r29
fff7327c:	4b ff e9 ad 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    BN_COPY(p3_g3z, lookup[3][2]);
fff73280:	3b c1 00 08 	addi    r30,r1,8
fff73284:	80 9f 00 2c 	lwz     r4,44(r31)
fff73288:	7f c3 f3 78 	mr      r3,r30
fff7328c:	4b ff e9 9d 	bl      fff71c28 <_Z7BN_COPYPmPKm>
    ec_add(p3_g3x, p3_g3y, p3_g3z, lookup[12][0], lookup[12][1], lookup[12][2]);
fff73290:	81 1f 00 98 	lwz     r8,152(r31)
fff73294:	14 df 00 90 	lvd     d6,144(r31)
fff73298:	7f a4 eb 78 	mr      r4,r29
fff7329c:	7f c5 f3 78 	mr      r5,r30
fff732a0:	7f 83 e3 78 	mr      r3,r28
fff732a4:	4b ff f5 79 	bl      fff7281c <_Z6ec_addPmS_S_PKmS1_S1_>
    lookup[15][0] = p3_g3x;
    lookup[15][1] = p3_g3y;
    lookup[15][2] = p3_g3z;

    memcpy(res_x, bn_zero, sizeof(res_x));
fff732a8:	38 81 08 00 	addi    r4,r1,2048
fff732ac:	38 a0 00 44 	li      r5,68
fff732b0:	38 61 07 78 	addi    r3,r1,1912
    //3P+3Q
    BN_COPY(p3_g3x, lookup[3][0]);
    BN_COPY(p3_g3y, lookup[3][1]);
    BN_COPY(p3_g3z, lookup[3][2]);
    ec_add(p3_g3x, p3_g3y, p3_g3z, lookup[12][0], lookup[12][1], lookup[12][2]);
    lookup[15][0] = p3_g3x;
fff732b4:	93 9f 00 b4 	stw     r28,180(r31)
    lookup[15][1] = p3_g3y;
fff732b8:	1b bf 00 b8 	stvd    d29,184(r31)
    lookup[15][2] = p3_g3z;

    memcpy(res_x, bn_zero, sizeof(res_x));
fff732bc:	48 00 70 fd 	bl      fff7a3b8 <memcpy>
    memcpy(res_y, bn_zero, sizeof(res_y));
fff732c0:	38 81 08 00 	addi    r4,r1,2048
fff732c4:	38 a0 00 44 	li      r5,68
fff732c8:	38 61 07 34 	addi    r3,r1,1844
fff732cc:	48 00 70 ed 	bl      fff7a3b8 <memcpy>

    ec_multiply (res_x, res_y, pz, u1, u2);
fff732d0:	38 c1 0c 40 	addi    r6,r1,3136
fff732d4:	38 e1 0b fc 	addi    r7,r1,3068
fff732d8:	38 81 07 34 	addi    r4,r1,1844
fff732dc:	38 a1 0c 84 	addi    r5,r1,3204
fff732e0:	38 61 07 78 	addi    r3,r1,1912
fff732e4:	4b ff f7 a1 	bl      fff72a84 <_Z11ec_multiplyPmS_S_PKmS1_>

    ec_projective2affine(res_x, res_y, pz);
fff732e8:	38 61 07 78 	addi    r3,r1,1912
fff732ec:	38 81 07 34 	addi    r4,r1,1844
fff732f0:	38 a1 0c 84 	addi    r5,r1,3204
fff732f4:	4b ff f3 2d 	bl      fff72620 <_Z20ec_projective2affinePmS_PKm>

    if (bn_ge_order(res_x))
fff732f8:	80 01 0e 34 	lwz     r0,3636(r1)
fff732fc:	38 61 07 78 	addi    r3,r1,1912
fff73300:	7c 04 03 78 	mr      r4,r0
fff73304:	4b ff eb 21 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff73308:	80 01 0e 34 	lwz     r0,3636(r1)
fff7330c:	06 83 00 08 	bwltz   r3,fff7331c <_Z9ec_verifyPKhS0_S0_+0x6c4>
    {
        bn_sub(res_x, consts_p()->ec_order);    // px mod order
fff73310:	38 61 07 78 	addi    r3,r1,1912
fff73314:	7c 04 03 78 	mr      r4,r0
fff73318:	4b ff eb e1 	bl      fff71ef8 <_Z6bn_subPmPKm>
    }

    return (! bn_cmp(r, res_x));
fff7331c:	38 61 0d d8 	addi    r3,r1,3544
fff73320:	38 81 07 78 	addi    r4,r1,1912
fff73324:	4b ff eb 01 	bl      fff71e24 <_Z6bn_cmpPKmS0_>
fff73328:	7f e3 00 d0 	neg     r31,r3
fff7332c:	7f e3 18 38 	and     r3,r31,r3
fff73330:	7c 7f 00 34 	cntlzw  r31,r3
fff73334:	23 ff 00 1f 	subfic  r31,r31,31
fff73338:	57 ff 0f fe 	rlwinm  r31,r31,1,31,31
}
fff7333c:	80 01 0e 4c 	lwz     r0,3660(r1)
fff73340:	7f e3 fb 78 	mr      r3,r31
fff73344:	7c 08 03 a6 	mtlr    r0
fff73348:	17 81 0e 38 	lvd     d28,3640(r1)
fff7334c:	17 c1 0e 40 	lvd     d30,3648(r1)
fff73350:	38 21 0e 48 	addi    r1,r1,3656
fff73354:	4e 80 00 20 	blr

fff73358 <_ZL6consts>:
fff73358:	00 00 01 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
fff73368:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
fff73378:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
fff73388:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
fff73398:	ff ff ff ff 00 00 01 ff ff ff ff ff ff ff ff ff     ................
fff733a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
fff733b8:	ff ff ff ff ff ff ff fa 51 86 87 83 bf 2f 96 6b     ........Q..../.k
fff733c8:	7f cc 01 48 f7 09 a5 d0 3b b5 c9 b8 89 9c 47 ae     ...H....;.....G.
fff733d8:	bb 6f b7 1e 91 38 64 09 00 00 00 c6 85 8e 06 b7     .o...8d.........
fff733e8:	04 04 e9 cd 9e 3e cb 66 23 95 b4 42 9c 64 81 39     .....>.f#..B.d.9
fff733f8:	05 3f b5 21 f8 28 af 60 6b 4d 3d ba a1 4b 5e 77     .?.!.(.`kM=..K^w
fff73408:	ef e7 59 28 fe 1d c1 27 a2 ff a8 de 33 48 b3 c1     ..Y(...'....3H..
fff73418:	85 6a 42 9b f9 7e 7e 31 c2 e5 bd 66 00 00 01 18     .jB..~~1...f....
fff73428:	39 29 6a 78 9a 3b c0 04 5c 8a 5f b4 2c 7d 1b d9     9)jx.;..\._.,}..
fff73438:	98 f5 44 49 57 9b 44 68 17 af bd 17 27 3e 66 2c     ..DIW.Dh....'>f,
fff73448:	97 ee 72 99 5e f4 26 40 c5 50 b9 01 3f ad 07 61     ..r.^.&@.P..?..a
fff73458:	35 3c 70 86 a2 72 c2 40 88 be 94 76 9f d1 66 50     5<p..r.@...v..fP
	...
fff73488:	00 00 00 05 ae 79 78 7c 40 d0 69 94 80 33 fe b7     .....yx|@.i..3..
fff73498:	08 f6 5a 2f c4 4a 36 47 76 63 b8 51 44 90 48 e1     ..Z/.J6Gvc.QD.H.
fff734a8:	6e c7 9b f6 00 00 00 00 00 00 00 00 00 00 00 00     n...............
	...
fff734ec:	00 00 00 03 00 00 00 51 95 3e b9 61 8e 1c 9a 1f     .......Q.>.a....
fff734fc:	92 9a 21 a0 b6 85 40 ee a2 da 72 5b 99 b3 15 f3     ..!...@...r[....
fff7350c:	b8 b4 89 91 8e f1 09 e1 56 19 39 51 ec 7e 93 7b     ........V.9Q.~.{
fff7351c:	16 52 c0 bd 3b b1 bf 07 35 73 df 88 3d 2c 34 f1     .R..;...5s..=,4.
fff7352c:	ef 45 1f d4 6b 50 3f 00                             .E..kP?.

Disassembly of section .dilithiumalgo:

fff73938 <_ZL6load64PKh>:
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
  unsigned int i;
  uint64_t r = 0;

  for (i=0;i<8;i++)
fff73938:	39 00 00 08 	li      r8,8
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
fff7393c:	94 21 ff f0 	stwu    r1,-16(r1)
  unsigned int i;
  uint64_t r = 0;

  for (i=0;i<8;i++)
fff73940:	7d 09 03 a6 	mtctr   r8
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
fff73944:	1b c1 00 08 	stvd    d30,8(r1)
  unsigned int i;
  uint64_t r = 0;
fff73948:	39 40 00 00 	li      r10,0
fff7394c:	38 80 00 00 	li      r4,0

  for (i=0;i<8;i++)
fff73950:	39 20 00 00 	li      r9,0
    r |= (uint64_t)x[i] << 8*i;
fff73954:	7f e3 48 ae 	lbzx    r31,r3,r9
fff73958:	55 26 18 38 	rlwinm  r6,r9,3,0,28
fff7395c:	3b c0 00 00 	li      r30,0
fff73960:	7f c6 30 76 	slvd    d6,d30,r6
fff73964:	7d 4a 33 78 	or      r10,r10,r6
fff73968:	7c 84 3b 78 	or      r4,r4,r7
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
  unsigned int i;
  uint64_t r = 0;

  for (i=0;i<8;i++)
fff7396c:	39 29 00 01 	addi    r9,r9,1
fff73970:	42 00 ff e4 	bdnz    fff73954 <_ZL6load64PKh+0x1c>
    r |= (uint64_t)x[i] << 8*i;

  return r;
}
fff73974:	17 c1 00 08 	lvd     d30,8(r1)
fff73978:	7d 43 53 78 	mr      r3,r10
fff7397c:	38 21 00 10 	addi    r1,r1,16
fff73980:	4e 80 00 20 	blr

fff73984 <_ZL7store64Phy>:
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
  unsigned int i;

  for (i=0;i<8;i++)
fff73984:	39 40 00 08 	li      r10,8
fff73988:	7d 49 03 a6 	mtctr   r10
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
fff7398c:	7c a4 2b 78 	mr      r4,r5
  unsigned int i;

  for (i=0;i<8;i++)
fff73990:	39 20 00 00 	li      r9,0
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
fff73994:	7c c5 33 78 	mr      r5,r6
fff73998:	55 26 18 38 	rlwinm  r6,r9,3,0,28
  unsigned int i;

  for (i=0;i<8;i++)
    x[i] = u >> 8*i;
fff7399c:	7c 86 34 76 	srvd    d6,d4,r6
fff739a0:	7c e3 49 ae 	stbx    r7,r3,r9
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
  unsigned int i;

  for (i=0;i<8;i++)
fff739a4:	39 29 00 01 	addi    r9,r9,1
fff739a8:	42 00 ff f0 	bdnz    fff73998 <_ZL7store64Phy+0x14>
    x[i] = u >> 8*i;
}
fff739ac:	4e 80 00 20 	blr

fff739b0 <_ZL24KeccakF1600_StatePermutePy>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void __attribute__ ((noinline)) KeccakF1600_StatePermute(uint64_t state[25])
{
fff739b0:	94 21 fe 30 	stwu    r1,-464(r1)
  (uint64_t)0x800000008000000aULL,
  (uint64_t)0x8000000080008081ULL,
  (uint64_t)0x8000000000008080ULL,
  (uint64_t)0x0000000080000001ULL,
  (uint64_t)0x8000000080008008ULL
};
fff739b4:	3c 80 ff f7 	lis     r4,-9
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void __attribute__ ((noinline)) KeccakF1600_StatePermute(uint64_t state[25])
{
fff739b8:	7c 08 02 a6 	mflr    r0
fff739bc:	1b c1 01 c8 	stvd    d30,456(r1)
  (uint64_t)0x800000008000000aULL,
  (uint64_t)0x8000000080008081ULL,
  (uint64_t)0x8000000000008080ULL,
  (uint64_t)0x0000000080000001ULL,
  (uint64_t)0x8000000080008008ULL
};
fff739c0:	38 84 72 d0 	addi    r4,r4,29392
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void __attribute__ ((noinline)) KeccakF1600_StatePermute(uint64_t state[25])
{
fff739c4:	7c 7f 1b 78 	mr      r31,r3
  (uint64_t)0x800000008000000aULL,
  (uint64_t)0x8000000080008081ULL,
  (uint64_t)0x8000000000008080ULL,
  (uint64_t)0x0000000080000001ULL,
  (uint64_t)0x8000000080008008ULL
};
fff739c8:	38 a0 00 c0 	li      r5,192
fff739cc:	38 61 00 08 	addi    r3,r1,8
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void __attribute__ ((noinline)) KeccakF1600_StatePermute(uint64_t state[25])
{
fff739d0:	1b 81 01 c0 	stvd    d28,448(r1)
fff739d4:	90 01 01 d4 	stw     r0,468(r1)
  (uint64_t)0x800000008000000aULL,
  (uint64_t)0x8000000080008081ULL,
  (uint64_t)0x8000000000008080ULL,
  (uint64_t)0x0000000080000001ULL,
  (uint64_t)0x8000000080008008ULL
};
fff739d8:	48 00 69 e1 	bl      fff7a3b8 <memcpy>
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
fff739dc:	80 1f 00 00 	lwz     r0,0(r31)
fff739e0:	80 7f 00 04 	lwz     r3,4(r31)
        Abe = state[ 1];
fff739e4:	14 9f 00 08 	lvd     d4,8(r31)
        Abi = state[ 2];
fff739e8:	14 df 00 10 	lvd     d6,16(r31)
        Abo = state[ 3];
fff739ec:	15 1f 00 18 	lvd     d8,24(r31)
        Abu = state[ 4];
fff739f0:	81 5f 00 20 	lwz     r10,32(r31)
fff739f4:	83 9f 00 24 	lwz     r28,36(r31)
        Aga = state[ 5];
fff739f8:	17 bf 00 28 	lvd     d29,40(r31)
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
fff739fc:	90 01 00 e8 	stw     r0,232(r1)
fff73a00:	90 61 00 ec 	stw     r3,236(r1)
        Abe = state[ 1];
        Abi = state[ 2];
        Abo = state[ 3];
        Abu = state[ 4];
        Aga = state[ 5];
        Age = state[ 6];
fff73a04:	80 1f 00 30 	lwz     r0,48(r31)
fff73a08:	80 7f 00 34 	lwz     r3,52(r31)
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
        Abe = state[ 1];
fff73a0c:	18 81 00 f0 	stvd    d4,240(r1)
        Abi = state[ 2];
        Abo = state[ 3];
        Abu = state[ 4];
        Aga = state[ 5];
        Age = state[ 6];
        Agi = state[ 7];
fff73a10:	14 9f 00 38 	lvd     d4,56(r31)
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
        Abe = state[ 1];
        Abi = state[ 2];
fff73a14:	90 c1 00 f8 	stw     r6,248(r1)
        Abo = state[ 3];
        Abu = state[ 4];
        Aga = state[ 5];
        Age = state[ 6];
        Agi = state[ 7];
        Ago = state[ 8];
fff73a18:	80 df 00 40 	lwz     r6,64(r31)
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
        Abe = state[ 1];
        Abi = state[ 2];
fff73a1c:	90 e1 01 ac 	stw     r7,428(r1)
        Abo = state[ 3];
fff73a20:	91 01 00 fc 	stw     r8,252(r1)
fff73a24:	19 21 01 00 	stvd    d9,256(r1)
        Abu = state[ 4];
fff73a28:	1b 81 01 08 	stvd    d28,264(r1)
        Aga = state[ 5];
fff73a2c:	93 c1 01 10 	stw     r30,272(r1)
        Age = state[ 6];
fff73a30:	90 01 01 14 	stw     r0,276(r1)
fff73a34:	18 61 01 18 	stvd    d3,280(r1)
        Agi = state[ 7];
fff73a38:	18 a1 01 20 	stvd    d5,288(r1)
        Ago = state[ 8];
fff73a3c:	80 ff 00 44 	lwz     r7,68(r31)
        Agu = state[ 9];
fff73a40:	15 1f 00 48 	lvd     d8,72(r31)
        Aka = state[10];
fff73a44:	81 5f 00 50 	lwz     r10,80(r31)
fff73a48:	83 9f 00 54 	lwz     r28,84(r31)
        Ake = state[11];
fff73a4c:	17 bf 00 58 	lvd     d29,88(r31)
        Aki = state[12];
fff73a50:	80 1f 00 60 	lwz     r0,96(r31)
fff73a54:	80 7f 00 64 	lwz     r3,100(r31)
        Ako = state[13];
fff73a58:	14 9f 00 68 	lvd     d4,104(r31)
        Aku = state[14];
fff73a5c:	80 df 00 70 	lwz     r6,112(r31)
        Abo = state[ 3];
        Abu = state[ 4];
        Aga = state[ 5];
        Age = state[ 6];
        Agi = state[ 7];
        Ago = state[ 8];
fff73a60:	18 e1 01 28 	stvd    d7,296(r1)
        Agu = state[ 9];
        Aka = state[10];
        Ake = state[11];
        Aki = state[12];
        Ako = state[13];
        Aku = state[14];
fff73a64:	80 ff 00 74 	lwz     r7,116(r31)
        Ama = state[15];
fff73a68:	81 1f 00 78 	lwz     r8,120(r31)
        Abu = state[ 4];
        Aga = state[ 5];
        Age = state[ 6];
        Agi = state[ 7];
        Ago = state[ 8];
        Agu = state[ 9];
fff73a6c:	19 21 01 30 	stvd    d9,304(r1)
        Aka = state[10];
        Ake = state[11];
        Aki = state[12];
        Ako = state[13];
        Aku = state[14];
        Ama = state[15];
fff73a70:	81 3f 00 7c 	lwz     r9,124(r31)
        Ame = state[16];
fff73a74:	81 5f 00 80 	lwz     r10,128(r31)
        Aga = state[ 5];
        Age = state[ 6];
        Agi = state[ 7];
        Ago = state[ 8];
        Agu = state[ 9];
        Aka = state[10];
fff73a78:	93 81 01 38 	stw     r28,312(r1)
        Ake = state[11];
        Aki = state[12];
        Ako = state[13];
        Aku = state[14];
        Ama = state[15];
        Ame = state[16];
fff73a7c:	83 9f 00 84 	lwz     r28,132(r31)
        Age = state[ 6];
        Agi = state[ 7];
        Ago = state[ 8];
        Agu = state[ 9];
        Aka = state[10];
        Ake = state[11];
fff73a80:	93 a1 01 3c 	stw     r29,316(r1)
fff73a84:	93 c1 01 40 	stw     r30,320(r1)
        Aki = state[12];
fff73a88:	90 01 01 44 	stw     r0,324(r1)
fff73a8c:	18 61 01 48 	stvd    d3,328(r1)
        Ako = state[13];
fff73a90:	18 a1 01 50 	stvd    d5,336(r1)
        Aku = state[14];
fff73a94:	18 e1 01 58 	stvd    d7,344(r1)
        Ama = state[15];
fff73a98:	19 21 01 60 	stvd    d9,352(r1)
        Ame = state[16];
fff73a9c:	93 81 01 68 	stw     r28,360(r1)
        Ami = state[17];
fff73aa0:	17 bf 00 88 	lvd     d29,136(r31)
        Amo = state[18];
fff73aa4:	80 1f 00 90 	lwz     r0,144(r31)
fff73aa8:	80 7f 00 94 	lwz     r3,148(r31)
        Amu = state[19];
fff73aac:	80 9f 00 98 	lwz     r4,152(r31)
        Asa = state[20];
        Ase = state[21];
fff73ab0:	81 3f 00 ac 	lwz     r9,172(r31)
        Aki = state[12];
        Ako = state[13];
        Aku = state[14];
        Ama = state[15];
        Ame = state[16];
        Ami = state[17];
fff73ab4:	93 a1 01 6c 	stw     r29,364(r1)
fff73ab8:	93 c1 01 70 	stw     r30,368(r1)
        Amo = state[18];
fff73abc:	90 01 01 74 	stw     r0,372(r1)
        Amu = state[19];
fff73ac0:	80 bf 00 9c 	lwz     r5,156(r31)
        Asa = state[20];
fff73ac4:	14 df 00 a0 	lvd     d6,160(r31)
        Ase = state[21];
fff73ac8:	81 1f 00 a8 	lwz     r8,168(r31)
        Asi = state[22];
fff73acc:	81 5f 00 b0 	lwz     r10,176(r31)
fff73ad0:	83 9f 00 b4 	lwz     r28,180(r31)
        Aso = state[23];
fff73ad4:	17 bf 00 b8 	lvd     d29,184(r31)
        Asu = state[24];
fff73ad8:	80 1f 00 c4 	lwz     r0,196(r31)
        Ako = state[13];
        Aku = state[14];
        Ama = state[15];
        Ame = state[16];
        Ami = state[17];
        Amo = state[18];
fff73adc:	18 61 01 78 	stvd    d3,376(r1)
fff73ae0:	38 61 00 08 	addi    r3,r1,8
fff73ae4:	38 80 00 0d 	li      r4,13
        Amu = state[19];
        Asa = state[20];
        Ase = state[21];
fff73ae8:	91 21 01 90 	stw     r9,400(r1)
        Aku = state[14];
        Ama = state[15];
        Ame = state[16];
        Ami = state[17];
        Amo = state[18];
        Amu = state[19];
fff73aec:	18 a1 01 80 	stvd    d5,384(r1)
        Asa = state[20];
fff73af0:	18 e1 01 88 	stvd    d7,392(r1)
        Ase = state[21];
        Asi = state[22];
fff73af4:	91 41 01 94 	stw     r10,404(r1)
fff73af8:	1b 81 01 98 	stvd    d28,408(r1)
        Aso = state[23];
fff73afc:	93 c1 01 a0 	stw     r30,416(r1)
        Asu = state[24];
fff73b00:	81 3f 00 c0 	lwz     r9,192(r31)
fff73b04:	90 01 01 a4 	stw     r0,420(r1)
fff73b08:	90 61 01 a8 	stw     r3,424(r1)
fff73b0c:	90 81 01 b0 	stw     r4,432(r1)

        for ( round = 0; round < NROUNDS; round += 2 )
fff73b10:	80 01 01 b0 	lwz     r0,432(r1)
fff73b14:	34 60 ff ff 	addic.  r3,r0,-1
fff73b18:	90 61 01 b0 	stw     r3,432(r1)
fff73b1c:	41 82 13 00 	beq     fff74e1c <_ZL24KeccakF1600_StatePermutePy+0x146c>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
fff73b20:	81 01 01 10 	lwz     r8,272(r1)
fff73b24:	83 81 00 ec 	lwz     r28,236(r1)
fff73b28:	80 a1 01 0c 	lwz     r5,268(r1)
fff73b2c:	80 c1 00 e8 	lwz     r6,232(r1)
fff73b30:	83 c1 01 38 	lwz     r30,312(r1)
fff73b34:	7d 0a e2 78 	xor     r10,r8,r28
fff73b38:	80 61 01 60 	lwz     r3,352(r1)
fff73b3c:	7c a7 32 78 	xor     r7,r5,r6
fff73b40:	7d 4a f2 78 	xor     r10,r10,r30
fff73b44:	80 a1 01 88 	lwz     r5,392(r1)
fff73b48:	83 a1 01 34 	lwz     r29,308(r1)
fff73b4c:	7d 4a 1a 78 	xor     r10,r10,r3
fff73b50:	80 01 01 5c 	lwz     r0,348(r1)
fff73b54:	7d 4a 2a 78 	xor     r10,r10,r5
fff73b58:	80 81 01 84 	lwz     r4,388(r1)
            BCe = Abe^Age^Ake^Ame^Ase;
fff73b5c:	80 c1 01 14 	lwz     r6,276(r1)
fff73b60:	81 01 00 f0 	lwz     r8,240(r1)
fff73b64:	83 81 00 f4 	lwz     r28,244(r1)
        Asu = state[24];

        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
fff73b68:	7c e7 ea 78 	xor     r7,r7,r29
fff73b6c:	91 41 00 e4 	stw     r10,228(r1)
            BCe = Abe^Age^Ake^Ame^Ase;
fff73b70:	81 41 01 18 	lwz     r10,280(r1)
fff73b74:	80 61 01 40 	lwz     r3,320(r1)
        Asu = state[24];

        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
fff73b78:	7c e7 02 78 	xor     r7,r7,r0
            BCe = Abe^Age^Ake^Ame^Ase;
fff73b7c:	80 01 01 3c 	lwz     r0,316(r1)
        Asu = state[24];

        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
fff73b80:	7c e7 22 78 	xor     r7,r7,r4
            BCe = Abe^Age^Ake^Ame^Ase;
fff73b84:	7c dd 42 78 	xor     r29,r6,r8
fff73b88:	7d 5e e2 78 	xor     r30,r10,r28
fff73b8c:	80 81 01 64 	lwz     r4,356(r1)
fff73b90:	80 a1 01 68 	lwz     r5,360(r1)
fff73b94:	80 c1 01 8c 	lwz     r6,396(r1)
fff73b98:	81 01 01 90 	lwz     r8,400(r1)
fff73b9c:	7f bd 02 78 	xor     r29,r29,r0
fff73ba0:	7f de 1a 78 	xor     r30,r30,r3
            BCi = Abi^Agi^Aki^Ami^Asi;
fff73ba4:	81 41 01 1c 	lwz     r10,284(r1)
fff73ba8:	83 81 00 f8 	lwz     r28,248(r1)

        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
fff73bac:	7f bd 22 78 	xor     r29,r29,r4
fff73bb0:	7f de 2a 78 	xor     r30,r30,r5
            BCi = Abi^Agi^Aki^Ami^Asi;
fff73bb4:	80 81 01 20 	lwz     r4,288(r1)
fff73bb8:	80 a1 01 ac 	lwz     r5,428(r1)

        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
fff73bbc:	7f bd 32 78 	xor     r29,r29,r6
fff73bc0:	7f de 42 78 	xor     r30,r30,r8
            BCi = Abi^Agi^Aki^Ami^Asi;
fff73bc4:	80 c1 01 44 	lwz     r6,324(r1)
fff73bc8:	81 01 01 48 	lwz     r8,328(r1)
fff73bcc:	7d 40 e2 78 	xor     r0,r10,r28
fff73bd0:	7c 83 2a 78 	xor     r3,r4,r5
fff73bd4:	83 81 01 70 	lwz     r28,368(r1)
fff73bd8:	81 41 01 6c 	lwz     r10,364(r1)
fff73bdc:	80 81 01 94 	lwz     r4,404(r1)
fff73be0:	7c 00 32 78 	xor     r0,r0,r6
fff73be4:	7c 63 42 78 	xor     r3,r3,r8
            BCo = Abo^Ago^Ako^Amo^Aso;
fff73be8:	80 c1 01 24 	lwz     r6,292(r1)
fff73bec:	81 01 00 fc 	lwz     r8,252(r1)
        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
fff73bf0:	80 a1 01 98 	lwz     r5,408(r1)
fff73bf4:	7c 00 52 78 	xor     r0,r0,r10
fff73bf8:	7c 63 e2 78 	xor     r3,r3,r28
            BCo = Abo^Ago^Ako^Amo^Aso;
fff73bfc:	81 41 01 28 	lwz     r10,296(r1)
fff73c00:	83 81 01 00 	lwz     r28,256(r1)
        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
fff73c04:	7c 00 22 78 	xor     r0,r0,r4
            BCo = Abo^Ago^Ako^Amo^Aso;
fff73c08:	7c c4 42 78 	xor     r4,r6,r8
fff73c0c:	80 c1 01 4c 	lwz     r6,332(r1)
fff73c10:	81 01 01 50 	lwz     r8,336(r1)
        for ( round = 0; round < NROUNDS; round += 2 )
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
fff73c14:	7c 63 2a 78 	xor     r3,r3,r5
            BCo = Abo^Ago^Ako^Amo^Aso;
fff73c18:	7d 45 e2 78 	xor     r5,r10,r28
fff73c1c:	81 41 01 74 	lwz     r10,372(r1)
fff73c20:	83 81 01 78 	lwz     r28,376(r1)
fff73c24:	7c 84 32 78 	xor     r4,r4,r6
fff73c28:	7c a5 42 78 	xor     r5,r5,r8
fff73c2c:	80 c1 01 9c 	lwz     r6,412(r1)
fff73c30:	7c 84 52 78 	xor     r4,r4,r10
fff73c34:	7c a5 e2 78 	xor     r5,r5,r28
            BCu = Abu^Agu^Aku^Amu^Asu;
fff73c38:	81 41 01 2c 	lwz     r10,300(r1)
fff73c3c:	83 81 01 04 	lwz     r28,260(r1)
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
            BCo = Abo^Ago^Ako^Amo^Aso;
fff73c40:	81 01 01 a0 	lwz     r8,416(r1)
fff73c44:	7c 84 32 78 	xor     r4,r4,r6
            BCu = Abu^Agu^Aku^Amu^Asu;
fff73c48:	7d 46 e2 78 	xor     r6,r10,r28
fff73c4c:	83 81 01 54 	lwz     r28,340(r1)
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
            BCo = Abo^Ago^Ako^Amo^Aso;
fff73c50:	7c a5 42 78 	xor     r5,r5,r8
            BCu = Abu^Agu^Aku^Amu^Asu;
fff73c54:	81 41 01 08 	lwz     r10,264(r1)
fff73c58:	81 01 01 30 	lwz     r8,304(r1)
fff73c5c:	7c c6 e2 78 	xor     r6,r6,r28
fff73c60:	83 81 01 58 	lwz     r28,344(r1)
fff73c64:	7d 08 52 78 	xor     r8,r8,r10
fff73c68:	7d 0a e2 78 	xor     r10,r8,r28
fff73c6c:	81 01 01 7c 	lwz     r8,380(r1)
fff73c70:	83 81 01 80 	lwz     r28,384(r1)
fff73c74:	7c c6 42 78 	xor     r6,r6,r8
fff73c78:	7d 48 e2 78 	xor     r8,r10,r28
fff73c7c:	81 41 01 a4 	lwz     r10,420(r1)

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
fff73c80:	57 dc 0f fe 	rlwinm  r28,r30,1,31,31
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
            BCo = Abo^Ago^Ako^Amo^Aso;
            BCu = Abu^Agu^Aku^Amu^Asu;
fff73c84:	7d 08 52 78 	xor     r8,r8,r10

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
fff73c88:	57 aa 08 3c 	rlwinm  r10,r29,1,0,30
fff73c8c:	7f 9c 53 78 	or      r28,r28,r10
fff73c90:	7f 89 03 a6 	mtctr   r28
fff73c94:	57 ca 08 3c 	rlwinm  r10,r30,1,0,30
fff73c98:	57 bc 0f fe 	rlwinm  r28,r29,1,31,31
fff73c9c:	7f 9c 53 78 	or      r28,r28,r10
fff73ca0:	7f 88 03 a6 	mtlr    r28
fff73ca4:	7f 89 02 a6 	mfctr   r28
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
            BCo = Abo^Ago^Ako^Amo^Aso;
            BCu = Abu^Agu^Aku^Amu^Asu;
fff73ca8:	7c c6 4a 78 	xor     r6,r6,r9

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
fff73cac:	7f 9c 32 78 	xor     r28,r28,r6
fff73cb0:	7d 48 02 a6 	mflr    r10
fff73cb4:	93 81 00 cc 	stw     r28,204(r1)
fff73cb8:	7d 4a 42 78 	xor     r10,r10,r8
fff73cbc:	91 41 00 d0 	stw     r10,208(r1)
            De = BCa^ROL(BCi, 1);
fff73cc0:	54 7c 0f fe 	rlwinm  r28,r3,1,31,31
fff73cc4:	54 0a 08 3c 	rlwinm  r10,r0,1,0,30
fff73cc8:	7f 9c 53 78 	or      r28,r28,r10
fff73ccc:	7f 89 03 a6 	mtctr   r28
fff73cd0:	54 6a 08 3c 	rlwinm  r10,r3,1,0,30
fff73cd4:	54 1c 0f fe 	rlwinm  r28,r0,1,31,31
fff73cd8:	7f 9c 53 78 	or      r28,r28,r10
fff73cdc:	7f 88 03 a6 	mtlr    r28
fff73ce0:	7f 89 02 a6 	mfctr   r28
fff73ce4:	7f 9c 3a 78 	xor     r28,r28,r7
fff73ce8:	93 81 00 d4 	stw     r28,212(r1)
fff73cec:	7d 48 02 a6 	mflr    r10
fff73cf0:	83 81 00 e4 	lwz     r28,228(r1)
fff73cf4:	7d 4a e2 78 	xor     r10,r10,r28
fff73cf8:	7d 48 03 a6 	mtlr    r10
            Di = BCe^ROL(BCo, 1);
fff73cfc:	54 9c 08 3c 	rlwinm  r28,r4,1,0,30
fff73d00:	54 aa 0f fe 	rlwinm  r10,r5,1,31,31
fff73d04:	7d 4a e3 78 	or      r10,r10,r28
fff73d08:	7d 49 03 a6 	mtctr   r10
fff73d0c:	54 bc 08 3c 	rlwinm  r28,r5,1,0,30
fff73d10:	54 8a 0f fe 	rlwinm  r10,r4,1,31,31
fff73d14:	7d 4a e3 78 	or      r10,r10,r28
fff73d18:	7f 89 02 a6 	mfctr   r28
fff73d1c:	7d 5e f2 78 	xor     r30,r10,r30
fff73d20:	7f 9c ea 78 	xor     r28,r28,r29
fff73d24:	93 c1 00 d8 	stw     r30,216(r1)
            Do = BCi^ROL(BCu, 1);
fff73d28:	55 1d 0f fe 	rlwinm  r29,r8,1,31,31
fff73d2c:	54 de 08 3c 	rlwinm  r30,r6,1,0,30
fff73d30:	55 08 08 3c 	rlwinm  r8,r8,1,0,30
fff73d34:	54 c6 0f fe 	rlwinm  r6,r6,1,31,31
fff73d38:	7f be f3 78 	or      r30,r29,r30
fff73d3c:	7c c8 43 78 	or      r8,r6,r8
            Du = BCo^ROL(BCa, 1);
fff73d40:	83 a1 00 e4 	lwz     r29,228(r1)

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
fff73d44:	7d 08 1a 78 	xor     r8,r8,r3
            Du = BCo^ROL(BCa, 1);
fff73d48:	57 a6 0f fe 	rlwinm  r6,r29,1,31,31

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
fff73d4c:	91 01 00 e0 	stw     r8,224(r1)
            Du = BCo^ROL(BCa, 1);
fff73d50:	57 aa 08 3c 	rlwinm  r10,r29,1,0,30
fff73d54:	54 e8 08 3c 	rlwinm  r8,r7,1,0,30
fff73d58:	54 e7 0f fe 	rlwinm  r7,r7,1,31,31
fff73d5c:	7c c8 43 78 	or      r8,r6,r8
fff73d60:	7c ea 53 78 	or      r10,r7,r10

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
fff73d64:	7f de 02 78 	xor     r30,r30,r0
            Du = BCo^ROL(BCa, 1);
fff73d68:	7d 08 22 78 	xor     r8,r8,r4
fff73d6c:	7d 4a 2a 78 	xor     r10,r10,r5
fff73d70:	7d 49 03 a6 	mtctr   r10

            Aba ^= Da;
fff73d74:	80 01 00 e8 	lwz     r0,232(r1)
fff73d78:	80 61 00 d0 	lwz     r3,208(r1)
fff73d7c:	80 a1 00 ec 	lwz     r5,236(r1)
            BCa = Aba;
            Age ^= De;
fff73d80:	80 e1 00 d4 	lwz     r7,212(r1)
fff73d84:	81 41 01 14 	lwz     r10,276(r1)
            BCu = Abu^Agu^Aku^Amu^Asu;

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
fff73d88:	93 81 00 c8 	stw     r28,200(r1)
            Do = BCi^ROL(BCu, 1);
fff73d8c:	93 c1 00 dc 	stw     r30,220(r1)
            Du = BCo^ROL(BCa, 1);

            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
fff73d90:	7f 88 02 a6 	mflr    r28
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
            Du = BCo^ROL(BCa, 1);

            Aba ^= Da;
fff73d94:	83 c1 00 cc 	lwz     r30,204(r1)
            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
            Du = BCo^ROL(BCa, 1);
fff73d98:	91 01 00 e4 	stw     r8,228(r1)

            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
fff73d9c:	83 a1 01 18 	lwz     r29,280(r1)
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
            Du = BCo^ROL(BCa, 1);

            Aba ^= Da;
fff73da0:	7f c4 02 78 	xor     r4,r30,r0
fff73da4:	7c 66 2a 78 	xor     r6,r3,r5
            BCa = Aba;
            Age ^= De;
fff73da8:	7c e8 52 78 	xor     r8,r7,r10
            BCe = ROL(Age, 44);
            Aki ^= Di;
fff73dac:	80 01 01 44 	lwz     r0,324(r1)
            Do = BCi^ROL(BCu, 1);
            Du = BCo^ROL(BCa, 1);

            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
fff73db0:	7f 8a ea 78 	xor     r10,r28,r29
            BCe = ROL(Age, 44);
            Aki ^= Di;
fff73db4:	83 c1 00 c8 	lwz     r30,200(r1)
fff73db8:	83 81 01 48 	lwz     r28,328(r1)
fff73dbc:	80 a1 00 d8 	lwz     r5,216(r1)
            Du = BCo^ROL(BCa, 1);

            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
            BCe = ROL(Age, 44);
fff73dc0:	55 47 65 3e 	rlwinm  r7,r10,12,20,31
fff73dc4:	55 03 60 26 	rlwinm  r3,r8,12,0,19
fff73dc8:	55 4a 60 26 	rlwinm  r10,r10,12,0,19
fff73dcc:	55 08 65 3e 	rlwinm  r8,r8,12,20,31
fff73dd0:	7c 63 3b 78 	or      r3,r3,r7
fff73dd4:	7d 4a 43 78 	or      r10,r10,r8
            Aki ^= Di;
fff73dd8:	7c a7 e2 78 	xor     r7,r5,r28
fff73ddc:	7f c8 02 78 	xor     r8,r30,r0
            BCi = ROL(Aki, 43);
            Amo ^= Do;
fff73de0:	83 a1 00 dc 	lwz     r29,220(r1)
fff73de4:	80 01 01 74 	lwz     r0,372(r1)
            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
            BCe = ROL(Age, 44);
            Aki ^= Di;
            BCi = ROL(Aki, 43);
fff73de8:	54 e5 5d 7e 	rlwinm  r5,r7,11,21,31
fff73dec:	55 1e 58 28 	rlwinm  r30,r8,11,0,20
fff73df0:	54 e7 58 28 	rlwinm  r7,r7,11,0,20
fff73df4:	55 08 5d 7e 	rlwinm  r8,r8,11,21,31
fff73df8:	7c e7 43 78 	or      r7,r7,r8
            Amo ^= Do;
fff73dfc:	83 81 00 e0 	lwz     r28,224(r1)
fff73e00:	7f a8 02 78 	xor     r8,r29,r0
fff73e04:	83 a1 01 78 	lwz     r29,376(r1)
            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
            BCe = ROL(Age, 44);
            Aki ^= Di;
            BCi = ROL(Aki, 43);
fff73e08:	7f de 2b 78 	or      r30,r30,r5
            Amo ^= Do;
fff73e0c:	7f 85 ea 78 	xor     r5,r28,r29
            BCo = ROL(Amo, 21);
fff73e10:	54 bd aa fe 	rlwinm  r29,r5,21,11,31
fff73e14:	55 00 a8 14 	rlwinm  r0,r8,21,0,10
fff73e18:	54 a5 a8 14 	rlwinm  r5,r5,21,0,10
fff73e1c:	55 08 aa fe 	rlwinm  r8,r8,21,11,31
fff73e20:	7d 08 2b 78 	or      r8,r8,r5
            Asu ^= Du;
fff73e24:	80 a1 00 e4 	lwz     r5,228(r1)
fff73e28:	7f 89 02 a6 	mfctr   r28
fff73e2c:	7c a9 4a 78 	xor     r9,r5,r9
fff73e30:	80 a1 01 a4 	lwz     r5,420(r1)
            Age ^= De;
            BCe = ROL(Age, 44);
            Aki ^= Di;
            BCi = ROL(Aki, 43);
            Amo ^= Do;
            BCo = ROL(Amo, 21);
fff73e34:	7f a0 03 78 	or      r0,r29,r0
            Asu ^= Du;
fff73e38:	7f 9d 2a 78 	xor     r29,r28,r5
            BCu = ROL(Asu, 14);
fff73e3c:	57 bc 74 be 	rlwinm  r28,r29,14,18,31
fff73e40:	55 25 70 22 	rlwinm  r5,r9,14,0,17
fff73e44:	57 bd 70 22 	rlwinm  r29,r29,14,0,17
fff73e48:	55 29 74 be 	rlwinm  r9,r9,14,18,31
fff73e4c:	7d 29 eb 78 	or      r9,r9,r29
fff73e50:	83 a1 01 a8 	lwz     r29,424(r1)
fff73e54:	7f 85 2b 78 	or      r5,r28,r5
fff73e58:	17 9d 00 00 	lvd     d28,0(r29)
fff73e5c:	7c 9c e2 78 	xor     r28,r4,r28
fff73e60:	7c dd ea 78 	xor     r29,r6,r29
fff73e64:	93 a1 01 14 	stw     r29,276(r1)
            Eba =   BCa ^((~BCe)&  BCi );
fff73e68:	7c fd 50 78 	andc    r29,r7,r10
fff73e6c:	93 a1 00 e8 	stw     r29,232(r1)
fff73e70:	7f dd 18 78 	andc    r29,r30,r3
fff73e74:	93 a1 00 ec 	stw     r29,236(r1)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
fff73e78:	83 a1 00 e8 	lwz     r29,232(r1)
fff73e7c:	7f 9c ea 78 	xor     r28,r28,r29
fff73e80:	93 81 00 e8 	stw     r28,232(r1)
fff73e84:	83 a1 00 ec 	lwz     r29,236(r1)
fff73e88:	83 81 01 14 	lwz     r28,276(r1)
fff73e8c:	7f 9c ea 78 	xor     r28,r28,r29
fff73e90:	93 81 00 ec 	stw     r28,236(r1)
            Ebe =   BCe ^((~BCi)&  BCo );
fff73e94:	7d 1d f0 78 	andc    r29,r8,r30
fff73e98:	7c 1c 38 78 	andc    r28,r0,r7
fff73e9c:	7f 9c 52 78 	xor     r28,r28,r10
fff73ea0:	7f bd 1a 78 	xor     r29,r29,r3
fff73ea4:	93 81 01 44 	stw     r28,324(r1)
fff73ea8:	93 a1 01 48 	stw     r29,328(r1)
            Ebi =   BCi ^((~BCo)&  BCu );
fff73eac:	7d 3c 40 78 	andc    r28,r9,r8
fff73eb0:	7c bd 00 78 	andc    r29,r5,r0
fff73eb4:	7f bd 3a 78 	xor     r29,r29,r7
fff73eb8:	7f 9c f2 78 	xor     r28,r28,r30
            Ebo =   BCo ^((~BCu)&  BCa );
fff73ebc:	7c c7 48 78 	andc    r7,r6,r9
fff73ec0:	7c 9e 28 78 	andc    r30,r4,r5
            Ebu =   BCu ^((~BCa)&  BCe );
fff73ec4:	7d 4a 20 78 	andc    r10,r10,r4
fff73ec8:	7c 66 30 78 	andc    r6,r3,r6
            BCu = ROL(Asu, 14);
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
            Ebe =   BCe ^((~BCi)&  BCo );
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
fff73ecc:	7f de 02 78 	xor     r30,r30,r0
fff73ed0:	7c e7 42 78 	xor     r7,r7,r8
            Ebu =   BCu ^((~BCa)&  BCe );
fff73ed4:	7d 4a 2a 78 	xor     r10,r10,r5
fff73ed8:	7c c6 4a 78 	xor     r6,r6,r9

            Abo ^= Do;
fff73edc:	80 01 00 fc 	lwz     r0,252(r1)
fff73ee0:	80 61 00 e0 	lwz     r3,224(r1)
            Asu ^= Du;
            BCu = ROL(Asu, 14);
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
            Ebe =   BCe ^((~BCi)&  BCo );
            Ebi =   BCi ^((~BCo)&  BCu );
fff73ee4:	93 a1 01 a4 	stw     r29,420(r1)
fff73ee8:	93 81 01 b4 	stw     r28,436(r1)
            Ebo =   BCo ^((~BCu)&  BCa );
fff73eec:	93 c1 01 14 	stw     r30,276(r1)
fff73ef0:	90 e1 01 18 	stw     r7,280(r1)
            Ebu =   BCu ^((~BCa)&  BCe );

            Abo ^= Do;
fff73ef4:	83 c1 00 dc 	lwz     r30,220(r1)
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
            Ebe =   BCe ^((~BCi)&  BCo );
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );
fff73ef8:	91 41 01 74 	stw     r10,372(r1)
fff73efc:	90 c1 01 78 	stw     r6,376(r1)

            Abo ^= Do;
fff73f00:	80 81 01 00 	lwz     r4,256(r1)
fff73f04:	7f c5 02 78 	xor     r5,r30,r0
fff73f08:	7c 68 22 78 	xor     r8,r3,r4
            BCa = ROL(Abo, 28);
fff73f0c:	54 a9 e0 06 	rlwinm  r9,r5,28,0,3
fff73f10:	55 04 e1 3e 	rlwinm  r4,r8,28,4,31
fff73f14:	7c 84 4b 78 	or      r4,r4,r9
fff73f18:	54 a5 e1 3e 	rlwinm  r5,r5,28,4,31
fff73f1c:	55 09 e0 06 	rlwinm  r9,r8,28,0,3
fff73f20:	7c a9 4b 78 	or      r9,r5,r9
            Agu ^= Du;
fff73f24:	80 c1 01 2c 	lwz     r6,300(r1)
fff73f28:	83 81 01 30 	lwz     r28,304(r1)
fff73f2c:	80 a1 00 e4 	lwz     r5,228(r1)
fff73f30:	7d 49 02 a6 	mfctr   r10
fff73f34:	7c a7 32 78 	xor     r7,r5,r6
fff73f38:	7d 48 e2 78 	xor     r8,r10,r28
            BCe = ROL(Agu, 20);
            Aka ^= Da;
fff73f3c:	80 01 01 34 	lwz     r0,308(r1)
fff73f40:	80 c1 01 38 	lwz     r6,312(r1)
fff73f44:	83 c1 00 cc 	lwz     r30,204(r1)
fff73f48:	80 61 00 d0 	lwz     r3,208(r1)
            Ebu =   BCu ^((~BCa)&  BCe );

            Abo ^= Do;
            BCa = ROL(Abo, 28);
            Agu ^= Du;
            BCe = ROL(Agu, 20);
fff73f4c:	54 ea a0 16 	rlwinm  r10,r7,20,0,11
fff73f50:	55 1d a3 3e 	rlwinm  r29,r8,20,12,31
fff73f54:	7f bd 53 78 	or      r29,r29,r10
            Aka ^= Da;
fff73f58:	7f c5 02 78 	xor     r5,r30,r0
fff73f5c:	7c 6a 32 78 	xor     r10,r3,r6
            Ebu =   BCu ^((~BCa)&  BCe );

            Abo ^= Do;
            BCa = ROL(Abo, 28);
            Agu ^= Du;
            BCe = ROL(Agu, 20);
fff73f60:	55 08 a0 16 	rlwinm  r8,r8,20,0,11
fff73f64:	54 e7 a3 3e 	rlwinm  r7,r7,20,12,31
fff73f68:	7c e7 43 78 	or      r7,r7,r8
            Aka ^= Da;
            BCi = ROL(Aka,  3);
fff73f6c:	55 5c 1f 7e 	rlwinm  r28,r10,3,29,31
fff73f70:	54 a8 18 38 	rlwinm  r8,r5,3,0,28
fff73f74:	7f 9c 43 78 	or      r28,r28,r8
            Ame ^= De;
fff73f78:	83 c1 01 64 	lwz     r30,356(r1)
fff73f7c:	80 61 01 68 	lwz     r3,360(r1)
fff73f80:	81 01 00 d4 	lwz     r8,212(r1)
fff73f84:	7c 08 02 a6 	mflr    r0
            Abo ^= Do;
            BCa = ROL(Abo, 28);
            Agu ^= Du;
            BCe = ROL(Agu, 20);
            Aka ^= Da;
            BCi = ROL(Aka,  3);
fff73f88:	55 4a 18 38 	rlwinm  r10,r10,3,0,28
fff73f8c:	54 a5 1f 7e 	rlwinm  r5,r5,3,29,31
fff73f90:	7c a5 53 78 	or      r5,r5,r10
            Ame ^= De;
fff73f94:	7c 06 1a 78 	xor     r6,r0,r3
fff73f98:	7d 0a f2 78 	xor     r10,r8,r30
            BCo = ROL(Ame, 45);
fff73f9c:	55 43 68 24 	rlwinm  r3,r10,13,0,18
fff73fa0:	54 c8 6c fe 	rlwinm  r8,r6,13,19,31
fff73fa4:	55 4a 6c fe 	rlwinm  r10,r10,13,19,31
fff73fa8:	54 c6 68 24 	rlwinm  r6,r6,13,0,18
fff73fac:	7c c6 53 78 	or      r6,r6,r10
            Asi ^= Di;
fff73fb0:	83 c1 01 94 	lwz     r30,404(r1)
fff73fb4:	81 41 00 c8 	lwz     r10,200(r1)
            Agu ^= Du;
            BCe = ROL(Agu, 20);
            Aka ^= Da;
            BCi = ROL(Aka,  3);
            Ame ^= De;
            BCo = ROL(Ame, 45);
fff73fb8:	7c 63 43 78 	or      r3,r3,r8
            Asi ^= Di;
fff73fbc:	80 01 00 d8 	lwz     r0,216(r1)
fff73fc0:	7d 48 f2 78 	xor     r8,r10,r30
fff73fc4:	83 c1 01 98 	lwz     r30,408(r1)
fff73fc8:	7c 0a f2 78 	xor     r10,r0,r30
            BCu = ROL(Asi, 61);
fff73fcc:	55 40 e8 fe 	rlwinm  r0,r10,29,3,31
fff73fd0:	55 1e e8 04 	rlwinm  r30,r8,29,0,2
fff73fd4:	7f de 03 78 	or      r30,r30,r0
fff73fd8:	55 08 e8 fe 	rlwinm  r8,r8,29,3,31
            Ega =   BCa ^((~BCe)&  BCi );
fff73fdc:	7f 80 e8 78 	andc    r0,r28,r29
            Aka ^= Da;
            BCi = ROL(Aka,  3);
            Ame ^= De;
            BCo = ROL(Ame, 45);
            Asi ^= Di;
            BCu = ROL(Asi, 61);
fff73fe0:	55 4a e8 04 	rlwinm  r10,r10,29,0,2
fff73fe4:	7d 4a 43 78 	or      r10,r10,r8
            Ega =   BCa ^((~BCe)&  BCi );
fff73fe8:	7c 00 22 78 	xor     r0,r0,r4
fff73fec:	7c a8 38 78 	andc    r8,r5,r7
fff73ff0:	7d 08 4a 78 	xor     r8,r8,r9
fff73ff4:	90 01 01 64 	stw     r0,356(r1)
            Ege =   BCe ^((~BCi)&  BCo );
fff73ff8:	7c c0 e0 78 	andc    r0,r6,r28
fff73ffc:	7c 00 ea 78 	xor     r0,r0,r29
            BCi = ROL(Aka,  3);
            Ame ^= De;
            BCo = ROL(Ame, 45);
            Asi ^= Di;
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
fff74000:	91 01 01 68 	stw     r8,360(r1)
            Ege =   BCe ^((~BCi)&  BCo );
fff74004:	7c 68 28 78 	andc    r8,r3,r5
fff74008:	7d 08 3a 78 	xor     r8,r8,r7
fff7400c:	90 01 00 fc 	stw     r0,252(r1)
            Egi =   BCi ^((~BCo)&  BCu );
fff74010:	7d 40 30 78 	andc    r0,r10,r6
fff74014:	7c 00 e2 78 	xor     r0,r0,r28
            Ame ^= De;
            BCo = ROL(Ame, 45);
            Asi ^= Di;
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
fff74018:	91 01 01 00 	stw     r8,256(r1)
            Egi =   BCi ^((~BCo)&  BCu );
fff7401c:	7f c8 18 78 	andc    r8,r30,r3
fff74020:	7d 08 2a 78 	xor     r8,r8,r5
fff74024:	90 01 01 34 	stw     r0,308(r1)
            Ego =   BCo ^((~BCu)&  BCa );
fff74028:	7c 80 50 78 	andc    r0,r4,r10
            Egu =   BCu ^((~BCa)&  BCe );
fff7402c:	7f a4 20 78 	andc    r4,r29,r4
            Asi ^= Di;
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
fff74030:	7c 00 32 78 	xor     r0,r0,r6
            Egu =   BCu ^((~BCa)&  BCe );
fff74034:	7c 84 52 78 	xor     r4,r4,r10
            BCo = ROL(Ame, 45);
            Asi ^= Di;
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
fff74038:	91 01 01 38 	stw     r8,312(r1)
            Ego =   BCo ^((~BCu)&  BCa );
fff7403c:	7d 28 f0 78 	andc    r8,r9,r30
fff74040:	7d 08 1a 78 	xor     r8,r8,r3
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
fff74044:	80 a1 00 f4 	lwz     r5,244(r1)
            Asi ^= Di;
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
fff74048:	90 01 01 94 	stw     r0,404(r1)
            Egu =   BCu ^((~BCa)&  BCe );
fff7404c:	90 81 01 2c 	stw     r4,300(r1)

            Abe ^= De;
fff74050:	80 01 00 d4 	lwz     r0,212(r1)
fff74054:	7c 88 02 a6 	mflr    r4
fff74058:	80 61 00 f0 	lwz     r3,240(r1)
fff7405c:	7c 8a 2a 78 	xor     r10,r4,r5
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );
fff74060:	7c e7 48 78 	andc    r7,r7,r9

            Abe ^= De;
fff74064:	7c 09 1a 78 	xor     r9,r0,r3
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );
fff74068:	7c e7 f2 78 	xor     r7,r7,r30
            Asi ^= Di;
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
fff7406c:	91 01 01 98 	stw     r8,408(r1)
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
            BCa = ROL(Abe,  1);
fff74070:	55 40 0f fe 	rlwinm  r0,r10,1,31,31
fff74074:	55 28 08 3c 	rlwinm  r8,r9,1,0,30
fff74078:	7c 00 43 78 	or      r0,r0,r8
            Agi ^= Di;
fff7407c:	80 c1 00 c8 	lwz     r6,200(r1)
fff74080:	81 01 00 d8 	lwz     r8,216(r1)
fff74084:	83 81 01 20 	lwz     r28,288(r1)
            BCu = ROL(Asi, 61);
            Ega =   BCa ^((~BCe)&  BCi );
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );
fff74088:	90 e1 01 30 	stw     r7,304(r1)

            Abe ^= De;
            BCa = ROL(Abe,  1);
            Agi ^= Di;
fff7408c:	80 e1 01 1c 	lwz     r7,284(r1)
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
            BCa = ROL(Abe,  1);
fff74090:	55 4a 08 3c 	rlwinm  r10,r10,1,0,30
fff74094:	55 29 0f fe 	rlwinm  r9,r9,1,31,31
            Agi ^= Di;
fff74098:	7d 05 e2 78 	xor     r5,r8,r28
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
            BCa = ROL(Abe,  1);
fff7409c:	7d 29 53 78 	or      r9,r9,r10
            Agi ^= Di;
            BCe = ROL(Agi,  6);
            Ako ^= Do;
fff740a0:	83 a1 00 dc 	lwz     r29,220(r1)
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
            BCa = ROL(Abe,  1);
            Agi ^= Di;
fff740a4:	7c ca 3a 78 	xor     r10,r6,r7
            BCe = ROL(Agi,  6);
            Ako ^= Do;
fff740a8:	80 61 01 4c 	lwz     r3,332(r1)
fff740ac:	80 c1 01 50 	lwz     r6,336(r1)
fff740b0:	80 81 00 e0 	lwz     r4,224(r1)
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
            BCa = ROL(Abe,  1);
            Agi ^= Di;
            BCe = ROL(Agi,  6);
fff740b4:	55 48 30 32 	rlwinm  r8,r10,6,0,25
fff740b8:	54 a7 30 32 	rlwinm  r7,r5,6,0,25
fff740bc:	55 4a 36 be 	rlwinm  r10,r10,6,26,31
fff740c0:	7d 47 3b 78 	or      r7,r10,r7
fff740c4:	54 be 36 be 	rlwinm  r30,r5,6,26,31
            Ako ^= Do;
fff740c8:	7c 8a 32 78 	xor     r10,r4,r6
fff740cc:	7f a5 1a 78 	xor     r5,r29,r3
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
            BCa = ROL(Abe,  1);
            Agi ^= Di;
            BCe = ROL(Agi,  6);
fff740d0:	7f de 43 78 	or      r30,r30,r8
            Ako ^= Do;
            BCi = ROL(Ako, 25);
fff740d4:	55 5c c9 fe 	rlwinm  r28,r10,25,7,31
fff740d8:	54 a8 c8 0c 	rlwinm  r8,r5,25,0,6
fff740dc:	55 4a c8 0c 	rlwinm  r10,r10,25,0,6
fff740e0:	54 a5 c9 fe 	rlwinm  r5,r5,25,7,31
fff740e4:	7c a3 53 78 	or      r3,r5,r10
fff740e8:	7f 9c 43 78 	or      r28,r28,r8
            Amu ^= Du;
fff740ec:	81 41 01 7c 	lwz     r10,380(r1)
fff740f0:	80 81 01 80 	lwz     r4,384(r1)
fff740f4:	81 01 00 e4 	lwz     r8,228(r1)
fff740f8:	7f a9 02 a6 	mfctr   r29
fff740fc:	7d 06 52 78 	xor     r6,r8,r10
fff74100:	7f aa 22 78 	xor     r10,r29,r4
            BCo = ROL(Amu,  8);
fff74104:	54 c8 40 2e 	rlwinm  r8,r6,8,0,23
fff74108:	55 5d 46 3e 	rlwinm  r29,r10,8,24,31
fff7410c:	7f bd 43 78 	or      r29,r29,r8
            Asa ^= Da;
fff74110:	80 a1 00 cc 	lwz     r5,204(r1)
fff74114:	81 01 01 84 	lwz     r8,388(r1)
            Agi ^= Di;
            BCe = ROL(Agi,  6);
            Ako ^= Do;
            BCi = ROL(Ako, 25);
            Amu ^= Du;
            BCo = ROL(Amu,  8);
fff74118:	55 4a 40 2e 	rlwinm  r10,r10,8,0,23
fff7411c:	54 c6 46 3e 	rlwinm  r6,r6,8,24,31
fff74120:	7c c6 53 78 	or      r6,r6,r10
            Asa ^= Da;
fff74124:	80 81 00 d0 	lwz     r4,208(r1)
fff74128:	7c aa 42 78 	xor     r10,r5,r8
fff7412c:	80 a1 01 88 	lwz     r5,392(r1)
fff74130:	7c 88 2a 78 	xor     r8,r4,r5
            BCu = ROL(Asa, 18);
fff74134:	55 04 93 be 	rlwinm  r4,r8,18,14,31
fff74138:	55 45 90 1a 	rlwinm  r5,r10,18,0,13
fff7413c:	55 08 90 1a 	rlwinm  r8,r8,18,0,13
fff74140:	55 4a 93 be 	rlwinm  r10,r10,18,14,31
fff74144:	7d 4a 43 78 	or      r10,r10,r8
            Eka =   BCa ^((~BCe)&  BCi );
fff74148:	7c 68 38 78 	andc    r8,r3,r7
fff7414c:	7d 08 4a 78 	xor     r8,r8,r9
fff74150:	91 01 01 20 	stw     r8,288(r1)
            Eke =   BCe ^((~BCi)&  BCo );
fff74154:	7c c8 18 78 	andc    r8,r6,r3
            Ako ^= Do;
            BCi = ROL(Ako, 25);
            Amu ^= Du;
            BCo = ROL(Amu,  8);
            Asa ^= Da;
            BCu = ROL(Asa, 18);
fff74158:	7c 84 2b 78 	or      r4,r4,r5
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
fff7415c:	7d 08 3a 78 	xor     r8,r8,r7
            BCi = ROL(Ako, 25);
            Amu ^= Du;
            BCo = ROL(Amu,  8);
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
fff74160:	7f 85 f0 78 	andc    r5,r28,r30
fff74164:	7c a5 02 78 	xor     r5,r5,r0
            Eke =   BCe ^((~BCi)&  BCo );
fff74168:	91 01 01 80 	stw     r8,384(r1)
            Eki =   BCi ^((~BCo)&  BCu );
fff7416c:	7d 48 30 78 	andc    r8,r10,r6
fff74170:	7d 08 1a 78 	xor     r8,r8,r3
            BCi = ROL(Ako, 25);
            Amu ^= Du;
            BCo = ROL(Amu,  8);
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
fff74174:	90 a1 01 1c 	stw     r5,284(r1)
            Eke =   BCe ^((~BCi)&  BCo );
fff74178:	7f a5 e0 78 	andc    r5,r29,r28
fff7417c:	7c a5 f2 78 	xor     r5,r5,r30
            Eki =   BCi ^((~BCo)&  BCu );
fff74180:	91 01 00 f4 	stw     r8,244(r1)
            Eko =   BCo ^((~BCu)&  BCa );
fff74184:	7d 28 50 78 	andc    r8,r9,r10
            Eku =   BCu ^((~BCa)&  BCe );
fff74188:	7c e9 48 78 	andc    r9,r7,r9
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
fff7418c:	7d 08 32 78 	xor     r8,r8,r6
            Eku =   BCu ^((~BCa)&  BCe );
fff74190:	7d 29 52 78 	xor     r9,r9,r10
            Amu ^= Du;
            BCo = ROL(Amu,  8);
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
fff74194:	90 a1 01 7c 	stw     r5,380(r1)
            Eki =   BCi ^((~BCo)&  BCu );
fff74198:	7c 85 e8 78 	andc    r5,r4,r29
fff7419c:	7c a5 e2 78 	xor     r5,r5,r28
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
fff741a0:	80 c1 00 e4 	lwz     r6,228(r1)
fff741a4:	80 e1 01 04 	lwz     r7,260(r1)
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
fff741a8:	91 01 01 50 	stw     r8,336(r1)
            Eku =   BCu ^((~BCa)&  BCe );
fff741ac:	91 21 01 88 	stw     r9,392(r1)

            Abu ^= Du;
fff741b0:	7d 09 02 a6 	mfctr   r8
fff741b4:	81 21 01 08 	lwz     r9,264(r1)
            BCo = ROL(Amu,  8);
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
            Eki =   BCi ^((~BCo)&  BCu );
fff741b8:	90 a1 00 f0 	stw     r5,240(r1)
            Eko =   BCo ^((~BCu)&  BCa );
fff741bc:	7c 05 20 78 	andc    r5,r0,r4
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
fff741c0:	7c dc 3a 78 	xor     r28,r6,r7
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
fff741c4:	7c a5 ea 78 	xor     r5,r5,r29
            Eku =   BCu ^((~BCa)&  BCe );
fff741c8:	7f c0 00 78 	andc    r0,r30,r0

            Abu ^= Du;
fff741cc:	7d 1d 4a 78 	xor     r29,r8,r9
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );
fff741d0:	7c 00 22 78 	xor     r0,r0,r4

            Abu ^= Du;
            BCa = ROL(Abu, 27);
fff741d4:	57 89 d8 08 	rlwinm  r9,r28,27,0,4
fff741d8:	57 a4 d9 7e 	rlwinm  r4,r29,27,5,31
fff741dc:	57 9c d9 7e 	rlwinm  r28,r28,27,5,31
fff741e0:	57 bd d8 08 	rlwinm  r29,r29,27,0,4
fff741e4:	7c 84 4b 78 	or      r4,r4,r9
            Aga ^= Da;
fff741e8:	81 41 00 cc 	lwz     r10,204(r1)
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
            BCa = ROL(Abu, 27);
fff741ec:	7f 89 eb 78 	or      r9,r28,r29
            Aga ^= Da;
fff741f0:	83 c1 01 10 	lwz     r30,272(r1)
fff741f4:	83 81 01 0c 	lwz     r28,268(r1)
fff741f8:	83 a1 00 d0 	lwz     r29,208(r1)
fff741fc:	7d 48 e2 78 	xor     r8,r10,r28
fff74200:	7f a7 f2 78 	xor     r7,r29,r30
            BCe = ROL(Aga, 36);
fff74204:	54 ea 27 3e 	rlwinm  r10,r7,4,28,31
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );
fff74208:	90 01 01 84 	stw     r0,388(r1)

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
            BCe = ROL(Aga, 36);
fff7420c:	54 e7 20 36 	rlwinm  r7,r7,4,0,27
fff74210:	55 00 20 36 	rlwinm  r0,r8,4,0,27
fff74214:	55 08 27 3e 	rlwinm  r8,r8,4,28,31
fff74218:	7c e7 43 78 	or      r7,r7,r8
            Ake ^= De;
fff7421c:	80 61 00 d4 	lwz     r3,212(r1)
fff74220:	80 c1 01 3c 	lwz     r6,316(r1)
fff74224:	7d 08 02 a6 	mflr    r8
fff74228:	83 81 01 40 	lwz     r28,320(r1)
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
            BCe = ROL(Aga, 36);
fff7422c:	7c 00 53 78 	or      r0,r0,r10
            Asa ^= Da;
            BCu = ROL(Asa, 18);
            Eka =   BCa ^((~BCe)&  BCi );
            Eke =   BCe ^((~BCi)&  BCo );
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
fff74230:	90 a1 01 4c 	stw     r5,332(r1)

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
            BCe = ROL(Aga, 36);
            Ake ^= De;
fff74234:	7d 0a e2 78 	xor     r10,r8,r28
fff74238:	7c 65 32 78 	xor     r5,r3,r6
            BCi = ROL(Ake, 10);
fff7423c:	54 a8 50 2a 	rlwinm  r8,r5,10,0,21
fff74240:	55 5d 55 be 	rlwinm  r29,r10,10,22,31
fff74244:	7f bd 43 78 	or      r29,r29,r8
            Ami ^= Di;
fff74248:	83 c1 00 c8 	lwz     r30,200(r1)
fff7424c:	80 61 01 6c 	lwz     r3,364(r1)
fff74250:	81 01 00 d8 	lwz     r8,216(r1)
fff74254:	83 81 01 70 	lwz     r28,368(r1)
            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
            BCe = ROL(Aga, 36);
            Ake ^= De;
            BCi = ROL(Ake, 10);
fff74258:	55 4a 50 2a 	rlwinm  r10,r10,10,0,21
fff7425c:	54 a5 55 be 	rlwinm  r5,r5,10,22,31
fff74260:	7c a5 53 78 	or      r5,r5,r10
            Ami ^= Di;
fff74264:	7f c6 1a 78 	xor     r6,r30,r3
fff74268:	7d 0a e2 78 	xor     r10,r8,r28
            BCo = ROL(Ami, 15);
fff7426c:	55 5e 7c 7e 	rlwinm  r30,r10,15,17,31
fff74270:	54 c8 78 20 	rlwinm  r8,r6,15,0,16
fff74274:	55 4a 78 20 	rlwinm  r10,r10,15,0,16
fff74278:	54 c6 7c 7e 	rlwinm  r6,r6,15,17,31
fff7427c:	7c c6 53 78 	or      r6,r6,r10
            Aso ^= Do;
fff74280:	80 61 00 dc 	lwz     r3,220(r1)
fff74284:	81 41 01 9c 	lwz     r10,412(r1)
            Aga ^= Da;
            BCe = ROL(Aga, 36);
            Ake ^= De;
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
fff74288:	7f de 43 78 	or      r30,r30,r8
            Aso ^= Do;
fff7428c:	83 81 00 e0 	lwz     r28,224(r1)
fff74290:	7c 68 52 78 	xor     r8,r3,r10
fff74294:	80 61 01 a0 	lwz     r3,416(r1)
fff74298:	7f 8a 1a 78 	xor     r10,r28,r3
            BCu = ROL(Aso, 56);
fff7429c:	55 43 c2 3e 	rlwinm  r3,r10,24,8,31
fff742a0:	55 1c c0 0e 	rlwinm  r28,r8,24,0,7
fff742a4:	55 4a c0 0e 	rlwinm  r10,r10,24,0,7
fff742a8:	55 08 c2 3e 	rlwinm  r8,r8,24,8,31
fff742ac:	7d 4a 43 78 	or      r10,r10,r8
            Ema =   BCa ^((~BCe)&  BCi );
fff742b0:	7c a8 00 78 	andc    r8,r5,r0
fff742b4:	7d 08 4a 78 	xor     r8,r8,r9
            Ake ^= De;
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
fff742b8:	7f 83 1b 78 	or      r3,r28,r3
            Ema =   BCa ^((~BCe)&  BCi );
fff742bc:	91 01 01 a0 	stw     r8,416(r1)
fff742c0:	7f bc 38 78 	andc    r28,r29,r7
            Eme =   BCe ^((~BCi)&  BCo );
fff742c4:	7c c8 28 78 	andc    r8,r6,r5
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
fff742c8:	7f 9c 22 78 	xor     r28,r28,r4
            Eme =   BCe ^((~BCi)&  BCo );
fff742cc:	7d 08 02 78 	xor     r8,r8,r0
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
fff742d0:	93 81 01 9c 	stw     r28,412(r1)
            Eme =   BCe ^((~BCi)&  BCo );
fff742d4:	91 01 01 10 	stw     r8,272(r1)
fff742d8:	7f dc e8 78 	andc    r28,r30,r29
            Emi =   BCi ^((~BCo)&  BCu );
fff742dc:	7c 68 30 78 	andc    r8,r3,r6
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
fff742e0:	7f 9c 3a 78 	xor     r28,r28,r7
            Emi =   BCi ^((~BCo)&  BCu );
fff742e4:	7d 08 2a 78 	xor     r8,r8,r5
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );
fff742e8:	7c e7 20 78 	andc    r7,r7,r4
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
fff742ec:	7c 85 50 78 	andc    r5,r4,r10
fff742f0:	7c a5 f2 78 	xor     r5,r5,r30
            Emu =   BCu ^((~BCa)&  BCe );
fff742f4:	7c e7 52 78 	xor     r7,r7,r10
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
fff742f8:	91 01 01 70 	stw     r8,368(r1)
            Emo =   BCo ^((~BCu)&  BCa );
fff742fc:	7d 28 18 78 	andc    r8,r9,r3
fff74300:	7d 08 32 78 	xor     r8,r8,r6
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
fff74304:	80 81 00 c8 	lwz     r4,200(r1)
fff74308:	80 c1 00 d8 	lwz     r6,216(r1)
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
fff7430c:	93 81 01 0c 	stw     r28,268(r1)
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
fff74310:	90 a1 01 04 	stw     r5,260(r1)
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
fff74314:	7d 5c f0 78 	andc    r28,r10,r30
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
fff74318:	80 a1 00 f8 	lwz     r5,248(r1)
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );
fff7431c:	90 e1 01 3c 	stw     r7,316(r1)

            Abi ^= Di;
fff74320:	80 e1 01 ac 	lwz     r7,428(r1)
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
fff74324:	7f 9c ea 78 	xor     r28,r28,r29
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );
fff74328:	7c 09 48 78 	andc    r9,r0,r9

            Abi ^= Di;
fff7432c:	7c 9d 2a 78 	xor     r29,r4,r5
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );
fff74330:	7d 29 1a 78 	xor     r9,r9,r3
            BCo = ROL(Ami, 15);
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
fff74334:	93 81 01 6c 	stw     r28,364(r1)
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
fff74338:	7c dc 3a 78 	xor     r28,r6,r7
            Aso ^= Do;
            BCu = ROL(Aso, 56);
            Ema =   BCa ^((~BCe)&  BCi );
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
fff7433c:	91 01 01 08 	stw     r8,264(r1)
            Emu =   BCu ^((~BCa)&  BCe );
fff74340:	91 21 01 40 	stw     r9,320(r1)

            Abi ^= Di;
            BCa = ROL(Abi, 62);
fff74344:	57 a8 f0 02 	rlwinm  r8,r29,30,0,1
fff74348:	57 89 f0 be 	rlwinm  r9,r28,30,2,31
fff7434c:	7d 08 4b 78 	or      r8,r8,r9
            Ago ^= Do;
fff74350:	81 41 01 24 	lwz     r10,292(r1)
fff74354:	81 21 00 dc 	lwz     r9,220(r1)
fff74358:	83 c1 01 28 	lwz     r30,296(r1)
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
            BCa = ROL(Abi, 62);
fff7435c:	57 a6 f0 be 	rlwinm  r6,r29,30,2,31
            Ago ^= Do;
fff74360:	83 a1 00 e0 	lwz     r29,224(r1)
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
            BCa = ROL(Abi, 62);
fff74364:	57 9c f0 02 	rlwinm  r28,r28,30,0,1
fff74368:	7f 86 33 78 	or      r6,r28,r6
            Ago ^= Do;
fff7436c:	7f a3 f2 78 	xor     r3,r29,r30
fff74370:	7d 3c 52 78 	xor     r28,r9,r10
            BCe = ROL(Ago, 55);
fff74374:	57 9d b8 10 	rlwinm  r29,r28,23,0,8
fff74378:	54 69 ba 7e 	rlwinm  r9,r3,23,9,31
fff7437c:	57 80 ba 7e 	rlwinm  r0,r28,23,9,31
fff74380:	54 63 b8 10 	rlwinm  r3,r3,23,0,8
fff74384:	7f bd 4b 78 	or      r29,r29,r9
fff74388:	7c 60 03 78 	or      r0,r3,r0
            Aku ^= Du;
fff7438c:	80 a1 01 54 	lwz     r5,340(r1)
fff74390:	80 61 00 e4 	lwz     r3,228(r1)
fff74394:	7c e9 02 a6 	mfctr   r7
fff74398:	81 21 01 58 	lwz     r9,344(r1)
fff7439c:	7c 64 2a 78 	xor     r4,r3,r5
fff743a0:	7c e5 4a 78 	xor     r5,r7,r9
            BCi = ROL(Aku, 39);
fff743a4:	54 a9 3e 7e 	rlwinm  r9,r5,7,25,31
fff743a8:	54 9e 38 30 	rlwinm  r30,r4,7,0,24
fff743ac:	54 a5 38 30 	rlwinm  r5,r5,7,0,24
fff743b0:	54 84 3e 7e 	rlwinm  r4,r4,7,25,31
fff743b4:	7c a5 23 78 	or      r5,r5,r4
            Ama ^= Da;
fff743b8:	81 41 00 cc 	lwz     r10,204(r1)
fff743bc:	83 81 01 5c 	lwz     r28,348(r1)
fff743c0:	80 61 00 d0 	lwz     r3,208(r1)
fff743c4:	80 81 01 60 	lwz     r4,352(r1)
            Abi ^= Di;
            BCa = ROL(Abi, 62);
            Ago ^= Do;
            BCe = ROL(Ago, 55);
            Aku ^= Du;
            BCi = ROL(Aku, 39);
fff743c8:	7f de 4b 78 	or      r30,r30,r9
            Ama ^= Da;
fff743cc:	7d 49 e2 78 	xor     r9,r10,r28
fff743d0:	7c 7c 22 78 	xor     r28,r3,r4
            BCo = ROL(Ama, 41);
fff743d4:	57 8a 4d fe 	rlwinm  r10,r28,9,23,31
fff743d8:	55 27 48 2c 	rlwinm  r7,r9,9,0,22
fff743dc:	7c e7 53 78 	or      r7,r7,r10
fff743e0:	55 23 4d fe 	rlwinm  r3,r9,9,23,31
            Ase ^= De;
fff743e4:	81 41 01 8c 	lwz     r10,396(r1)
fff743e8:	81 21 00 d4 	lwz     r9,212(r1)
            Ago ^= Do;
            BCe = ROL(Ago, 55);
            Aku ^= Du;
            BCi = ROL(Aku, 39);
            Ama ^= Da;
            BCo = ROL(Ama, 41);
fff743ec:	57 9c 48 2c 	rlwinm  r28,r28,9,0,22
            Ase ^= De;
fff743f0:	7d 24 52 78 	xor     r4,r9,r10
fff743f4:	7d 28 02 a6 	mflr    r9
fff743f8:	81 41 01 90 	lwz     r10,400(r1)
            Ago ^= Do;
            BCe = ROL(Ago, 55);
            Aku ^= Du;
            BCi = ROL(Aku, 39);
            Ama ^= Da;
            BCo = ROL(Ama, 41);
fff743fc:	7f 83 1b 78 	or      r3,r28,r3
            Ase ^= De;
fff74400:	7d 3c 52 78 	xor     r28,r9,r10
            BCu = ROL(Ase,  2);
fff74404:	57 8a 17 be 	rlwinm  r10,r28,2,30,31
fff74408:	54 89 10 3a 	rlwinm  r9,r4,2,0,29
fff7440c:	7d 4a 4b 78 	or      r10,r10,r9
fff74410:	54 84 17 be 	rlwinm  r4,r4,2,30,31
            Esa =   BCa ^((~BCe)&  BCi );
fff74414:	7c a9 00 78 	andc    r9,r5,r0
            Aku ^= Du;
            BCi = ROL(Aku, 39);
            Ama ^= Da;
            BCo = ROL(Ama, 41);
            Ase ^= De;
            BCu = ROL(Ase,  2);
fff74418:	57 9c 10 3a 	rlwinm  r28,r28,2,0,29
fff7441c:	7c 9c e3 78 	or      r28,r4,r28
            Esa =   BCa ^((~BCe)&  BCi );
fff74420:	7d 29 32 78 	xor     r9,r9,r6
fff74424:	7f c4 e8 78 	andc    r4,r30,r29
fff74428:	91 21 01 54 	stw     r9,340(r1)
fff7442c:	7c 84 42 78 	xor     r4,r4,r8
            Ese =   BCe ^((~BCi)&  BCo );
fff74430:	7c e9 f0 78 	andc    r9,r7,r30
            BCi = ROL(Aku, 39);
            Ama ^= Da;
            BCo = ROL(Ama, 41);
            Ase ^= De;
            BCu = ROL(Ase,  2);
            Esa =   BCa ^((~BCe)&  BCi );
fff74434:	90 81 01 58 	stw     r4,344(r1)
            Ese =   BCe ^((~BCi)&  BCo );
fff74438:	7d 29 ea 78 	xor     r9,r9,r29
fff7443c:	7c 64 28 78 	andc    r4,r3,r5
fff74440:	7c 84 02 78 	xor     r4,r4,r0
fff74444:	91 21 01 90 	stw     r9,400(r1)
            Esi =   BCi ^((~BCo)&  BCu );
fff74448:	7f 89 38 78 	andc    r9,r28,r7
            Ama ^= Da;
            BCo = ROL(Ama, 41);
            Ase ^= De;
            BCu = ROL(Ase,  2);
            Esa =   BCa ^((~BCe)&  BCi );
            Ese =   BCe ^((~BCi)&  BCo );
fff7444c:	90 81 01 8c 	stw     r4,396(r1)
            Esi =   BCi ^((~BCo)&  BCu );
fff74450:	7d 29 f2 78 	xor     r9,r9,r30
fff74454:	7d 44 18 78 	andc    r4,r10,r3
fff74458:	7c 84 2a 78 	xor     r4,r4,r5
fff7445c:	91 21 01 28 	stw     r9,296(r1)
            Eso =   BCo ^((~BCu)&  BCa );
fff74460:	7d 09 e0 78 	andc    r9,r8,r28
fff74464:	7d 29 3a 78 	xor     r9,r9,r7
            BCo = ROL(Ama, 41);
            Ase ^= De;
            BCu = ROL(Ase,  2);
            Esa =   BCa ^((~BCe)&  BCi );
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
fff74468:	90 81 01 24 	stw     r4,292(r1)
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );
fff7446c:	7f a8 40 78 	andc    r8,r29,r8
            Ase ^= De;
            BCu = ROL(Ase,  2);
            Esa =   BCa ^((~BCe)&  BCi );
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
fff74470:	7c c4 50 78 	andc    r4,r6,r10
fff74474:	7c 84 1a 78 	xor     r4,r4,r3
            Esu =   BCu ^((~BCa)&  BCe );
fff74478:	7d 08 e2 78 	xor     r8,r8,r28
fff7447c:	83 a1 00 e8 	lwz     r29,232(r1)
fff74480:	83 81 01 64 	lwz     r28,356(r1)
fff74484:	83 c1 01 68 	lwz     r30,360(r1)
            Ase ^= De;
            BCu = ROL(Ase,  2);
            Esa =   BCa ^((~BCe)&  BCi );
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
fff74488:	91 21 01 60 	stw     r9,352(r1)
            Esu =   BCu ^((~BCa)&  BCe );
fff7448c:	7c 09 30 78 	andc    r9,r0,r6
fff74490:	80 01 00 ec 	lwz     r0,236(r1)
fff74494:	80 61 01 1c 	lwz     r3,284(r1)
            Ase ^= De;
            BCu = ROL(Ase,  2);
            Esa =   BCa ^((~BCe)&  BCi );
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
fff74498:	90 81 01 5c 	stw     r4,348(r1)
fff7449c:	80 81 01 20 	lwz     r4,288(r1)
            Esu =   BCu ^((~BCa)&  BCe );
fff744a0:	7d 29 52 78 	xor     r9,r9,r10
fff744a4:	7f 87 ea 78 	xor     r7,r28,r29
fff744a8:	7f ca 02 78 	xor     r10,r30,r0
fff744ac:	80 a1 01 9c 	lwz     r5,412(r1)
fff744b0:	80 c1 01 a0 	lwz     r6,416(r1)

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
            BCe = Ebe^Ege^Eke^Eme^Ese;
fff744b4:	83 81 00 fc 	lwz     r28,252(r1)
fff744b8:	83 c1 01 44 	lwz     r30,324(r1)
fff744bc:	80 01 01 00 	lwz     r0,256(r1)
            BCu = ROL(Ase,  2);
            Esa =   BCa ^((~BCe)&  BCi );
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );
fff744c0:	91 21 01 ac 	stw     r9,428(r1)
fff744c4:	91 01 00 f8 	stw     r8,248(r1)

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
fff744c8:	81 21 01 58 	lwz     r9,344(r1)
fff744cc:	81 01 01 54 	lwz     r8,340(r1)
fff744d0:	7c e7 1a 78 	xor     r7,r7,r3
fff744d4:	7d 4a 22 78 	xor     r10,r10,r4
            BCe = Ebe^Ege^Eke^Eme^Ese;
fff744d8:	80 61 01 48 	lwz     r3,328(r1)
fff744dc:	80 81 01 7c 	lwz     r4,380(r1)
fff744e0:	7f 9d f2 78 	xor     r29,r28,r30
fff744e4:	7c e7 2a 78 	xor     r7,r7,r5
fff744e8:	7d 4a 32 78 	xor     r10,r10,r6
fff744ec:	80 a1 01 80 	lwz     r5,384(r1)
fff744f0:	80 c1 01 0c 	lwz     r6,268(r1)
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
fff744f4:	7c e7 42 78 	xor     r7,r7,r8
fff744f8:	7d 4a 4a 78 	xor     r10,r10,r9
            BCe = Ebe^Ege^Eke^Eme^Ese;
fff744fc:	7c 1e 1a 78 	xor     r30,r0,r3
fff74500:	81 21 01 8c 	lwz     r9,396(r1)
fff74504:	7f bd 22 78 	xor     r29,r29,r4
fff74508:	81 01 01 10 	lwz     r8,272(r1)
            BCi = Ebi^Egi^Eki^Emi^Esi;
fff7450c:	80 61 01 34 	lwz     r3,308(r1)
fff74510:	80 81 01 a4 	lwz     r4,420(r1)
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
            BCe = Ebe^Ege^Eke^Eme^Ese;
fff74514:	7f de 2a 78 	xor     r30,r30,r5
fff74518:	7f bd 32 78 	xor     r29,r29,r6
            BCi = Ebi^Egi^Eki^Emi^Esi;
fff7451c:	80 a1 01 38 	lwz     r5,312(r1)
fff74520:	80 c1 01 b4 	lwz     r6,436(r1)
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
            BCe = Ebe^Ege^Eke^Eme^Ese;
fff74524:	7f bd 4a 78 	xor     r29,r29,r9
fff74528:	83 81 01 90 	lwz     r28,400(r1)
fff7452c:	7f de 42 78 	xor     r30,r30,r8
            BCi = Ebi^Egi^Eki^Emi^Esi;
fff74530:	15 01 00 f0 	lvd     d8,240(r1)
fff74534:	7c 60 22 78 	xor     r0,r3,r4
fff74538:	7c a3 32 78 	xor     r3,r5,r6
fff7453c:	80 81 01 70 	lwz     r4,368(r1)
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
            BCe = Ebe^Ege^Eke^Eme^Ese;
fff74540:	7f de e2 78 	xor     r30,r30,r28
            BCi = Ebi^Egi^Eki^Emi^Esi;
fff74544:	80 c1 01 28 	lwz     r6,296(r1)
fff74548:	83 81 01 6c 	lwz     r28,364(r1)
fff7454c:	7c 63 4a 78 	xor     r3,r3,r9
fff74550:	7c 00 42 78 	xor     r0,r0,r8
            BCo = Ebo^Ego^Eko^Emo^Eso;
fff74554:	81 21 01 14 	lwz     r9,276(r1)
fff74558:	81 01 01 94 	lwz     r8,404(r1)
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
            BCe = Ebe^Ege^Eke^Eme^Ese;
            BCi = Ebi^Egi^Eki^Emi^Esi;
fff7455c:	7c 63 22 78 	xor     r3,r3,r4
fff74560:	7c 63 32 78 	xor     r3,r3,r6
fff74564:	80 a1 01 24 	lwz     r5,292(r1)
            BCo = Ebo^Ego^Eko^Emo^Eso;
fff74568:	80 c1 01 18 	lwz     r6,280(r1)
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
            BCe = Ebe^Ege^Eke^Eme^Ese;
            BCi = Ebi^Egi^Eki^Emi^Esi;
fff7456c:	7c 00 e2 78 	xor     r0,r0,r28
            BCo = Ebo^Ego^Eko^Emo^Eso;
fff74570:	83 81 01 98 	lwz     r28,408(r1)
fff74574:	7d 04 4a 78 	xor     r4,r8,r9
fff74578:	81 01 01 4c 	lwz     r8,332(r1)
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
            BCe = Ebe^Ege^Eke^Eme^Ese;
            BCi = Ebi^Egi^Eki^Emi^Esi;
fff7457c:	7c 00 2a 78 	xor     r0,r0,r5
            BCo = Ebo^Ego^Eko^Emo^Eso;
fff74580:	7f 85 32 78 	xor     r5,r28,r6
fff74584:	83 81 01 04 	lwz     r28,260(r1)
fff74588:	81 21 01 50 	lwz     r9,336(r1)
fff7458c:	7c 84 42 78 	xor     r4,r4,r8
fff74590:	81 01 01 5c 	lwz     r8,348(r1)
fff74594:	80 c1 01 08 	lwz     r6,264(r1)
fff74598:	7c 84 e2 78 	xor     r4,r4,r28
fff7459c:	7c 84 42 78 	xor     r4,r4,r8
fff745a0:	83 81 01 2c 	lwz     r28,300(r1)
fff745a4:	81 01 01 84 	lwz     r8,388(r1)
fff745a8:	7c a5 4a 78 	xor     r5,r5,r9
fff745ac:	81 21 01 60 	lwz     r9,352(r1)
fff745b0:	7c a5 32 78 	xor     r5,r5,r6
fff745b4:	7c a5 4a 78 	xor     r5,r5,r9
fff745b8:	7f 86 42 78 	xor     r6,r28,r8
fff745bc:	81 21 01 30 	lwz     r9,304(r1)
fff745c0:	83 81 01 88 	lwz     r28,392(r1)
            BCu = Ebu^Egu^Eku^Emu^Esu;
fff745c4:	81 01 01 74 	lwz     r8,372(r1)
fff745c8:	7d 29 e2 78 	xor     r9,r9,r28
fff745cc:	83 81 01 78 	lwz     r28,376(r1)
fff745d0:	7c c6 42 78 	xor     r6,r6,r8
fff745d4:	7d 29 e2 78 	xor     r9,r9,r28
fff745d8:	81 01 01 3c 	lwz     r8,316(r1)
fff745dc:	83 81 01 40 	lwz     r28,320(r1)
fff745e0:	7c c6 42 78 	xor     r6,r6,r8
fff745e4:	7d 28 e2 78 	xor     r8,r9,r28
fff745e8:	81 21 01 ac 	lwz     r9,428(r1)
fff745ec:	83 81 00 f8 	lwz     r28,248(r1)
fff745f0:	7c c6 4a 78 	xor     r6,r6,r9
fff745f4:	7d 08 e2 78 	xor     r8,r8,r28

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
fff745f8:	57 c9 0f fe 	rlwinm  r9,r30,1,31,31
fff745fc:	57 bc 08 3c 	rlwinm  r28,r29,1,0,30
fff74600:	7d 29 e3 78 	or      r9,r9,r28
fff74604:	7d 29 03 a6 	mtctr   r9
fff74608:	57 dc 08 3c 	rlwinm  r28,r30,1,0,30
fff7460c:	57 a9 0f fe 	rlwinm  r9,r29,1,31,31
fff74610:	7d 29 e3 78 	or      r9,r9,r28
fff74614:	7d 28 03 a6 	mtlr    r9
fff74618:	7d 29 02 a6 	mfctr   r9
fff7461c:	7d 29 32 78 	xor     r9,r9,r6
fff74620:	7f 88 02 a6 	mflr    r28
fff74624:	91 21 00 cc 	stw     r9,204(r1)
fff74628:	7f 9c 42 78 	xor     r28,r28,r8
fff7462c:	93 81 00 d0 	stw     r28,208(r1)
            De = BCa^ROL(BCi, 1);
fff74630:	54 69 0f fe 	rlwinm  r9,r3,1,31,31
fff74634:	54 1c 08 3c 	rlwinm  r28,r0,1,0,30
fff74638:	7d 29 e3 78 	or      r9,r9,r28
fff7463c:	7d 29 03 a6 	mtctr   r9
fff74640:	54 7c 08 3c 	rlwinm  r28,r3,1,0,30
fff74644:	54 09 0f fe 	rlwinm  r9,r0,1,31,31
fff74648:	7d 29 e3 78 	or      r9,r9,r28
fff7464c:	7d 28 03 a6 	mtlr    r9
fff74650:	7d 29 02 a6 	mfctr   r9
fff74654:	7d 29 3a 78 	xor     r9,r9,r7
fff74658:	7f 88 02 a6 	mflr    r28
fff7465c:	91 21 00 d4 	stw     r9,212(r1)
fff74660:	7f 9c 52 78 	xor     r28,r28,r10
fff74664:	7f 88 03 a6 	mtlr    r28
            Di = BCe^ROL(BCo, 1);
fff74668:	54 a9 0f fe 	rlwinm  r9,r5,1,31,31
fff7466c:	54 9c 08 3c 	rlwinm  r28,r4,1,0,30
fff74670:	7d 29 e3 78 	or      r9,r9,r28
fff74674:	7d 29 03 a6 	mtctr   r9
fff74678:	54 bc 08 3c 	rlwinm  r28,r5,1,0,30
fff7467c:	54 89 0f fe 	rlwinm  r9,r4,1,31,31
fff74680:	7d 29 e3 78 	or      r9,r9,r28
fff74684:	7f 89 02 a6 	mfctr   r28
fff74688:	7d 3e f2 78 	xor     r30,r9,r30
fff7468c:	7f 9c ea 78 	xor     r28,r28,r29
fff74690:	93 c1 00 d8 	stw     r30,216(r1)
            Do = BCi^ROL(BCu, 1);
fff74694:	55 1d 0f fe 	rlwinm  r29,r8,1,31,31
fff74698:	54 de 08 3c 	rlwinm  r30,r6,1,0,30
fff7469c:	55 08 08 3c 	rlwinm  r8,r8,1,0,30
fff746a0:	54 c6 0f fe 	rlwinm  r6,r6,1,31,31
fff746a4:	7c c8 43 78 	or      r8,r6,r8
fff746a8:	7d 08 1a 78 	xor     r8,r8,r3
            Du = BCo^ROL(BCa, 1);
fff746ac:	55 46 0f fe 	rlwinm  r6,r10,1,31,31

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
fff746b0:	91 01 00 e0 	stw     r8,224(r1)
            Du = BCo^ROL(BCa, 1);
fff746b4:	54 e8 08 3c 	rlwinm  r8,r7,1,0,30

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
fff746b8:	7f be f3 78 	or      r30,r29,r30
            Du = BCo^ROL(BCa, 1);
fff746bc:	7c c8 43 78 	or      r8,r6,r8
fff746c0:	54 e7 0f fe 	rlwinm  r7,r7,1,31,31
fff746c4:	55 4a 08 3c 	rlwinm  r10,r10,1,0,30

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
fff746c8:	7f de 02 78 	xor     r30,r30,r0
            Du = BCo^ROL(BCa, 1);
fff746cc:	7d 08 22 78 	xor     r8,r8,r4
fff746d0:	7c ea 53 78 	or      r10,r7,r10
fff746d4:	7d 4a 2a 78 	xor     r10,r10,r5
            BCu = Ebu^Egu^Eku^Emu^Esu;

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
fff746d8:	93 81 00 c8 	stw     r28,200(r1)
            Do = BCi^ROL(BCu, 1);
fff746dc:	93 c1 00 dc 	stw     r30,220(r1)
            Du = BCo^ROL(BCa, 1);

            Eba ^= Da;
            BCa = Eba;
            Ege ^= De;
fff746e0:	7c c8 02 a6 	mflr    r6
            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
            Du = BCo^ROL(BCa, 1);
fff746e4:	91 01 00 e4 	stw     r8,228(r1)

            Eba ^= Da;
fff746e8:	80 61 00 ec 	lwz     r3,236(r1)
fff746ec:	83 c1 00 e8 	lwz     r30,232(r1)
fff746f0:	83 a1 00 cc 	lwz     r29,204(r1)
fff746f4:	80 01 00 d0 	lwz     r0,208(r1)
            BCa = Eba;
            Ege ^= De;
fff746f8:	80 81 00 d4 	lwz     r4,212(r1)
fff746fc:	80 a1 00 fc 	lwz     r5,252(r1)
fff74700:	80 e1 01 00 	lwz     r7,256(r1)
            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
            Du = BCo^ROL(BCa, 1);
fff74704:	7d 49 03 a6 	mtctr   r10

            Eba ^= Da;
fff74708:	7f bc f2 78 	xor     r28,r29,r30
            BCa = Eba;
            Ege ^= De;
fff7470c:	7c 8a 2a 78 	xor     r10,r4,r5
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
            Du = BCo^ROL(BCa, 1);

            Eba ^= Da;
fff74710:	7c 1d 1a 78 	xor     r29,r0,r3
            BCa = Eba;
            Ege ^= De;
fff74714:	7c c0 3a 78 	xor     r0,r6,r7
            BCe = ROL(Ege, 44);
fff74718:	54 08 65 3e 	rlwinm  r8,r0,12,20,31
fff7471c:	55 5e 60 26 	rlwinm  r30,r10,12,0,19
fff74720:	54 00 60 26 	rlwinm  r0,r0,12,0,19
fff74724:	55 4a 65 3e 	rlwinm  r10,r10,12,20,31
fff74728:	7f de 43 78 	or      r30,r30,r8
fff7472c:	7c 00 53 78 	or      r0,r0,r10
            Eki ^= Di;
fff74730:	81 21 00 f0 	lwz     r9,240(r1)
fff74734:	80 81 00 f4 	lwz     r4,244(r1)
fff74738:	81 01 00 c8 	lwz     r8,200(r1)
fff7473c:	81 41 00 d8 	lwz     r10,216(r1)
fff74740:	7d 05 4a 78 	xor     r5,r8,r9
fff74744:	7d 43 22 78 	xor     r3,r10,r4
            BCi = ROL(Eki, 43);
fff74748:	54 6a 5d 7e 	rlwinm  r10,r3,11,21,31
fff7474c:	54 a4 58 28 	rlwinm  r4,r5,11,0,20
fff74750:	54 63 58 28 	rlwinm  r3,r3,11,0,20
fff74754:	54 a5 5d 7e 	rlwinm  r5,r5,11,21,31
fff74758:	7c 63 2b 78 	or      r3,r3,r5
            Emo ^= Do;
fff7475c:	80 c1 01 04 	lwz     r6,260(r1)
fff74760:	80 a1 00 dc 	lwz     r5,220(r1)
fff74764:	80 e1 00 e0 	lwz     r7,224(r1)
fff74768:	81 21 01 08 	lwz     r9,264(r1)
fff7476c:	7c a8 32 78 	xor     r8,r5,r6
fff74770:	7c e6 4a 78 	xor     r6,r7,r9
            Eba ^= Da;
            BCa = Eba;
            Ege ^= De;
            BCe = ROL(Ege, 44);
            Eki ^= Di;
            BCi = ROL(Eki, 43);
fff74774:	7c 84 53 78 	or      r4,r4,r10
            Emo ^= Do;
            BCo = ROL(Emo, 21);
fff74778:	54 c5 aa fe 	rlwinm  r5,r6,21,11,31
fff7477c:	55 0a a8 14 	rlwinm  r10,r8,21,0,10
fff74780:	54 c6 a8 14 	rlwinm  r6,r6,21,0,10
fff74784:	55 08 aa fe 	rlwinm  r8,r8,21,11,31
fff74788:	7c a5 53 78 	or      r5,r5,r10
fff7478c:	7d 08 33 78 	or      r8,r8,r6
            Esu ^= Du;
fff74790:	81 41 00 e4 	lwz     r10,228(r1)
fff74794:	80 c1 01 ac 	lwz     r6,428(r1)
fff74798:	7c e9 02 a6 	mfctr   r7
fff7479c:	7d 49 32 78 	xor     r9,r10,r6
fff747a0:	81 41 00 f8 	lwz     r10,248(r1)
fff747a4:	7c e6 52 78 	xor     r6,r7,r10
            BCu = ROL(Esu, 14);
fff747a8:	54 c7 74 be 	rlwinm  r7,r6,14,18,31
fff747ac:	55 2a 70 22 	rlwinm  r10,r9,14,0,17
fff747b0:	7c ea 53 78 	or      r10,r7,r10
fff747b4:	54 c7 70 22 	rlwinm  r7,r6,14,0,17
fff747b8:	80 c1 01 a8 	lwz     r6,424(r1)
fff747bc:	55 29 74 be 	rlwinm  r9,r9,14,18,31
fff747c0:	80 c6 00 08 	lwz     r6,8(r6)
fff747c4:	7d 27 3b 78 	or      r7,r9,r7
fff747c8:	90 c1 01 bc 	stw     r6,444(r1)
fff747cc:	81 21 01 a8 	lwz     r9,424(r1)
fff747d0:	80 c9 00 0c 	lwz     r6,12(r9)
fff747d4:	81 21 01 bc 	lwz     r9,444(r1)
fff747d8:	7f a6 32 78 	xor     r6,r29,r6
fff747dc:	7f 89 4a 78 	xor     r9,r28,r9
fff747e0:	91 21 00 f0 	stw     r9,240(r1)
            Aba =   BCa ^((~BCe)&  BCi );
fff747e4:	7c 89 f0 78 	andc    r9,r4,r30
fff747e8:	91 21 00 ec 	stw     r9,236(r1)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
fff747ec:	81 21 00 f0 	lwz     r9,240(r1)
fff747f0:	90 c1 00 f4 	stw     r6,244(r1)
            BCi = ROL(Eki, 43);
            Emo ^= Do;
            BCo = ROL(Emo, 21);
            Esu ^= Du;
            BCu = ROL(Esu, 14);
            Aba =   BCa ^((~BCe)&  BCi );
fff747f4:	7c 66 00 78 	andc    r6,r3,r0
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
fff747f8:	7d 26 32 78 	xor     r6,r9,r6
fff747fc:	90 c1 00 e8 	stw     r6,232(r1)
fff74800:	81 21 00 ec 	lwz     r9,236(r1)
fff74804:	80 c1 00 f4 	lwz     r6,244(r1)
fff74808:	7c c6 4a 78 	xor     r6,r6,r9
fff7480c:	90 c1 00 ec 	stw     r6,236(r1)
            Abe =   BCe ^((~BCi)&  BCo );
fff74810:	7d 09 20 78 	andc    r9,r8,r4
fff74814:	7c a6 18 78 	andc    r6,r5,r3
fff74818:	7c c6 02 78 	xor     r6,r6,r0
fff7481c:	7d 29 f2 78 	xor     r9,r9,r30
fff74820:	90 c1 00 f0 	stw     r6,240(r1)
fff74824:	91 21 00 f4 	stw     r9,244(r1)
            Abi =   BCi ^((~BCo)&  BCu );
fff74828:	7d 46 28 78 	andc    r6,r10,r5
fff7482c:	7c e9 40 78 	andc    r9,r7,r8
fff74830:	7c c6 1a 78 	xor     r6,r6,r3
fff74834:	7d 29 22 78 	xor     r9,r9,r4
fff74838:	90 c1 00 f8 	stw     r6,248(r1)
fff7483c:	91 21 01 ac 	stw     r9,428(r1)
            Abo =   BCo ^((~BCu)&  BCa );
fff74840:	7f 86 50 78 	andc    r6,r28,r10
fff74844:	7f a9 38 78 	andc    r9,r29,r7
            Abu =   BCu ^((~BCa)&  BCe );
fff74848:	7c 1c e0 78 	andc    r28,r0,r28
fff7484c:	7f dd e8 78 	andc    r29,r30,r29
fff74850:	7f 9c 52 78 	xor     r28,r28,r10
fff74854:	7f bd 3a 78 	xor     r29,r29,r7

            Ebo ^= Do;
fff74858:	83 c1 01 18 	lwz     r30,280(r1)
fff7485c:	81 41 00 dc 	lwz     r10,220(r1)
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
            Abe =   BCe ^((~BCi)&  BCo );
            Abi =   BCi ^((~BCo)&  BCu );
            Abo =   BCo ^((~BCu)&  BCa );
            Abu =   BCu ^((~BCa)&  BCe );
fff74860:	93 81 01 04 	stw     r28,260(r1)
fff74864:	93 a1 01 08 	stw     r29,264(r1)

            Ebo ^= Do;
fff74868:	83 81 01 14 	lwz     r28,276(r1)
fff7486c:	83 a1 00 e0 	lwz     r29,224(r1)
fff74870:	7d 40 e2 78 	xor     r0,r10,r28
            BCu = ROL(Esu, 14);
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
            Abe =   BCe ^((~BCi)&  BCo );
            Abi =   BCi ^((~BCo)&  BCu );
            Abo =   BCo ^((~BCu)&  BCa );
fff74874:	7d 29 42 78 	xor     r9,r9,r8
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
fff74878:	7f a8 f2 78 	xor     r8,r29,r30
            BCu = ROL(Esu, 14);
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
            Abe =   BCe ^((~BCi)&  BCo );
            Abi =   BCi ^((~BCo)&  BCu );
            Abo =   BCo ^((~BCu)&  BCa );
fff7487c:	7c c6 2a 78 	xor     r6,r6,r5
fff74880:	91 21 01 00 	stw     r9,256(r1)
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
fff74884:	55 1d e1 3e 	rlwinm  r29,r8,28,4,31
fff74888:	54 09 e0 06 	rlwinm  r9,r0,28,0,3
fff7488c:	55 08 e0 06 	rlwinm  r8,r8,28,0,3
fff74890:	54 00 e1 3e 	rlwinm  r0,r0,28,4,31
            Egu ^= Du;
fff74894:	80 61 01 2c 	lwz     r3,300(r1)
            BCu = ROL(Esu, 14);
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
            Abe =   BCe ^((~BCi)&  BCo );
            Abi =   BCi ^((~BCo)&  BCu );
            Abo =   BCo ^((~BCu)&  BCa );
fff74898:	90 c1 00 fc 	stw     r6,252(r1)
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
fff7489c:	7c a9 02 a6 	mfctr   r5
            Abi =   BCi ^((~BCo)&  BCu );
            Abo =   BCo ^((~BCu)&  BCa );
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
fff748a0:	7c 06 43 78 	or      r6,r0,r8
            Egu ^= Du;
fff748a4:	80 01 00 e4 	lwz     r0,228(r1)
fff748a8:	81 01 01 30 	lwz     r8,304(r1)
fff748ac:	7c 04 1a 78 	xor     r4,r0,r3
fff748b0:	7c a7 42 78 	xor     r7,r5,r8
            Abi =   BCi ^((~BCo)&  BCu );
            Abo =   BCo ^((~BCu)&  BCa );
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
fff748b4:	7f bd 4b 78 	or      r29,r29,r9
            Egu ^= Du;
            BCe = ROL(Egu, 20);
fff748b8:	54 e0 a3 3e 	rlwinm  r0,r7,20,12,31
fff748bc:	54 89 a0 16 	rlwinm  r9,r4,20,0,11
fff748c0:	7c 00 4b 78 	or      r0,r0,r9
            Eka ^= Da;
fff748c4:	81 41 01 1c 	lwz     r10,284(r1)
fff748c8:	80 61 01 20 	lwz     r3,288(r1)
fff748cc:	81 21 00 cc 	lwz     r9,204(r1)
fff748d0:	83 81 00 d0 	lwz     r28,208(r1)
fff748d4:	7d 25 52 78 	xor     r5,r9,r10
fff748d8:	7f 88 1a 78 	xor     r8,r28,r3
            BCi = ROL(Eka, 3);
fff748dc:	54 a9 18 38 	rlwinm  r9,r5,3,0,28
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
            BCe = ROL(Egu, 20);
fff748e0:	54 84 a3 3e 	rlwinm  r4,r4,20,12,31
fff748e4:	54 fe a0 16 	rlwinm  r30,r7,20,0,11
            Eka ^= Da;
            BCi = ROL(Eka, 3);
fff748e8:	55 0a 1f 7e 	rlwinm  r10,r8,3,29,31
fff748ec:	54 a5 1f 7e 	rlwinm  r5,r5,3,29,31
fff748f0:	55 08 18 38 	rlwinm  r8,r8,3,0,28
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
            BCe = ROL(Egu, 20);
fff748f4:	7c 9e f3 78 	or      r30,r4,r30
            Eka ^= Da;
            BCi = ROL(Eka, 3);
fff748f8:	7c a5 43 78 	or      r5,r5,r8
            Eme ^= De;
fff748fc:	80 e1 01 0c 	lwz     r7,268(r1)
fff74900:	80 61 01 10 	lwz     r3,272(r1)
fff74904:	80 81 00 d4 	lwz     r4,212(r1)
fff74908:	7d 08 02 a6 	mflr    r8
            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
            BCe = ROL(Egu, 20);
            Eka ^= Da;
            BCi = ROL(Eka, 3);
fff7490c:	7d 4a 4b 78 	or      r10,r10,r9
            Eme ^= De;
fff74910:	7d 1c 1a 78 	xor     r28,r8,r3
fff74914:	7c 89 3a 78 	xor     r9,r4,r7
            BCo = ROL(Eme, 45);
fff74918:	57 88 6c fe 	rlwinm  r8,r28,13,19,31
fff7491c:	55 23 68 24 	rlwinm  r3,r9,13,0,18
fff74920:	7c 63 43 78 	or      r3,r3,r8
            Esi ^= Di;
fff74924:	80 e1 00 c8 	lwz     r7,200(r1)
fff74928:	81 01 01 24 	lwz     r8,292(r1)
            Egu ^= Du;
            BCe = ROL(Egu, 20);
            Eka ^= Da;
            BCi = ROL(Eka, 3);
            Eme ^= De;
            BCo = ROL(Eme, 45);
fff7492c:	55 29 6c fe 	rlwinm  r9,r9,13,19,31
            Esi ^= Di;
fff74930:	7c e4 42 78 	xor     r4,r7,r8
fff74934:	81 01 01 28 	lwz     r8,296(r1)
fff74938:	80 e1 00 d8 	lwz     r7,216(r1)
            Egu ^= Du;
            BCe = ROL(Egu, 20);
            Eka ^= Da;
            BCi = ROL(Eka, 3);
            Eme ^= De;
            BCo = ROL(Eme, 45);
fff7493c:	57 9c 68 24 	rlwinm  r28,r28,13,0,18
fff74940:	7f 9c 4b 78 	or      r28,r28,r9
            Esi ^= Di;
fff74944:	7c e9 42 78 	xor     r9,r7,r8
            BCu = ROL(Esi, 61);
fff74948:	55 28 e8 fe 	rlwinm  r8,r9,29,3,31
fff7494c:	54 87 e8 04 	rlwinm  r7,r4,29,0,2
fff74950:	7c e8 43 78 	or      r8,r7,r8
fff74954:	54 84 e8 fe 	rlwinm  r4,r4,29,3,31
            Aga =   BCa ^((~BCe)&  BCi );
fff74958:	7c a7 f0 78 	andc    r7,r5,r30
            Eka ^= Da;
            BCi = ROL(Eka, 3);
            Eme ^= De;
            BCo = ROL(Eme, 45);
            Esi ^= Di;
            BCu = ROL(Esi, 61);
fff7495c:	55 29 e8 04 	rlwinm  r9,r9,29,0,2
fff74960:	7d 29 23 78 	or      r9,r9,r4
            Aga =   BCa ^((~BCe)&  BCi );
fff74964:	7c e7 32 78 	xor     r7,r7,r6
fff74968:	7d 44 00 78 	andc    r4,r10,r0
fff7496c:	7c 84 ea 78 	xor     r4,r4,r29
fff74970:	90 e1 01 10 	stw     r7,272(r1)
            Age =   BCe ^((~BCi)&  BCo );
fff74974:	7c 67 28 78 	andc    r7,r3,r5
fff74978:	7c e7 f2 78 	xor     r7,r7,r30
            BCi = ROL(Eka, 3);
            Eme ^= De;
            BCo = ROL(Eme, 45);
            Esi ^= Di;
            BCu = ROL(Esi, 61);
            Aga =   BCa ^((~BCe)&  BCi );
fff7497c:	90 81 01 0c 	stw     r4,268(r1)
            Age =   BCe ^((~BCi)&  BCo );
fff74980:	7f 84 50 78 	andc    r4,r28,r10
fff74984:	7c 84 02 78 	xor     r4,r4,r0
fff74988:	90 e1 01 18 	stw     r7,280(r1)
            Agi =   BCi ^((~BCo)&  BCu );
fff7498c:	7d 07 18 78 	andc    r7,r8,r3
fff74990:	7c e7 2a 78 	xor     r7,r7,r5
            Eme ^= De;
            BCo = ROL(Eme, 45);
            Esi ^= Di;
            BCu = ROL(Esi, 61);
            Aga =   BCa ^((~BCe)&  BCi );
            Age =   BCe ^((~BCi)&  BCo );
fff74994:	90 81 01 14 	stw     r4,276(r1)
            Agi =   BCi ^((~BCo)&  BCu );
fff74998:	7d 24 e0 78 	andc    r4,r9,r28
fff7499c:	7c 84 52 78 	xor     r4,r4,r10
fff749a0:	90 e1 01 20 	stw     r7,288(r1)
            Ago =   BCo ^((~BCu)&  BCa );
fff749a4:	7c ca 40 78 	andc    r10,r6,r8
fff749a8:	7f a7 48 78 	andc    r7,r29,r9
            Agu =   BCu ^((~BCa)&  BCe );
fff749ac:	7f c6 30 78 	andc    r6,r30,r6
fff749b0:	7c 1d e8 78 	andc    r29,r0,r29
            Esi ^= Di;
            BCu = ROL(Esi, 61);
            Aga =   BCa ^((~BCe)&  BCi );
            Age =   BCe ^((~BCi)&  BCo );
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
fff749b4:	7c e7 e2 78 	xor     r7,r7,r28
fff749b8:	7d 4a 1a 78 	xor     r10,r10,r3
            Agu =   BCu ^((~BCa)&  BCe );
fff749bc:	7f bd 4a 78 	xor     r29,r29,r9
fff749c0:	7c c6 42 78 	xor     r6,r6,r8
            BCo = ROL(Eme, 45);
            Esi ^= Di;
            BCu = ROL(Esi, 61);
            Aga =   BCa ^((~BCe)&  BCi );
            Age =   BCe ^((~BCi)&  BCo );
            Agi =   BCi ^((~BCo)&  BCu );
fff749c4:	90 81 01 1c 	stw     r4,284(r1)
            Ago =   BCo ^((~BCu)&  BCa );
fff749c8:	90 e1 01 24 	stw     r7,292(r1)
fff749cc:	91 41 01 28 	stw     r10,296(r1)
            Agu =   BCu ^((~BCa)&  BCe );
fff749d0:	93 a1 01 2c 	stw     r29,300(r1)

            Ebe ^= De;
fff749d4:	7f 88 02 a6 	mflr    r28
            BCu = ROL(Esi, 61);
            Aga =   BCa ^((~BCe)&  BCi );
            Age =   BCe ^((~BCi)&  BCo );
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );
fff749d8:	90 c1 01 30 	stw     r6,304(r1)

            Ebe ^= De;
fff749dc:	81 41 01 44 	lwz     r10,324(r1)
fff749e0:	80 01 01 48 	lwz     r0,328(r1)
fff749e4:	81 21 00 d4 	lwz     r9,212(r1)
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
fff749e8:	80 a1 01 34 	lwz     r5,308(r1)
fff749ec:	80 e1 01 38 	lwz     r7,312(r1)
fff749f0:	80 61 00 c8 	lwz     r3,200(r1)
fff749f4:	80 c1 00 d8 	lwz     r6,216(r1)
            Age =   BCe ^((~BCi)&  BCo );
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
fff749f8:	7f 9d 02 78 	xor     r29,r28,r0
fff749fc:	7d 3e 52 78 	xor     r30,r9,r10
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
fff74a00:	7c 7c 2a 78 	xor     r28,r3,r5
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
            BCa = ROL(Ebe, 1);
fff74a04:	57 c9 08 3c 	rlwinm  r9,r30,1,0,30
            Egi ^= Di;
fff74a08:	7c c5 3a 78 	xor     r5,r6,r7
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
            BCa = ROL(Ebe, 1);
fff74a0c:	57 a4 0f fe 	rlwinm  r4,r29,1,31,31
fff74a10:	7c 84 4b 78 	or      r4,r4,r9
            Egi ^= Di;
            BCe = ROL(Egi, 6);
fff74a14:	54 a3 36 be 	rlwinm  r3,r5,6,26,31
fff74a18:	57 89 30 32 	rlwinm  r9,r28,6,0,25
fff74a1c:	7c 63 4b 78 	or      r3,r3,r9
            Eko ^= Do;
fff74a20:	80 01 01 50 	lwz     r0,336(r1)
fff74a24:	81 21 01 4c 	lwz     r9,332(r1)
fff74a28:	81 01 00 dc 	lwz     r8,220(r1)
fff74a2c:	81 41 00 e0 	lwz     r10,224(r1)
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
            BCa = ROL(Ebe, 1);
fff74a30:	57 bd 08 3c 	rlwinm  r29,r29,1,0,30
fff74a34:	57 de 0f fe 	rlwinm  r30,r30,1,31,31
fff74a38:	7f de eb 78 	or      r30,r30,r29
            Egi ^= Di;
            BCe = ROL(Egi, 6);
            Eko ^= Do;
fff74a3c:	7d 1d 4a 78 	xor     r29,r8,r9
fff74a40:	7d 49 02 78 	xor     r9,r10,r0
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
            BCe = ROL(Egi, 6);
fff74a44:	54 a5 30 32 	rlwinm  r5,r5,6,0,25
            Eko ^= Do;
            BCi = ROL(Eko, 25);
fff74a48:	57 aa c8 0c 	rlwinm  r10,r29,25,0,6
fff74a4c:	55 28 c9 fe 	rlwinm  r8,r9,25,7,31
fff74a50:	57 bd c9 fe 	rlwinm  r29,r29,25,7,31
fff74a54:	55 26 c8 0c 	rlwinm  r6,r9,25,0,6
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
            BCe = ROL(Egi, 6);
fff74a58:	57 9c 36 be 	rlwinm  r28,r28,6,26,31
fff74a5c:	7f 9c 2b 78 	or      r28,r28,r5
            Eko ^= Do;
            BCi = ROL(Eko, 25);
fff74a60:	7d 08 53 78 	or      r8,r8,r10
fff74a64:	7f a6 33 78 	or      r6,r29,r6
            Emu ^= Du;
fff74a68:	80 e1 01 3c 	lwz     r7,316(r1)
fff74a6c:	83 a1 01 40 	lwz     r29,320(r1)
fff74a70:	80 a1 00 e4 	lwz     r5,228(r1)
fff74a74:	7d 49 02 a6 	mfctr   r10
fff74a78:	7c a0 3a 78 	xor     r0,r5,r7
fff74a7c:	7d 49 ea 78 	xor     r9,r10,r29
            BCo = ROL(Emu, 8);
fff74a80:	55 25 46 3e 	rlwinm  r5,r9,8,24,31
fff74a84:	54 0a 40 2e 	rlwinm  r10,r0,8,0,23
fff74a88:	7c a5 53 78 	or      r5,r5,r10
            Esa ^= Da;
fff74a8c:	80 e1 00 cc 	lwz     r7,204(r1)
fff74a90:	81 41 01 54 	lwz     r10,340(r1)
            Egi ^= Di;
            BCe = ROL(Egi, 6);
            Eko ^= Do;
            BCi = ROL(Eko, 25);
            Emu ^= Du;
            BCo = ROL(Emu, 8);
fff74a94:	55 29 40 2e 	rlwinm  r9,r9,8,0,23
fff74a98:	54 00 46 3e 	rlwinm  r0,r0,8,24,31
fff74a9c:	7c 00 4b 78 	or      r0,r0,r9
            Esa ^= Da;
fff74aa0:	83 a1 00 d0 	lwz     r29,208(r1)
fff74aa4:	7c e9 52 78 	xor     r9,r7,r10
fff74aa8:	80 e1 01 58 	lwz     r7,344(r1)
fff74aac:	7f aa 3a 78 	xor     r10,r29,r7
            BCu = ROL(Esa, 18);
fff74ab0:	55 5d 93 be 	rlwinm  r29,r10,18,14,31
fff74ab4:	55 27 90 1a 	rlwinm  r7,r9,18,0,13
fff74ab8:	55 4a 90 1a 	rlwinm  r10,r10,18,0,13
fff74abc:	55 29 93 be 	rlwinm  r9,r9,18,14,31
fff74ac0:	7d 29 53 78 	or      r9,r9,r10
            Aka =   BCa ^((~BCe)&  BCi );
fff74ac4:	7c ca e0 78 	andc    r10,r6,r28
fff74ac8:	7d 4a f2 78 	xor     r10,r10,r30
fff74acc:	91 41 01 38 	stw     r10,312(r1)
            Ake =   BCe ^((~BCi)&  BCo );
fff74ad0:	7c 0a 30 78 	andc    r10,r0,r6
            Eko ^= Do;
            BCi = ROL(Eko, 25);
            Emu ^= Du;
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
fff74ad4:	7f bd 3b 78 	or      r29,r29,r7
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
fff74ad8:	7d 4a e2 78 	xor     r10,r10,r28
            BCi = ROL(Eko, 25);
            Emu ^= Du;
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
fff74adc:	7d 07 18 78 	andc    r7,r8,r3
fff74ae0:	7c e7 22 78 	xor     r7,r7,r4
            Ake =   BCe ^((~BCi)&  BCo );
fff74ae4:	91 41 01 40 	stw     r10,320(r1)
            Aki =   BCi ^((~BCo)&  BCu );
fff74ae8:	7f aa 28 78 	andc    r10,r29,r5
fff74aec:	7d 4a 42 78 	xor     r10,r10,r8
            BCi = ROL(Eko, 25);
            Emu ^= Du;
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
fff74af0:	90 e1 01 34 	stw     r7,308(r1)
            Ake =   BCe ^((~BCi)&  BCo );
fff74af4:	7c a7 40 78 	andc    r7,r5,r8
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
fff74af8:	7c 88 e8 78 	andc    r8,r4,r29
            Emu ^= Du;
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
fff74afc:	7c e7 1a 78 	xor     r7,r7,r3
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
fff74b00:	7d 08 2a 78 	xor     r8,r8,r5
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
fff74b04:	91 41 01 44 	stw     r10,324(r1)
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
fff74b08:	7c 64 20 78 	andc    r4,r3,r4
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
fff74b0c:	7f ca 48 78 	andc    r10,r30,r9
            Aku =   BCu ^((~BCa)&  BCe );
fff74b10:	7f 9e f0 78 	andc    r30,r28,r30
fff74b14:	7c 84 ea 78 	xor     r4,r4,r29
fff74b18:	7f de 4a 78 	xor     r30,r30,r9

            Ebu ^= Du;
fff74b1c:	83 a1 01 78 	lwz     r29,376(r1)
            Emu ^= Du;
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
fff74b20:	90 e1 01 3c 	stw     r7,316(r1)
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
fff74b24:	91 01 01 4c 	stw     r8,332(r1)
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
fff74b28:	7d 27 00 78 	andc    r7,r9,r0
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
fff74b2c:	81 01 00 e4 	lwz     r8,228(r1)
fff74b30:	81 21 01 74 	lwz     r9,372(r1)
fff74b34:	7f 89 02 a6 	mfctr   r28
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
fff74b38:	7d 4a 02 78 	xor     r10,r10,r0
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
fff74b3c:	7c e7 32 78 	xor     r7,r7,r6
            Ako =   BCo ^((~BCu)&  BCa );
fff74b40:	91 41 01 50 	stw     r10,336(r1)
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
fff74b44:	7f 86 ea 78 	xor     r6,r28,r29
fff74b48:	7d 0a 4a 78 	xor     r10,r8,r9
            BCa = ROL(Ebu, 27);
fff74b4c:	55 49 d8 08 	rlwinm  r9,r10,27,0,4
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
fff74b50:	93 c1 01 58 	stw     r30,344(r1)

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
fff74b54:	54 de d9 7e 	rlwinm  r30,r6,27,5,31
fff74b58:	7f de 4b 78 	or      r30,r30,r9
            Ega ^= Da;
fff74b5c:	80 01 00 cc 	lwz     r0,204(r1)
fff74b60:	80 61 01 64 	lwz     r3,356(r1)
            BCo = ROL(Emu, 8);
            Esa ^= Da;
            BCu = ROL(Esa, 18);
            Aka =   BCa ^((~BCe)&  BCi );
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
fff74b64:	90 e1 01 48 	stw     r7,328(r1)
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
fff74b68:	90 81 01 54 	stw     r4,340(r1)

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
fff74b6c:	54 c9 d8 08 	rlwinm  r9,r6,27,0,4
            Ega ^= Da;
fff74b70:	80 a1 00 d0 	lwz     r5,208(r1)
fff74b74:	80 c1 01 68 	lwz     r6,360(r1)
fff74b78:	7c 04 1a 78 	xor     r4,r0,r3
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
fff74b7c:	55 4a d9 7e 	rlwinm  r10,r10,27,5,31
            Ega ^= Da;
fff74b80:	7c a0 32 78 	xor     r0,r5,r6
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
fff74b84:	7d 49 4b 78 	or      r9,r10,r9
            Ega ^= Da;
            BCe = ROL(Ega, 36);
fff74b88:	54 85 20 36 	rlwinm  r5,r4,4,0,27
fff74b8c:	54 0a 27 3e 	rlwinm  r10,r0,4,28,31
fff74b90:	7c a5 53 78 	or      r5,r5,r10
            Eke ^= De;
fff74b94:	81 01 01 7c 	lwz     r8,380(r1)
fff74b98:	83 81 01 80 	lwz     r28,384(r1)
fff74b9c:	80 e1 00 d4 	lwz     r7,212(r1)
fff74ba0:	7d 48 02 a6 	mflr    r10
fff74ba4:	7c e3 42 78 	xor     r3,r7,r8
fff74ba8:	7d 48 e2 78 	xor     r8,r10,r28
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
fff74bac:	54 84 27 3e 	rlwinm  r4,r4,4,28,31
            Eke ^= De;
            BCi = ROL(Eke, 10);
fff74bb0:	54 6a 50 2a 	rlwinm  r10,r3,10,0,21
fff74bb4:	55 06 55 be 	rlwinm  r6,r8,10,22,31
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
fff74bb8:	54 00 20 36 	rlwinm  r0,r0,4,0,27
            Eke ^= De;
            BCi = ROL(Eke, 10);
fff74bbc:	55 08 50 2a 	rlwinm  r8,r8,10,0,21
fff74bc0:	54 63 55 be 	rlwinm  r3,r3,10,22,31
fff74bc4:	7c 63 43 78 	or      r3,r3,r8
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
fff74bc8:	7c 00 23 78 	or      r0,r0,r4
            Eke ^= De;
            BCi = ROL(Eke, 10);
            Emi ^= Di;
fff74bcc:	80 e1 01 6c 	lwz     r7,364(r1)
fff74bd0:	83 81 01 70 	lwz     r28,368(r1)
fff74bd4:	80 81 00 c8 	lwz     r4,200(r1)
fff74bd8:	81 01 00 d8 	lwz     r8,216(r1)
            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
            Eke ^= De;
            BCi = ROL(Eke, 10);
fff74bdc:	7c c6 53 78 	or      r6,r6,r10
            Emi ^= Di;
fff74be0:	7c 9d 3a 78 	xor     r29,r4,r7
fff74be4:	7d 0a e2 78 	xor     r10,r8,r28
            BCo = ROL(Emi, 15);
fff74be8:	55 47 7c 7e 	rlwinm  r7,r10,15,17,31
fff74bec:	57 a8 78 20 	rlwinm  r8,r29,15,0,16
fff74bf0:	55 4a 78 20 	rlwinm  r10,r10,15,0,16
fff74bf4:	57 bd 7c 7e 	rlwinm  r29,r29,15,17,31
fff74bf8:	7c e8 43 78 	or      r8,r7,r8
fff74bfc:	7f bd 53 78 	or      r29,r29,r10
            Eso ^= Do;
fff74c00:	80 e1 00 dc 	lwz     r7,220(r1)
fff74c04:	81 41 01 5c 	lwz     r10,348(r1)
fff74c08:	83 81 00 e0 	lwz     r28,224(r1)
fff74c0c:	7c e4 52 78 	xor     r4,r7,r10
fff74c10:	81 41 01 60 	lwz     r10,352(r1)
fff74c14:	7f 87 52 78 	xor     r7,r28,r10
            BCu = ROL(Eso, 56);
fff74c18:	54 ea c2 3e 	rlwinm  r10,r7,24,8,31
fff74c1c:	54 9c c0 0e 	rlwinm  r28,r4,24,0,7
fff74c20:	7f 9c 53 78 	or      r28,r28,r10
            Ama =   BCa ^((~BCe)&  BCi );
fff74c24:	7c 6a 28 78 	andc    r10,r3,r5
fff74c28:	7d 4a 4a 78 	xor     r10,r10,r9
            Eke ^= De;
            BCi = ROL(Eke, 10);
            Emi ^= Di;
            BCo = ROL(Emi, 15);
            Eso ^= Do;
            BCu = ROL(Eso, 56);
fff74c2c:	54 84 c2 3e 	rlwinm  r4,r4,24,8,31
fff74c30:	54 e7 c0 0e 	rlwinm  r7,r7,24,0,7
fff74c34:	7c e7 23 78 	or      r7,r7,r4
            Ama =   BCa ^((~BCe)&  BCi );
fff74c38:	91 41 01 60 	stw     r10,352(r1)
fff74c3c:	7c c4 00 78 	andc    r4,r6,r0
            Ame =   BCe ^((~BCi)&  BCo );
fff74c40:	7d 0a 30 78 	andc    r10,r8,r6
            BCi = ROL(Eke, 10);
            Emi ^= Di;
            BCo = ROL(Emi, 15);
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
fff74c44:	7c 84 f2 78 	xor     r4,r4,r30
            Ame =   BCe ^((~BCi)&  BCo );
fff74c48:	7d 4a 02 78 	xor     r10,r10,r0
            BCi = ROL(Eke, 10);
            Emi ^= Di;
            BCo = ROL(Emi, 15);
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
fff74c4c:	90 81 01 5c 	stw     r4,348(r1)
            Ame =   BCe ^((~BCi)&  BCo );
fff74c50:	91 41 01 64 	stw     r10,356(r1)
fff74c54:	7f a4 18 78 	andc    r4,r29,r3
            Ami =   BCi ^((~BCo)&  BCu );
fff74c58:	7f 8a e8 78 	andc    r10,r28,r29
            Emi ^= Di;
            BCo = ROL(Emi, 15);
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
fff74c5c:	7c 84 2a 78 	xor     r4,r4,r5
            Ami =   BCi ^((~BCo)&  BCu );
fff74c60:	7d 4a 1a 78 	xor     r10,r10,r3
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );
fff74c64:	7c 00 f0 78 	andc    r0,r0,r30
fff74c68:	7c 00 3a 78 	xor     r0,r0,r7
            Emi ^= Di;
            BCo = ROL(Emi, 15);
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
fff74c6c:	90 81 01 68 	stw     r4,360(r1)
            Ami =   BCi ^((~BCo)&  BCu );
fff74c70:	91 41 01 70 	stw     r10,368(r1)
fff74c74:	7c e4 40 78 	andc    r4,r7,r8
            Amo =   BCo ^((~BCu)&  BCa );
fff74c78:	7d 2a e0 78 	andc    r10,r9,r28
            Amu =   BCu ^((~BCa)&  BCe );
fff74c7c:	7c a9 48 78 	andc    r9,r5,r9
            BCo = ROL(Emi, 15);
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
fff74c80:	7c 84 32 78 	xor     r4,r4,r6
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );
fff74c84:	7d 29 e2 78 	xor     r9,r9,r28
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
fff74c88:	7f c6 38 78 	andc    r6,r30,r7
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
fff74c8c:	83 81 00 c8 	lwz     r28,200(r1)
fff74c90:	80 61 01 b4 	lwz     r3,436(r1)
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );
fff74c94:	90 01 01 7c 	stw     r0,380(r1)

            Ebi ^= Di;
fff74c98:	83 c1 01 a4 	lwz     r30,420(r1)
fff74c9c:	80 01 00 d8 	lwz     r0,216(r1)
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
fff74ca0:	7c c6 42 78 	xor     r6,r6,r8
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
fff74ca4:	80 a1 01 94 	lwz     r5,404(r1)
fff74ca8:	80 e1 00 e0 	lwz     r7,224(r1)
fff74cac:	81 01 01 98 	lwz     r8,408(r1)
            BCo = ROL(Emi, 15);
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
fff74cb0:	90 81 01 6c 	stw     r4,364(r1)
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
fff74cb4:	80 81 00 dc 	lwz     r4,220(r1)
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
fff74cb8:	7d 4a ea 78 	xor     r10,r10,r29
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
fff74cbc:	7f 9d f2 78 	xor     r29,r28,r30
fff74cc0:	7c 1c 1a 78 	xor     r28,r0,r3
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
fff74cc4:	90 c1 01 74 	stw     r6,372(r1)
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
fff74cc8:	7c 80 2a 78 	xor     r0,r4,r5
fff74ccc:	7c e3 42 78 	xor     r3,r7,r8
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );
fff74cd0:	91 21 01 80 	stw     r9,384(r1)

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
fff74cd4:	57 a6 f0 02 	rlwinm  r6,r29,30,0,1
fff74cd8:	57 89 f0 be 	rlwinm  r9,r28,30,2,31
fff74cdc:	7c c6 4b 78 	or      r6,r6,r9
fff74ce0:	57 9c f0 02 	rlwinm  r28,r28,30,0,1
            Ego ^= Do;
            BCe = ROL(Ego, 55);
fff74ce4:	54 69 ba 7e 	rlwinm  r9,r3,23,9,31
fff74ce8:	54 07 b8 10 	rlwinm  r7,r0,23,0,8
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
fff74cec:	57 bd f0 be 	rlwinm  r29,r29,30,2,31
fff74cf0:	7f 9d eb 78 	or      r29,r28,r29
            Ego ^= Do;
            BCe = ROL(Ego, 55);
fff74cf4:	7c e7 4b 78 	or      r7,r7,r9
            Eso ^= Do;
            BCu = ROL(Eso, 56);
            Ama =   BCa ^((~BCe)&  BCi );
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
fff74cf8:	91 41 01 78 	stw     r10,376(r1)

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
            Eku ^= Du;
fff74cfc:	81 21 00 e4 	lwz     r9,228(r1)
fff74d00:	81 41 01 84 	lwz     r10,388(r1)
fff74d04:	7f 89 02 a6 	mfctr   r28
fff74d08:	83 c1 01 88 	lwz     r30,392(r1)
fff74d0c:	7d 24 52 78 	xor     r4,r9,r10
fff74d10:	7f 85 f2 78 	xor     r5,r28,r30
            BCi = ROL(Eku, 39);
fff74d14:	54 a9 3e 7e 	rlwinm  r9,r5,7,25,31
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
fff74d18:	54 00 ba 7e 	rlwinm  r0,r0,23,9,31
            Eku ^= Du;
            BCi = ROL(Eku, 39);
fff74d1c:	54 9e 38 30 	rlwinm  r30,r4,7,0,24
fff74d20:	54 a5 38 30 	rlwinm  r5,r5,7,0,24
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
fff74d24:	54 63 b8 10 	rlwinm  r3,r3,23,0,8
            Eku ^= Du;
            BCi = ROL(Eku, 39);
fff74d28:	54 84 3e 7e 	rlwinm  r4,r4,7,25,31
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
fff74d2c:	7c 63 03 78 	or      r3,r3,r0
            Eku ^= Du;
            BCi = ROL(Eku, 39);
fff74d30:	7c a4 23 78 	or      r4,r5,r4
            Ema ^= Da;
fff74d34:	81 41 01 a0 	lwz     r10,416(r1)
fff74d38:	80 a1 01 9c 	lwz     r5,412(r1)
fff74d3c:	80 01 00 cc 	lwz     r0,204(r1)
fff74d40:	81 01 00 d0 	lwz     r8,208(r1)
            Ebi ^= Di;
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
            Eku ^= Du;
            BCi = ROL(Eku, 39);
fff74d44:	7f de 4b 78 	or      r30,r30,r9
            Ema ^= Da;
fff74d48:	7d 1c 52 78 	xor     r28,r8,r10
fff74d4c:	7c 09 2a 78 	xor     r9,r0,r5
            BCo = ROL(Ema, 41);
fff74d50:	57 8a 4d fe 	rlwinm  r10,r28,9,23,31
fff74d54:	55 25 4d fe 	rlwinm  r5,r9,9,23,31
fff74d58:	57 9c 48 2c 	rlwinm  r28,r28,9,0,22
fff74d5c:	7f 85 2b 78 	or      r5,r28,r5
            Ese ^= De;
fff74d60:	81 01 01 8c 	lwz     r8,396(r1)
fff74d64:	83 81 00 d4 	lwz     r28,212(r1)
            Ego ^= Do;
            BCe = ROL(Ego, 55);
            Eku ^= Du;
            BCi = ROL(Eku, 39);
            Ema ^= Da;
            BCo = ROL(Ema, 41);
fff74d68:	55 20 48 2c 	rlwinm  r0,r9,9,0,22
fff74d6c:	7c 00 53 78 	or      r0,r0,r10
            Ese ^= De;
fff74d70:	7d 28 02 a6 	mflr    r9
fff74d74:	7f 8a 42 78 	xor     r10,r28,r8
fff74d78:	81 01 01 90 	lwz     r8,400(r1)
fff74d7c:	7d 3c 42 78 	xor     r28,r9,r8
            BCu = ROL(Ese, 2);
fff74d80:	57 88 17 be 	rlwinm  r8,r28,2,30,31
fff74d84:	55 49 10 3a 	rlwinm  r9,r10,2,0,29
fff74d88:	57 9c 10 3a 	rlwinm  r28,r28,2,0,29
fff74d8c:	55 4a 17 be 	rlwinm  r10,r10,2,30,31
fff74d90:	7d 5c e3 78 	or      r28,r10,r28
            Asa =   BCa ^((~BCe)&  BCi );
fff74d94:	7c 8a 18 78 	andc    r10,r4,r3
fff74d98:	7d 4a ea 78 	xor     r10,r10,r29
fff74d9c:	91 41 01 84 	stw     r10,388(r1)
            Ase =   BCe ^((~BCi)&  BCo );
fff74da0:	7c 0a f0 78 	andc    r10,r0,r30
            Eku ^= Du;
            BCi = ROL(Eku, 39);
            Ema ^= Da;
            BCo = ROL(Ema, 41);
            Ese ^= De;
            BCu = ROL(Ese, 2);
fff74da4:	7d 09 4b 78 	or      r9,r8,r9
            Asa =   BCa ^((~BCe)&  BCi );
            Ase =   BCe ^((~BCi)&  BCo );
fff74da8:	7d 4a 3a 78 	xor     r10,r10,r7
            BCi = ROL(Eku, 39);
            Ema ^= Da;
            BCo = ROL(Ema, 41);
            Ese ^= De;
            BCu = ROL(Ese, 2);
            Asa =   BCa ^((~BCe)&  BCi );
fff74dac:	7f c8 38 78 	andc    r8,r30,r7
fff74db0:	7d 08 32 78 	xor     r8,r8,r6
            Ase =   BCe ^((~BCi)&  BCo );
fff74db4:	91 41 01 90 	stw     r10,400(r1)
            Asi =   BCi ^((~BCo)&  BCu );
fff74db8:	7f 8a 00 78 	andc    r10,r28,r0
fff74dbc:	7d 4a f2 78 	xor     r10,r10,r30
            BCi = ROL(Eku, 39);
            Ema ^= Da;
            BCo = ROL(Ema, 41);
            Ese ^= De;
            BCu = ROL(Ese, 2);
            Asa =   BCa ^((~BCe)&  BCi );
fff74dc0:	91 01 01 88 	stw     r8,392(r1)
            Ase =   BCe ^((~BCi)&  BCo );
fff74dc4:	7c a8 20 78 	andc    r8,r5,r4
fff74dc8:	7d 08 1a 78 	xor     r8,r8,r3
            Asi =   BCi ^((~BCo)&  BCu );
fff74dcc:	91 41 01 98 	stw     r10,408(r1)
            Aso =   BCo ^((~BCu)&  BCa );
fff74dd0:	7c ca e0 78 	andc    r10,r6,r28
fff74dd4:	7d 4a 02 78 	xor     r10,r10,r0
            Ema ^= Da;
            BCo = ROL(Ema, 41);
            Ese ^= De;
            BCu = ROL(Ese, 2);
            Asa =   BCa ^((~BCe)&  BCi );
            Ase =   BCe ^((~BCi)&  BCo );
fff74dd8:	91 01 01 8c 	stw     r8,396(r1)
            Asi =   BCi ^((~BCo)&  BCu );
fff74ddc:	7d 28 28 78 	andc    r8,r9,r5
fff74de0:	7d 08 22 78 	xor     r8,r8,r4
            Aso =   BCo ^((~BCu)&  BCa );
fff74de4:	91 41 01 a0 	stw     r10,416(r1)
fff74de8:	81 41 01 a8 	lwz     r10,424(r1)
            BCo = ROL(Ema, 41);
            Ese ^= De;
            BCu = ROL(Ese, 2);
            Asa =   BCa ^((~BCe)&  BCi );
            Ase =   BCe ^((~BCi)&  BCo );
            Asi =   BCi ^((~BCo)&  BCu );
fff74dec:	91 01 01 94 	stw     r8,404(r1)
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
fff74df0:	7c e6 30 78 	andc    r6,r7,r6
            Ese ^= De;
            BCu = ROL(Ese, 2);
            Asa =   BCa ^((~BCe)&  BCi );
            Ase =   BCe ^((~BCi)&  BCo );
            Asi =   BCi ^((~BCo)&  BCu );
            Aso =   BCo ^((~BCu)&  BCa );
fff74df4:	7f a8 48 78 	andc    r8,r29,r9
fff74df8:	7d 08 2a 78 	xor     r8,r8,r5
            Asu =   BCu ^((~BCa)&  BCe );
fff74dfc:	7c 7d e8 78 	andc    r29,r3,r29
fff74e00:	7c c6 e2 78 	xor     r6,r6,r28
fff74e04:	39 4a 00 10 	addi    r10,r10,16
            Ese ^= De;
            BCu = ROL(Ese, 2);
            Asa =   BCa ^((~BCe)&  BCi );
            Ase =   BCe ^((~BCi)&  BCo );
            Asi =   BCi ^((~BCo)&  BCu );
            Aso =   BCo ^((~BCu)&  BCa );
fff74e08:	91 01 01 9c 	stw     r8,412(r1)
            Asu =   BCu ^((~BCa)&  BCe );
fff74e0c:	7f a9 4a 78 	xor     r9,r29,r9
fff74e10:	90 c1 01 a4 	stw     r6,420(r1)
fff74e14:	91 41 01 a8 	stw     r10,424(r1)
fff74e18:	4b ff ec f8 	b       fff73b10 <_ZL24KeccakF1600_StatePermutePy+0x160>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
fff74e1c:	14 81 00 e8 	lvd     d4,232(r1)
        state[ 1] = Abe;
fff74e20:	14 c1 00 f0 	lvd     d6,240(r1)
        state[ 2] = Abi;
fff74e24:	81 01 00 f8 	lwz     r8,248(r1)
fff74e28:	81 41 01 ac 	lwz     r10,428(r1)
        state[ 3] = Abo;
fff74e2c:	83 81 00 fc 	lwz     r28,252(r1)
fff74e30:	17 a1 01 00 	lvd     d29,256(r1)
        state[ 4] = Abu;
fff74e34:	80 01 01 08 	lwz     r0,264(r1)
        state[ 5] = Aga;
fff74e38:	80 61 01 0c 	lwz     r3,268(r1)
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
        }

        //copyToState(state, A)
        state[ 0] = Aba;
fff74e3c:	18 9f 00 00 	stvd    d4,0(r31)
        state[ 1] = Abe;
        state[ 2] = Abi;
        state[ 3] = Abo;
        state[ 4] = Abu;
        state[ 5] = Aga;
fff74e40:	14 81 01 10 	lvd     d4,272(r1)
            Asu =   BCu ^((~BCa)&  BCe );
        }

        //copyToState(state, A)
        state[ 0] = Aba;
        state[ 1] = Abe;
fff74e44:	18 df 00 08 	stvd    d6,8(r31)
        state[ 2] = Abi;
        state[ 3] = Abo;
        state[ 4] = Abu;
        state[ 5] = Aga;
        state[ 6] = Age;
fff74e48:	14 c1 01 18 	lvd     d6,280(r1)
        }

        //copyToState(state, A)
        state[ 0] = Aba;
        state[ 1] = Abe;
        state[ 2] = Abi;
fff74e4c:	91 1f 00 10 	stw     r8,16(r31)
fff74e50:	91 5f 00 14 	stw     r10,20(r31)
        state[ 3] = Abo;
        state[ 4] = Abu;
        state[ 5] = Aga;
        state[ 6] = Age;
        state[ 7] = Agi;
fff74e54:	81 01 01 20 	lwz     r8,288(r1)
        state[ 8] = Ago;
fff74e58:	81 41 01 24 	lwz     r10,292(r1)

        //copyToState(state, A)
        state[ 0] = Aba;
        state[ 1] = Abe;
        state[ 2] = Abi;
        state[ 3] = Abo;
fff74e5c:	1b 9f 00 18 	stvd    d28,24(r31)
        state[ 4] = Abu;
fff74e60:	93 df 00 20 	stw     r30,32(r31)
fff74e64:	90 1f 00 24 	stw     r0,36(r31)
        state[ 5] = Aga;
fff74e68:	18 7f 00 28 	stvd    d3,40(r31)
        state[ 6] = Age;
fff74e6c:	18 bf 00 30 	stvd    d5,48(r31)
        state[ 7] = Agi;
fff74e70:	18 ff 00 38 	stvd    d7,56(r31)
        state[ 8] = Ago;
fff74e74:	91 5f 00 40 	stw     r10,64(r31)
fff74e78:	17 81 01 28 	lvd     d28,296(r1)
        state[ 9] = Agu;
fff74e7c:	83 c1 01 30 	lwz     r30,304(r1)
        state[10] = Aka;
fff74e80:	80 01 01 34 	lwz     r0,308(r1)
fff74e84:	14 61 01 38 	lvd     d3,312(r1)
        state[11] = Ake;
fff74e88:	14 a1 01 40 	lvd     d5,320(r1)
        state[12] = Aki;
fff74e8c:	14 e1 01 48 	lvd     d7,328(r1)
        state[13] = Ako;
fff74e90:	81 41 01 50 	lwz     r10,336(r1)
        state[ 3] = Abo;
        state[ 4] = Abu;
        state[ 5] = Aga;
        state[ 6] = Age;
        state[ 7] = Agi;
        state[ 8] = Ago;
fff74e94:	93 9f 00 44 	stw     r28,68(r31)
        state[ 9] = Agu;
fff74e98:	93 bf 00 48 	stw     r29,72(r31)
        state[10] = Aka;
        state[11] = Ake;
        state[12] = Aki;
        state[13] = Ako;
        state[14] = Aku;
fff74e9c:	83 81 01 54 	lwz     r28,340(r1)
fff74ea0:	83 a1 01 58 	lwz     r29,344(r1)
        state[ 4] = Abu;
        state[ 5] = Aga;
        state[ 6] = Age;
        state[ 7] = Agi;
        state[ 8] = Ago;
        state[ 9] = Agu;
fff74ea4:	93 df 00 4c 	stw     r30,76(r31)
        state[10] = Aka;
fff74ea8:	90 1f 00 50 	stw     r0,80(r31)
        state[11] = Ake;
        state[12] = Aki;
        state[13] = Ako;
        state[14] = Aku;
        state[15] = Ama;
fff74eac:	83 c1 01 5c 	lwz     r30,348(r1)
fff74eb0:	80 01 01 60 	lwz     r0,352(r1)
        state[ 5] = Aga;
        state[ 6] = Age;
        state[ 7] = Agi;
        state[ 8] = Ago;
        state[ 9] = Agu;
        state[10] = Aka;
fff74eb4:	90 7f 00 54 	stw     r3,84(r31)
        state[11] = Ake;
fff74eb8:	90 9f 00 58 	stw     r4,88(r31)
        state[12] = Aki;
        state[13] = Ako;
        state[14] = Aku;
        state[15] = Ama;
        state[16] = Ame;
fff74ebc:	80 61 01 64 	lwz     r3,356(r1)
fff74ec0:	80 81 01 68 	lwz     r4,360(r1)
        state[ 6] = Age;
        state[ 7] = Agi;
        state[ 8] = Ago;
        state[ 9] = Agu;
        state[10] = Aka;
        state[11] = Ake;
fff74ec4:	90 bf 00 5c 	stw     r5,92(r31)
        state[12] = Aki;
fff74ec8:	18 df 00 60 	stvd    d6,96(r31)
        state[13] = Ako;
fff74ecc:	91 1f 00 68 	stw     r8,104(r31)
fff74ed0:	91 5f 00 6c 	stw     r10,108(r31)
        state[14] = Aku;
fff74ed4:	1b 9f 00 70 	stvd    d28,112(r31)
        state[15] = Ama;
fff74ed8:	93 df 00 78 	stw     r30,120(r31)
fff74edc:	90 1f 00 7c 	stw     r0,124(r31)
        state[16] = Ame;
fff74ee0:	18 7f 00 80 	stvd    d3,128(r31)
        state[17] = Ami;
fff74ee4:	80 a1 01 6c 	lwz     r5,364(r1)
fff74ee8:	14 c1 01 70 	lvd     d6,368(r1)
        state[18] = Amo;
fff74eec:	81 01 01 78 	lwz     r8,376(r1)
        state[12] = Aki;
        state[13] = Ako;
        state[14] = Aku;
        state[15] = Ama;
        state[16] = Ame;
        state[17] = Ami;
fff74ef0:	18 bf 00 88 	stvd    d5,136(r31)
        state[18] = Amo;
fff74ef4:	18 ff 00 90 	stvd    d7,144(r31)
        state[19] = Amu;
        state[20] = Asa;
fff74ef8:	83 c1 01 88 	lwz     r30,392(r1)
        state[21] = Ase;
fff74efc:	80 01 01 8c 	lwz     r0,396(r1)
        state[14] = Aku;
        state[15] = Ama;
        state[16] = Ame;
        state[17] = Ami;
        state[18] = Amo;
        state[19] = Amu;
fff74f00:	81 41 01 7c 	lwz     r10,380(r1)
fff74f04:	17 81 01 80 	lvd     d28,384(r1)
        state[20] = Asa;
        state[21] = Ase;
fff74f08:	14 61 01 90 	lvd     d3,400(r1)
        state[22] = Asi;
fff74f0c:	14 a1 01 98 	lvd     d5,408(r1)
        state[23] = Aso;
fff74f10:	14 e1 01 a0 	lvd     d7,416(r1)
        state[14] = Aku;
        state[15] = Ama;
        state[16] = Ame;
        state[17] = Ami;
        state[18] = Amo;
        state[19] = Amu;
fff74f14:	91 5f 00 98 	stw     r10,152(r31)
fff74f18:	93 9f 00 9c 	stw     r28,156(r31)
        state[20] = Asa;
fff74f1c:	1b bf 00 a0 	stvd    d29,160(r31)
        state[21] = Ase;
fff74f20:	90 1f 00 a8 	stw     r0,168(r31)
fff74f24:	90 7f 00 ac 	stw     r3,172(r31)
        state[22] = Asi;
fff74f28:	18 9f 00 b0 	stvd    d4,176(r31)
        state[23] = Aso;
fff74f2c:	18 df 00 b8 	stvd    d6,184(r31)
        state[24] = Asu;
fff74f30:	91 3f 00 c0 	stw     r9,192(r31)
fff74f34:	91 1f 00 c4 	stw     r8,196(r31)
}
fff74f38:	80 01 01 d4 	lwz     r0,468(r1)
fff74f3c:	17 81 01 c0 	lvd     d28,448(r1)
fff74f40:	7c 08 03 a6 	mtlr    r0
fff74f44:	17 c1 01 c8 	lvd     d30,456(r1)
fff74f48:	38 21 01 d0 	addi    r1,r1,464
fff74f4c:	4e 80 00 20 	blr

fff74f50 <_ZL11keccak_initP12Keccak_state>:
**************************************************/
static void keccak_init(Keccak_state *state)
{
  unsigned int i;
  for (i=0;i<25;i++)
    state->s[i] = 0;
fff74f50:	39 40 00 19 	li      r10,25
fff74f54:	7d 49 03 a6 	mtctr   r10
fff74f58:	39 23 ff f8 	addi    r9,r3,-8
fff74f5c:	38 c0 00 00 	li      r6,0
fff74f60:	38 e0 00 00 	li      r7,0
fff74f64:	58 c9 00 08 	stvdu   d6,8(r9)
* Arguments:   - Keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(Keccak_state *state)
{
  unsigned int i;
  for (i=0;i<25;i++)
fff74f68:	42 00 ff fc 	bdnz    fff74f64 <_ZL11keccak_initP12Keccak_state+0x14>
    state->s[i] = 0;
  state->pos = 0;
fff74f6c:	39 20 00 00 	li      r9,0
fff74f70:	91 23 00 c8 	stw     r9,200(r3)
fff74f74:	4e 80 00 20 	blr

fff74f78 <_ZL13keccak_absorbPyjjPKhj>:
static unsigned int  keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
fff74f78:	94 21 ff c0 	stwu    r1,-64(r1)
  unsigned int i;
  uint8_t t[8] = {0};
fff74f7c:	39 20 00 00 	li      r9,0
static unsigned int  keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
fff74f80:	7c 08 02 a6 	mflr    r0
  unsigned int i;
  uint8_t t[8] = {0};
fff74f84:	39 00 00 00 	li      r8,0
fff74f88:	19 01 00 08 	stvd    d8,8(r1)

  if (pos & 7) {
fff74f8c:	54 a9 07 7e 	clrlwi  r9,r5,29
static unsigned int  keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
fff74f90:	1b 81 00 30 	stvd    d28,48(r1)
fff74f94:	1b c1 00 38 	stvd    d30,56(r1)
fff74f98:	90 01 00 44 	stw     r0,68(r1)
fff74f9c:	7c 7d 1b 78 	mr      r29,r3
fff74fa0:	7c 9c 23 78 	mr      r28,r4
fff74fa4:	7c be 2b 78 	mr      r30,r5
fff74fa8:	7c ff 3b 78 	mr      r31,r7
  unsigned int i;
  uint8_t t[8] = {0};

  if (pos & 7) {
fff74fac:	06 c9 00 34 	bwz     r9,fff75014 <_ZL13keccak_absorbPyjjPKhj+0x9c>
fff74fb0:	38 e7 00 01 	addi    r7,r7,1
fff74fb4:	7c e9 03 a6 	mtctr   r7
fff74fb8:	38 61 00 08 	addi    r3,r1,8
fff74fbc:	42 40 00 20 	bdz     fff74fdc <_ZL13keccak_absorbPyjjPKhj+0x64>
    i = pos & 7;
    while(i < 8 && mlen > 0) {
      t[i++] = *m++;
fff74fc0:	38 c6 00 01 	addi    r6,r6,1
fff74fc4:	89 46 ff ff 	lbz     r10,-1(r6)
      mlen--;
fff74fc8:	3b ff ff ff 	addi    r31,r31,-1
  uint8_t t[8] = {0};

  if (pos & 7) {
    i = pos & 7;
    while(i < 8 && mlen > 0) {
      t[i++] = *m++;
fff74fcc:	7d 43 49 ae 	stbx    r10,r3,r9
fff74fd0:	39 29 00 01 	addi    r9,r9,1
      mlen--;
      pos++;
fff74fd4:	3b de 00 01 	addi    r30,r30,1
  unsigned int i;
  uint8_t t[8] = {0};

  if (pos & 7) {
    i = pos & 7;
    while(i < 8 && mlen > 0) {
fff74fd8:	06 49 47 f0 	cmpwibne r9,8,fff74fb8 <_ZL13keccak_absorbPyjjPKhj+0x40>
      t[i++] = *m++;
      mlen--;
      pos++;
    }
    s[(pos-i)/8] ^= load64(t);
fff74fdc:	90 c1 00 28 	stw     r6,40(r1)
fff74fe0:	91 21 00 24 	stw     r9,36(r1)
fff74fe4:	4b ff e9 55 	bl      fff73938 <_ZL6load64PKh>
fff74fe8:	81 21 00 24 	lwz     r9,36(r1)
fff74fec:	7d 29 f0 50 	subf    r9,r9,r30
fff74ff0:	55 29 00 38 	rlwinm  r9,r9,0,0,28
fff74ff4:	7c fd 4a 14 	add     r7,r29,r9
fff74ff8:	7d 1d 48 2e 	lwzx    r8,r29,r9
fff74ffc:	81 47 00 04 	lwz     r10,4(r7)
fff75000:	7d 03 1a 78 	xor     r3,r8,r3
fff75004:	7d 44 22 78 	xor     r4,r10,r4
fff75008:	7c 7d 49 2e 	stwx    r3,r29,r9
fff7500c:	90 87 00 04 	stw     r4,4(r7)
fff75010:	80 c1 00 28 	lwz     r6,40(r1)
  }

  if (pos && mlen >= r-pos) {
fff75014:	06 de 00 4a 	bwz     r30,fff750a8 <_ZL13keccak_absorbPyjjPKhj+0x130>
fff75018:	7d 5e e0 50 	subf    r10,r30,r28
fff7501c:	05 9f 50 46 	cmplwblt r31,r10,fff750a8 <_ZL13keccak_absorbPyjjPKhj+0x130>
fff75020:	55 48 00 38 	rlwinm  r8,r10,0,0,28
fff75024:	91 01 00 18 	stw     r8,24(r1)
fff75028:	57 c0 00 38 	rlwinm  r0,r30,0,0,28
    for (i=0;i<(r-pos)/8;i++)
      s[pos/8+i] ^= load64(m+8*i);
fff7502c:	39 20 00 00 	li      r9,0
    }
    s[(pos-i)/8] ^= load64(t);
  }

  if (pos && mlen >= r-pos) {
    for (i=0;i<(r-pos)/8;i++)
fff75030:	81 01 00 18 	lwz     r8,24(r1)
fff75034:	04 c9 40 2a 	cmpwbeq r9,r8,fff75088 <_ZL13keccak_absorbPyjjPKhj+0x110>
      s[pos/8+i] ^= load64(m+8*i);
fff75038:	7c 66 4a 14 	add     r3,r6,r9
fff7503c:	90 01 00 1c 	stw     r0,28(r1)
fff75040:	90 c1 00 28 	stw     r6,40(r1)
fff75044:	91 21 00 24 	stw     r9,36(r1)
fff75048:	91 41 00 20 	stw     r10,32(r1)
fff7504c:	4b ff e8 ed 	bl      fff73938 <_ZL6load64PKh>
fff75050:	81 21 00 24 	lwz     r9,36(r1)
fff75054:	80 01 00 1c 	lwz     r0,28(r1)
fff75058:	7d 09 02 14 	add     r8,r9,r0
fff7505c:	7c fd 40 2e 	lwzx    r7,r29,r8
fff75060:	7c bd 42 14 	add     r5,r29,r8
fff75064:	7c e3 1a 78 	xor     r3,r7,r3
fff75068:	80 e5 00 04 	lwz     r7,4(r5)
fff7506c:	7c 7d 41 2e 	stwx    r3,r29,r8
fff75070:	7c e4 22 78 	xor     r4,r7,r4
fff75074:	90 85 00 04 	stw     r4,4(r5)
fff75078:	39 29 00 08 	addi    r9,r9,8
fff7507c:	81 41 00 20 	lwz     r10,32(r1)
fff75080:	80 c1 00 28 	lwz     r6,40(r1)
fff75084:	4b ff ff ac 	b       fff75030 <_ZL13keccak_absorbPyjjPKhj+0xb8>
    m += r-pos;
fff75088:	7c c6 52 14 	add     r6,r6,r10
    mlen -= r-pos;
    pos = 0;
    KeccakF1600_StatePermute(s);
fff7508c:	7f a3 eb 78 	mr      r3,r29
fff75090:	7f fe fa 14 	add     r31,r30,r31
fff75094:	90 c1 00 28 	stw     r6,40(r1)
fff75098:	4b ff e9 19 	bl      fff739b0 <_ZL24KeccakF1600_StatePermutePy>
  if (pos && mlen >= r-pos) {
    for (i=0;i<(r-pos)/8;i++)
      s[pos/8+i] ^= load64(m+8*i);
    m += r-pos;
    mlen -= r-pos;
    pos = 0;
fff7509c:	80 c1 00 28 	lwz     r6,40(r1)

  if (pos && mlen >= r-pos) {
    for (i=0;i<(r-pos)/8;i++)
      s[pos/8+i] ^= load64(m+8*i);
    m += r-pos;
    mlen -= r-pos;
fff750a0:	7f fc f8 50 	subf    r31,r28,r31
    pos = 0;
fff750a4:	3b c0 00 00 	li      r30,0
    KeccakF1600_StatePermute(s);
  }

  while(mlen >= r) {
    for (i=0;i<r/8;i++)
fff750a8:	57 89 e8 fe 	rlwinm  r9,r28,29,3,31
fff750ac:	91 21 00 18 	stw     r9,24(r1)
    mlen -= r-pos;
    pos = 0;
    KeccakF1600_StatePermute(s);
  }

  while(mlen >= r) {
fff750b0:	05 9f e0 38 	cmplwblt r31,r28,fff75120 <_ZL13keccak_absorbPyjjPKhj+0x1a8>
fff750b4:	39 3d ff f8 	addi    r9,r29,-8
fff750b8:	39 40 00 00 	li      r10,0
    for (i=0;i<r/8;i++)
fff750bc:	80 e1 00 18 	lwz     r7,24(r1)
fff750c0:	04 ca 38 22 	cmpwbeq r10,r7,fff75104 <_ZL13keccak_absorbPyjjPKhj+0x18c>
fff750c4:	55 43 18 38 	rlwinm  r3,r10,3,0,28
      s[i] ^= load64(m+8*i);
fff750c8:	7c 66 1a 14 	add     r3,r6,r3
fff750cc:	90 c1 00 28 	stw     r6,40(r1)
fff750d0:	91 21 00 24 	stw     r9,36(r1)
fff750d4:	91 41 00 20 	stw     r10,32(r1)
fff750d8:	4b ff e8 61 	bl      fff73938 <_ZL6load64PKh>
fff750dc:	81 21 00 24 	lwz     r9,36(r1)
fff750e0:	84 e9 00 08 	lwzu    r7,8(r9)
fff750e4:	81 09 00 04 	lwz     r8,4(r9)
fff750e8:	7c e3 1a 78 	xor     r3,r7,r3
fff750ec:	7d 04 22 78 	xor     r4,r8,r4
fff750f0:	18 69 00 00 	stvd    d3,0(r9)
    pos = 0;
    KeccakF1600_StatePermute(s);
  }

  while(mlen >= r) {
    for (i=0;i<r/8;i++)
fff750f4:	81 41 00 20 	lwz     r10,32(r1)
fff750f8:	80 c1 00 28 	lwz     r6,40(r1)
fff750fc:	39 4a 00 01 	addi    r10,r10,1
fff75100:	4b ff ff bc 	b       fff750bc <_ZL13keccak_absorbPyjjPKhj+0x144>
      s[i] ^= load64(m+8*i);
    m += r;
fff75104:	7c c6 e2 14 	add     r6,r6,r28
    mlen -= r;
    KeccakF1600_StatePermute(s);
fff75108:	7f a3 eb 78 	mr      r3,r29
fff7510c:	90 c1 00 28 	stw     r6,40(r1)

  while(mlen >= r) {
    for (i=0;i<r/8;i++)
      s[i] ^= load64(m+8*i);
    m += r;
    mlen -= r;
fff75110:	7f fc f8 50 	subf    r31,r28,r31
    KeccakF1600_StatePermute(s);
fff75114:	4b ff e8 9d 	bl      fff739b0 <_ZL24KeccakF1600_StatePermutePy>
fff75118:	80 c1 00 28 	lwz     r6,40(r1)
fff7511c:	4b ff ff 94 	b       fff750b0 <_ZL13keccak_absorbPyjjPKhj+0x138>
fff75120:	57 e9 00 38 	rlwinm  r9,r31,0,0,28
fff75124:	57 c5 00 38 	rlwinm  r5,r30,0,0,28
  }

  for (i=0;i<mlen/8;i++)
    s[pos/8+i] ^= load64(m+8*i);
fff75128:	3b 80 00 00 	li      r28,0
    m += r;
    mlen -= r;
    KeccakF1600_StatePermute(s);
  }

  for (i=0;i<mlen/8;i++)
fff7512c:	04 dc 48 26 	cmpwbeq r28,r9,fff75178 <_ZL13keccak_absorbPyjjPKhj+0x200>
    s[pos/8+i] ^= load64(m+8*i);
fff75130:	7c 66 e2 14 	add     r3,r6,r28
fff75134:	90 a1 00 1c 	stw     r5,28(r1)
fff75138:	90 c1 00 28 	stw     r6,40(r1)
fff7513c:	91 21 00 24 	stw     r9,36(r1)
fff75140:	4b ff e7 f9 	bl      fff73938 <_ZL6load64PKh>
fff75144:	80 a1 00 1c 	lwz     r5,28(r1)
fff75148:	7d 1c 2a 14 	add     r8,r28,r5
fff7514c:	7c fd 42 14 	add     r7,r29,r8
fff75150:	7c 1d 40 2e 	lwzx    r0,r29,r8
fff75154:	81 47 00 04 	lwz     r10,4(r7)
fff75158:	7c 03 1a 78 	xor     r3,r0,r3
fff7515c:	7d 44 22 78 	xor     r4,r10,r4
fff75160:	7c 7d 41 2e 	stwx    r3,r29,r8
fff75164:	90 87 00 04 	stw     r4,4(r7)
fff75168:	3b 9c 00 08 	addi    r28,r28,8
fff7516c:	81 21 00 24 	lwz     r9,36(r1)
fff75170:	80 c1 00 28 	lwz     r6,40(r1)
fff75174:	4b ff ff b8 	b       fff7512c <_ZL13keccak_absorbPyjjPKhj+0x1b4>
  m += 8*i;
  mlen -= 8*i;
fff75178:	7f e9 f8 50 	subf    r31,r9,r31
  pos += 8*i;
fff7517c:	7f c9 f2 14 	add     r30,r9,r30

  if (mlen) {
fff75180:	06 df 00 34 	bwz     r31,fff751e8 <_ZL13keccak_absorbPyjjPKhj+0x270>
    for (i=0;i<8;i++)
      t[i] = 0;
fff75184:	38 e0 00 08 	li      r7,8
fff75188:	7c e9 03 a6 	mtctr   r7
fff7518c:	39 40 00 00 	li      r10,0
fff75190:	39 00 00 00 	li      r8,0
fff75194:	38 61 00 08 	addi    r3,r1,8
fff75198:	7d 0a 19 ae 	stbx    r8,r10,r3
  m += 8*i;
  mlen -= 8*i;
  pos += 8*i;

  if (mlen) {
    for (i=0;i<8;i++)
fff7519c:	39 4a 00 01 	addi    r10,r10,1
fff751a0:	42 00 ff f8 	bdnz    fff75198 <_ZL13keccak_absorbPyjjPKhj+0x220>
fff751a4:	7f e9 03 a6 	mtctr   r31
fff751a8:	3b 80 00 00 	li      r28,0
fff751ac:	7d 46 4a 14 	add     r10,r6,r9
      t[i] = 0;
    for (i=0;i<mlen;i++)
      t[i] = m[i];
fff751b0:	7d 4a e0 ae 	lbzx    r10,r10,r28
fff751b4:	7d 43 e1 ae 	stbx    r10,r3,r28
  pos += 8*i;

  if (mlen) {
    for (i=0;i<8;i++)
      t[i] = 0;
    for (i=0;i<mlen;i++)
fff751b8:	3b 9c 00 01 	addi    r28,r28,1
fff751bc:	42 00 ff f0 	bdnz    fff751ac <_ZL13keccak_absorbPyjjPKhj+0x234>
      t[i] = m[i];
    s[pos/8] ^= load64(t);
fff751c0:	4b ff e7 79 	bl      fff73938 <_ZL6load64PKh>
fff751c4:	57 ca 00 38 	rlwinm  r10,r30,0,0,28
fff751c8:	7c fd 52 14 	add     r7,r29,r10
fff751cc:	7d 1d 50 2e 	lwzx    r8,r29,r10
fff751d0:	81 27 00 04 	lwz     r9,4(r7)
fff751d4:	7d 03 1a 78 	xor     r3,r8,r3
fff751d8:	7d 24 22 78 	xor     r4,r9,r4
fff751dc:	7c 7d 51 2e 	stwx    r3,r29,r10
fff751e0:	90 87 00 04 	stw     r4,4(r7)
    pos += mlen;
fff751e4:	7f de e2 14 	add     r30,r30,r28
  }

  return pos;
}
fff751e8:	80 01 00 44 	lwz     r0,68(r1)
fff751ec:	7f c3 f3 78 	mr      r3,r30
fff751f0:	7c 08 03 a6 	mtlr    r0
fff751f4:	17 81 00 30 	lvd     d28,48(r1)
fff751f8:	17 c1 00 38 	lvd     d30,56(r1)
fff751fc:	38 21 00 40 	addi    r1,r1,64
fff75200:	4e 80 00 20 	blr

fff75204 <_ZL20keccak_squeezeblocksPhjPyj>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
fff75204:	94 21 ff d8 	stwu    r1,-40(r1)
fff75208:	7c 08 02 a6 	mflr    r0
  unsigned int i;

  while(nblocks > 0) {
    KeccakF1600_StatePermute(s);
    for (i=0;i<r/8;i++)
fff7520c:	54 c9 e8 fe 	rlwinm  r9,r6,29,3,31
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
fff75210:	90 01 00 2c 	stw     r0,44(r1)
fff75214:	90 a1 00 08 	stw     r5,8(r1)
  unsigned int i;

  while(nblocks > 0) {
    KeccakF1600_StatePermute(s);
    for (i=0;i<r/8;i++)
fff75218:	91 21 00 0c 	stw     r9,12(r1)
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
fff7521c:	1b 81 00 18 	stvd    d28,24(r1)
fff75220:	1b c1 00 20 	stvd    d30,32(r1)
fff75224:	7c 9c 23 78 	mr      r28,r4
fff75228:	7c 7e 1b 78 	mr      r30,r3
fff7522c:	7c dd 33 78 	mr      r29,r6
  unsigned int i;

  while(nblocks > 0) {
fff75230:	06 dc 00 26 	bwz     r28,fff7527c <_ZL20keccak_squeezeblocksPhjPyj+0x78>
    KeccakF1600_StatePermute(s);
fff75234:	80 61 00 08 	lwz     r3,8(r1)
    for (i=0;i<r/8;i++)
fff75238:	3b e0 00 00 	li      r31,0
                                 unsigned int r)
{
  unsigned int i;

  while(nblocks > 0) {
    KeccakF1600_StatePermute(s);
fff7523c:	4b ff e7 75 	bl      fff739b0 <_ZL24KeccakF1600_StatePermutePy>
fff75240:	81 21 00 08 	lwz     r9,8(r1)
fff75244:	39 49 ff f8 	addi    r10,r9,-8
    for (i=0;i<r/8;i++)
fff75248:	81 21 00 0c 	lwz     r9,12(r1)
fff7524c:	04 df 48 12 	cmpwbeq r31,r9,fff75270 <_ZL20keccak_squeezeblocksPhjPyj+0x6c>
      store64(out + 8*i, s[i]);
fff75250:	24 aa 00 08 	lvdu    d5,8(r10)
fff75254:	57 e3 18 38 	rlwinm  r3,r31,3,0,28
fff75258:	7c 7e 1a 14 	add     r3,r30,r3
fff7525c:	91 41 00 10 	stw     r10,16(r1)
{
  unsigned int i;

  while(nblocks > 0) {
    KeccakF1600_StatePermute(s);
    for (i=0;i<r/8;i++)
fff75260:	3b ff 00 01 	addi    r31,r31,1
      store64(out + 8*i, s[i]);
fff75264:	4b ff e7 21 	bl      fff73984 <_ZL7store64Phy>
{
  unsigned int i;

  while(nblocks > 0) {
    KeccakF1600_StatePermute(s);
    for (i=0;i<r/8;i++)
fff75268:	81 41 00 10 	lwz     r10,16(r1)
fff7526c:	4b ff ff dc 	b       fff75248 <_ZL20keccak_squeezeblocksPhjPyj+0x44>
      store64(out + 8*i, s[i]);
    out += r;
fff75270:	7f de ea 14 	add     r30,r30,r29
    nblocks--;
fff75274:	3b 9c ff ff 	addi    r28,r28,-1
fff75278:	4b ff ff b8 	b       fff75230 <_ZL20keccak_squeezeblocksPhjPyj+0x2c>
  }
}
fff7527c:	80 01 00 2c 	lwz     r0,44(r1)
fff75280:	17 81 00 18 	lvd     d28,24(r1)
fff75284:	7c 08 03 a6 	mtlr    r0
fff75288:	17 c1 00 20 	lvd     d30,32(r1)
fff7528c:	38 21 00 28 	addi    r1,r1,40
fff75290:	4e 80 00 20 	blr

fff75294 <_ZL15shake256_absorbP12Keccak_statePKhj>:
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
static
void shake256_absorb(Keccak_state *state, const uint8_t *in, size_t inlen)
{
fff75294:	94 21 ff f0 	stwu    r1,-16(r1)
fff75298:	7c 08 02 a6 	mflr    r0
fff7529c:	1b c1 00 08 	stvd    d30,8(r1)
fff752a0:	90 01 00 14 	stw     r0,20(r1)
fff752a4:	7c a7 2b 78 	mr      r7,r5
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
fff752a8:	80 a3 00 c8 	lwz     r5,200(r3)
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
static
void shake256_absorb(Keccak_state *state, const uint8_t *in, size_t inlen)
{
fff752ac:	7c 86 23 78 	mr      r6,r4
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
fff752b0:	38 80 00 88 	li      r4,136
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
static
void shake256_absorb(Keccak_state *state, const uint8_t *in, size_t inlen)
{
fff752b4:	7c 7f 1b 78 	mr      r31,r3
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
fff752b8:	4b ff fc c1 	bl      fff74f78 <_ZL13keccak_absorbPyjjPKhj>
fff752bc:	90 7f 00 c8 	stw     r3,200(r31)
}
fff752c0:	80 01 00 14 	lwz     r0,20(r1)
fff752c4:	17 c1 00 08 	lvd     d30,8(r1)
fff752c8:	7c 08 03 a6 	mtlr    r0
fff752cc:	38 21 00 10 	addi    r1,r1,16
fff752d0:	4e 80 00 20 	blr

fff752d4 <_ZL17montgomery_reducey>:
* Arguments:   - uint64_t: finite field element a
*
* Returns r.
**************************************************/
static
uint32_t __attribute__ ((noinline))  montgomery_reduce(uint64_t a) {
fff752d4:	94 21 ff f0 	stwu    r1,-16(r1)
    uint64_t t;

    t =  a * DIL_QINV;
fff752d8:	3c c0 fc 7f 	lis     r6,-897
* Arguments:   - uint64_t: finite field element a
*
* Returns r.
**************************************************/
static
uint32_t __attribute__ ((noinline))  montgomery_reduce(uint64_t a) {
fff752dc:	7c 08 02 a6 	mflr    r0
    uint64_t t;

    t =  a * DIL_QINV;
fff752e0:	38 a0 00 00 	li      r5,0
fff752e4:	60 c6 df ff 	ori     r6,r6,57343
* Arguments:   - uint64_t: finite field element a
*
* Returns r.
**************************************************/
static
uint32_t __attribute__ ((noinline))  montgomery_reduce(uint64_t a) {
fff752e8:	90 01 00 14 	stw     r0,20(r1)
fff752ec:	1b c1 00 08 	stvd    d30,8(r1)
fff752f0:	7c 9f 23 78 	mr      r31,r4
fff752f4:	7c 7e 1b 78 	mr      r30,r3
    uint64_t t;

    t =  a * DIL_QINV;
fff752f8:	48 00 51 a9 	bl      fff7a4a0 <__muldi3>
    t &= ((uint64_t)1 << 32) - 1;
    t *= DIL_Q;
fff752fc:	3c c0 00 7f 	lis     r6,127
fff75300:	38 60 00 00 	li      r3,0
fff75304:	38 a0 00 00 	li      r5,0
fff75308:	60 c6 e0 01 	ori     r6,r6,57345
fff7530c:	48 00 51 95 	bl      fff7a4a0 <__muldi3>
    t += a;

    t >>= 32;

    return t;
}
fff75310:	80 01 00 14 	lwz     r0,20(r1)
    uint64_t t;

    t =  a * DIL_QINV;
    t &= ((uint64_t)1 << 32) - 1;
    t *= DIL_Q;
    t += a;
fff75314:	7c 84 f8 14 	addc    r4,r4,r31
fff75318:	7c 63 f1 14 	adde    r3,r3,r30

    t >>= 32;

    return t;
}
fff7531c:	7c 08 03 a6 	mtlr    r0
fff75320:	17 c1 00 08 	lvd     d30,8(r1)
fff75324:	38 21 00 10 	addi    r1,r1,16
fff75328:	4e 80 00 20 	blr

fff7532c <_ZL8reduce32m>:
static
uint32_t __attribute__ ((noinline)) reduce32(uint32_t a) {
    uint32_t t;

    t = a & 0x7FFFFF;
    a >>= 23;
fff7532c:	54 69 4d fe 	rlwinm  r9,r3,9,23,31
    t += (a << 13) - a;
fff75330:	55 2a 68 24 	rlwinm  r10,r9,13,0,18
**************************************************/
static
uint32_t __attribute__ ((noinline)) reduce32(uint32_t a) {
    uint32_t t;

    t = a & 0x7FFFFF;
fff75334:	54 68 02 7e 	clrlwi  r8,r3,9
    a >>= 23;
    t += (a << 13) - a;
fff75338:	7c 69 50 50 	subf    r3,r9,r10

    return t;
}
fff7533c:	7c 63 42 14 	add     r3,r3,r8
fff75340:	4e 80 00 20 	blr

fff75344 <_ZL5csubqm>:
*
* Returns r.
**************************************************/
static
uint32_t __attribute__ ((noinline)) csubq(uint32_t a) {
    a -= DIL_Q;
fff75344:	3c 63 ff 80 	addis   r3,r3,-128
fff75348:	39 23 1f ff 	addi    r9,r3,8191

    a += ((int32_t)a >> 31) & DIL_Q;
fff7534c:	3d 40 00 7f 	lis     r10,127
fff75350:	7d 23 fe 70 	srawi   r3,r9,31
fff75354:	61 4a e0 01 	ori     r10,r10,57345
fff75358:	7c 63 50 38 	and     r3,r3,r10

    return a;
}
fff7535c:	7c 63 4a 14 	add     r3,r3,r9
fff75360:	4e 80 00 20 	blr

fff75364 <_ZL6ntt256Pm>:
*              Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) ntt256(uint32_t p[ DIL_N ]) {
fff75364:	94 21 fb d0 	stwu    r1,-1072(r1)
3369112, 185531, 7173032, 5196991, 162844, 1616392, 3014001, 810149,
1652634, 4686184, 6581310, 5341501, 3523897, 3866901, 269760, 2213111,
7404533, 1717735, 472078, 7953734, 1723600, 6577327, 1910376, 6712985,
7276084, 8119771, 4546524, 5441381, 6144432, 7959518, 6094090, 183443,
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};
fff75368:	3c 80 ff f7 	lis     r4,-9
*              Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) ntt256(uint32_t p[ DIL_N ]) {
fff7536c:	7c 08 02 a6 	mflr    r0
3369112, 185531, 7173032, 5196991, 162844, 1616392, 3014001, 810149,
1652634, 4686184, 6581310, 5341501, 3523897, 3866901, 269760, 2213111,
7404533, 1717735, 472078, 7953734, 1723600, 6577327, 1910376, 6712985,
7276084, 8119771, 4546524, 5441381, 6144432, 7959518, 6094090, 183443,
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};
fff75370:	38 84 72 d0 	addi    r4,r4,29392
*              Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) ntt256(uint32_t p[ DIL_N ]) {
fff75374:	1b 81 04 20 	stvd    d28,1056(r1)
3369112, 185531, 7173032, 5196991, 162844, 1616392, 3014001, 810149,
1652634, 4686184, 6581310, 5341501, 3523897, 3866901, 269760, 2213111,
7404533, 1717735, 472078, 7953734, 1723600, 6577327, 1910376, 6712985,
7276084, 8119771, 4546524, 5441381, 6144432, 7959518, 6094090, 183443,
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};
fff75378:	38 84 00 c0 	addi    r4,r4,192
*              Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) ntt256(uint32_t p[ DIL_N ]) {
fff7537c:	7c 7d 1b 78 	mr      r29,r3
3369112, 185531, 7173032, 5196991, 162844, 1616392, 3014001, 810149,
1652634, 4686184, 6581310, 5341501, 3523897, 3866901, 269760, 2213111,
7404533, 1717735, 472078, 7953734, 1723600, 6577327, 1910376, 6712985,
7276084, 8119771, 4546524, 5441381, 6144432, 7959518, 6094090, 183443,
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};
fff75380:	38 a0 04 00 	li      r5,1024
fff75384:	38 61 00 08 	addi    r3,r1,8
*              Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) ntt256(uint32_t p[ DIL_N ]) {
fff75388:	90 01 04 34 	stw     r0,1076(r1)
fff7538c:	1b c1 04 28 	stvd    d30,1064(r1)
7404533, 1717735, 472078, 7953734, 1723600, 6577327, 1910376, 6712985,
7276084, 8119771, 4546524, 5441381, 6144432, 7959518, 6094090, 183443,
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};

    k = 1;
fff75390:	3b 80 00 01 	li      r28,1
3369112, 185531, 7173032, 5196991, 162844, 1616392, 3014001, 810149,
1652634, 4686184, 6581310, 5341501, 3523897, 3866901, 269760, 2213111,
7404533, 1717735, 472078, 7953734, 1723600, 6577327, 1910376, 6712985,
7276084, 8119771, 4546524, 5441381, 6144432, 7959518, 6094090, 183443,
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};
fff75394:	48 00 50 25 	bl      fff7a3b8 <memcpy>
fff75398:	39 40 00 08 	li      r10,8

    k = 1;
    for (len = 128; len > 0; len >>= 1) {
fff7539c:	39 20 00 80 	li      r9,128
fff753a0:	55 28 10 3a 	rlwinm  r8,r9,2,0,29
fff753a4:	3b 9c 00 01 	addi    r28,r28,1
fff753a8:	3b e0 00 00 	li      r31,0
fff753ac:	57 87 10 3a 	rlwinm  r7,r28,2,0,29
fff753b0:	38 c1 00 08 	addi    r6,r1,8
fff753b4:	7c e6 3a 14 	add     r7,r6,r7
fff753b8:	57 fe 10 3a 	rlwinm  r30,r31,2,0,29
        for (start = 0; start < DIL_N; start = j + len) {
            zeta = dil_zetas[k++];
fff753bc:	80 e7 ff fc 	lwz     r7,-4(r7)
fff753c0:	7f dd f2 14 	add     r30,r29,r30

            for (j = start; j < start + len; ++j) {
fff753c4:	7c 1f 4a 14 	add     r0,r31,r9
fff753c8:	05 1f 00 38 	cmplwbge r31,r0,fff75438 <_ZL6ntt256Pm+0xd4>
                t = montgomery_reduce((uint64_t)zeta *
                                      p[j + len]);
fff753cc:	7c 9e 40 2e 	lwzx    r4,r30,r8
fff753d0:	7c e6 3b 78 	mr      r6,r7
fff753d4:	38 a0 00 00 	li      r5,0
fff753d8:	38 60 00 00 	li      r3,0
fff753dc:	90 01 04 18 	stw     r0,1048(r1)
fff753e0:	90 e1 04 0c 	stw     r7,1036(r1)
fff753e4:	91 01 04 14 	stw     r8,1044(r1)
fff753e8:	91 21 04 10 	stw     r9,1040(r1)
fff753ec:	91 41 04 08 	stw     r10,1032(r1)
fff753f0:	48 00 50 b1 	bl      fff7a4a0 <__muldi3>
fff753f4:	4b ff fe e1 	bl      fff752d4 <_ZL17montgomery_reducey>
fff753f8:	80 de 00 00 	lwz     r6,0(r30)
                p[j + len] = p[j] + 2*DIL_Q - t;
fff753fc:	81 01 04 14 	lwz     r8,1044(r1)
fff75400:	3c c6 01 00 	addis   r6,r6,256
fff75404:	38 c6 c0 02 	addi    r6,r6,-16382
fff75408:	7c c3 30 50 	subf    r6,r3,r6
fff7540c:	7c de 41 2e 	stwx    r6,r30,r8
    k = 1;
    for (len = 128; len > 0; len >>= 1) {
        for (start = 0; start < DIL_N; start = j + len) {
            zeta = dil_zetas[k++];

            for (j = start; j < start + len; ++j) {
fff75410:	3b ff 00 01 	addi    r31,r31,1
                t = montgomery_reduce((uint64_t)zeta *
                                      p[j + len]);
                p[j + len] = p[j] + 2*DIL_Q - t;
                p[j] = p[j] + t;
fff75414:	80 de 00 00 	lwz     r6,0(r30)
fff75418:	3b de 00 04 	addi    r30,r30,4
fff7541c:	7c 66 1a 14 	add     r3,r6,r3
fff75420:	90 7e ff fc 	stw     r3,-4(r30)
fff75424:	81 41 04 08 	lwz     r10,1032(r1)
fff75428:	81 21 04 10 	lwz     r9,1040(r1)
fff7542c:	80 e1 04 0c 	lwz     r7,1036(r1)
fff75430:	80 01 04 18 	lwz     r0,1048(r1)
fff75434:	4b ff ff 94 	b       fff753c8 <_ZL6ntt256Pm+0x64>
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};

    k = 1;
    for (len = 128; len > 0; len >>= 1) {
        for (start = 0; start < DIL_N; start = j + len) {
fff75438:	7f ff 4a 14 	add     r31,r31,r9
fff7543c:	28 1f 00 ff 	cmplwi  r31,255
fff75440:	38 fc 00 01 	addi    r7,r28,1
fff75444:	41 81 00 0c 	bgt     fff75450 <_ZL6ntt256Pm+0xec>
fff75448:	7c fc 3b 78 	mr      r28,r7
fff7544c:	4b ff ff 60 	b       fff753ac <_ZL6ntt256Pm+0x48>
7276084, 8119771, 4546524, 5441381, 6144432, 7959518, 6094090, 183443,
7403526, 1612842, 4834730, 7826001, 3919660, 8332111, 7018208, 3937738,
1400424, 7534263, 1976782};

    k = 1;
    for (len = 128; len > 0; len >>= 1) {
fff75450:	35 4a ff ff 	addic.  r10,r10,-1
fff75454:	55 29 f8 7e 	rlwinm  r9,r9,31,1,31
fff75458:	40 82 ff 48 	bne     fff753a0 <_ZL6ntt256Pm+0x3c>
                p[j + len] = p[j] + 2*DIL_Q - t;
                p[j] = p[j] + t;
            }
        }
    }
}
fff7545c:	80 01 04 34 	lwz     r0,1076(r1)
fff75460:	17 81 04 20 	lvd     d28,1056(r1)
fff75464:	7c 08 03 a6 	mtlr    r0
fff75468:	17 c1 04 28 	lvd     d30,1064(r1)
fff7546c:	38 21 04 30 	addi    r1,r1,1072
fff75470:	4e 80 00 20 	blr

fff75474 <_ZL16invntt_tomont256Pm>:
*              Output coefficient are smaller than 2*Q.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) invntt_tomont256(uint32_t p[ DIL_N ]) {
fff75474:	94 21 fb d0 	stwu    r1,-1072(r1)
fff75478:	7c 08 02 a6 	mflr    r0
fff7547c:	1b 81 04 20 	stvd    d28,1056(r1)
2867647, 4805995, 3043716, 3861115, 4464978, 2537516, 3592148, 1661693,
4849980, 5303092, 8284641, 5674394, 8100412, 4369920, 19422, 6623180,
3277672, 1399561, 3859737, 2118186, 2108549, 5760665, 1119584, 549488,
4794489, 1079900, 7356305, 5654953, 5700314, 5268920, 2884855, 5260684,
2091905, 359251, 6026966, 6554070, 7913949, 876248, 777960, 8143293,
518909, 2608894, 8354570};
fff75480:	38 80 00 00 	li      r4,0
*              Output coefficient are smaller than 2*Q.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) invntt_tomont256(uint32_t p[ DIL_N ]) {
fff75484:	7c 7d 1b 78 	mr      r29,r3
2867647, 4805995, 3043716, 3861115, 4464978, 2537516, 3592148, 1661693,
4849980, 5303092, 8284641, 5674394, 8100412, 4369920, 19422, 6623180,
3277672, 1399561, 3859737, 2118186, 2108549, 5760665, 1119584, 549488,
4794489, 1079900, 7356305, 5654953, 5700314, 5268920, 2884855, 5260684,
2091905, 359251, 6026966, 6554070, 7913949, 876248, 777960, 8143293,
518909, 2608894, 8354570};
fff75488:	38 a0 04 00 	li      r5,1024
fff7548c:	38 61 00 08 	addi    r3,r1,8
*              Output coefficient are smaller than 2*Q.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
static
void __attribute__ ((noinline)) invntt_tomont256(uint32_t p[ DIL_N ]) {
fff75490:	90 01 04 34 	stw     r0,1076(r1)
fff75494:	1b c1 04 28 	stvd    d30,1064(r1)
2867647, 4805995, 3043716, 3861115, 4464978, 2537516, 3592148, 1661693,
4849980, 5303092, 8284641, 5674394, 8100412, 4369920, 19422, 6623180,
3277672, 1399561, 3859737, 2118186, 2108549, 5760665, 1119584, 549488,
4794489, 1079900, 7356305, 5654953, 5700314, 5268920, 2884855, 5260684,
2091905, 359251, 6026966, 6554070, 7913949, 876248, 777960, 8143293,
518909, 2608894, 8354570};
fff75498:	48 00 4e 4d 	bl      fff7a2e4 <memset>
fff7549c:	3d 20 00 61 	lis     r9,97
fff754a0:	61 29 b6 33 	ori     r9,r9,46643
fff754a4:	91 21 00 08 	stw     r9,8(r1)
fff754a8:	3d 20 00 0c 	lis     r9,12
fff754ac:	61 29 e9 4a 	ori     r9,r9,59722
fff754b0:	91 21 00 0c 	stw     r9,12(r1)
fff754b4:	3d 20 00 6a 	lis     r9,106
fff754b8:	61 29 81 99 	ori     r9,r9,33177
fff754bc:	91 21 00 10 	stw     r9,16(r1)
fff754c0:	3d 20 00 43 	lis     r9,67
fff754c4:	61 29 ca 37 	ori     r9,r9,51767
fff754c8:	91 21 00 14 	stw     r9,20(r1)
fff754cc:	3d 20 00 14 	lis     r9,20
fff754d0:	61 29 c9 21 	ori     r9,r9,51489
fff754d4:	91 21 00 18 	stw     r9,24(r1)
fff754d8:	39 20 00 00 	li      r9,0
fff754dc:	61 29 bc b2 	ori     r9,r9,48306
fff754e0:	91 21 00 1c 	stw     r9,28(r1)
fff754e4:	3d 20 00 44 	lis     r9,68
fff754e8:	61 29 10 d5 	ori     r9,r9,4309
fff754ec:	91 21 00 20 	stw     r9,32(r1)
fff754f0:	3d 20 00 08 	lis     r9,8
fff754f4:	61 29 75 b0 	ori     r9,r9,30128
fff754f8:	91 21 00 24 	stw     r9,36(r1)
fff754fc:	3d 20 00 36 	lis     r9,54
fff75500:	61 29 1a 57 	ori     r9,r9,6743
fff75504:	91 21 00 28 	stw     r9,40(r1)
fff75508:	3d 20 00 67 	lis     r9,103
fff7550c:	61 29 43 d7 	ori     r9,r9,17367
fff75510:	91 21 00 2c 	stw     r9,44(r1)
fff75514:	3d 20 00 0e 	lis     r9,14
fff75518:	61 29 e7 fb 	ori     r9,r9,59387
fff7551c:	91 21 00 30 	stw     r9,48(r1)
fff75520:	3d 20 00 7d 	lis     r9,125
fff75524:	61 29 13 6e 	ori     r9,r9,4974
fff75528:	91 21 00 34 	stw     r9,52(r1)
fff7552c:	3d 20 00 22 	lis     r9,34
fff75530:	61 29 e2 f7 	ori     r9,r9,58103
fff75534:	91 21 00 38 	stw     r9,56(r1)
fff75538:	3d 20 00 06 	lis     r9,6
fff7553c:	61 29 6c 23 	ori     r9,r9,27683
fff75540:	91 21 00 3c 	stw     r9,60(r1)
fff75544:	3d 20 00 22 	lis     r9,34
fff75548:	61 29 1e 51 	ori     r9,r9,7761
fff7554c:	91 21 00 40 	stw     r9,64(r1)
fff75550:	3d 20 00 2c 	lis     r9,44
fff75554:	61 29 d8 9c 	ori     r9,r9,55452
fff75558:	91 21 00 44 	stw     r9,68(r1)
fff7555c:	3d 20 00 3a 	lis     r9,58
fff75560:	61 29 80 25 	ori     r9,r9,32805
fff75564:	91 21 00 48 	stw     r9,72(r1)
fff75568:	3d 20 00 03 	lis     r9,3
fff7556c:	61 29 fa 26 	ori     r9,r9,64038
fff75570:	91 21 00 4c 	stw     r9,76(r1)
fff75574:	3d 20 00 10 	lis     r9,16
fff75578:	61 29 d9 cd 	ori     r9,r9,55757
fff7557c:	91 21 00 50 	stw     r9,80(r1)
fff75580:	3d 20 00 19 	lis     r9,25
fff75584:	61 29 71 68 	ori     r9,r9,29032
fff75588:	91 21 00 54 	stw     r9,84(r1)
fff7558c:	3d 20 00 62 	lis     r9,98
fff75590:	61 29 b9 99 	ori     r9,r9,47513
fff75594:	91 21 00 58 	stw     r9,88(r1)
fff75598:	3d 20 00 1b 	lis     r9,27
fff7559c:	61 29 83 52 	ori     r9,r9,33618
fff755a0:	91 21 00 5c 	stw     r9,92(r1)
fff755a4:	3d 20 00 65 	lis     r9,101
fff755a8:	61 29 93 31 	ori     r9,r9,37681
fff755ac:	91 21 00 60 	stw     r9,96(r1)
fff755b0:	3d 20 00 06 	lis     r9,6
fff755b4:	61 29 82 bb 	ori     r9,r9,33467
fff755b8:	91 21 00 64 	stw     r9,100(r1)
fff755bc:	3d 20 00 78 	lis     r9,120
fff755c0:	61 29 ab f3 	ori     r9,r9,44019
fff755c4:	91 21 00 68 	stw     r9,104(r1)
fff755c8:	3d 20 00 65 	lis     r9,101
fff755cc:	61 29 aa 1a 	ori     r9,r9,43546
fff755d0:	91 21 00 6c 	stw     r9,108(r1)
fff755d4:	3d 20 00 0e 	lis     r9,14
fff755d8:	61 29 e4 0c 	ori     r9,r9,58380
fff755dc:	91 21 00 70 	stw     r9,112(r1)
fff755e0:	3d 20 00 5e 	lis     r9,94
fff755e4:	61 29 1b 0a 	ori     r9,r9,6922
fff755e8:	91 21 00 74 	stw     r9,116(r1)
fff755ec:	3d 20 00 7b 	lis     r9,123
fff755f0:	61 29 c2 41 	ori     r9,r9,49729
fff755f4:	91 21 00 78 	stw     r9,120(r1)
fff755f8:	3d 20 00 44 	lis     r9,68
fff755fc:	61 29 de ec 	ori     r9,r9,57068
fff75600:	91 21 00 7c 	stw     r9,124(r1)
fff75604:	3d 20 00 4a 	lis     r9,74
fff75608:	61 29 1a c8 	ori     r9,r9,6856
fff7560c:	91 21 00 80 	stw     r9,128(r1)
fff75610:	3d 20 00 2e 	lis     r9,46
fff75614:	61 29 5e c4 	ori     r9,r9,24260
fff75618:	91 21 00 84 	stw     r9,132(r1)
fff7561c:	3d 20 00 1b 	lis     r9,27
fff75620:	61 29 73 c3 	ori     r9,r9,29635
fff75624:	91 21 00 88 	stw     r9,136(r1)
fff75628:	3d 20 00 38 	lis     r9,56
fff7562c:	61 29 5e 99 	ori     r9,r9,24217
fff75630:	91 21 00 8c 	stw     r9,140(r1)
fff75634:	3d 20 00 66 	lis     r9,102
fff75638:	61 29 a8 67 	ori     r9,r9,43111
fff7563c:	91 21 00 90 	stw     r9,144(r1)
fff75640:	3d 20 00 73 	lis     r9,115
fff75644:	61 29 83 5c 	ori     r9,r9,33628
fff75648:	91 21 00 94 	stw     r9,148(r1)
fff7564c:	3d 20 00 51 	lis     r9,81
fff75650:	61 29 e2 90 	ori     r9,r9,58000
fff75654:	91 21 00 98 	stw     r9,152(r1)
fff75658:	3d 20 00 67 	lis     r9,103
fff7565c:	61 29 35 f9 	ori     r9,r9,13817
fff75660:	91 21 00 9c 	stw     r9,156(r1)
fff75664:	3d 20 00 7d 	lis     r9,125
fff75668:	61 29 63 e5 	ori     r9,r9,25573
fff7566c:	91 21 00 a0 	stw     r9,160(r1)
fff75670:	3d 20 00 30 	lis     r9,48
fff75674:	61 29 93 42 	ori     r9,r9,37698
fff75678:	91 21 00 a4 	stw     r9,164(r1)
fff7567c:	3d 20 00 12 	lis     r9,18
fff75680:	61 29 6c 59 	ori     r9,r9,27737
fff75684:	91 21 00 a8 	stw     r9,168(r1)
fff75688:	3d 20 00 7d 	lis     r9,125
fff7568c:	61 29 0b 46 	ori     r9,r9,2886
fff75690:	91 21 00 ac 	stw     r9,172(r1)
fff75694:	3d 20 00 4c 	lis     r9,76
fff75698:	61 29 77 69 	ori     r9,r9,30569
fff7569c:	91 21 00 b0 	stw     r9,176(r1)
fff756a0:	3d 20 00 62 	lis     r9,98
fff756a4:	61 29 02 69 	ori     r9,r9,617
fff756a8:	91 21 00 b4 	stw     r9,180(r1)
fff756ac:	3d 20 00 02 	lis     r9,2
fff756b0:	61 29 83 71 	ori     r9,r9,33649
fff756b4:	91 21 00 b8 	stw     r9,184(r1)
fff756b8:	3d 20 00 5a 	lis     r9,90
fff756bc:	61 29 6c 4a 	ori     r9,r9,27722
fff756c0:	91 21 00 bc 	stw     r9,188(r1)
fff756c4:	3d 20 00 5a 	lis     r9,90
fff756c8:	61 29 c2 76 	ori     r9,r9,49782
fff756cc:	91 21 00 c0 	stw     r9,192(r1)
fff756d0:	3d 20 00 1e 	lis     r9,30
fff756d4:	61 29 b9 a8 	ori     r9,r9,47528
fff756d8:	91 21 00 c4 	stw     r9,196(r1)
fff756dc:	3d 20 00 39 	lis     r9,57
fff756e0:	61 29 a1 e1 	ori     r9,r9,41441
fff756e4:	91 21 00 c8 	stw     r9,200(r1)
fff756e8:	3d 20 00 76 	lis     r9,118
fff756ec:	61 29 cf 29 	ori     r9,r9,53033
fff756f0:	91 21 00 cc 	stw     r9,204(r1)
fff756f4:	3d 20 00 38 	lis     r9,56
fff756f8:	61 29 d3 ee 	ori     r9,r9,54254
fff756fc:	91 21 00 d0 	stw     r9,208(r1)
fff75700:	3d 20 00 27 	lis     r9,39
fff75704:	61 29 6e e5 	ori     r9,r9,28389
fff75708:	91 21 00 d4 	stw     r9,212(r1)
fff7570c:	3d 20 00 1c 	lis     r9,28
fff75710:	61 29 2e a9 	ori     r9,r9,11945
fff75714:	91 21 00 d8 	stw     r9,216(r1)
fff75718:	3d 20 00 19 	lis     r9,25
fff7571c:	61 29 80 08 	ori     r9,r9,32776
fff75720:	91 21 00 dc 	stw     r9,220(r1)
fff75724:	3d 20 00 2b 	lis     r9,43
fff75728:	61 29 35 f4 	ori     r9,r9,13812
fff7572c:	91 21 00 e0 	stw     r9,224(r1)
fff75730:	3d 20 00 08 	lis     r9,8
fff75734:	61 29 46 cc 	ori     r9,r9,18124
fff75738:	91 21 00 e4 	stw     r9,228(r1)
fff7573c:	3d 20 00 4b 	lis     r9,75
fff75740:	61 29 e7 32 	ori     r9,r9,59186
fff75744:	91 21 00 e8 	stw     r9,232(r1)
fff75748:	3d 20 00 5d 	lis     r9,93
fff7574c:	61 29 c2 19 	ori     r9,r9,49689
fff75750:	91 21 00 ec 	stw     r9,236(r1)
fff75754:	3d 20 00 74 	lis     r9,116
fff75758:	61 29 04 1a 	ori     r9,r9,1050
fff7575c:	91 21 00 f0 	stw     r9,240(r1)
fff75760:	3d 20 00 68 	lis     r9,104
fff75764:	61 29 fb fc 	ori     r9,r9,64508
fff75768:	91 21 00 f4 	stw     r9,244(r1)
fff7576c:	3d 20 00 14 	lis     r9,20
fff75770:	61 29 fa 53 	ori     r9,r9,64083
fff75774:	91 21 00 f8 	stw     r9,248(r1)
fff75778:	3d 20 00 26 	lis     r9,38
fff7577c:	61 29 da 88 	ori     r9,r9,55944
fff75780:	91 21 00 fc 	stw     r9,252(r1)
fff75784:	3d 20 00 62 	lis     r9,98
fff75788:	61 29 9f 68 	ori     r9,r9,40808
fff7578c:	91 21 01 00 	stw     r9,256(r1)
fff75790:	3d 20 00 13 	lis     r9,19
fff75794:	61 29 86 ad 	ori     r9,r9,34477
fff75798:	91 21 01 04 	stw     r9,260(r1)
fff7579c:	3d 20 00 1d 	lis     r9,29
fff757a0:	61 29 f2 92 	ori     r9,r9,62098
fff757a4:	91 21 01 08 	stw     r9,264(r1)
fff757a8:	3d 20 00 4d 	lis     r9,77
fff757ac:	61 29 6d 7e 	ori     r9,r9,28030
fff757b0:	91 21 01 0c 	stw     r9,268(r1)
fff757b4:	3d 20 00 6b 	lis     r9,107
fff757b8:	61 29 d9 3a 	ori     r9,r9,55610
fff757bc:	91 21 01 10 	stw     r9,272(r1)
fff757c0:	3d 20 00 06 	lis     r9,6
fff757c4:	61 29 e2 1c 	ori     r9,r9,57884
fff757c8:	91 21 01 14 	stw     r9,276(r1)
fff757cc:	3d 20 00 15 	lis     r9,21
fff757d0:	61 29 d2 d1 	ori     r9,r9,53969
fff757d4:	91 21 01 18 	stw     r9,280(r1)
fff757d8:	3d 20 00 32 	lis     r9,50
fff757dc:	61 29 a1 c2 	ori     r9,r9,41410
fff757e0:	91 21 01 1c 	stw     r9,284(r1)
fff757e4:	3d 20 00 6c 	lis     r9,108
fff757e8:	61 29 fe e6 	ori     r9,r9,65254
fff757ec:	91 21 01 20 	stw     r9,288(r1)
fff757f0:	3d 20 00 14 	lis     r9,20
fff757f4:	61 29 57 42 	ori     r9,r9,22338
fff757f8:	91 21 01 24 	stw     r9,292(r1)
fff757fc:	3d 20 00 10 	lis     r9,16
fff75800:	61 29 09 5a 	ori     r9,r9,2394
fff75804:	91 21 01 28 	stw     r9,296(r1)
fff75808:	3d 20 00 62 	lis     r9,98
fff7580c:	61 29 d4 b6 	ori     r9,r9,54454
fff75810:	91 21 01 2c 	stw     r9,300(r1)
fff75814:	3d 20 00 63 	lis     r9,99
fff75818:	61 29 5a c2 	ori     r9,r9,23234
fff7581c:	91 21 01 30 	stw     r9,304(r1)
fff75820:	3d 20 00 2d 	lis     r9,45
fff75824:	61 29 af 77 	ori     r9,r9,44919
fff75828:	91 21 01 34 	stw     r9,308(r1)
fff7582c:	3d 20 00 36 	lis     r9,54
fff75830:	61 29 24 70 	ori     r9,r9,9328
fff75834:	91 21 01 38 	stw     r9,312(r1)
fff75838:	3d 20 00 57 	lis     r9,87
fff7583c:	61 29 a7 70 	ori     r9,r9,42864
fff75840:	91 21 01 3c 	stw     r9,316(r1)
fff75844:	3d 20 00 6c 	lis     r9,108
fff75848:	61 29 cb 43 	ori     r9,r9,52035
fff7584c:	91 21 01 40 	stw     r9,320(r1)
fff75850:	3d 20 00 39 	lis     r9,57
fff75854:	61 29 7a e8 	ori     r9,r9,31464
fff75858:	91 21 01 44 	stw     r9,324(r1)
fff7585c:	3d 20 00 67 	lis     r9,103
fff75860:	61 29 85 bb 	ori     r9,r9,34235
fff75864:	91 21 01 48 	stw     r9,328(r1)
fff75868:	3d 20 00 59 	lis     r9,89
fff7586c:	61 29 ef b0 	ori     r9,r9,61360
fff75870:	91 21 01 4c 	stw     r9,332(r1)
fff75874:	3d 20 00 6c 	lis     r9,108
fff75878:	61 29 d6 7d 	ori     r9,r9,54909
fff7587c:	91 21 01 50 	stw     r9,336(r1)
fff75880:	3d 20 00 41 	lis     r9,65
fff75884:	61 29 fe e5 	ori     r9,r9,65253
fff75888:	91 21 01 54 	stw     r9,340(r1)
fff7588c:	3d 20 00 6c 	lis     r9,108
fff75890:	61 29 92 90 	ori     r9,r9,37520
fff75894:	91 21 01 58 	stw     r9,344(r1)
fff75898:	3d 20 00 27 	lis     r9,39
fff7589c:	61 29 85 c6 	ori     r9,r9,34246
fff758a0:	91 21 01 5c 	stw     r9,348(r1)
fff758a4:	3d 20 00 56 	lis     r9,86
fff758a8:	61 29 ce 68 	ori     r9,r9,52840
fff758ac:	91 21 01 60 	stw     r9,352(r1)
fff758b0:	3d 20 00 54 	lis     r9,84
fff758b4:	61 29 81 1c 	ori     r9,r9,33052
fff758b8:	91 21 01 64 	stw     r9,356(r1)
fff758bc:	3d 20 00 7c 	lis     r9,124
fff758c0:	61 29 c6 dd 	ori     r9,r9,50909
fff758c4:	91 21 01 68 	stw     r9,360(r1)
fff758c8:	3d 20 00 65 	lis     r9,101
fff758cc:	61 29 63 3a 	ori     r9,r9,25402
fff758d0:	91 21 01 6c 	stw     r9,364(r1)
fff758d4:	3d 20 00 32 	lis     r9,50
fff758d8:	61 29 ff c5 	ori     r9,r9,65477
fff758dc:	91 21 01 70 	stw     r9,368(r1)
fff758e0:	3d 20 00 4b 	lis     r9,75
fff758e4:	61 29 6d 1a 	ori     r9,r9,27930
fff758e8:	91 21 01 74 	stw     r9,372(r1)
fff758ec:	3d 20 00 41 	lis     r9,65
fff758f0:	61 29 2f e6 	ori     r9,r9,12262
fff758f4:	91 21 01 78 	stw     r9,376(r1)
fff758f8:	3d 20 00 25 	lis     r9,37
fff758fc:	61 29 32 bf 	ori     r9,r9,12991
fff75900:	91 21 01 7c 	stw     r9,380(r1)
fff75904:	3d 20 00 7b 	lis     r9,123
fff75908:	61 29 7e f5 	ori     r9,r9,32501
fff7590c:	91 21 01 80 	stw     r9,384(r1)
fff75910:	3d 20 00 7a 	lis     r9,122
fff75914:	61 29 a6 e8 	ori     r9,r9,42728
fff75918:	91 21 01 84 	stw     r9,388(r1)
fff7591c:	3d 20 00 36 	lis     r9,54
fff75920:	61 29 de 3e 	ori     r9,r9,56894
fff75924:	91 21 01 88 	stw     r9,392(r1)
fff75928:	3d 20 00 0b 	lis     r9,11
fff7592c:	61 29 ba 6e 	ori     r9,r9,47726
fff75930:	91 21 01 8c 	stw     r9,396(r1)
fff75934:	3d 20 00 08 	lis     r9,8
fff75938:	61 29 03 2a 	ori     r9,r9,810
fff7593c:	91 21 01 90 	stw     r9,400(r1)
fff75940:	3d 20 00 36 	lis     r9,54
fff75944:	61 29 46 83 	ori     r9,r9,18051
fff75948:	91 21 01 94 	stw     r9,404(r1)
fff7594c:	3d 20 00 4e 	lis     r9,78
fff75950:	61 29 f0 7b 	ori     r9,r9,61563
fff75954:	91 21 01 98 	stw     r9,408(r1)
fff75958:	3d 20 00 60 	lis     r9,96
fff7595c:	61 29 df 7d 	ori     r9,r9,57213
fff75960:	91 21 01 9c 	stw     r9,412(r1)
fff75964:	3d 20 00 2f 	lis     r9,47
fff75968:	61 29 a5 0a 	ori     r9,r9,42250
fff7596c:	91 21 01 a0 	stw     r9,416(r1)
fff75970:	3d 20 00 09 	lis     r9,9
fff75974:	61 29 ff df 	ori     r9,r9,65503
fff75978:	91 21 01 a4 	stw     r9,420(r1)
fff7597c:	3d 20 00 07 	lis     r9,7
fff75980:	61 29 f9 04 	ori     r9,r9,63748
fff75984:	91 21 01 a8 	stw     r9,424(r1)
fff75988:	39 20 00 00 	li      r9,0
fff7598c:	61 29 a8 fc 	ori     r9,r9,43260
fff75990:	91 21 01 ac 	stw     r9,428(r1)
fff75994:	3d 20 00 18 	lis     r9,24
fff75998:	61 29 9d 76 	ori     r9,r9,40310
fff7599c:	91 21 01 b0 	stw     r9,432(r1)
fff759a0:	3d 20 00 78 	lis     r9,120
fff759a4:	61 29 50 7e 	ori     r9,r9,20606
fff759a8:	91 21 01 b4 	stw     r9,436(r1)
fff759ac:	3d 20 00 73 	lis     r9,115
fff759b0:	61 29 60 a7 	ori     r9,r9,24743
fff759b4:	91 21 01 b8 	stw     r9,440(r1)
fff759b8:	3d 20 00 71 	lis     r9,113
fff759bc:	61 29 ff 1b 	ori     r9,r9,65307
fff759c0:	91 21 01 bc 	stw     r9,444(r1)
fff759c4:	3d 20 00 63 	lis     r9,99
fff759c8:	61 29 81 e7 	ori     r9,r9,33255
fff759cc:	91 21 01 c0 	stw     r9,448(r1)
fff759d0:	3d 20 00 72 	lis     r9,114
fff759d4:	61 29 21 a3 	ori     r9,r9,8611
fff759d8:	91 21 01 c4 	stw     r9,452(r1)
fff759dc:	3d 20 00 30 	lis     r9,48
fff759e0:	61 29 ba 22 	ori     r9,r9,47650
fff759e4:	91 21 01 c8 	stw     r9,456(r1)
fff759e8:	3d 20 00 12 	lis     r9,18
fff759ec:	61 29 44 aa 	ori     r9,r9,17578
fff759f0:	91 21 01 cc 	stw     r9,460(r1)
fff759f4:	3d 20 00 39 	lis     r9,57
fff759f8:	61 29 5d 04 	ori     r9,r9,23812
fff759fc:	91 21 01 d0 	stw     r9,464(r1)
fff75a00:	3d 20 00 35 	lis     r9,53
fff75a04:	61 29 b7 60 	ori     r9,r9,46944
fff75a08:	91 21 01 d4 	stw     r9,468(r1)
fff75a0c:	3d 20 00 4a 	lis     r9,74
fff75a10:	61 29 44 a4 	ori     r9,r9,17572
fff75a14:	91 21 01 d8 	stw     r9,472(r1)
fff75a18:	3d 20 00 12 	lis     r9,18
fff75a1c:	61 29 db 10 	ori     r9,r9,56080
fff75a20:	91 21 01 dc 	stw     r9,476(r1)
fff75a24:	3d 20 00 5a 	lis     r9,90
fff75a28:	61 29 ba 7a 	ori     r9,r9,47738
fff75a2c:	91 21 01 e0 	stw     r9,480(r1)
fff75a30:	3d 20 00 7b 	lis     r9,123
fff75a34:	61 29 cd 0c 	ori     r9,r9,52492
fff75a38:	91 21 01 e4 	stw     r9,484(r1)
fff75a3c:	3d 20 00 36 	lis     r9,54
fff75a40:	61 29 5b de 	ori     r9,r9,23518
fff75a44:	91 21 01 e8 	stw     r9,488(r1)
fff75a48:	3d 20 00 25 	lis     r9,37
fff75a4c:	61 29 54 61 	ori     r9,r9,21601
fff75a50:	91 21 01 ec 	stw     r9,492(r1)
fff75a54:	3d 20 00 5d 	lis     r9,93
fff75a58:	61 29 a2 06 	ori     r9,r9,41478
fff75a5c:	91 21 01 f0 	stw     r9,496(r1)
fff75a60:	3d 20 00 33 	lis     r9,51
fff75a64:	61 29 00 8e 	ori     r9,r9,142
fff75a68:	91 21 01 f4 	stw     r9,500(r1)
fff75a6c:	3d 20 00 45 	lis     r9,69
fff75a70:	61 29 9e 09 	ori     r9,r9,40457
fff75a74:	91 21 01 f8 	stw     r9,504(r1)
fff75a78:	3d 20 00 5c 	lis     r9,92
fff75a7c:	61 29 87 2d 	ori     r9,r9,34605
fff75a80:	91 21 01 fc 	stw     r9,508(r1)
fff75a84:	3d 20 00 4b 	lis     r9,75
fff75a88:	61 29 e0 a7 	ori     r9,r9,57511
fff75a8c:	91 21 02 00 	stw     r9,512(r1)
fff75a90:	3d 20 00 5f 	lis     r9,95
fff75a94:	61 29 f5 6e 	ori     r9,r9,62830
fff75a98:	91 21 02 04 	stw     r9,516(r1)
fff75a9c:	3d 20 00 45 	lis     r9,69
fff75aa0:	61 29 48 28 	ori     r9,r9,18472
fff75aa4:	91 21 02 08 	stw     r9,520(r1)
fff75aa8:	3d 20 00 37 	lis     r9,55
fff75aac:	61 29 5f a9 	ori     r9,r9,24489
fff75ab0:	91 21 02 0c 	stw     r9,524(r1)
fff75ab4:	3d 20 00 3b 	lis     r9,59
fff75ab8:	61 29 38 64 	ori     r9,r9,14436
fff75abc:	91 21 02 10 	stw     r9,528(r1)
fff75ac0:	3d 20 00 2e 	lis     r9,46
fff75ac4:	61 29 11 5e 	ori     r9,r9,4446
fff75ac8:	91 21 02 14 	stw     r9,532(r1)
fff75acc:	3d 20 00 15 	lis     r9,21
fff75ad0:	61 29 f7 fe 	ori     r9,r9,63486
fff75ad4:	91 21 02 18 	stw     r9,536(r1)
fff75ad8:	3d 20 00 0c 	lis     r9,12
fff75adc:	61 29 66 bc 	ori     r9,r9,26300
fff75ae0:	91 21 02 1c 	stw     r9,540(r1)
fff75ae4:	3d 20 00 18 	lis     r9,24
fff75ae8:	61 29 2f 20 	ori     r9,r9,12064
fff75aec:	91 21 02 20 	stw     r9,544(r1)
fff75af0:	3d 20 00 6c 	lis     r9,108
fff75af4:	61 29 41 dc 	ori     r9,r9,16860
fff75af8:	91 21 02 24 	stw     r9,548(r1)
fff75afc:	3d 20 00 6b 	lis     r9,107
fff75b00:	61 29 68 6f 	ori     r9,r9,26735
fff75b04:	91 21 02 28 	stw     r9,552(r1)
fff75b08:	3d 20 00 6b 	lis     r9,107
fff75b0c:	61 29 cc fc 	ori     r9,r9,52476
fff75b10:	91 21 02 2c 	stw     r9,556(r1)
fff75b14:	3d 20 00 02 	lis     r9,2
fff75b18:	61 29 b5 20 	ori     r9,r9,46368
fff75b1c:	91 21 02 30 	stw     r9,560(r1)
fff75b20:	3d 20 00 24 	lis     r9,36
fff75b24:	61 29 c3 6d 	ori     r9,r9,50029
fff75b28:	91 21 02 34 	stw     r9,564(r1)
fff75b2c:	3d 20 00 1c 	lis     r9,28
fff75b30:	61 29 40 0a 	ori     r9,r9,16394
fff75b34:	91 21 02 38 	stw     r9,568(r1)
fff75b38:	3d 20 00 4f 	lis     r9,79
fff75b3c:	61 29 a9 3f 	ori     r9,r9,43327
fff75b40:	91 21 02 3c 	stw     r9,572(r1)
fff75b44:	3d 20 00 36 	lis     r9,54
fff75b48:	61 29 37 f8 	ori     r9,r9,14328
fff75b4c:	91 21 02 40 	stw     r9,576(r1)
fff75b50:	3d 20 00 7c 	lis     r9,124
fff75b54:	61 29 fb 95 	ori     r9,r9,64405
fff75b58:	91 21 02 44 	stw     r9,580(r1)
fff75b5c:	3d 20 00 14 	lis     r9,20
fff75b60:	61 29 17 f8 	ori     r9,r9,6136
fff75b64:	91 21 02 48 	stw     r9,584(r1)
fff75b68:	3d 20 00 74 	lis     r9,116
fff75b6c:	61 29 47 60 	ori     r9,r9,18272
fff75b70:	91 21 02 4c 	stw     r9,588(r1)
fff75b74:	3d 20 00 03 	lis     r9,3
fff75b78:	61 29 38 21 	ori     r9,r9,14369
fff75b7c:	91 21 02 50 	stw     r9,592(r1)
fff75b80:	3d 20 00 5b 	lis     r9,91
fff75b84:	61 29 6a 95 	ori     r9,r9,27285
fff75b88:	91 21 02 54 	stw     r9,596(r1)
fff75b8c:	3d 20 00 31 	lis     r9,49
fff75b90:	61 29 96 40 	ori     r9,r9,38464
fff75b94:	91 21 02 58 	stw     r9,600(r1)
fff75b98:	3d 20 00 66 	lis     r9,102
fff75b9c:	61 29 a6 b9 	ori     r9,r9,42681
fff75ba0:	91 21 02 5c 	stw     r9,604(r1)
fff75ba4:	39 20 21 82 	li      r9,8578
fff75ba8:	91 21 02 60 	stw     r9,608(r1)
fff75bac:	3d 20 00 38 	lis     r9,56
fff75bb0:	61 29 d4 36 	ori     r9,r9,54326
fff75bb4:	91 21 02 64 	stw     r9,612(r1)
fff75bb8:	3d 20 00 43 	lis     r9,67
fff75bbc:	61 29 78 a7 	ori     r9,r9,30887
fff75bc0:	91 21 02 68 	stw     r9,616(r1)
fff75bc4:	3d 20 00 72 	lis     r9,114
fff75bc8:	61 29 12 bd 	ori     r9,r9,4797
fff75bcc:	91 21 02 6c 	stw     r9,620(r1)
fff75bd0:	3d 20 00 10 	lis     r9,16
fff75bd4:	61 29 c9 42 	ori     r9,r9,51522
fff75bd8:	91 21 02 70 	stw     r9,624(r1)
fff75bdc:	3d 20 00 7f 	lis     r9,127
fff75be0:	61 29 33 01 	ori     r9,r9,13057
fff75be4:	91 21 02 74 	stw     r9,628(r1)
fff75be8:	3d 20 00 50 	lis     r9,80
fff75bec:	61 29 9a 79 	ori     r9,r9,39545
fff75bf0:	91 21 02 78 	stw     r9,632(r1)
fff75bf4:	3d 20 00 78 	lis     r9,120
fff75bf8:	61 29 1b ea 	ori     r9,r9,7146
fff75bfc:	91 21 02 7c 	stw     r9,636(r1)
fff75c00:	3d 20 00 7b 	lis     r9,123
fff75c04:	61 29 d5 11 	ori     r9,r9,54545
fff75c08:	91 21 02 80 	stw     r9,640(r1)
fff75c0c:	3d 20 00 33 	lis     r9,51
fff75c10:	61 29 04 17 	ori     r9,r9,1047
fff75c14:	91 21 02 84 	stw     r9,644(r1)
fff75c18:	3d 20 00 15 	lis     r9,21
fff75c1c:	61 29 d3 9e 	ori     r9,r9,54174
fff75c20:	91 21 02 88 	stw     r9,648(r1)
fff75c24:	3d 20 00 63 	lis     r9,99
fff75c28:	61 29 9a 9e 	ori     r9,r9,39582
fff75c2c:	91 21 02 8c 	stw     r9,652(r1)
fff75c30:	3d 20 00 6b 	lis     r9,107
fff75c34:	61 29 4a 2d 	ori     r9,r9,18989
fff75c38:	91 21 02 90 	stw     r9,656(r1)
fff75c3c:	3d 20 00 05 	lis     r9,5
fff75c40:	61 29 d4 23 	ori     r9,r9,54307
fff75c44:	91 21 02 94 	stw     r9,660(r1)
fff75c48:	3d 20 00 13 	lis     r9,19
fff75c4c:	61 29 f6 09 	ori     r9,r9,62985
fff75c50:	91 21 02 98 	stw     r9,664(r1)
fff75c54:	39 20 59 c5 	li      r9,22981
fff75c58:	91 21 02 9c 	stw     r9,668(r1)
fff75c5c:	3d 20 00 12 	lis     r9,18
fff75c60:	61 29 be ed 	ori     r9,r9,48877
fff75c64:	91 21 02 a0 	stw     r9,672(r1)
fff75c68:	3d 20 00 0a 	lis     r9,10
fff75c6c:	61 29 3d 7e 	ori     r9,r9,15742
fff75c70:	91 21 02 a4 	stw     r9,676(r1)
fff75c74:	3d 20 00 25 	lis     r9,37
fff75c78:	61 29 cb f7 	ori     r9,r9,52215
fff75c7c:	91 21 02 a8 	stw     r9,680(r1)
fff75c80:	3d 20 00 06 	lis     r9,6
fff75c84:	61 29 45 93 	ori     r9,r9,17811
fff75c88:	91 21 02 ac 	stw     r9,684(r1)
fff75c8c:	3d 20 00 38 	lis     r9,56
fff75c90:	61 29 5b b5 	ori     r9,r9,23477
fff75c94:	91 21 02 b0 	stw     r9,688(r1)
fff75c98:	3d 20 00 2d 	lis     r9,45
fff75c9c:	61 29 48 5d 	ori     r9,r9,18525
fff75ca0:	91 21 02 b4 	stw     r9,692(r1)
fff75ca4:	3d 20 00 56 	lis     r9,86
fff75ca8:	61 29 71 62 	ori     r9,r9,29026
fff75cac:	91 21 02 b8 	stw     r9,696(r1)
fff75cb0:	3d 20 00 5f 	lis     r9,95
fff75cb4:	61 29 19 c9 	ori     r9,r9,6601
fff75cb8:	91 21 02 bc 	stw     r9,700(r1)
fff75cbc:	3d 20 00 0f 	lis     r9,15
fff75cc0:	61 29 01 7b 	ori     r9,r9,379
fff75cc4:	91 21 02 c0 	stw     r9,704(r1)
fff75cc8:	3d 20 00 4b 	lis     r9,75
fff75ccc:	61 29 cf 0f 	ori     r9,r9,53007
fff75cd0:	91 21 02 c4 	stw     r9,708(r1)
fff75cd4:	3d 20 00 7d 	lis     r9,125
fff75cd8:	61 29 f0 37 	ori     r9,r9,61495
fff75cdc:	91 21 02 c8 	stw     r9,712(r1)
fff75ce0:	3d 20 00 37 	lis     r9,55
fff75ce4:	61 29 6f 20 	ori     r9,r9,28448
fff75ce8:	91 21 02 cc 	stw     r9,716(r1)
fff75cec:	3d 20 00 30 	lis     r9,48
fff75cf0:	61 29 2d 52 	ori     r9,r9,11602
fff75cf4:	91 21 02 d0 	stw     r9,720(r1)
fff75cf8:	3d 20 00 30 	lis     r9,48
fff75cfc:	61 29 ad 80 	ori     r9,r9,44416
fff75d00:	91 21 02 d4 	stw     r9,724(r1)
fff75d04:	3d 20 00 0f 	lis     r9,15
fff75d08:	61 29 43 0a 	ori     r9,r9,17162
fff75d0c:	91 21 02 d8 	stw     r9,728(r1)
fff75d10:	3d 20 00 3e 	lis     r9,62
fff75d14:	61 29 4f 8e 	ori     r9,r9,20366
fff75d18:	91 21 02 dc 	stw     r9,732(r1)
fff75d1c:	3d 20 00 62 	lis     r9,98
fff75d20:	61 29 48 8f 	ori     r9,r9,18575
fff75d24:	91 21 02 e0 	stw     r9,736(r1)
fff75d28:	3d 20 00 13 	lis     r9,19
fff75d2c:	61 29 30 8b 	ori     r9,r9,12427
fff75d30:	91 21 02 e4 	stw     r9,740(r1)
fff75d34:	3d 20 00 18 	lis     r9,24
fff75d38:	61 29 30 45 	ori     r9,r9,12357
fff75d3c:	91 21 02 e8 	stw     r9,744(r1)
fff75d40:	3d 20 00 5e 	lis     r9,94
fff75d44:	61 29 aa 3a 	ori     r9,r9,43578
fff75d48:	91 21 02 ec 	stw     r9,748(r1)
fff75d4c:	3d 20 00 4a 	lis     r9,74
fff75d50:	61 29 d6 13 	ori     r9,r9,54803
fff75d54:	91 21 02 f0 	stw     r9,752(r1)
fff75d58:	3d 20 00 16 	lis     r9,22
fff75d5c:	61 29 29 a3 	ori     r9,r9,10659
fff75d60:	91 21 02 f4 	stw     r9,756(r1)
fff75d64:	3d 20 00 2e 	lis     r9,46
fff75d68:	61 29 67 e7 	ori     r9,r9,26599
fff75d6c:	91 21 02 f8 	stw     r9,760(r1)
fff75d70:	3d 20 00 38 	lis     r9,56
fff75d74:	61 29 1e 31 	ori     r9,r9,7729
fff75d78:	91 21 02 fc 	stw     r9,764(r1)
fff75d7c:	3d 20 00 17 	lis     r9,23
fff75d80:	61 29 53 7f 	ori     r9,r9,21375
fff75d84:	91 21 03 00 	stw     r9,768(r1)
fff75d88:	3d 20 00 3b 	lis     r9,59
fff75d8c:	61 29 f9 1b 	ori     r9,r9,63771
fff75d90:	91 21 03 04 	stw     r9,772(r1)
fff75d94:	3d 20 00 2a 	lis     r9,42
fff75d98:	61 29 b0 d3 	ori     r9,r9,45267
fff75d9c:	91 21 03 08 	stw     r9,776(r1)
fff75da0:	3d 20 00 60 	lis     r9,96
fff75da4:	61 29 42 ad 	ori     r9,r9,17069
fff75da8:	91 21 03 0c 	stw     r9,780(r1)
fff75dac:	3d 20 00 27 	lis     r9,39
fff75db0:	61 29 03 d0 	ori     r9,r9,976
fff75db4:	91 21 03 10 	stw     r9,784(r1)
fff75db8:	3d 20 00 44 	lis     r9,68
fff75dbc:	61 29 5a cd 	ori     r9,r9,23245
fff75dc0:	91 21 03 14 	stw     r9,788(r1)
fff75dc4:	3d 20 00 44 	lis     r9,68
fff75dc8:	61 29 a7 ae 	ori     r9,r9,42926
fff75dcc:	91 21 03 18 	stw     r9,792(r1)
fff75dd0:	3d 20 00 71 	lis     r9,113
fff75dd4:	61 29 50 8b 	ori     r9,r9,20619
fff75dd8:	91 21 03 1c 	stw     r9,796(r1)
fff75ddc:	3d 20 00 77 	lis     r9,119
fff75de0:	61 29 c4 67 	ori     r9,r9,50279
fff75de4:	91 21 03 20 	stw     r9,800(r1)
fff75de8:	3d 20 00 73 	lis     r9,115
fff75dec:	61 29 7c 59 	ori     r9,r9,31833
fff75df0:	91 21 03 24 	stw     r9,804(r1)
fff75df4:	3d 20 00 47 	lis     r9,71
fff75df8:	61 29 6c 75 	ori     r9,r9,27765
fff75dfc:	91 21 03 28 	stw     r9,808(r1)
fff75e00:	3d 20 00 18 	lis     r9,24
fff75e04:	61 29 6b a4 	ori     r9,r9,27556
fff75e08:	91 21 03 2c 	stw     r9,812(r1)
fff75e0c:	3d 20 00 20 	lis     r9,32
fff75e10:	61 29 a9 e9 	ori     r9,r9,43497
fff75e14:	91 21 03 30 	stw     r9,816(r1)
fff75e18:	3d 20 00 4a 	lis     r9,74
fff75e1c:	61 29 5b c2 	ori     r9,r9,23490
fff75e20:	91 21 03 34 	stw     r9,820(r1)
fff75e24:	3d 20 00 3a 	lis     r9,58
fff75e28:	61 29 50 a7 	ori     r9,r9,20647
fff75e2c:	91 21 03 38 	stw     r9,824(r1)
fff75e30:	3d 20 00 4a 	lis     r9,74
fff75e34:	61 29 61 e3 	ori     r9,r9,25059
fff75e38:	91 21 03 3c 	stw     r9,828(r1)
fff75e3c:	3d 20 00 19 	lis     r9,25
fff75e40:	61 29 15 2a 	ori     r9,r9,5418
fff75e44:	91 21 03 40 	stw     r9,832(r1)
fff75e48:	3d 20 00 19 	lis     r9,25
fff75e4c:	61 29 ed c3 	ori     r9,r9,60867
fff75e50:	91 21 03 44 	stw     r9,836(r1)
fff75e54:	3d 20 00 08 	lis     r9,8
fff75e58:	61 29 3a a3 	ori     r9,r9,15011
fff75e5c:	91 21 03 48 	stw     r9,840(r1)
fff75e60:	3d 20 00 5c 	lis     r9,92
fff75e64:	61 29 09 65 	ori     r9,r9,2405
fff75e68:	91 21 03 4c 	stw     r9,844(r1)
fff75e6c:	3d 20 00 04 	lis     r9,4
fff75e70:	61 29 95 b3 	ori     r9,r9,38323
fff75e74:	91 21 03 50 	stw     r9,848(r1)
fff75e78:	3d 20 00 49 	lis     r9,73
fff75e7c:	61 29 dc 01 	ori     r9,r9,56321
fff75e80:	91 21 03 54 	stw     r9,852(r1)
fff75e84:	3d 20 00 2b 	lis     r9,43
fff75e88:	61 29 c1 bf 	ori     r9,r9,49599
fff75e8c:	91 21 03 58 	stw     r9,856(r1)
fff75e90:	3d 20 00 49 	lis     r9,73
fff75e94:	61 29 55 6b 	ori     r9,r9,21867
fff75e98:	91 21 03 5c 	stw     r9,860(r1)
fff75e9c:	3d 20 00 2e 	lis     r9,46
fff75ea0:	61 29 71 84 	ori     r9,r9,29060
fff75ea4:	91 21 03 60 	stw     r9,864(r1)
fff75ea8:	3d 20 00 3a 	lis     r9,58
fff75eac:	61 29 ea 7b 	ori     r9,r9,60027
fff75eb0:	91 21 03 64 	stw     r9,868(r1)
fff75eb4:	3d 20 00 44 	lis     r9,68
fff75eb8:	61 29 21 52 	ori     r9,r9,8530
fff75ebc:	91 21 03 68 	stw     r9,872(r1)
fff75ec0:	3d 20 00 26 	lis     r9,38
fff75ec4:	61 29 b8 2c 	ori     r9,r9,47148
fff75ec8:	91 21 03 6c 	stw     r9,876(r1)
fff75ecc:	3d 20 00 36 	lis     r9,54
fff75ed0:	61 29 cf d4 	ori     r9,r9,53204
fff75ed4:	91 21 03 70 	stw     r9,880(r1)
fff75ed8:	3d 20 00 19 	lis     r9,25
fff75edc:	61 29 5a fd 	ori     r9,r9,23293
fff75ee0:	91 21 03 74 	stw     r9,884(r1)
fff75ee4:	3d 20 00 4a 	lis     r9,74
fff75ee8:	61 29 01 3c 	ori     r9,r9,316
fff75eec:	91 21 03 78 	stw     r9,888(r1)
fff75ef0:	3d 20 00 50 	lis     r9,80
fff75ef4:	61 29 eb 34 	ori     r9,r9,60212
fff75ef8:	91 21 03 7c 	stw     r9,892(r1)
fff75efc:	3d 20 00 7e 	lis     r9,126
fff75f00:	61 29 69 e1 	ori     r9,r9,27105
fff75f04:	91 21 03 80 	stw     r9,896(r1)
fff75f08:	3d 20 00 56 	lis     r9,86
fff75f0c:	61 29 95 9a 	ori     r9,r9,38298
fff75f10:	91 21 03 84 	stw     r9,900(r1)
fff75f14:	3d 20 00 7b 	lis     r9,123
fff75f18:	61 29 9a 3c 	ori     r9,r9,39484
fff75f1c:	91 21 03 88 	stw     r9,904(r1)
fff75f20:	3d 20 00 42 	lis     r9,66
fff75f24:	61 29 ae 00 	ori     r9,r9,44544
fff75f28:	91 21 03 8c 	stw     r9,908(r1)
fff75f2c:	39 20 4b de 	li      r9,19422
fff75f30:	91 21 03 90 	stw     r9,912(r1)
fff75f34:	3d 20 00 65 	lis     r9,101
fff75f38:	61 29 0f cc 	ori     r9,r9,4044
fff75f3c:	91 21 03 94 	stw     r9,916(r1)
fff75f40:	3d 20 00 32 	lis     r9,50
fff75f44:	61 29 03 68 	ori     r9,r9,872
fff75f48:	91 21 03 98 	stw     r9,920(r1)
fff75f4c:	3d 20 00 15 	lis     r9,21
fff75f50:	61 29 5b 09 	ori     r9,r9,23305
fff75f54:	91 21 03 9c 	stw     r9,924(r1)
fff75f58:	3d 20 00 3a 	lis     r9,58
fff75f5c:	61 29 e5 19 	ori     r9,r9,58649
fff75f60:	91 21 03 a0 	stw     r9,928(r1)
fff75f64:	3d 20 00 20 	lis     r9,32
fff75f68:	61 29 52 2a 	ori     r9,r9,21034
fff75f6c:	91 21 03 a4 	stw     r9,932(r1)
fff75f70:	3d 20 00 20 	lis     r9,32
fff75f74:	61 29 2c 85 	ori     r9,r9,11397
fff75f78:	91 21 03 a8 	stw     r9,936(r1)
fff75f7c:	3d 20 00 57 	lis     r9,87
fff75f80:	61 29 e6 99 	ori     r9,r9,59033
fff75f84:	91 21 03 ac 	stw     r9,940(r1)
fff75f88:	3d 20 00 11 	lis     r9,17
fff75f8c:	61 29 15 60 	ori     r9,r9,5472
fff75f90:	91 21 03 b0 	stw     r9,944(r1)
fff75f94:	3d 20 00 08 	lis     r9,8
fff75f98:	61 29 62 70 	ori     r9,r9,25200
fff75f9c:	91 21 03 b4 	stw     r9,948(r1)
fff75fa0:	3d 20 00 49 	lis     r9,73
fff75fa4:	61 29 28 79 	ori     r9,r9,10361
fff75fa8:	91 21 03 b8 	stw     r9,952(r1)
fff75fac:	3d 20 00 10 	lis     r9,16
fff75fb0:	61 29 7a 5c 	ori     r9,r9,31324
fff75fb4:	91 21 03 bc 	stw     r9,956(r1)
fff75fb8:	3d 20 00 70 	lis     r9,112
fff75fbc:	61 29 3f 91 	ori     r9,r9,16273
fff75fc0:	91 21 03 c0 	stw     r9,960(r1)
fff75fc4:	3d 20 00 56 	lis     r9,86
fff75fc8:	61 29 49 a9 	ori     r9,r9,18857
fff75fcc:	91 21 03 c4 	stw     r9,964(r1)
fff75fd0:	3d 20 00 56 	lis     r9,86
fff75fd4:	61 29 fa da 	ori     r9,r9,64218
fff75fd8:	91 21 03 c8 	stw     r9,968(r1)
fff75fdc:	3d 20 00 50 	lis     r9,80
fff75fe0:	61 29 65 b8 	ori     r9,r9,26040
fff75fe4:	91 21 03 cc 	stw     r9,972(r1)
fff75fe8:	3d 20 00 2c 	lis     r9,44
fff75fec:	61 29 04 f7 	ori     r9,r9,1271
fff75ff0:	91 21 03 d0 	stw     r9,976(r1)
fff75ff4:	3d 20 00 50 	lis     r9,80
fff75ff8:	61 29 45 8c 	ori     r9,r9,17804
fff75ffc:	91 21 03 d4 	stw     r9,980(r1)
fff76000:	3d 20 00 1f 	lis     r9,31
fff76004:	61 29 eb 81 	ori     r9,r9,60289
fff76008:	91 21 03 d8 	stw     r9,984(r1)
fff7600c:	3d 20 00 05 	lis     r9,5
fff76010:	61 29 7b 53 	ori     r9,r9,31571
fff76014:	91 21 03 dc 	stw     r9,988(r1)
fff76018:	3d 20 00 5b 	lis     r9,91
fff7601c:	61 29 f6 d6 	ori     r9,r9,63190
fff76020:	91 21 03 e0 	stw     r9,992(r1)
fff76024:	3d 20 00 64 	lis     r9,100
fff76028:	61 29 01 d6 	ori     r9,r9,470
fff7602c:	91 21 03 e4 	stw     r9,996(r1)
fff76030:	3d 20 00 78 	lis     r9,120
fff76034:	61 29 c1 dd 	ori     r9,r9,49629
fff76038:	91 21 03 e8 	stw     r9,1000(r1)
fff7603c:	3d 20 00 0d 	lis     r9,13
fff76040:	61 29 5e d8 	ori     r9,r9,24280
fff76044:	91 21 03 ec 	stw     r9,1004(r1)
fff76048:	3d 20 00 0b 	lis     r9,11
fff7604c:	61 29 de e8 	ori     r9,r9,57064
fff76050:	91 21 03 f0 	stw     r9,1008(r1)
fff76054:	3d 20 00 7c 	lis     r9,124
fff76058:	61 29 41 bd 	ori     r9,r9,16829
fff7605c:	91 21 03 f4 	stw     r9,1012(r1)
fff76060:	3d 20 00 07 	lis     r9,7
fff76064:	61 29 ea fd 	ori     r9,r9,60157
fff76068:	91 21 03 f8 	stw     r9,1016(r1)
fff7606c:	3d 20 00 27 	lis     r9,39
fff76070:	61 29 ce fe 	ori     r9,r9,52990
fff76074:	91 21 03 fc 	stw     r9,1020(r1)
fff76078:	3d 20 00 7f 	lis     r9,127
fff7607c:	61 29 7b 0a 	ori     r9,r9,31498
fff76080:	91 21 04 00 	stw     r9,1024(r1)
fff76084:	39 00 00 08 	li      r8,8
    uint32_t t, zeta;
    const uint32_t f = (((uint64_t)DIL_MONT*DIL_MONT % DIL_Q) *
                        (DIL_Q-1) % DIL_Q) *
                        ((DIL_Q-1) >> 8) % DIL_Q;

    k = 0;
fff76088:	3b 80 00 00 	li      r28,0
    for (len = 1; len < DIL_N; len <<= 1) {
fff7608c:	39 20 00 01 	li      r9,1
fff76090:	55 2a 10 3a 	rlwinm  r10,r9,2,0,29
fff76094:	3b 9c 00 01 	addi    r28,r28,1
fff76098:	3b e0 00 00 	li      r31,0
fff7609c:	57 87 10 3a 	rlwinm  r7,r28,2,0,29
fff760a0:	38 a1 00 08 	addi    r5,r1,8
fff760a4:	7c e5 3a 14 	add     r7,r5,r7
        for (start = 0; start < DIL_N; start = j + len) {
            zeta = dil_zetas_inv[k++];
fff760a8:	80 e7 ff fc 	lwz     r7,-4(r7)
fff760ac:	57 fe 10 3a 	rlwinm  r30,r31,2,0,29
fff760b0:	3b de ff fc 	addi    r30,r30,-4
fff760b4:	90 e1 04 1c 	stw     r7,1052(r1)
fff760b8:	7f dd f2 14 	add     r30,r29,r30
            for (j = start; j < start + len; ++j) {
fff760bc:	7c 1f 4a 14 	add     r0,r31,r9
fff760c0:	05 1f 00 32 	cmplwbge r31,r0,fff76124 <_ZL16invntt_tomont256Pm+0xcb0>
                t = p[j];
fff760c4:	84 de 00 04 	lwzu    r6,4(r30)

                p[j]       = t + p[j + len];
                p[j + len] = t + 256*DIL_Q - p[j + len];
                p[j + len] = montgomery_reduce((uint64_t)zeta *
                             p[j + len]);
fff760c8:	80 81 04 1c 	lwz     r4,1052(r1)
        for (start = 0; start < DIL_N; start = j + len) {
            zeta = dil_zetas_inv[k++];
            for (j = start; j < start + len; ++j) {
                t = p[j];

                p[j]       = t + p[j + len];
fff760cc:	7c be 50 2e 	lwzx    r5,r30,r10
                p[j + len] = t + 256*DIL_Q - p[j + len];
                p[j + len] = montgomery_reduce((uint64_t)zeta *
                             p[j + len]);
fff760d0:	38 60 00 00 	li      r3,0
        for (start = 0; start < DIL_N; start = j + len) {
            zeta = dil_zetas_inv[k++];
            for (j = start; j < start + len; ++j) {
                t = p[j];

                p[j]       = t + p[j + len];
fff760d4:	7c a5 32 14 	add     r5,r5,r6
fff760d8:	90 be 00 00 	stw     r5,0(r30)
fff760dc:	3c c6 7f e0 	addis   r6,r6,32736
                p[j + len] = t + 256*DIL_Q - p[j + len];
                p[j + len] = montgomery_reduce((uint64_t)zeta *
                             p[j + len]);
fff760e0:	7c fe 50 2e 	lwzx    r7,r30,r10
fff760e4:	38 c6 01 00 	addi    r6,r6,256
fff760e8:	38 a0 00 00 	li      r5,0
fff760ec:	7c c7 30 50 	subf    r6,r7,r6
fff760f0:	90 01 04 14 	stw     r0,1044(r1)
fff760f4:	91 01 04 10 	stw     r8,1040(r1)
fff760f8:	91 21 04 0c 	stw     r9,1036(r1)
fff760fc:	91 41 04 08 	stw     r10,1032(r1)
fff76100:	48 00 43 a1 	bl      fff7a4a0 <__muldi3>
fff76104:	4b ff f1 d1 	bl      fff752d4 <_ZL17montgomery_reducey>
fff76108:	81 41 04 08 	lwz     r10,1032(r1)

    k = 0;
    for (len = 1; len < DIL_N; len <<= 1) {
        for (start = 0; start < DIL_N; start = j + len) {
            zeta = dil_zetas_inv[k++];
            for (j = start; j < start + len; ++j) {
fff7610c:	3b ff 00 01 	addi    r31,r31,1
                t = p[j];

                p[j]       = t + p[j + len];
                p[j + len] = t + 256*DIL_Q - p[j + len];
                p[j + len] = montgomery_reduce((uint64_t)zeta *
                             p[j + len]);
fff76110:	7c 7e 51 2e 	stwx    r3,r30,r10

    k = 0;
    for (len = 1; len < DIL_N; len <<= 1) {
        for (start = 0; start < DIL_N; start = j + len) {
            zeta = dil_zetas_inv[k++];
            for (j = start; j < start + len; ++j) {
fff76114:	81 21 04 0c 	lwz     r9,1036(r1)
fff76118:	81 01 04 10 	lwz     r8,1040(r1)
fff7611c:	80 01 04 14 	lwz     r0,1044(r1)
fff76120:	4b ff ff a0 	b       fff760c0 <_ZL16invntt_tomont256Pm+0xc4c>
                        (DIL_Q-1) % DIL_Q) *
                        ((DIL_Q-1) >> 8) % DIL_Q;

    k = 0;
    for (len = 1; len < DIL_N; len <<= 1) {
        for (start = 0; start < DIL_N; start = j + len) {
fff76124:	7f ff 4a 14 	add     r31,r31,r9
fff76128:	28 1f 00 ff 	cmplwi  r31,255
fff7612c:	38 fc 00 01 	addi    r7,r28,1
fff76130:	41 81 00 0c 	bgt     fff7613c <_ZL16invntt_tomont256Pm+0xcc8>
fff76134:	7c fc 3b 78 	mr      r28,r7
fff76138:	4b ff ff 64 	b       fff7609c <_ZL16invntt_tomont256Pm+0xc28>
    const uint32_t f = (((uint64_t)DIL_MONT*DIL_MONT % DIL_Q) *
                        (DIL_Q-1) % DIL_Q) *
                        ((DIL_Q-1) >> 8) % DIL_Q;

    k = 0;
    for (len = 1; len < DIL_N; len <<= 1) {
fff7613c:	35 08 ff ff 	addic.  r8,r8,-1
fff76140:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
fff76144:	40 82 ff 4c 	bne     fff76090 <_ZL16invntt_tomont256Pm+0xc1c>
fff76148:	3b fd ff fc 	addi    r31,r29,-4
fff7614c:	3b bd 03 fc 	addi    r29,r29,1020
            }
        }
    }

    for (j = 0; j < DIL_N; ++j) {
        p[j] = montgomery_reduce((uint64_t)f * p[j]);
fff76150:	84 9f 00 04 	lwzu    r4,4(r31)
fff76154:	38 c0 00 00 	li      r6,0
fff76158:	38 a0 00 00 	li      r5,0
fff7615c:	60 c6 a3 fa 	ori     r6,r6,41978
fff76160:	38 60 00 00 	li      r3,0
fff76164:	48 00 43 3d 	bl      fff7a4a0 <__muldi3>
fff76168:	4b ff f1 6d 	bl      fff752d4 <_ZL17montgomery_reducey>
fff7616c:	90 7f 00 00 	stw     r3,0(r31)
                             p[j + len]);
            }
        }
    }

    for (j = 0; j < DIL_N; ++j) {
fff76170:	04 5d ff f0 	cmpwbne r29,r31,fff76150 <_ZL16invntt_tomont256Pm+0xcdc>
        p[j] = montgomery_reduce((uint64_t)f * p[j]);
    }
}
fff76174:	80 01 04 34 	lwz     r0,1076(r1)
fff76178:	17 81 04 20 	lvd     d28,1056(r1)
fff7617c:	7c 08 03 a6 	mtlr    r0
fff76180:	17 c1 04 28 	lvd     d30,1064(r1)
fff76184:	38 21 04 30 	addi    r1,r1,1072
fff76188:	4e 80 00 20 	blr

fff7618c <_ZL9decomposemPm>:
#error "decompose assumes ALPHA == (Q-1)/16"
#endif
    int32_t t, u;

    /* Centralized remainder mod ALPHA */
    t = a & 0x7FFFF;
fff7618c:	54 6a 03 7e 	clrlwi  r10,r3,13
    t += (a >> 19) << 9;
fff76190:	54 69 b2 ac 	rlwinm  r9,r3,22,10,22
fff76194:	7d 2a 4a 14 	add     r9,r10,r9
    t -= DIL_ALPHA/2 + 1;
fff76198:	3d 29 ff fc 	addis   r9,r9,-4
fff7619c:	39 49 00 ff 	addi    r10,r9,255
    t += (t >> 31) & DIL_ALPHA;
fff761a0:	7d 49 fe 70 	srawi   r9,r10,31
fff761a4:	55 29 03 6c 	rlwinm  r9,r9,0,13,22
fff761a8:	7d 2a 4a 14 	add     r9,r10,r9
    t -= DIL_ALPHA/2 - 1;
fff761ac:	3d 29 ff fc 	addis   r9,r9,-4
fff761b0:	39 29 01 01 	addi    r9,r9,257
    a -= t;
fff761b4:	7c 69 18 50 	subf    r3,r9,r3

    /* Divide by ALPHA (possible to avoid) */
    u = a - 1;
fff761b8:	39 43 ff ff 	addi    r10,r3,-1
    u >>= 31;
    a = (a >> 19) + 1;
fff761bc:	54 63 6c fe 	rlwinm  r3,r3,13,19,31
    a -= u & 1;
fff761c0:	55 4a 0f fe 	rlwinm  r10,r10,1,31,31
    a -= t;

    /* Divide by ALPHA (possible to avoid) */
    u = a - 1;
    u >>= 31;
    a = (a >> 19) + 1;
fff761c4:	38 63 00 01 	addi    r3,r3,1
    a -= u & 1;
fff761c8:	7c 6a 18 50 	subf    r3,r10,r3
fff761cc:	3d 29 00 80 	addis   r9,r9,128

    /* Border case */
    *a0 = DIL_Q + t - (a >> 4);
fff761d0:	54 6a e1 3e 	rlwinm  r10,r3,28,4,31
fff761d4:	39 29 e0 01 	addi    r9,r9,-8191
fff761d8:	7d 2a 48 50 	subf    r9,r10,r9
fff761dc:	91 24 00 00 	stw     r9,0(r4)
    a &= 0xF;
    return a;
}
fff761e0:	54 63 07 3e 	clrlwi  r3,r3,28
fff761e4:	4e 80 00 20 	blr

fff761e8 <_ZL8use_hintmj>:
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
static
uint32_t __attribute__ ((noinline)) use_hint(uint32_t a, unsigned int hint) {
fff761e8:	94 21 ff e0 	stwu    r1,-32(r1)
fff761ec:	7c 08 02 a6 	mflr    r0
fff761f0:	1b c1 00 18 	stvd    d30,24(r1)
fff761f4:	7c 9f 23 78 	mr      r31,r4
    uint32_t a0, a1;

    a1 = decompose(a, &a0);
fff761f8:	38 81 00 08 	addi    r4,r1,8
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
static
uint32_t __attribute__ ((noinline)) use_hint(uint32_t a, unsigned int hint) {
fff761fc:	90 01 00 24 	stw     r0,36(r1)
    uint32_t a0, a1;

    a1 = decompose(a, &a0);
fff76200:	4b ff ff 8d 	bl      fff7618c <_ZL9decomposemPm>
fff76204:	7c 6a 1b 78 	mr      r10,r3
    if (!hint) {
fff76208:	06 df 00 12 	bwz     r31,fff7622c <_ZL8use_hintmj+0x44>

    } else if (a0 > DIL_Q) {
        return (a1 + 1) & 0xF;

    } else {
        return (a1 - 1) & 0xF;
fff7620c:	39 2a ff ff 	addi    r9,r10,-1
fff76210:	55 23 07 3e 	clrlwi  r3,r9,28

    a1 = decompose(a, &a0);
    if (!hint) {
        return a1;

    } else if (a0 > DIL_Q) {
fff76214:	81 01 00 08 	lwz     r8,8(r1)
fff76218:	3d 20 00 7f 	lis     r9,127
fff7621c:	61 29 e0 01 	ori     r9,r9,57345
fff76220:	05 28 48 06 	cmplwble r8,r9,fff7622c <_ZL8use_hintmj+0x44>
        return (a1 + 1) & 0xF;
fff76224:	38 6a 00 01 	addi    r3,r10,1
fff76228:	54 63 07 3e 	clrlwi  r3,r3,28
        return (a1 + DIL_ALPHA) % (DIL_Q - 1);
    else
        return (a1 - DIL_ALPHA) % (DIL_Q - 1);
    */
#endif
}
fff7622c:	80 01 00 24 	lwz     r0,36(r1)
fff76230:	17 c1 00 18 	lvd     d30,24(r1)
fff76234:	7c 08 03 a6 	mtlr    r0
fff76238:	38 21 00 20 	addi    r1,r1,32
fff7623c:	4e 80 00 20 	blr

fff76240 <_ZL11poly_reduceP4poly>:
*              representative in [0,2*Q[.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_reduce(poly *a) {
fff76240:	94 21 ff f0 	stwu    r1,-16(r1)
fff76244:	7c 08 02 a6 	mflr    r0
fff76248:	1b c1 00 08 	stvd    d30,8(r1)
fff7624c:	90 01 00 14 	stw     r0,20(r1)
fff76250:	3b e3 ff fc 	addi    r31,r3,-4
fff76254:	3b c3 03 fc 	addi    r30,r3,1020
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
        a->coeffs[i] = reduce32(a->coeffs[i]);
fff76258:	84 7f 00 04 	lwzu    r3,4(r31)
fff7625c:	4b ff f0 d1 	bl      fff7532c <_ZL8reduce32m>
fff76260:	90 7f 00 00 	stw     r3,0(r31)
**************************************************/
static
void __attribute__ ((noinline)) poly_reduce(poly *a) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
fff76264:	04 5e ff fa 	cmpwbne r30,r31,fff76258 <_ZL11poly_reduceP4poly+0x18>
        a->coeffs[i] = reduce32(a->coeffs[i]);
}
fff76268:	80 01 00 14 	lwz     r0,20(r1)
fff7626c:	17 c1 00 08 	lvd     d30,8(r1)
fff76270:	7c 08 03 a6 	mtlr    r0
fff76274:	38 21 00 10 	addi    r1,r1,16
fff76278:	4e 80 00 20 	blr

fff7627c <_ZL10poly_csubqP4poly>:
*              coefficient is bigger than Q.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_csubq(poly *a) {
fff7627c:	94 21 ff f0 	stwu    r1,-16(r1)
fff76280:	7c 08 02 a6 	mflr    r0
fff76284:	1b c1 00 08 	stvd    d30,8(r1)
fff76288:	90 01 00 14 	stw     r0,20(r1)
fff7628c:	3b e3 ff fc 	addi    r31,r3,-4
fff76290:	3b c3 03 fc 	addi    r30,r3,1020
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
        a->coeffs[i] = csubq(a->coeffs[i]);
fff76294:	84 7f 00 04 	lwzu    r3,4(r31)
fff76298:	4b ff f0 ad 	bl      fff75344 <_ZL5csubqm>
fff7629c:	90 7f 00 00 	stw     r3,0(r31)
**************************************************/
static
void __attribute__ ((noinline)) poly_csubq(poly *a) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
fff762a0:	04 5e ff fa 	cmpwbne r30,r31,fff76294 <_ZL10poly_csubqP4poly+0x18>
        a->coeffs[i] = csubq(a->coeffs[i]);
}
fff762a4:	80 01 00 14 	lwz     r0,20(r1)
fff762a8:	17 c1 00 08 	lvd     d30,8(r1)
fff762ac:	7c 08 03 a6 	mtlr    r0
fff762b0:	38 21 00 10 	addi    r1,r1,16
fff762b4:	4e 80 00 20 	blr

fff762b8 <_ZL8poly_addP4polyPKS_S2_>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
static
void __attribute__ ((noinline)) poly_add(poly *c, const poly *a, const poly *b)  {
fff762b8:	39 40 01 00 	li      r10,256
fff762bc:	7d 49 03 a6 	mtctr   r10
fff762c0:	39 20 00 00 	li      r9,0
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
fff762c4:	7d 05 48 2e 	lwzx    r8,r5,r9
fff762c8:	7d 44 48 2e 	lwzx    r10,r4,r9
fff762cc:	7d 48 52 14 	add     r10,r8,r10
fff762d0:	7d 43 49 2e 	stwx    r10,r3,r9
fff762d4:	39 29 00 04 	addi    r9,r9,4
**************************************************/
static
void __attribute__ ((noinline)) poly_add(poly *c, const poly *a, const poly *b)  {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
fff762d8:	42 00 ff ec 	bdnz    fff762c4 <_ZL8poly_addP4polyPKS_S2_+0xc>
        c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
}
fff762dc:	4e 80 00 20 	blr

fff762e0 <_ZL8poly_subP4polyPKS_S2_>:
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_sub(poly *c, const poly *a, const poly *b) {
fff762e0:	39 20 01 00 	li      r9,256
fff762e4:	7d 29 03 a6 	mtctr   r9
fff762e8:	39 40 00 00 	li      r10,0
fff762ec:	7d 24 50 2e 	lwzx    r9,r4,r10
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = a->coeffs[i] + 2*DIL_Q - b->coeffs[i];
fff762f0:	7d 05 50 2e 	lwzx    r8,r5,r10
fff762f4:	3d 29 01 00 	addis   r9,r9,256
fff762f8:	39 29 c0 02 	addi    r9,r9,-16382
fff762fc:	7d 28 48 50 	subf    r9,r8,r9
fff76300:	7d 23 51 2e 	stwx    r9,r3,r10
fff76304:	39 4a 00 04 	addi    r10,r10,4
**************************************************/
static
void __attribute__ ((noinline)) poly_sub(poly *c, const poly *a, const poly *b) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
fff76308:	42 00 ff e4 	bdnz    fff762ec <_ZL8poly_subP4polyPKS_S2_+0xc>
        c->coeffs[i] = a->coeffs[i] + 2*DIL_Q - b->coeffs[i];
}
fff7630c:	4e 80 00 20 	blr

fff76310 <_ZL11poly_shiftlP4poly>:
*              input coefficients to be less than 2^{32-D}.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_shiftl(poly *a) {
fff76310:	39 20 01 00 	li      r9,256
fff76314:	7d 29 03 a6 	mtctr   r9
fff76318:	38 63 ff fc 	addi    r3,r3,-4
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
        a->coeffs[i] <<= DIL_D;
fff7631c:	85 23 00 04 	lwzu    r9,4(r3)
fff76320:	55 29 70 22 	rlwinm  r9,r9,14,0,17
fff76324:	91 23 00 00 	stw     r9,0(r3)
**************************************************/
static
void __attribute__ ((noinline)) poly_shiftl(poly *a) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
fff76328:	42 00 ff f4 	bdnz    fff7631c <_ZL11poly_shiftlP4poly+0xc>
        a->coeffs[i] <<= DIL_D;
}
fff7632c:	4e 80 00 20 	blr

fff76330 <_ZL11poly_ntt256P4poly>:
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_ntt256(poly *a) {
    ntt256(a->coeffs);
fff76330:	4b ff f0 34 	b       fff75364 <_ZL6ntt256Pm>

fff76334 <_ZL18poly_invntt_tomontP4poly>:
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_invntt_tomont(poly *a) {
    invntt_tomont256(a->coeffs);
fff76334:	4b ff f1 40 	b       fff75474 <_ZL16invntt_tomont256Pm>

fff76338 <_ZL25poly_pointwise_montgomeryP4polyPKS_S2_>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
fff76338:	94 21 ff e8 	stwu    r1,-24(r1)
fff7633c:	7c 08 02 a6 	mflr    r0
fff76340:	1b 81 00 08 	stvd    d28,8(r1)
fff76344:	90 01 00 1c 	stw     r0,28(r1)
fff76348:	1b c1 00 10 	stvd    d30,16(r1)
fff7634c:	7c 9d 23 78 	mr      r29,r4
fff76350:	7c 7e 1b 78 	mr      r30,r3
fff76354:	7c bc 2b 78 	mr      r28,r5
fff76358:	3b e0 00 00 	li      r31,0
    unsigned int i;

    for (i = 0; i < DIL_N; ++i) {
        c->coeffs[i] = montgomery_reduce((uint64_t) a->coeffs[i] *
                                                    b->coeffs[i]);
fff7635c:	7c dd f8 2e 	lwzx    r6,r29,r31
fff76360:	7c 9c f8 2e 	lwzx    r4,r28,r31
fff76364:	38 a0 00 00 	li      r5,0
fff76368:	38 60 00 00 	li      r3,0
fff7636c:	48 00 41 35 	bl      fff7a4a0 <__muldi3>
fff76370:	4b ff ef 65 	bl      fff752d4 <_ZL17montgomery_reducey>
**************************************************/
static
void __attribute__ ((noinline)) poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i) {
fff76374:	2c 1f 03 fc 	cmpwi   r31,1020
        c->coeffs[i] = montgomery_reduce((uint64_t) a->coeffs[i] *
                                                    b->coeffs[i]);
fff76378:	7c 7e f9 2e 	stwx    r3,r30,r31
**************************************************/
static
void __attribute__ ((noinline)) poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i) {
fff7637c:	3b ff 00 04 	addi    r31,r31,4
fff76380:	40 82 ff dc 	bne     fff7635c <_ZL25poly_pointwise_montgomeryP4polyPKS_S2_+0x24>
        c->coeffs[i] = montgomery_reduce((uint64_t) a->coeffs[i] *
                                                    b->coeffs[i]);
    }
}
fff76384:	80 01 00 1c 	lwz     r0,28(r1)
fff76388:	17 81 00 08 	lvd     d28,8(r1)
fff7638c:	7c 08 03 a6 	mtlr    r0
fff76390:	17 c1 00 10 	lvd     d30,16(r1)
fff76394:	38 21 00 18 	addi    r1,r1,24
fff76398:	4e 80 00 20 	blr

fff7639c <_ZL13poly_use_hintP4polyPKS_S2_>:
* Arguments:   - poly *b: pointer to output polynomial with corrected high bits
*              - const poly *a: pointer to input polynomial
*              - const poly *h: pointer to input hint polynomial
**************************************************/
static
void __attribute__ ((noinline)) poly_use_hint(poly *b, const poly *a, const poly *h) {
fff7639c:	94 21 ff e8 	stwu    r1,-24(r1)
fff763a0:	7c 08 02 a6 	mflr    r0
fff763a4:	1b 81 00 08 	stvd    d28,8(r1)
fff763a8:	90 01 00 1c 	stw     r0,28(r1)
fff763ac:	1b c1 00 10 	stvd    d30,16(r1)
fff763b0:	7c 9c 23 78 	mr      r28,r4
fff763b4:	7c 7e 1b 78 	mr      r30,r3
fff763b8:	7c bd 2b 78 	mr      r29,r5
fff763bc:	3b e0 00 00 	li      r31,0
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
        b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
fff763c0:	7c 7c f8 2e 	lwzx    r3,r28,r31
fff763c4:	7c 9d f8 2e 	lwzx    r4,r29,r31
fff763c8:	4b ff fe 21 	bl      fff761e8 <_ZL8use_hintmj>
**************************************************/
static
void __attribute__ ((noinline)) poly_use_hint(poly *b, const poly *a, const poly *h) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
fff763cc:	2c 1f 03 fc 	cmpwi   r31,1020
        b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
fff763d0:	7c 7e f9 2e 	stwx    r3,r30,r31
**************************************************/
static
void __attribute__ ((noinline)) poly_use_hint(poly *b, const poly *a, const poly *h) {
    unsigned int i;

    for (i = 0; i < DIL_N; ++i)
fff763d4:	3b ff 00 04 	addi    r31,r31,4
fff763d8:	40 82 ff e8 	bne     fff763c0 <_ZL13poly_use_hintP4polyPKS_S2_+0x24>
        b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
}
fff763dc:	80 01 00 1c 	lwz     r0,28(r1)
fff763e0:	17 81 00 08 	lvd     d28,8(r1)
fff763e4:	7c 08 03 a6 	mtlr    r0
fff763e8:	17 c1 00 10 	lvd     d30,16(r1)
fff763ec:	38 21 00 18 	addi    r1,r1,24
fff763f0:	4e 80 00 20 	blr

fff763f4 <_ZL12poly_chknormPK4polym>:
     data but we must not leak sign of the centralized representative. */

    for (i = 0; i < DIL_N; ++i) {
        /* Absolute value of centralized representative */

        t =  (DIL_Q-1)/2 - a->coeffs[i];
fff763f4:	39 20 01 00 	li      r9,256
fff763f8:	7d 29 03 a6 	mtctr   r9
fff763fc:	3d 40 00 3f 	lis     r10,63
fff76400:	38 63 ff fc 	addi    r3,r3,-4
fff76404:	61 4a f0 00 	ori     r10,r10,61440
fff76408:	85 23 00 04 	lwzu    r9,4(r3)
fff7640c:	7d 29 50 50 	subf    r9,r9,r10
        t ^= (int32_t)t >> 31;
fff76410:	7d 28 fe 70 	srawi   r8,r9,31
fff76414:	7d 09 4a 78 	xor     r9,r8,r9
        t =  (DIL_Q-1)/2 - t;
fff76418:	7d 29 50 50 	subf    r9,r9,r10

        if (t >= B) {
fff7641c:	05 09 20 08 	cmplwbge r9,r4,fff7642c <_ZL12poly_chknormPK4polym+0x38>

    /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak sign of the centralized representative. */

    for (i = 0; i < DIL_N; ++i) {
fff76420:	42 00 ff e8 	bdnz    fff76408 <_ZL12poly_chknormPK4polym+0x14>
        if (t >= B) {
            return 1;
        }
    }

    return 0;
fff76424:	38 60 00 00 	li      r3,0
fff76428:	4e 80 00 20 	blr
        t =  (DIL_Q-1)/2 - a->coeffs[i];
        t ^= (int32_t)t >> 31;
        t =  (DIL_Q-1)/2 - t;

        if (t >= B) {
            return 1;
fff7642c:	38 60 00 01 	li      r3,1
        }
    }

    return 0;
}
fff76430:	4e 80 00 20 	blr

fff76434 <_ZL11rej_uniformPmjPKhj>:
**************************************************/
static unsigned int  __attribute__ ((noinline)) rej_uniform(uint32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
fff76434:	94 21 ff f0 	stwu    r1,-16(r1)
    unsigned int ctr = 0, pos = 0;
fff76438:	38 e0 00 00 	li      r7,0
**************************************************/
static unsigned int  __attribute__ ((noinline)) rej_uniform(uint32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
fff7643c:	1b c1 00 08 	stvd    d30,8(r1)
        t |= (uint32_t)buf[pos++] << 8;
        t |= (uint32_t)buf[pos++] << 16;

        t &= 0x7FFFFF;

        if (t < DIL_Q)
fff76440:	3f e0 00 7f 	lis     r31,127
static unsigned int  __attribute__ ((noinline)) rej_uniform(uint32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
    unsigned int ctr = 0, pos = 0;
fff76444:	39 00 00 00 	li      r8,0
        t |= (uint32_t)buf[pos++] << 8;
        t |= (uint32_t)buf[pos++] << 16;

        t &= 0x7FFFFF;

        if (t < DIL_Q)
fff76448:	63 ff e0 00 	ori     r31,r31,57344
                                unsigned int buflen)
{
    unsigned int ctr = 0, pos = 0;
    uint32_t t;

    while ((ctr < len) && (pos + 3 <= buflen)) {
fff7644c:	05 08 20 22 	cmplwbge r8,r4,fff76490 <_ZL11rej_uniformPmjPKhj+0x5c>
fff76450:	38 e7 00 03 	addi    r7,r7,3
fff76454:	05 a7 30 1e 	cmplwbgt r7,r6,fff76490 <_ZL11rej_uniformPmjPKhj+0x5c>
        t  = buf[pos++];

        t |= (uint32_t)buf[pos++] << 8;
fff76458:	89 25 00 01 	lbz     r9,1(r5)
{
    unsigned int ctr = 0, pos = 0;
    uint32_t t;

    while ((ctr < len) && (pos + 3 <= buflen)) {
        t  = buf[pos++];
fff7645c:	89 45 00 00 	lbz     r10,0(r5)

        t |= (uint32_t)buf[pos++] << 8;
fff76460:	55 20 40 2e 	rlwinm  r0,r9,8,0,23
        t |= (uint32_t)buf[pos++] << 16;
fff76464:	89 25 00 02 	lbz     r9,2(r5)
fff76468:	55 29 80 1e 	rlwinm  r9,r9,16,0,15
fff7646c:	7c 09 4b 78 	or      r9,r0,r9
fff76470:	7d 29 53 78 	or      r9,r9,r10

        t &= 0x7FFFFF;
fff76474:	55 29 02 7e 	clrlwi  r9,r9,9

        if (t < DIL_Q)
fff76478:	05 a9 f8 08 	cmplwbgt r9,r31,fff76488 <_ZL11rej_uniformPmjPKhj+0x54>
            a[ctr++] = t;
fff7647c:	55 0a 10 3a 	rlwinm  r10,r8,2,0,29
fff76480:	7d 23 51 2e 	stwx    r9,r3,r10
fff76484:	39 08 00 01 	addi    r8,r8,1
fff76488:	38 a5 00 03 	addi    r5,r5,3
fff7648c:	4b ff ff c0 	b       fff7644c <_ZL11rej_uniformPmjPKhj+0x18>
    }

    return ctr;
}
fff76490:	17 c1 00 08 	lvd     d30,8(r1)
fff76494:	7d 03 43 78 	mr      r3,r8
fff76498:	38 21 00 10 	addi    r1,r1,16
fff7649c:	4e 80 00 20 	blr

fff764a0 <_ZL13polyt1_unpackP4polyPKh>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
static
void __attribute__ ((noinline)) polyt1_unpack(poly *r, const uint8_t *a) {
fff764a0:	39 20 00 20 	li      r9,32
fff764a4:	7d 29 03 a6 	mtctr   r9
fff764a8:	38 84 00 01 	addi    r4,r4,1
  unsigned int i;

  for (i = 0; i < DIL_N/8; ++i) {
    r->coeffs[8*i+0] = ((a[9*i+0] >> 0) | ((uint32_t)a[9*i+1] << 8)) & 0x1FF;
fff764ac:	89 24 00 00 	lbz     r9,0(r4)
fff764b0:	89 44 ff ff 	lbz     r10,-1(r4)
fff764b4:	55 29 45 ee 	rlwinm  r9,r9,8,23,23
fff764b8:	7d 29 53 78 	or      r9,r9,r10
fff764bc:	91 23 00 00 	stw     r9,0(r3)
fff764c0:	38 84 00 09 	addi    r4,r4,9
    r->coeffs[8*i+1] = ((a[9*i+1] >> 1) | ((uint32_t)a[9*i+2] << 7)) & 0x1FF;
fff764c4:	89 24 ff f7 	lbz     r9,-9(r4)
fff764c8:	38 63 00 20 	addi    r3,r3,32
fff764cc:	7d 2a 0e 70 	srawi   r10,r9,1
fff764d0:	89 24 ff f8 	lbz     r9,-8(r4)
fff764d4:	55 29 3d f0 	rlwinm  r9,r9,7,23,24
fff764d8:	7d 29 53 78 	or      r9,r9,r10
fff764dc:	91 23 ff e4 	stw     r9,-28(r3)
    r->coeffs[8*i+2] = ((a[9*i+2] >> 2) | ((uint32_t)a[9*i+3] << 6)) & 0x1FF;
fff764e0:	89 24 ff f8 	lbz     r9,-8(r4)
fff764e4:	7d 2a 16 70 	srawi   r10,r9,2
fff764e8:	89 24 ff f9 	lbz     r9,-7(r4)
fff764ec:	55 29 35 f2 	rlwinm  r9,r9,6,23,25
fff764f0:	7d 29 53 78 	or      r9,r9,r10
fff764f4:	91 23 ff e8 	stw     r9,-24(r3)
    r->coeffs[8*i+3] = ((a[9*i+3] >> 3) | ((uint32_t)a[9*i+4] << 5)) & 0x1FF;
fff764f8:	89 24 ff f9 	lbz     r9,-7(r4)
fff764fc:	7d 2a 1e 70 	srawi   r10,r9,3
fff76500:	89 24 ff fa 	lbz     r9,-6(r4)
fff76504:	55 29 2d f4 	rlwinm  r9,r9,5,23,26
fff76508:	7d 29 53 78 	or      r9,r9,r10
fff7650c:	91 23 ff ec 	stw     r9,-20(r3)
    r->coeffs[8*i+4] = ((a[9*i+4] >> 4) | ((uint32_t)a[9*i+5] << 4)) & 0x1FF;
fff76510:	89 24 ff fa 	lbz     r9,-6(r4)
fff76514:	7d 2a 26 70 	srawi   r10,r9,4
fff76518:	89 24 ff fb 	lbz     r9,-5(r4)
fff7651c:	55 29 25 f6 	rlwinm  r9,r9,4,23,27
fff76520:	7d 29 53 78 	or      r9,r9,r10
fff76524:	91 23 ff f0 	stw     r9,-16(r3)
    r->coeffs[8*i+5] = ((a[9*i+5] >> 5) | ((uint32_t)a[9*i+6] << 3)) & 0x1FF;
fff76528:	89 24 ff fb 	lbz     r9,-5(r4)
fff7652c:	7d 2a 2e 70 	srawi   r10,r9,5
fff76530:	89 24 ff fc 	lbz     r9,-4(r4)
fff76534:	55 29 1d f8 	rlwinm  r9,r9,3,23,28
fff76538:	7d 29 53 78 	or      r9,r9,r10
fff7653c:	91 23 ff f4 	stw     r9,-12(r3)
    r->coeffs[8*i+6] = ((a[9*i+6] >> 6) | ((uint32_t)a[9*i+7] << 2)) & 0x1FF;
fff76540:	89 24 ff fc 	lbz     r9,-4(r4)
fff76544:	7d 2a 36 70 	srawi   r10,r9,6
fff76548:	89 24 ff fd 	lbz     r9,-3(r4)
fff7654c:	55 29 15 fa 	rlwinm  r9,r9,2,23,29
fff76550:	7d 29 53 78 	or      r9,r9,r10
fff76554:	91 23 ff f8 	stw     r9,-8(r3)
    r->coeffs[8*i+7] = ((a[9*i+7] >> 7) | ((uint32_t)a[9*i+8] << 1)) & 0x1FF;
fff76558:	89 24 ff fd 	lbz     r9,-3(r4)
fff7655c:	7d 2a 3e 70 	srawi   r10,r9,7
fff76560:	89 24 ff fe 	lbz     r9,-2(r4)
fff76564:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
fff76568:	7d 49 4b 78 	or      r9,r10,r9
fff7656c:	91 23 ff fc 	stw     r9,-4(r3)
**************************************************/
static
void __attribute__ ((noinline)) polyt1_unpack(poly *r, const uint8_t *a) {
  unsigned int i;

  for (i = 0; i < DIL_N/8; ++i) {
fff76570:	42 00 ff 3c 	bdnz    fff764ac <_ZL13polyt1_unpackP4polyPKh+0xc>
    r->coeffs[8*i+4] = ((a[9*i+4] >> 4) | ((uint32_t)a[9*i+5] << 4)) & 0x1FF;
    r->coeffs[8*i+5] = ((a[9*i+5] >> 5) | ((uint32_t)a[9*i+6] << 3)) & 0x1FF;
    r->coeffs[8*i+6] = ((a[9*i+6] >> 6) | ((uint32_t)a[9*i+7] << 2)) & 0x1FF;
    r->coeffs[8*i+7] = ((a[9*i+7] >> 7) | ((uint32_t)a[9*i+8] << 1)) & 0x1FF;
  }
}
fff76574:	4e 80 00 20 	blr

fff76578 <_ZL12polyz_unpackP4polyPKh>:
        r->coeffs[2*i+1]  = a[5*i+2] >> 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;

        r->coeffs[2*i+0] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+0];
        r->coeffs[2*i+0] += ((int32_t)r->coeffs[2*i+0] >> 31) & DIL_Q;
fff76578:	39 20 00 80 	li      r9,128
fff7657c:	7d 29 03 a6 	mtctr   r9

        r->coeffs[2*i+1]  = a[5*i+2] >> 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;

        r->coeffs[2*i+0] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+0];
fff76580:	3c c0 00 07 	lis     r6,7
        r->coeffs[2*i+0] += ((int32_t)r->coeffs[2*i+0] >> 31) & DIL_Q;
fff76584:	3c e0 00 7f 	lis     r7,127
fff76588:	38 84 00 02 	addi    r4,r4,2

        r->coeffs[2*i+1]  = a[5*i+2] >> 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;

        r->coeffs[2*i+0] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+0];
fff7658c:	60 c6 fd ff 	ori     r6,r6,65023
        r->coeffs[2*i+0] += ((int32_t)r->coeffs[2*i+0] >> 31) & DIL_Q;
fff76590:	60 e7 e0 01 	ori     r7,r7,57345
static
void __attribute__ ((noinline)) polyz_unpack(poly *r, const unsigned char *a) {
    unsigned int i;

    for (i = 0; i < DIL_N/2; ++i) {
        r->coeffs[2*i+0]  = a[5*i+0];
fff76594:	89 04 ff fe 	lbz     r8,-2(r4)
fff76598:	38 63 00 08 	addi    r3,r3,8
fff7659c:	91 03 ff f8 	stw     r8,-8(r3)
fff765a0:	38 84 00 05 	addi    r4,r4,5
        r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
fff765a4:	89 24 ff fa 	lbz     r9,-6(r4)
fff765a8:	55 29 40 2e 	rlwinm  r9,r9,8,0,23
fff765ac:	7d 2a 43 78 	or      r10,r9,r8
fff765b0:	91 43 ff f8 	stw     r10,-8(r3)
        r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
fff765b4:	89 24 ff fb 	lbz     r9,-5(r4)
fff765b8:	55 29 83 1e 	rlwinm  r9,r9,16,12,15
        r->coeffs[2*i+0] &= 0xFFFFF;
fff765bc:	7d 29 53 78 	or      r9,r9,r10
fff765c0:	91 23 ff f8 	stw     r9,-8(r3)

        r->coeffs[2*i+1]  = a[5*i+2] >> 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;

        r->coeffs[2*i+0] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+0];
fff765c4:	7d 29 30 50 	subf    r9,r9,r6
        r->coeffs[2*i+0]  = a[5*i+0];
        r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
        r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
        r->coeffs[2*i+0] &= 0xFFFFF;

        r->coeffs[2*i+1]  = a[5*i+2] >> 4;
fff765c8:	89 04 ff fb 	lbz     r8,-5(r4)
fff765cc:	7d 08 26 70 	srawi   r8,r8,4
fff765d0:	91 03 ff fc 	stw     r8,-4(r3)
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
fff765d4:	89 44 ff fc 	lbz     r10,-4(r4)
fff765d8:	55 4a 20 36 	rlwinm  r10,r10,4,0,27
fff765dc:	7d 08 53 78 	or      r8,r8,r10
fff765e0:	91 03 ff fc 	stw     r8,-4(r3)
        r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
fff765e4:	89 44 ff fd 	lbz     r10,-3(r4)
fff765e8:	55 4a 60 26 	rlwinm  r10,r10,12,0,19
fff765ec:	7d 0a 53 78 	or      r10,r8,r10

        r->coeffs[2*i+0] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+0];
        r->coeffs[2*i+0] += ((int32_t)r->coeffs[2*i+0] >> 31) & DIL_Q;
fff765f0:	7d 28 fe 70 	srawi   r8,r9,31
fff765f4:	7d 08 38 38 	and     r8,r8,r7
fff765f8:	7d 28 4a 14 	add     r9,r8,r9
fff765fc:	91 23 ff f8 	stw     r9,-8(r3)
        r->coeffs[2*i+1] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+1];
fff76600:	7d 2a 30 50 	subf    r9,r10,r6
        r->coeffs[2*i+1] += ((int32_t)r->coeffs[2*i+1] >> 31) & DIL_Q;
fff76604:	7d 2a fe 70 	srawi   r10,r9,31
fff76608:	7d 4a 38 38 	and     r10,r10,r7
fff7660c:	7d 2a 4a 14 	add     r9,r10,r9
fff76610:	91 23 ff fc 	stw     r9,-4(r3)
**************************************************/
static
void __attribute__ ((noinline)) polyz_unpack(poly *r, const unsigned char *a) {
    unsigned int i;

    for (i = 0; i < DIL_N/2; ++i) {
fff76614:	42 00 ff 80 	bdnz    fff76594 <_ZL12polyz_unpackP4polyPKh+0x1c>
        r->coeffs[2*i+0] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+0];
        r->coeffs[2*i+0] += ((int32_t)r->coeffs[2*i+0] >> 31) & DIL_Q;
        r->coeffs[2*i+1] =  DIL_GAMMA1 - 1 - r->coeffs[2*i+1];
        r->coeffs[2*i+1] += ((int32_t)r->coeffs[2*i+1] >> 31) & DIL_Q;
    }
}
fff76618:	4e 80 00 20 	blr

fff7661c <_ZL19dil_signature_bytesj>:
// ref.impl:
// CRYPTO_BYTES == (L*POLYZ_PACKEDBYTES + OMEGA + K + N/8 + 8)
// restricted to L==K-1
//
static size_t __attribute__ ((noinline))dil_signature_bytes(unsigned int k)
{
fff7661c:	38 63 ff fb 	addi    r3,r3,-5
fff76620:	28 03 00 03 	cmplwi  r3,3
fff76624:	41 81 00 18 	bgt     fff7663c <_ZL19dil_signature_bytesj+0x20>
fff76628:	3d 20 ff f7 	lis     r9,-9
fff7662c:	39 29 77 94 	addi    r9,r9,30612
fff76630:	54 63 08 3c 	rlwinm  r3,r3,1,0,30
fff76634:	7c 69 1a 2e 	lhzx    r3,r9,r3
fff76638:	4e 80 00 20 	blr
fff7663c:	38 60 00 00 	li      r3,0
    case 8: return 4668;

    default:
        return 0;
    }
}
fff76640:	4e 80 00 20 	blr

fff76644 <_ZL33polyvec7_pointwise_acc_montgomeryP4polyPK8polyvec7S3_>:
/*------------------------------------*/
static void
polyvec7_pointwise_acc_montgomery(poly *w,
                        const polyvec7 *u,
                        const polyvec7 *v)
{
fff76644:	94 21 fb e8 	stwu    r1,-1048(r1)
fff76648:	7c 08 02 a6 	mflr    r0
fff7664c:	1b 81 04 08 	stvd    d28,1032(r1)
fff76650:	1b c1 04 10 	stvd    d30,1040(r1)
fff76654:	90 01 04 1c 	stw     r0,1052(r1)
fff76658:	7c 7e 1b 78 	mr      r30,r3
fff7665c:	7c 9c 23 78 	mr      r28,r4
fff76660:	7c bd 2b 78 	mr      r29,r5
    unsigned int i;
    poly tmp;

    poly_pointwise_montgomery(w, &(u->vec[0]), &(v->vec[0]));

    for (i = 1; i < 7; ++i) {
fff76664:	3b e0 00 01 	li      r31,1
                        const polyvec7 *v)
{
    unsigned int i;
    poly tmp;

    poly_pointwise_montgomery(w, &(u->vec[0]), &(v->vec[0]));
fff76668:	4b ff fc d1 	bl      fff76338 <_ZL25poly_pointwise_montgomeryP4polyPKS_S2_>
fff7666c:	57 e5 50 2a 	rlwinm  r5,r31,10,0,21

    for (i = 1; i < 7; ++i) {
        poly_pointwise_montgomery(&tmp, &(u->vec[i]), &(v->vec[i]));
fff76670:	7c 9c 2a 14 	add     r4,r28,r5
fff76674:	38 61 00 08 	addi    r3,r1,8
fff76678:	7c bd 2a 14 	add     r5,r29,r5
fff7667c:	4b ff fc bd 	bl      fff76338 <_ZL25poly_pointwise_montgomeryP4polyPKS_S2_>
    unsigned int i;
    poly tmp;

    poly_pointwise_montgomery(w, &(u->vec[0]), &(v->vec[0]));

    for (i = 1; i < 7; ++i) {
fff76680:	3b ff 00 01 	addi    r31,r31,1
        poly_pointwise_montgomery(&tmp, &(u->vec[i]), &(v->vec[i]));
        poly_add(w, w, &tmp);
fff76684:	7f c3 f3 78 	mr      r3,r30
fff76688:	7f c4 f3 78 	mr      r4,r30
fff7668c:	38 a1 00 08 	addi    r5,r1,8
fff76690:	4b ff fc 29 	bl      fff762b8 <_ZL8poly_addP4polyPKS_S2_>
    unsigned int i;
    poly tmp;

    poly_pointwise_montgomery(w, &(u->vec[0]), &(v->vec[0]));

    for (i = 1; i < 7; ++i) {
fff76694:	06 5f 3f ec 	cmpwibne r31,7,fff7666c <_ZL33polyvec7_pointwise_acc_montgomeryP4polyPK8polyvec7S3_+0x28>
        poly_pointwise_montgomery(&tmp, &(u->vec[i]), &(v->vec[i]));
        poly_add(w, w, &tmp);
    }
}
fff76698:	80 01 04 1c 	lwz     r0,1052(r1)
fff7669c:	17 81 04 08 	lvd     d28,1032(r1)
fff766a0:	7c 08 03 a6 	mtlr    r0
fff766a4:	17 c1 04 10 	lvd     d30,1040(r1)
fff766a8:	38 21 04 18 	addi    r1,r1,1048
fff766ac:	4e 80 00 20 	blr

fff766b0 <_ZL14keccak_squeezePhjPyjj.constprop.7>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: number of bytes in current block already squeezed
*
* Returns new position pos in current block
**************************************************/
static unsigned int keccak_squeeze(uint8_t *out,
fff766b0:	94 21 ff c8 	stwu    r1,-56(r1)
fff766b4:	7c 08 02 a6 	mflr    r0
fff766b8:	1b c1 00 30 	stvd    d30,48(r1)
                                   unsigned int pos)
{
  unsigned int i;
  uint8_t t[8];

  if (pos & 7) {
fff766bc:	54 be 07 7e 	clrlwi  r30,r5,29
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: number of bytes in current block already squeezed
*
* Returns new position pos in current block
**************************************************/
static unsigned int keccak_squeeze(uint8_t *out,
fff766c0:	1b 81 00 28 	stvd    d28,40(r1)
fff766c4:	90 01 00 3c 	stw     r0,60(r1)
fff766c8:	7c 6a 1b 78 	mr      r10,r3
fff766cc:	7c 9c 23 78 	mr      r28,r4
fff766d0:	7c bf 2b 78 	mr      r31,r5
                                   unsigned int pos)
{
  unsigned int i;
  uint8_t t[8];

  if (pos & 7) {
fff766d4:	39 20 00 30 	li      r9,48
fff766d8:	06 de 00 2c 	bwz     r30,fff76730 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x80>
    store64(t,s[pos/8]);
fff766dc:	54 a9 00 38 	rlwinm  r9,r5,0,0,28
fff766e0:	7d 24 4a 14 	add     r9,r4,r9
fff766e4:	14 a9 00 00 	lvd     d5,0(r9)
fff766e8:	3b a1 00 08 	addi    r29,r1,8
fff766ec:	7f a3 eb 78 	mr      r3,r29
fff766f0:	91 41 00 24 	stw     r10,36(r1)
fff766f4:	4b ff d2 91 	bl      fff73984 <_ZL7store64Phy>
fff766f8:	20 fe 00 08 	subfic  r7,r30,8
fff766fc:	7c e9 03 a6 	mtctr   r7
fff76700:	81 41 00 24 	lwz     r10,36(r1)
fff76704:	7f c9 f3 78 	mr      r9,r30
fff76708:	7d 1e 50 50 	subf    r8,r30,r10
    i = pos & 7;
    while(i < 8 && outlen > 0) {
      *out++ = t[i++];
fff7670c:	7c fd 48 ae 	lbzx    r7,r29,r9
fff76710:	7c e8 49 ae 	stbx    r7,r8,r9
fff76714:	39 29 00 01 	addi    r9,r9,1
fff76718:	42 00 ff f4 	bdnz    fff7670c <_ZL14keccak_squeezePhjPyjj.constprop.7+0x5c>
fff7671c:	21 3e 00 08 	subfic  r9,r30,8
fff76720:	3b ff 00 08 	addi    r31,r31,8
fff76724:	7d 4a 4a 14 	add     r10,r10,r9
fff76728:	7f fe f8 50 	subf    r31,r30,r31
fff7672c:	39 3e 00 28 	addi    r9,r30,40
      outlen--;
      pos++;
    }
  }

  if (pos && outlen >= r-pos) {
fff76730:	06 df 00 30 	bwz     r31,fff76790 <_ZL14keccak_squeezePhjPyjj.constprop.7+0xe0>
fff76734:	23 bf 00 88 	subfic  r29,r31,136
fff76738:	05 89 e8 2c 	cmplwblt r9,r29,fff76790 <_ZL14keccak_squeezePhjPyjj.constprop.7+0xe0>
fff7673c:	57 a7 00 38 	rlwinm  r7,r29,0,0,28
fff76740:	57 e4 00 38 	rlwinm  r4,r31,0,0,28
    for (i=0;i<(r-pos)/8;i++)
      store64(out+8*i,s[pos/8+i]);
fff76744:	3b c0 00 00 	li      r30,0
      pos++;
    }
  }

  if (pos && outlen >= r-pos) {
    for (i=0;i<(r-pos)/8;i++)
fff76748:	04 de 38 1c 	cmpwbeq r30,r7,fff76780 <_ZL14keccak_squeezePhjPyjj.constprop.7+0xd0>
fff7674c:	7d 1e 22 14 	add     r8,r30,r4
fff76750:	7d 1c 42 14 	add     r8,r28,r8
      store64(out+8*i,s[pos/8+i]);
fff76754:	14 a8 00 00 	lvd     d5,0(r8)
fff76758:	7c 6a f2 14 	add     r3,r10,r30
fff7675c:	90 81 00 18 	stw     r4,24(r1)
fff76760:	90 e1 00 1c 	stw     r7,28(r1)
fff76764:	19 21 00 20 	stvd    d9,32(r1)
fff76768:	3b de 00 08 	addi    r30,r30,8
fff7676c:	4b ff d2 19 	bl      fff73984 <_ZL7store64Phy>
fff76770:	15 21 00 20 	lvd     d9,32(r1)
fff76774:	80 e1 00 1c 	lwz     r7,28(r1)
fff76778:	80 81 00 18 	lwz     r4,24(r1)
fff7677c:	4b ff ff cc 	b       fff76748 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x98>
fff76780:	7d 3f 4a 14 	add     r9,r31,r9
    out += r-pos;
fff76784:	7d 4a ea 14 	add     r10,r10,r29
    outlen -= r-pos;
fff76788:	39 29 ff 78 	addi    r9,r9,-136
    pos = 0;
fff7678c:	3b e0 00 00 	li      r31,0
  }

  while(outlen >= r) {
    KeccakF1600_StatePermute(s);
fff76790:	7d 3e 4b 78 	mr      r30,r9
    out += r-pos;
    outlen -= r-pos;
    pos = 0;
  }

  while(outlen >= r) {
fff76794:	28 1e 00 87 	cmplwi  r30,135
fff76798:	7f be 48 50 	subf    r29,r30,r9
fff7679c:	7f aa ea 14 	add     r29,r10,r29
fff767a0:	40 81 00 50 	ble     fff767f0 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x140>
    KeccakF1600_StatePermute(s);
fff767a4:	7f 83 e3 78 	mr      r3,r28
fff767a8:	19 21 00 20 	stvd    d9,32(r1)
fff767ac:	4b ff d2 05 	bl      fff739b0 <_ZL24KeccakF1600_StatePermutePy>
fff767b0:	15 21 00 20 	lvd     d9,32(r1)
fff767b4:	39 00 00 00 	li      r8,0
fff767b8:	7c fc 42 14 	add     r7,r28,r8
    for (i=0;i<r/8;i++)
      store64(out+8*i,s[i]);
fff767bc:	14 a7 00 00 	lvd     d5,0(r7)
fff767c0:	7c 7d 42 14 	add     r3,r29,r8
fff767c4:	91 01 00 18 	stw     r8,24(r1)
fff767c8:	19 21 00 20 	stvd    d9,32(r1)
fff767cc:	4b ff d1 b9 	bl      fff73984 <_ZL7store64Phy>
    pos = 0;
  }

  while(outlen >= r) {
    KeccakF1600_StatePermute(s);
    for (i=0;i<r/8;i++)
fff767d0:	81 01 00 18 	lwz     r8,24(r1)
fff767d4:	81 21 00 20 	lwz     r9,32(r1)
fff767d8:	2c 08 00 80 	cmpwi   r8,128
fff767dc:	81 41 00 24 	lwz     r10,36(r1)
fff767e0:	39 08 00 08 	addi    r8,r8,8
fff767e4:	40 82 ff d4 	bne     fff767b8 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x108>
      store64(out+8*i,s[i]);
    out += r;
    outlen -= r;
fff767e8:	3b de ff 78 	addi    r30,r30,-136
fff767ec:	4b ff ff a8 	b       fff76794 <_ZL14keccak_squeezePhjPyjj.constprop.7+0xe4>
  }

  if (!outlen)
fff767f0:	7f e3 fb 78 	mr      r3,r31
fff767f4:	06 de 00 52 	bwz     r30,fff76898 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x1e8>
    return pos;
  else if (!pos)
fff767f8:	06 5f 00 06 	bwnz    r31,fff76804 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x154>
    KeccakF1600_StatePermute(s);
fff767fc:	7f 83 e3 78 	mr      r3,r28
fff76800:	4b ff d1 b1 	bl      fff739b0 <_ZL24KeccakF1600_StatePermutePy>
fff76804:	57 ca 00 38 	rlwinm  r10,r30,0,0,28
fff76808:	57 e7 00 38 	rlwinm  r7,r31,0,0,28

  for (i=0;i<outlen/8;i++)
    store64(out+8*i,s[pos/8+i]);
fff7680c:	39 20 00 00 	li      r9,0
  if (!outlen)
    return pos;
  else if (!pos)
    KeccakF1600_StatePermute(s);

  for (i=0;i<outlen/8;i++)
fff76810:	04 c9 50 18 	cmpwbeq r9,r10,fff76840 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x190>
fff76814:	7d 09 3a 14 	add     r8,r9,r7
fff76818:	7d 1c 42 14 	add     r8,r28,r8
    store64(out+8*i,s[pos/8+i]);
fff7681c:	14 a8 00 00 	lvd     d5,0(r8)
fff76820:	7c 7d 4a 14 	add     r3,r29,r9
fff76824:	90 e1 00 1c 	stw     r7,28(r1)
fff76828:	19 21 00 20 	stvd    d9,32(r1)
fff7682c:	4b ff d1 59 	bl      fff73984 <_ZL7store64Phy>
fff76830:	15 21 00 20 	lvd     d9,32(r1)
fff76834:	39 29 00 08 	addi    r9,r9,8
fff76838:	80 e1 00 1c 	lwz     r7,28(r1)
fff7683c:	4b ff ff d4 	b       fff76810 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x160>
  out += 8*i;
  outlen -= 8*i;
  pos += 8*i;
fff76840:	7f ea fa 14 	add     r31,r10,r31

  store64(t,s[pos/8]);
fff76844:	57 e9 00 38 	rlwinm  r9,r31,0,0,28
fff76848:	7f 9c 4a 14 	add     r28,r28,r9
fff7684c:	38 e1 00 08 	addi    r7,r1,8
    KeccakF1600_StatePermute(s);

  for (i=0;i<outlen/8;i++)
    store64(out+8*i,s[pos/8+i]);
  out += 8*i;
  outlen -= 8*i;
fff76850:	7f ca f0 50 	subf    r30,r10,r30
  pos += 8*i;

  store64(t,s[pos/8]);
fff76854:	14 bc 00 00 	lvd     d5,0(r28)
fff76858:	7c e3 3b 78 	mr      r3,r7
fff7685c:	3b de 00 01 	addi    r30,r30,1
fff76860:	90 e1 00 1c 	stw     r7,28(r1)
fff76864:	91 41 00 24 	stw     r10,36(r1)
fff76868:	4b ff d1 1d 	bl      fff73984 <_ZL7store64Phy>
fff7686c:	7f c9 03 a6 	mtctr   r30
fff76870:	80 e1 00 1c 	lwz     r7,28(r1)
fff76874:	81 41 00 24 	lwz     r10,36(r1)
  for (i=0;i<outlen;i++)
fff76878:	39 20 00 00 	li      r9,0
fff7687c:	42 40 00 18 	bdz     fff76894 <_ZL14keccak_squeezePhjPyjj.constprop.7+0x1e4>
    out[i] = t[i];
fff76880:	7c c7 48 ae 	lbzx    r6,r7,r9
fff76884:	7d 1d 52 14 	add     r8,r29,r10
fff76888:	7c c8 49 ae 	stbx    r6,r8,r9
  out += 8*i;
  outlen -= 8*i;
  pos += 8*i;

  store64(t,s[pos/8]);
  for (i=0;i<outlen;i++)
fff7688c:	39 29 00 01 	addi    r9,r9,1
fff76890:	4b ff ff ec 	b       fff7687c <_ZL14keccak_squeezePhjPyjj.constprop.7+0x1cc>
    out[i] = t[i];
  pos += outlen;
fff76894:	7c 7f 4a 14 	add     r3,r31,r9
  return pos;
}
fff76898:	80 01 00 3c 	lwz     r0,60(r1)
fff7689c:	17 81 00 28 	lvd     d28,40(r1)
fff768a0:	7c 08 03 a6 	mtlr    r0
fff768a4:	17 c1 00 30 	lvd     d30,48(r1)
fff768a8:	38 21 00 38 	addi    r1,r1,56
fff768ac:	4e 80 00 20 	blr

fff768b0 <_ZL15keccak_finalizePyjjh.constprop.8>:
* Arguments:   - uint64_t *s:      pointer to Keccak state
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
fff768b0:	94 21 ff e8 	stwu    r1,-24(r1)
{
  unsigned int i,j;

  i = pos >> 3;
  j = pos & 7;
  s[i] ^= (uint64_t)p << 8*j;
fff768b4:	54 a7 00 38 	rlwinm  r7,r5,0,0,28
* Arguments:   - uint64_t *s:      pointer to Keccak state
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
fff768b8:	1b 81 00 08 	stvd    d28,8(r1)
fff768bc:	1b c1 00 10 	stvd    d30,16(r1)
{
  unsigned int i,j;

  i = pos >> 3;
  j = pos & 7;
  s[i] ^= (uint64_t)p << 8*j;
fff768c0:	7f e3 3a 14 	add     r31,r3,r7
fff768c4:	81 5f 00 04 	lwz     r10,4(r31)
fff768c8:	7c c3 38 2e 	lwzx    r6,r3,r7
fff768cc:	3b 80 00 00 	li      r28,0
fff768d0:	3b a0 00 1f 	li      r29,31
fff768d4:	54 a8 1e b8 	rlwinm  r8,r5,3,26,28
fff768d8:	7f 88 40 76 	slvd    d8,d28,r8
fff768dc:	7d 4a 4a 78 	xor     r10,r10,r9
fff768e0:	7c c6 42 78 	xor     r6,r6,r8
fff768e4:	7c c3 39 2e 	stwx    r6,r3,r7
  s[r/8-1] ^= 1ULL << 63;
fff768e8:	54 84 00 38 	rlwinm  r4,r4,0,0,28
{
  unsigned int i,j;

  i = pos >> 3;
  j = pos & 7;
  s[i] ^= (uint64_t)p << 8*j;
fff768ec:	91 5f 00 04 	stw     r10,4(r31)
  s[r/8-1] ^= 1ULL << 63;
fff768f0:	38 84 ff f8 	addi    r4,r4,-8
fff768f4:	7d 23 20 2e 	lwzx    r9,r3,r4
fff768f8:	7d 43 22 14 	add     r10,r3,r4
fff768fc:	81 0a 00 04 	lwz     r8,4(r10)
fff76900:	3d 29 80 00 	addis   r9,r9,-32768
fff76904:	7d 23 21 2e 	stwx    r9,r3,r4
fff76908:	91 0a 00 04 	stw     r8,4(r10)
}
fff7690c:	17 81 00 08 	lvd     d28,8(r1)
fff76910:	17 c1 00 10 	lvd     d30,16(r1)
fff76914:	38 21 00 18 	addi    r1,r1,24
fff76918:	4e 80 00 20 	blr

fff7691c <_ZL17shake256_finalizeP12Keccak_state>:
*
* Arguments:   - Keccak_state *state: pointer to Keccak state
**************************************************/
static
void shake256_finalize(Keccak_state *state)
{
fff7691c:	94 21 ff f0 	stwu    r1,-16(r1)
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
fff76920:	80 a3 00 c8 	lwz     r5,200(r3)
*
* Arguments:   - Keccak_state *state: pointer to Keccak state
**************************************************/
static
void shake256_finalize(Keccak_state *state)
{
fff76924:	7c 08 02 a6 	mflr    r0
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
fff76928:	38 80 00 88 	li      r4,136
*
* Arguments:   - Keccak_state *state: pointer to Keccak state
**************************************************/
static
void shake256_finalize(Keccak_state *state)
{
fff7692c:	1b c1 00 08 	stvd    d30,8(r1)
fff76930:	90 01 00 14 	stw     r0,20(r1)
fff76934:	7c 7f 1b 78 	mr      r31,r3
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
fff76938:	4b ff ff 79 	bl      fff768b0 <_ZL15keccak_finalizePyjjh.constprop.8>
  state->pos = 0;
fff7693c:	39 20 00 00 	li      r9,0
fff76940:	91 3f 00 c8 	stw     r9,200(r31)
}
fff76944:	80 01 00 14 	lwz     r0,20(r1)
fff76948:	17 c1 00 08 	lvd     d30,8(r1)
fff7694c:	7c 08 03 a6 	mtlr    r0
fff76950:	38 21 00 10 	addi    r1,r1,16
fff76954:	4e 80 00 20 	blr

fff76958 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing mu
*              - const polyveck *w1: pointer to vector w1
**************************************************/
static
void __attribute__ ((noinline)) dil_challenge(poly *c,
fff76958:	94 21 fa d8 	stwu    r1,-1320(r1)
fff7695c:	7c 08 02 a6 	mflr    r0
fff76960:	1b c1 05 20 	stvd    d30,1312(r1)
                       DIL_VECT_MAX * DIL_POLYW1_PACKEDBYTES ];
    unsigned int i, b, pos;
    uint64_t signs = 0;
    Keccak_state state;

    memmove(buf, mu, DIL_CRHBYTES);
fff76964:	3b e1 00 08 	addi    r31,r1,8
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing mu
*              - const polyveck *w1: pointer to vector w1
**************************************************/
static
void __attribute__ ((noinline)) dil_challenge(poly *c,
fff76968:	7c a9 2b 78 	mr      r9,r5
fff7696c:	7c 7e 1b 78 	mr      r30,r3
                       DIL_VECT_MAX * DIL_POLYW1_PACKEDBYTES ];
    unsigned int i, b, pos;
    uint64_t signs = 0;
    Keccak_state state;

    memmove(buf, mu, DIL_CRHBYTES);
fff76970:	38 a0 00 30 	li      r5,48
fff76974:	7f e3 fb 78 	mr      r3,r31
fff76978:	91 21 05 10 	stw     r9,1296(r1)
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing mu
*              - const polyveck *w1: pointer to vector w1
**************************************************/
static
void __attribute__ ((noinline)) dil_challenge(poly *c,
fff7697c:	90 01 05 2c 	stw     r0,1324(r1)
fff76980:	1b 81 05 18 	stvd    d28,1304(r1)
                       DIL_VECT_MAX * DIL_POLYW1_PACKEDBYTES ];
    unsigned int i, b, pos;
    uint64_t signs = 0;
    Keccak_state state;

    memmove(buf, mu, DIL_CRHBYTES);
fff76984:	48 00 3a 89 	bl      fff7a40c <memmove>
fff76988:	81 21 05 10 	lwz     r9,1296(r1)
fff7698c:	7d 25 4b 78 	mr      r5,r9
fff76990:	39 20 00 00 	li      r9,0
**************************************************/
static
void polyw1_pack(uint8_t *r, const poly *a) {
    unsigned int i;

    for (i = 0; i < DIL_N/2; ++i)
fff76994:	38 c0 00 80 	li      r6,128
fff76998:	7c c9 03 a6 	mtctr   r6
fff7699c:	39 40 00 00 	li      r10,0
fff769a0:	55 44 18 38 	rlwinm  r4,r10,3,0,28
fff769a4:	7c e5 22 14 	add     r7,r5,r4
        r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
fff769a8:	80 e7 00 04 	lwz     r7,4(r7)
fff769ac:	7d 0a 4a 14 	add     r8,r10,r9
fff769b0:	54 e6 20 36 	rlwinm  r6,r7,4,0,27
fff769b4:	7c e5 20 2e 	lwzx    r7,r5,r4
fff769b8:	7d 1f 42 14 	add     r8,r31,r8
fff769bc:	7c c7 3b 78 	or      r7,r6,r7
fff769c0:	98 e8 00 30 	stb     r7,48(r8)
**************************************************/
static
void polyw1_pack(uint8_t *r, const poly *a) {
    unsigned int i;

    for (i = 0; i < DIL_N/2; ++i)
fff769c4:	39 4a 00 01 	addi    r10,r10,1
fff769c8:	42 00 ff d8 	bdnz    fff769a0 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2+0x48>
    uint64_t signs = 0;
    Keccak_state state;

    memmove(buf, mu, DIL_CRHBYTES);

    for (i = 0; i < k; ++i) {
fff769cc:	2c 09 03 80 	cmpwi   r9,896
fff769d0:	38 a5 04 00 	addi    r5,r5,1024
fff769d4:	39 29 00 80 	addi    r9,r9,128
fff769d8:	40 82 ff bc 	bne     fff76994 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2+0x3c>
*                                     Keccak state
**************************************************/
static
void shake256_init(Keccak_state *state)
{
  keccak_init(state);
fff769dc:	38 61 04 38 	addi    r3,r1,1080
fff769e0:	4b ff e5 71 	bl      fff74f50 <_ZL11keccak_initP12Keccak_state>
        polyw1_pack(buf + DIL_CRHBYTES + i * DIL_POLYW1_PACKEDBYTES,
                    &( w1->vec[i] ));
    }

    shake256_init(&state);
    shake256_absorb(&state, buf, DIL_CRHBYTES + k *DIL_POLYW1_PACKEDBYTES);
fff769e4:	7f e4 fb 78 	mr      r4,r31
fff769e8:	38 a0 04 30 	li      r5,1072
fff769ec:	38 61 04 38 	addi    r3,r1,1080
fff769f0:	4b ff e8 a5 	bl      fff75294 <_ZL15shake256_absorbP12Keccak_statePKhj>
    shake256_finalize(&state);
fff769f4:	38 61 04 38 	addi    r3,r1,1080
fff769f8:	4b ff ff 25 	bl      fff7691c <_ZL17shake256_finalizeP12Keccak_state>
*              - Keccak_state *s: pointer to input/output Keccak state
**************************************************/
static
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, Keccak_state *state)
{
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
fff769fc:	7f e3 fb 78 	mr      r3,r31
fff76a00:	38 80 00 01 	li      r4,1
fff76a04:	38 a1 04 38 	addi    r5,r1,1080
fff76a08:	38 c0 00 88 	li      r6,136
fff76a0c:	4b ff e7 f9 	bl      fff75204 <_ZL20keccak_squeezeblocksPhjPyj>
fff76a10:	38 e0 00 08 	li      r7,8
fff76a14:	7c e9 03 a6 	mtctr   r7
    shake256_init(&state);
    shake256_absorb(&state, buf, DIL_CRHBYTES + k *DIL_POLYW1_PACKEDBYTES);
    shake256_finalize(&state);
    shake256_squeezeblocks(buf, 1, &state);

    signs = 0;
fff76a18:	39 00 00 00 	li      r8,0
fff76a1c:	39 20 00 00 	li      r9,0
    for (i = 0; i < 8; ++i)
fff76a20:	39 40 00 00 	li      r10,0
        signs |= (uint64_t)buf[i] << 8*i;           // TODO: LSBF8_READ
fff76a24:	7f bf 50 ae 	lbzx    r29,r31,r10
fff76a28:	55 46 18 38 	rlwinm  r6,r10,3,0,28
fff76a2c:	3b 80 00 00 	li      r28,0
fff76a30:	7f 86 30 76 	slvd    d6,d28,r6
fff76a34:	7d 06 33 78 	or      r6,r8,r6
fff76a38:	7d 27 3b 78 	or      r7,r9,r7
fff76a3c:	7c c8 33 78 	mr      r8,r6
fff76a40:	7c e9 3b 78 	mr      r9,r7
    shake256_absorb(&state, buf, DIL_CRHBYTES + k *DIL_POLYW1_PACKEDBYTES);
    shake256_finalize(&state);
    shake256_squeezeblocks(buf, 1, &state);

    signs = 0;
    for (i = 0; i < 8; ++i)
fff76a44:	39 4a 00 01 	addi    r10,r10,1
fff76a48:	42 00 ff dc 	bdnz    fff76a24 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2+0xcc>
        signs |= (uint64_t)buf[i] << 8*i;           // TODO: LSBF8_READ

    pos = 8;

    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;
fff76a4c:	38 c0 01 00 	li      r6,256
fff76a50:	7c c9 03 a6 	mtctr   r6
fff76a54:	39 5e ff fc 	addi    r10,r30,-4
fff76a58:	38 e0 00 00 	li      r7,0
fff76a5c:	94 ea 00 04 	stwu    r7,4(r10)
    for (i = 0; i < 8; ++i)
        signs |= (uint64_t)buf[i] << 8*i;           // TODO: LSBF8_READ

    pos = 8;

    for (i = 0; i < DIL_N; ++i)
fff76a60:	42 00 ff fc 	bdnz    fff76a5c <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2+0x104>
            b = buf[pos++];
        } while (b > i);

        c->coeffs[i] = c->coeffs[b];
        c->coeffs[b] = 1;
        c->coeffs[b] ^= -((uint32_t) signs & 1) & (1 ^ (DIL_Q-1));
fff76a64:	3c e0 00 7f 	lis     r7,127
fff76a68:	3b 9e 03 0c 	addi    r28,r30,780
    for (i = 0; i < 8; ++i)
        signs |= (uint64_t)buf[i] << 8*i;           // TODO: LSBF8_READ

    pos = 8;

    for (i = 0; i < DIL_N; ++i)
fff76a6c:	38 c0 00 08 	li      r6,8
fff76a70:	3b a0 00 c4 	li      r29,196
            b = buf[pos++];
        } while (b > i);

        c->coeffs[i] = c->coeffs[b];
        c->coeffs[b] = 1;
        c->coeffs[b] ^= -((uint32_t) signs & 1) & (1 ^ (DIL_Q-1));
fff76a74:	60 e7 e0 01 	ori     r7,r7,57345
    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    for (i = 196; i < 256; ++i) {
        do {
            if(pos >= SHAKE256_RATE) {
fff76a78:	28 06 00 87 	cmplwi  r6,135
                shake256_squeezeblocks(buf, 1, &state);
                pos = 0;
            }

            b = buf[pos++];
fff76a7c:	7c ca 33 78 	mr      r10,r6
    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    for (i = 196; i < 256; ++i) {
        do {
            if(pos >= SHAKE256_RATE) {
fff76a80:	40 a1 00 34 	ble     fff76ab4 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2+0x15c>
*              - Keccak_state *s: pointer to input/output Keccak state
**************************************************/
static
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, Keccak_state *state)
{
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
fff76a84:	7f e3 fb 78 	mr      r3,r31
fff76a88:	38 80 00 01 	li      r4,1
fff76a8c:	38 a1 04 38 	addi    r5,r1,1080
fff76a90:	38 c0 00 88 	li      r6,136
fff76a94:	90 e1 05 0c 	stw     r7,1292(r1)
fff76a98:	91 01 05 08 	stw     r8,1288(r1)
fff76a9c:	91 21 05 10 	stw     r9,1296(r1)
fff76aa0:	4b ff e7 65 	bl      fff75204 <_ZL20keccak_squeezeblocksPhjPyj>

    for (i = 196; i < 256; ++i) {
        do {
            if(pos >= SHAKE256_RATE) {
                shake256_squeezeblocks(buf, 1, &state);
                pos = 0;
fff76aa4:	81 21 05 10 	lwz     r9,1296(r1)
fff76aa8:	81 01 05 08 	lwz     r8,1288(r1)
fff76aac:	80 e1 05 0c 	lwz     r7,1292(r1)
fff76ab0:	39 40 00 00 	li      r10,0
            }

            b = buf[pos++];
fff76ab4:	38 ca 00 01 	addi    r6,r10,1
fff76ab8:	7d 41 52 14 	add     r10,r1,r10
fff76abc:	88 aa 00 08 	lbz     r5,8(r10)

    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    for (i = 196; i < 256; ++i) {
        do {
fff76ac0:	05 a5 ef dc 	cmplwbgt r5,r29,fff76a78 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2+0x120>
fff76ac4:	54 a5 10 3a 	rlwinm  r5,r5,2,0,29
            }

            b = buf[pos++];
        } while (b > i);

        c->coeffs[i] = c->coeffs[b];
fff76ac8:	7d 5e 28 2e 	lwzx    r10,r30,r5
    pos = 8;

    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    for (i = 196; i < 256; ++i) {
fff76acc:	2c 1d 00 ff 	cmpwi   r29,255
            }

            b = buf[pos++];
        } while (b > i);

        c->coeffs[i] = c->coeffs[b];
fff76ad0:	95 5c 00 04 	stwu    r10,4(r28)
        c->coeffs[b] = 1;
        c->coeffs[b] ^= -((uint32_t) signs & 1) & (1 ^ (DIL_Q-1));
fff76ad4:	55 2a 07 fe 	clrlwi  r10,r9,31
fff76ad8:	7d 4a 00 d0 	neg     r10,r10
fff76adc:	7d 4a 38 38 	and     r10,r10,r7
fff76ae0:	69 4a 00 01 	xori    r10,r10,1
fff76ae4:	7d 5e 29 2e 	stwx    r10,r30,r5
        signs >>= 1;
fff76ae8:	79 08 f8 42 	rldicl  d8,d8,63,1
    pos = 8;

    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    for (i = 196; i < 256; ++i) {
fff76aec:	3b bd 00 01 	addi    r29,r29,1
fff76af0:	40 82 ff 88 	bne     fff76a78 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2+0x120>
        c->coeffs[b] ^= -((uint32_t) signs & 1) & (1 ^ (DIL_Q-1));
        signs >>= 1;
    }

    // TODO: wipe
}
fff76af4:	80 01 05 2c 	lwz     r0,1324(r1)
fff76af8:	17 81 05 18 	lvd     d28,1304(r1)
fff76afc:	7c 08 03 a6 	mtlr    r0
fff76b00:	17 c1 05 20 	lvd     d30,1312(r1)
fff76b04:	38 21 05 28 	addi    r1,r1,1320
fff76b08:	4e 80 00 20 	blr

fff76b0c <_ZL20shake128_stream_initP12Keccak_statePKht>:
#if 1       /*-----  delimiter: poly -> symmetric.h  -----------------------*/
static
void __attribute__ ((noinline)) shake128_stream_init(Keccak_state *state,
                         const uint8_t seed[ DIL_SEEDBYTES ],
                              uint16_t nonce)
{
fff76b0c:	94 21 ff e0 	stwu    r1,-32(r1)
fff76b10:	7c 08 02 a6 	mflr    r0
fff76b14:	1b c1 00 18 	stvd    d30,24(r1)
  uint8_t t[2];

  t[0] = nonce;
fff76b18:	98 a1 00 08 	stb     r5,8(r1)
#if 1       /*-----  delimiter: poly -> symmetric.h  -----------------------*/
static
void __attribute__ ((noinline)) shake128_stream_init(Keccak_state *state,
                         const uint8_t seed[ DIL_SEEDBYTES ],
                              uint16_t nonce)
{
fff76b1c:	7c 7f 1b 78 	mr      r31,r3
  uint8_t t[2];

  t[0] = nonce;
  t[1] = nonce >> 8;
fff76b20:	7c a5 46 70 	srawi   r5,r5,8
#if 1       /*-----  delimiter: poly -> symmetric.h  -----------------------*/
static
void __attribute__ ((noinline)) shake128_stream_init(Keccak_state *state,
                         const uint8_t seed[ DIL_SEEDBYTES ],
                              uint16_t nonce)
{
fff76b24:	90 01 00 24 	stw     r0,36(r1)
fff76b28:	7c 9e 23 78 	mr      r30,r4
  uint8_t t[2];

  t[0] = nonce;
  t[1] = nonce >> 8;
fff76b2c:	98 a1 00 09 	stb     r5,9(r1)
*                                     Keccak state
**************************************************/
static
void shake128_init(Keccak_state *state)
{
  keccak_init(state);
fff76b30:	4b ff e4 21 	bl      fff74f50 <_ZL11keccak_initP12Keccak_state>
*              - size_t inlen:        length of input in bytes
**************************************************/
static
void shake128_absorb(Keccak_state *state, const uint8_t *in, size_t inlen)
{
  state->pos = keccak_absorb(state->s, SHAKE128_RATE, state->pos, in, inlen);
fff76b34:	80 bf 00 c8 	lwz     r5,200(r31)
fff76b38:	7f c6 f3 78 	mr      r6,r30
fff76b3c:	7f e3 fb 78 	mr      r3,r31
fff76b40:	38 80 00 a8 	li      r4,168
fff76b44:	38 e0 00 20 	li      r7,32
fff76b48:	4b ff e4 31 	bl      fff74f78 <_ZL13keccak_absorbPyjjPKhj>
fff76b4c:	90 7f 00 c8 	stw     r3,200(r31)
fff76b50:	7c 65 1b 78 	mr      r5,r3
fff76b54:	38 c1 00 08 	addi    r6,r1,8
fff76b58:	7f e3 fb 78 	mr      r3,r31
fff76b5c:	38 80 00 a8 	li      r4,168
fff76b60:	38 e0 00 02 	li      r7,2
fff76b64:	4b ff e4 15 	bl      fff74f78 <_ZL13keccak_absorbPyjjPKhj>
fff76b68:	90 7f 00 c8 	stw     r3,200(r31)
fff76b6c:	7c 65 1b 78 	mr      r5,r3
* Arguments:   - Keccak_state *state: pointer to Keccak state
**************************************************/
static
void shake128_finalize(Keccak_state *state)
{
  keccak_finalize(state->s, SHAKE128_RATE, state->pos, 0x1F);
fff76b70:	38 80 00 a8 	li      r4,168
fff76b74:	7f e3 fb 78 	mr      r3,r31
fff76b78:	4b ff fd 39 	bl      fff768b0 <_ZL15keccak_finalizePyjjh.constprop.8>
  state->pos = 0;
fff76b7c:	39 20 00 00 	li      r9,0
fff76b80:	91 3f 00 c8 	stw     r9,200(r31)

  shake128_init(state);
  shake128_absorb(state, seed, DIL_SEEDBYTES);
  shake128_absorb(state, t, 2);
  shake128_finalize(state);
}
fff76b84:	80 01 00 24 	lwz     r0,36(r1)
fff76b88:	17 c1 00 18 	lvd     d30,24(r1)
fff76b8c:	7c 08 03 a6 	mtlr    r0
fff76b90:	38 21 00 20 	addi    r1,r1,32
fff76b94:	4e 80 00 20 	blr

fff76b98 <_ZL12poly_uniformP4polyPKht>:

static
void __attribute__ ((noinline)) poly_uniform(poly *a,
                  const uint8_t seed[ DIL_SEEDBYTES ],
                  uint16_t nonce)
{
fff76b98:	94 21 fb c8 	stwu    r1,-1080(r1)
fff76b9c:	7c 08 02 a6 	mflr    r0
fff76ba0:	1b 81 04 28 	stvd    d28,1064(r1)
fff76ba4:	1b c1 04 30 	stvd    d30,1072(r1)
fff76ba8:	7c 7d 1b 78 	mr      r29,r3
*              - Keccak_state *s: pointer to input/output Keccak state
**************************************************/
static
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, Keccak_state *state)
{
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
fff76bac:	3b c1 00 08 	addi    r30,r1,8
    unsigned int i, ctr, off;
    unsigned int buflen = POLY_UNIFORM_NBLOCKS * DIL_STREAM128_BLOCKBYTES;
    uint8_t buf[ POLY_UNIFORM_NBLOCKS * DIL_STREAM128_BLOCKBYTES +2 ];
    stream128_state state;

    stream128_init(&state, seed, nonce);
fff76bb0:	38 61 03 58 	addi    r3,r1,856

static
void __attribute__ ((noinline)) poly_uniform(poly *a,
                  const uint8_t seed[ DIL_SEEDBYTES ],
                  uint16_t nonce)
{
fff76bb4:	90 01 04 3c 	stw     r0,1084(r1)
    unsigned int i, ctr, off;
    unsigned int buflen = POLY_UNIFORM_NBLOCKS * DIL_STREAM128_BLOCKBYTES;
    uint8_t buf[ POLY_UNIFORM_NBLOCKS * DIL_STREAM128_BLOCKBYTES +2 ];
    stream128_state state;

    stream128_init(&state, seed, nonce);
fff76bb8:	4b ff ff 55 	bl      fff76b0c <_ZL20shake128_stream_initP12Keccak_statePKht>
*              - Keccak_state *s: pointer to input/output Keccak state
**************************************************/
static
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, Keccak_state *state)
{
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
fff76bbc:	7f c3 f3 78 	mr      r3,r30
fff76bc0:	38 80 00 05 	li      r4,5
fff76bc4:	38 a1 03 58 	addi    r5,r1,856
fff76bc8:	38 c0 00 a8 	li      r6,168
fff76bcc:	4b ff e6 39 	bl      fff75204 <_ZL20keccak_squeezeblocksPhjPyj>
    stream128_state state;

    stream128_init(&state, seed, nonce);
    stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);

    ctr = rej_uniform(a->coeffs, DIL_N, buf, buflen);
fff76bd0:	7f a3 eb 78 	mr      r3,r29
fff76bd4:	38 80 01 00 	li      r4,256
fff76bd8:	7f c5 f3 78 	mr      r5,r30
fff76bdc:	38 c0 03 48 	li      r6,840
fff76be0:	4b ff f8 55 	bl      fff76434 <_ZL11rej_uniformPmjPKhj>
fff76be4:	7c 7c 1b 78 	mr      r28,r3
void __attribute__ ((noinline)) poly_uniform(poly *a,
                  const uint8_t seed[ DIL_SEEDBYTES ],
                  uint16_t nonce)
{
    unsigned int i, ctr, off;
    unsigned int buflen = POLY_UNIFORM_NBLOCKS * DIL_STREAM128_BLOCKBYTES;
fff76be8:	3b e0 03 48 	li      r31,840
    stream128_init(&state, seed, nonce);
    stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);

    ctr = rej_uniform(a->coeffs, DIL_N, buf, buflen);

    while(ctr < DIL_N) {
fff76bec:	28 1c 00 ff 	cmplwi  r28,255
fff76bf0:	41 81 00 74 	bgt     fff76c64 <_ZL12poly_uniformP4polyPKht+0xcc>
        off = buflen % 3;
fff76bf4:	7f e3 fb 78 	mr      r3,r31
fff76bf8:	38 80 00 03 	li      r4,3
fff76bfc:	48 00 36 0d 	bl      fff7a208 <__umodsi3>
fff76c00:	7c 6a 1b 78 	mr      r10,r3
        for (i = 0; i < off; ++i)
            buf[i] = buf[buflen - off + i];
fff76c04:	7f ea f8 50 	subf    r31,r10,r31
fff76c08:	39 4a 00 01 	addi    r10,r10,1
fff76c0c:	7d 49 03 a6 	mtctr   r10

    ctr = rej_uniform(a->coeffs, DIL_N, buf, buflen);

    while(ctr < DIL_N) {
        off = buflen % 3;
        for (i = 0; i < off; ++i)
fff76c10:	38 60 00 00 	li      r3,0
fff76c14:	42 40 00 18 	bdz     fff76c2c <_ZL12poly_uniformP4polyPKht+0x94>
fff76c18:	7d 5e fa 14 	add     r10,r30,r31
            buf[i] = buf[buflen - off + i];
fff76c1c:	7d 4a 18 ae 	lbzx    r10,r10,r3
fff76c20:	7d 5e 19 ae 	stbx    r10,r30,r3

    ctr = rej_uniform(a->coeffs, DIL_N, buf, buflen);

    while(ctr < DIL_N) {
        off = buflen % 3;
        for (i = 0; i < off; ++i)
fff76c24:	38 63 00 01 	addi    r3,r3,1
fff76c28:	4b ff ff ec 	b       fff76c14 <_ZL12poly_uniformP4polyPKht+0x7c>
            buf[i] = buf[buflen - off + i];

        buflen = DIL_STREAM128_BLOCKBYTES + off;
fff76c2c:	3b e3 00 a8 	addi    r31,r3,168
*              - Keccak_state *s: pointer to input/output Keccak state
**************************************************/
static
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, Keccak_state *state)
{
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
fff76c30:	38 80 00 01 	li      r4,1
fff76c34:	7c 7e 1a 14 	add     r3,r30,r3
fff76c38:	38 a1 03 58 	addi    r5,r1,856
fff76c3c:	38 c0 00 a8 	li      r6,168
fff76c40:	4b ff e5 c5 	bl      fff75204 <_ZL20keccak_squeezeblocksPhjPyj>

        buflen = DIL_STREAM128_BLOCKBYTES + off;

        stream128_squeezeblocks(buf + off, 1, &state);

        ctr += rej_uniform(a->coeffs + ctr, DIL_N - ctr, buf, buflen);
fff76c44:	57 83 10 3a 	rlwinm  r3,r28,2,0,29
fff76c48:	20 9c 01 00 	subfic  r4,r28,256
fff76c4c:	7c 7d 1a 14 	add     r3,r29,r3
fff76c50:	7f c5 f3 78 	mr      r5,r30
fff76c54:	7f e6 fb 78 	mr      r6,r31
fff76c58:	4b ff f7 dd 	bl      fff76434 <_ZL11rej_uniformPmjPKhj>
fff76c5c:	7f 9c 1a 14 	add     r28,r28,r3
fff76c60:	4b ff ff 8c 	b       fff76bec <_ZL12poly_uniformP4polyPKht+0x54>
    }
}
fff76c64:	80 01 04 3c 	lwz     r0,1084(r1)
fff76c68:	17 81 04 28 	lvd     d28,1064(r1)
fff76c6c:	7c 08 03 a6 	mtlr    r0
fff76c70:	17 c1 04 30 	lvd     d30,1072(r1)
fff76c74:	38 21 04 38 	addi    r1,r1,1080
fff76c78:	4e 80 00 20 	blr

fff76c7c <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj>:
int __attribute__ ((noinline)) dil_wire2sig(polyvec_max *z,
                 polyvec_max *h,
                        poly *c,
                unsigned int dil_k,
         const unsigned char *sig, size_t sbytes)
{
fff76c7c:	39 46 ff fb 	addi    r10,r6,-5
fff76c80:	28 0a 00 03 	cmplwi  r10,3
fff76c84:	94 21 ff d0 	stwu    r1,-48(r1)
fff76c88:	7c 08 02 a6 	mflr    r0
fff76c8c:	1b 81 00 20 	stvd    d28,32(r1)
fff76c90:	1b c1 00 28 	stvd    d30,40(r1)
fff76c94:	90 01 00 34 	stw     r0,52(r1)
fff76c98:	90 61 00 0c 	stw     r3,12(r1)
fff76c9c:	90 81 00 08 	stw     r4,8(r1)
fff76ca0:	7c bd 2b 78 	mr      r29,r5
fff76ca4:	7c df 33 78 	mr      r31,r6
fff76ca8:	7c fc 3b 78 	mr      r28,r7
fff76cac:	3b c0 00 00 	li      r30,0
fff76cb0:	41 81 00 10 	bgt     fff76cc0 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x44>
fff76cb4:	3d 20 ff f7 	lis     r9,-9
fff76cb8:	39 29 77 90 	addi    r9,r9,30608
fff76cbc:	7f c9 50 ae 	lbzx    r30,r9,r10
    unsigned int i, j, k, omega = dil_omega(dil_k);
    size_t sb = dil_signature_bytes(dil_k);
fff76cc0:	7f e3 fb 78 	mr      r3,r31
fff76cc4:	91 01 00 18 	stw     r8,24(r1)
fff76cc8:	4b ff f9 55 	bl      fff7661c <_ZL19dil_signature_bytesj>
    uint64_t signs;

    if (sb != sbytes)
fff76ccc:	81 01 00 18 	lwz     r8,24(r1)
fff76cd0:	39 20 00 00 	li      r9,0
        return 1;

    for (i = 0; i < dil_k-1; ++i)                                    /* L */
fff76cd4:	39 5f ff ff 	addi    r10,r31,-1
{
    unsigned int i, j, k, omega = dil_omega(dil_k);
    size_t sb = dil_signature_bytes(dil_k);
    uint64_t signs;

    if (sb != sbytes)
fff76cd8:	04 43 40 f2 	cmpwbne r3,r8,fff76ebc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x240>
        return 1;

    for (i = 0; i < dil_k-1; ++i)                                    /* L */
fff76cdc:	05 09 50 16 	cmplwbge r9,r10,fff76d08 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x8c>
        polyz_unpack(&( z->vec[i] ), sig + i* DIL_POLYZ_PACKEDBYTES);
fff76ce0:	80 c1 00 0c 	lwz     r6,12(r1)
fff76ce4:	55 23 50 2a 	rlwinm  r3,r9,10,0,21
fff76ce8:	1c 89 02 80 	mulli   r4,r9,640
fff76cec:	7c 66 1a 14 	add     r3,r6,r3
fff76cf0:	7c 9c 22 14 	add     r4,r28,r4
fff76cf4:	19 21 00 18 	stvd    d9,24(r1)
fff76cf8:	4b ff f8 81 	bl      fff76578 <_ZL12polyz_unpackP4polyPKh>
    uint64_t signs;

    if (sb != sbytes)
        return 1;

    for (i = 0; i < dil_k-1; ++i)                                    /* L */
fff76cfc:	15 21 00 18 	lvd     d9,24(r1)
fff76d00:	39 29 00 01 	addi    r9,r9,1
fff76d04:	4b ff ff d8 	b       fff76cdc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x60>
        polyz_unpack(&( z->vec[i] ), sig + i* DIL_POLYZ_PACKEDBYTES);

    sig += (dil_k -1) * DIL_POLYZ_PACKEDBYTES;                /* L * ... */
fff76d08:	1c ff 02 80 	mulli   r7,r31,640
fff76d0c:	38 e7 fd 80 	addi    r7,r7,-640
fff76d10:	7c fc 3a 14 	add     r7,r28,r7

  /* Decode h */
    k = 0;
fff76d14:	39 20 00 00 	li      r9,0

    for (i = 0; i < dil_k; ++i) {
fff76d18:	39 00 00 00 	li      r8,0
fff76d1c:	38 c0 00 00 	li      r6,0
            /* Coefficients are ordered for strong unforgeability */

            if ((j > k) && (sig[j] <= sig[ j-1 ]))
                return 1;

            h->vec[i].coeffs[ sig[j] ] = 1;
fff76d20:	38 60 00 01 	li      r3,1
    sig += (dil_k -1) * DIL_POLYZ_PACKEDBYTES;                /* L * ... */

  /* Decode h */
    k = 0;

    for (i = 0; i < dil_k; ++i) {
fff76d24:	04 48 f8 0e 	cmpwbne r8,r31,fff76d40 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0xc4>
fff76d28:	7d 49 f0 50 	subf    r10,r9,r30
fff76d2c:	39 4a 00 01 	addi    r10,r10,1
fff76d30:	05 a9 f0 04 	cmplwbgt r9,r30,fff76d38 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0xbc>
fff76d34:	06 5e 00 52 	bwnz    r30,fff76dd8 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x15c>
fff76d38:	39 40 00 01 	li      r10,1
fff76d3c:	48 00 00 9c 	b       fff76dd8 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x15c>
        for (j = 0; j < DIL_N; ++j)
            h->vec[i].coeffs[j] = 0;
fff76d40:	38 80 01 00 	li      r4,256
fff76d44:	7c 89 03 a6 	mtctr   r4
fff76d48:	81 41 00 08 	lwz     r10,8(r1)
fff76d4c:	55 05 50 2a 	rlwinm  r5,r8,10,0,21
fff76d50:	7c aa 2a 14 	add     r5,r10,r5
    sig += (dil_k -1) * DIL_POLYZ_PACKEDBYTES;                /* L * ... */

  /* Decode h */
    k = 0;

    for (i = 0; i < dil_k; ++i) {
fff76d54:	39 40 00 00 	li      r10,0
        for (j = 0; j < DIL_N; ++j)
            h->vec[i].coeffs[j] = 0;
fff76d58:	7c c5 51 2e 	stwx    r6,r5,r10
fff76d5c:	39 4a 00 04 	addi    r10,r10,4

  /* Decode h */
    k = 0;

    for (i = 0; i < dil_k; ++i) {
        for (j = 0; j < DIL_N; ++j)
fff76d60:	42 00 ff f8 	bdnz    fff76d58 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0xdc>
fff76d64:	7c 07 f2 14 	add     r0,r7,r30
            h->vec[i].coeffs[j] = 0;

        if ((sig[ omega +i ] < k) || (sig[ omega +i ] > omega))
fff76d68:	7d 48 00 ae 	lbzx    r10,r8,r0
fff76d6c:	05 8a 48 a8 	cmplwblt r10,r9,fff76ebc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x240>
fff76d70:	05 aa f0 a6 	cmplwbgt r10,r30,fff76ebc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x240>
            /* Coefficients are ordered for strong unforgeability */

            if ((j > k) && (sig[j] <= sig[ j-1 ]))
                return 1;

            h->vec[i].coeffs[ sig[j] ] = 1;
fff76d74:	55 0a 40 2e 	rlwinm  r10,r8,8,0,23
fff76d78:	7d 49 03 a6 	mtctr   r10
fff76d7c:	7d 25 4b 78 	mr      r5,r9
            h->vec[i].coeffs[j] = 0;

        if ((sig[ omega +i ] < k) || (sig[ omega +i ] > omega))
            return 1;

        for (j = k; j < sig[ omega +i ]; ++j) {
fff76d80:	7d 48 00 ae 	lbzx    r10,r8,r0
fff76d84:	05 05 50 1e 	cmplwbge r5,r10,fff76dc0 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x144>
fff76d88:	7d 47 28 ae 	lbzx    r10,r7,r5
            /* Coefficients are ordered for strong unforgeability */

            if ((j > k) && (sig[j] <= sig[ j-1 ]))
fff76d8c:	05 25 48 0a 	cmplwble r5,r9,fff76da0 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x124>
fff76d90:	7f 87 2a 14 	add     r28,r7,r5
fff76d94:	8b 9c ff ff 	lbz     r28,-1(r28)
fff76d98:	55 44 06 3e 	clrlwi  r4,r10,24
fff76d9c:	05 24 e0 90 	cmplwble r4,r28,fff76ebc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x240>
                return 1;

            h->vec[i].coeffs[ sig[j] ] = 1;
fff76da0:	7c 89 02 a6 	mfctr   r4
fff76da4:	55 4a 06 3e 	clrlwi  r10,r10,24
fff76da8:	7d 44 52 14 	add     r10,r4,r10
fff76dac:	80 81 00 08 	lwz     r4,8(r1)
fff76db0:	55 4a 10 3a 	rlwinm  r10,r10,2,0,29
fff76db4:	7c 64 51 2e 	stwx    r3,r4,r10
            h->vec[i].coeffs[j] = 0;

        if ((sig[ omega +i ] < k) || (sig[ omega +i ] > omega))
            return 1;

        for (j = k; j < sig[ omega +i ]; ++j) {
fff76db8:	38 a5 00 01 	addi    r5,r5,1
fff76dbc:	4b ff ff c4 	b       fff76d80 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x104>
    sig += (dil_k -1) * DIL_POLYZ_PACKEDBYTES;                /* L * ... */

  /* Decode h */
    k = 0;

    for (i = 0; i < dil_k; ++i) {
fff76dc0:	39 08 00 01 	addi    r8,r8,1
            h->vec[i].coeffs[j] = 0;

        if ((sig[ omega +i ] < k) || (sig[ omega +i ] > omega))
            return 1;

        for (j = k; j < sig[ omega +i ]; ++j) {
fff76dc4:	7d 49 53 78 	mr      r9,r10
fff76dc8:	4b ff ff 5c 	b       fff76d24 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0xa8>
        k = sig[ omega +i ];
    }

            /* Extra indices are zero for strong unforgeability */
    for (j = k; j < omega; ++j) {
        if (sig[j])
fff76dcc:	7d 07 48 ae 	lbzx    r8,r7,r9
fff76dd0:	06 48 00 76 	bwnz    r8,fff76ebc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x240>

        k = sig[ omega +i ];
    }

            /* Extra indices are zero for strong unforgeability */
    for (j = k; j < omega; ++j) {
fff76dd4:	39 29 00 01 	addi    r9,r9,1
fff76dd8:	35 4a ff ff 	addic.  r10,r10,-1
fff76ddc:	40 82 ff f0 	bne     fff76dcc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x150>

    sig += omega + dil_k;

                            /* Decode c */
    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;
fff76de0:	38 80 01 00 	li      r4,256
fff76de4:	7c 89 03 a6 	mtctr   r4
    for (j = k; j < omega; ++j) {
        if (sig[j])
            return 1;
    }

    sig += omega + dil_k;
fff76de8:	7c de fa 14 	add     r6,r30,r31
fff76dec:	7c e7 32 14 	add     r7,r7,r6
fff76df0:	39 3d ff fc 	addi    r9,r29,-4

                            /* Decode c */
    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;
fff76df4:	39 40 00 00 	li      r10,0
fff76df8:	95 49 00 04 	stwu    r10,4(r9)
    }

    sig += omega + dil_k;

                            /* Decode c */
    for (i = 0; i < DIL_N; ++i)
fff76dfc:	42 00 ff fc 	bdnz    fff76df8 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x17c>
fff76e00:	38 c0 00 08 	li      r6,8
fff76e04:	7c c9 03 a6 	mtctr   r6
fff76e08:	39 00 00 00 	li      r8,0
fff76e0c:	39 20 00 00 	li      r9,0
fff76e10:	39 40 00 00 	li      r10,0
fff76e14:	7c c7 52 14 	add     r6,r7,r10
        c->coeffs[i] = 0;

    signs = 0;
    for (i = 0; i < 8; ++i)
        signs |= ((uint64_t) sig[ DIL_N/8 +i ]) << 8*i;
fff76e18:	88 c6 00 20 	lbz     r6,32(r6)
fff76e1c:	3b c0 00 00 	li      r30,0
fff76e20:	90 c1 00 14 	stw     r6,20(r1)
fff76e24:	93 c1 00 10 	stw     r30,16(r1)
fff76e28:	55 44 18 38 	rlwinm  r4,r10,3,0,28
fff76e2c:	17 c1 00 10 	lvd     d30,16(r1)
                            /* Decode c */
    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    signs = 0;
    for (i = 0; i < 8; ++i)
fff76e30:	39 4a 00 01 	addi    r10,r10,1
        signs |= ((uint64_t) sig[ DIL_N/8 +i ]) << 8*i;
fff76e34:	7f c4 20 76 	slvd    d4,d30,r4
fff76e38:	7d 04 23 78 	or      r4,r8,r4
fff76e3c:	7d 26 2b 78 	or      r6,r9,r5
fff76e40:	7c 88 23 78 	mr      r8,r4
fff76e44:	7c c9 33 78 	mr      r9,r6
                            /* Decode c */
    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    signs = 0;
    for (i = 0; i < 8; ++i)
fff76e48:	42 00 ff cc 	bdnz    fff76e14 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x198>

        // TODO: LSBF8_READ

        /* Extra sign bits are zero for strong unforgeability */

    if (signs >> 60)
fff76e4c:	79 04 27 20 	rldicl  d4,d8,4,60
fff76e50:	7c 84 2b 78 	or      r4,r4,r5
fff76e54:	06 44 00 34 	bwnz    r4,fff76ebc <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x240>
    for (i = 0; i < DIL_N/8; ++i) {
        for (j = 0; j < 8; ++j) {
            if ((sig[i] >> j) & 0x01) {
                c->coeffs[ 8*i+j ] =  1;
                c->coeffs[ 8*i+j ] ^= -(signs & 1) &
                                       (1 ^ (DIL_Q -1));
fff76e58:	3c 60 00 7f 	lis     r3,127

        // TODO: LSBF8_READ

        /* Extra sign bits are zero for strong unforgeability */

    if (signs >> 60)
fff76e5c:	38 c0 00 00 	li      r6,0
    for (i = 0; i < DIL_N/8; ++i) {
        for (j = 0; j < 8; ++j) {
            if ((sig[i] >> j) & 0x01) {
                c->coeffs[ 8*i+j ] =  1;
                c->coeffs[ 8*i+j ] ^= -(signs & 1) &
                                       (1 ^ (DIL_Q -1));
fff76e60:	60 63 e0 01 	ori     r3,r3,57345
fff76e64:	3b e0 00 08 	li      r31,8
fff76e68:	7f e9 03 a6 	mtctr   r31
fff76e6c:	54 c4 28 34 	rlwinm  r4,r6,5,0,26
fff76e70:	7c 9d 22 14 	add     r4,r29,r4
    for (i = 0; i < DIL_N; ++i)
        c->coeffs[i] = 0;

    signs = 0;
    for (i = 0; i < 8; ++i)
        signs |= ((uint64_t) sig[ DIL_N/8 +i ]) << 8*i;
fff76e74:	38 a0 00 00 	li      r5,0
    if (signs >> 60)
        return 1;

    for (i = 0; i < DIL_N/8; ++i) {
        for (j = 0; j < 8; ++j) {
            if ((sig[i] >> j) & 0x01) {
fff76e78:	7d 47 30 ae 	lbzx    r10,r7,r6
fff76e7c:	7d 4a 2e 30 	sraw    r10,r10,r5
fff76e80:	07 8a f8 10 	bb0wi   r10,31,fff76ea0 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x224>
                c->coeffs[ 8*i+j ] =  1;
                c->coeffs[ 8*i+j ] ^= -(signs & 1) &
                                       (1 ^ (DIL_Q -1));
fff76e84:	55 2a 07 fe 	clrlwi  r10,r9,31
fff76e88:	7d 4a 00 d0 	neg     r10,r10
fff76e8c:	7d 4a 18 38 	and     r10,r10,r3
fff76e90:	54 a0 10 3a 	rlwinm  r0,r5,2,0,29
fff76e94:	69 4a 00 01 	xori    r10,r10,1
fff76e98:	7d 44 01 2e 	stwx    r10,r4,r0

                signs >>= 1;
fff76e9c:	79 08 f8 42 	rldicl  d8,d8,63,1

    if (signs >> 60)
        return 1;

    for (i = 0; i < DIL_N/8; ++i) {
        for (j = 0; j < 8; ++j) {
fff76ea0:	38 a5 00 01 	addi    r5,r5,1
fff76ea4:	42 00 ff d4 	bdnz    fff76e78 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x1fc>
        /* Extra sign bits are zero for strong unforgeability */

    if (signs >> 60)
        return 1;

    for (i = 0; i < DIL_N/8; ++i) {
fff76ea8:	2c 06 00 1f 	cmpwi   r6,31
fff76eac:	38 c6 00 01 	addi    r6,r6,1
fff76eb0:	40 82 ff b4 	bne     fff76e64 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x1e8>
                signs >>= 1;
            }
        }
    }

    return 0;
fff76eb4:	38 60 00 00 	li      r3,0
fff76eb8:	48 00 00 08 	b       fff76ec0 <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj+0x244>
    unsigned int i, j, k, omega = dil_omega(dil_k);
    size_t sb = dil_signature_bytes(dil_k);
    uint64_t signs;

    if (sb != sbytes)
        return 1;
fff76ebc:	38 60 00 01 	li      r3,1
            }
        }
    }

    return 0;
}
fff76ec0:	80 01 00 34 	lwz     r0,52(r1)
fff76ec4:	17 81 00 20 	lvd     d28,32(r1)
fff76ec8:	7c 08 03 a6 	mtlr    r0
fff76ecc:	17 c1 00 28 	lvd     d30,40(r1)
fff76ed0:	38 21 00 30 	addi    r1,r1,48
fff76ed4:	4e 80 00 20 	blr

fff76ed8 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_>:
                  size_t siglen,
                  const uint8_t *m,
                  size_t mlen,
                  const uint8_t *pk,
                  size_t pkbytes, polyvec_max *w1,polyvec_max *mat01,polyvec_max *mat234,polyvec_max *mat567, polyvec_max *z, polyvec_max *h)
{
fff76ed8:	94 21 d6 a0 	stwu    r1,-10592(r1)
fff76edc:	7c 08 02 a6 	mflr    r0
fff76ee0:	1b 81 29 50 	stvd    d28,10576(r1)
fff76ee4:	1b c1 29 58 	stvd    d30,10584(r1)
fff76ee8:	90 a1 29 2c 	stw     r5,10540(r1)
fff76eec:	7c ff 3b 78 	mr      r31,r7
fff76ef0:	7c 7c 1b 78 	mr      r28,r3
fff76ef4:	7c 9d 23 78 	mr      r29,r4
                polyvec8 *t1,
     const unsigned char pk[ DIL_PUB8x7_BYTES ])
{
    unsigned int i;

    memmove(rho, pk, DIL_SEEDBYTES);
fff76ef8:	38 61 29 08 	addi    r3,r1,10504
fff76efc:	7c e4 3b 78 	mr      r4,r7
fff76f00:	38 a0 00 20 	li      r5,32
fff76f04:	91 21 29 28 	stw     r9,10536(r1)
fff76f08:	91 41 29 3c 	stw     r10,10556(r1)
fff76f0c:	90 01 29 64 	stw     r0,10596(r1)
fff76f10:	90 c1 29 30 	stw     r6,10544(r1)
fff76f14:	7d 1e 43 78 	mr      r30,r8
fff76f18:	48 00 34 f5 	bl      fff7a40c <memmove>
fff76f1c:	39 5f 00 20 	addi    r10,r31,32
fff76f20:	39 20 00 00 	li      r9,0
    pk += DIL_SEEDBYTES;

    for (i = 0; i < 8; ++i) {
        polyt1_unpack(&(t1->vec[i]), pk +i *DIL_POLYT1_PACKEDBYTES);
fff76f24:	39 01 00 08 	addi    r8,r1,8
fff76f28:	7c 68 4a 14 	add     r3,r8,r9
fff76f2c:	7d 44 53 78 	mr      r4,r10
fff76f30:	91 21 29 4c 	stw     r9,10572(r1)
fff76f34:	91 41 29 48 	stw     r10,10568(r1)
fff76f38:	4b ff f5 69 	bl      fff764a0 <_ZL13polyt1_unpackP4polyPKh>
    unsigned int i;

    memmove(rho, pk, DIL_SEEDBYTES);
    pk += DIL_SEEDBYTES;

    for (i = 0; i < 8; ++i) {
fff76f3c:	81 21 29 4c 	lwz     r9,10572(r1)
fff76f40:	81 41 29 48 	lwz     r10,10568(r1)
fff76f44:	2c 09 1c 00 	cmpwi   r9,7168
fff76f48:	39 4a 01 20 	addi    r10,r10,288
fff76f4c:	39 29 04 00 	addi    r9,r9,1024
fff76f50:	40 82 ff d4 	bne     fff76f24 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x4c>
    beta = dil_beta(8);

    unpack_pk8(rho, (polyvec8 *) t1, pk);


    if (dil_wire2sig(z, h, &c, 8, sig, siglen))
fff76f54:	14 61 29 70 	lvd     d3,10608(r1)
fff76f58:	7f a8 eb 78 	mr      r8,r29
fff76f5c:	38 a1 24 08 	addi    r5,r1,9224
fff76f60:	38 c0 00 08 	li      r6,8
fff76f64:	7f 87 e3 78 	mr      r7,r28
fff76f68:	4b ff fd 15 	bl      fff76c7c <_Z12dil_wire2sigP11polyvec_maxS0_P4polyjPKhj>
fff76f6c:	3b a0 00 00 	li      r29,0
fff76f70:	06 c3 00 06 	bwz     r3,fff76f7c <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0xa4>
        return 0;
fff76f74:	38 60 00 00 	li      r3,0
fff76f78:	48 00 03 40 	b       fff772b8 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x3e0>
polyvec7_chknorm(const polyvec7 *v, uint32_t bound)
{
    unsigned int i;

    for (i = 0; i < 7; ++i) {
        if (poly_chknorm(&( v->vec[i] ), bound))
fff76f7c:	81 21 29 70 	lwz     r9,10608(r1)
fff76f80:	3c 80 00 07 	lis     r4,7
fff76f84:	7c 69 ea 14 	add     r3,r9,r29
fff76f88:	60 84 fd 88 	ori     r4,r4,64904
fff76f8c:	4b ff f4 69 	bl      fff763f4 <_ZL12poly_chknormPK4polym>
fff76f90:	06 43 07 f2 	bwnz    r3,fff76f74 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x9c>
ATTR_PURE__ static unsigned int
polyvec7_chknorm(const polyvec7 *v, uint32_t bound)
{
    unsigned int i;

    for (i = 0; i < 7; ++i) {
fff76f94:	2c 1d 18 00 	cmpwi   r29,6144
fff76f98:	3b bd 04 00 	addi    r29,r29,1024
fff76f9c:	40 82 ff e0 	bne     fff76f7c <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0xa4>
*                                     Keccak state
**************************************************/
static
void shake256_init(Keccak_state *state)
{
  keccak_init(state);
fff76fa0:	3b a1 20 08 	addi    r29,r1,8200
fff76fa4:	7f a3 eb 78 	mr      r3,r29
fff76fa8:	4b ff df a9 	bl      fff74f50 <_ZL11keccak_initP12Keccak_state>
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
  Keccak_state state;

  shake256_init(&state);
  shake256_absorb(&state, in, inlen);
fff76fac:	7f e4 fb 78 	mr      r4,r31
fff76fb0:	7f c5 f3 78 	mr      r5,r30
fff76fb4:	7f a3 eb 78 	mr      r3,r29
fff76fb8:	4b ff e2 dd 	bl      fff75294 <_ZL15shake256_absorbP12Keccak_statePKhj>
  shake256_finalize(&state);
fff76fbc:	7f a3 eb 78 	mr      r3,r29
fff76fc0:	4b ff f9 5d 	bl      fff7691c <_ZL17shake256_finalizeP12Keccak_state>
*              - Keccak_state *s: pointer to input/output Keccak state
**************************************************/
static
void shake256_squeeze(uint8_t *out, size_t outlen, Keccak_state *state)
{
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
fff76fc4:	80 a1 20 d0 	lwz     r5,8400(r1)
fff76fc8:	7f a4 eb 78 	mr      r4,r29
fff76fcc:	38 61 28 d8 	addi    r3,r1,10456
fff76fd0:	4b ff f6 e1 	bl      fff766b0 <_ZL14keccak_squeezePhjPyjj.constprop.7>
*                                     Keccak state
**************************************************/
static
void shake256_init(Keccak_state *state)
{
  keccak_init(state);
fff76fd4:	38 61 28 08 	addi    r3,r1,10248
fff76fd8:	4b ff df 79 	bl      fff74f50 <_ZL11keccak_initP12Keccak_state>
                /* Compute CRH(CRH(rho, t1), msg) */

    dil_crh(mu, DIL_CRHBYTES, pk, pkbytes);
        //
    shake256_init(&state);
    shake256_absorb(&state, mu, DIL_CRHBYTES);
fff76fdc:	38 61 28 08 	addi    r3,r1,10248
fff76fe0:	38 81 28 d8 	addi    r4,r1,10456
fff76fe4:	38 a0 00 30 	li      r5,48
fff76fe8:	4b ff e2 ad 	bl      fff75294 <_ZL15shake256_absorbP12Keccak_statePKhj>
    shake256_absorb(&state, m, mlen);
fff76fec:	80 81 29 2c 	lwz     r4,10540(r1)
fff76ff0:	80 a1 29 30 	lwz     r5,10544(r1)
fff76ff4:	38 61 28 08 	addi    r3,r1,10248
fff76ff8:	4b ff e2 9d 	bl      fff75294 <_ZL15shake256_absorbP12Keccak_statePKhj>
    shake256_finalize(&state);
fff76ffc:	38 61 28 08 	addi    r3,r1,10248
fff77000:	4b ff f9 1d 	bl      fff7691c <_ZL17shake256_finalizeP12Keccak_state>
*              - Keccak_state *s: pointer to input/output Keccak state
**************************************************/
static
void shake256_squeeze(uint8_t *out, size_t outlen, Keccak_state *state)
{
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
fff77004:	80 a1 28 d0 	lwz     r5,10448(r1)
fff77008:	38 61 28 d8 	addi    r3,r1,10456
fff7700c:	38 81 28 08 	addi    r4,r1,10248
fff77010:	4b ff f6 a1 	bl      fff766b0 <_ZL14keccak_squeezePhjPyjj.constprop.7>
fff77014:	83 c1 29 6c 	lwz     r30,10604(r1)
fff77018:	83 e1 29 68 	lwz     r31,10600(r1)
fff7701c:	3f de ff ff 	addis   r30,r30,-1
fff77020:	3b ff c0 00 	addi    r31,r31,-16384
fff77024:	3b de 60 00 	addi    r30,r30,24576
fff77028:	90 61 28 d0 	stw     r3,10448(r1)
fff7702c:	93 e1 29 2c 	stw     r31,10540(r1)
fff77030:	1b c1 29 30 	stvd    d30,10544(r1)
static void
expand_matrix_8x7(polyvec_max *mat01,polyvec_max *mat234,polyvec_max *mat567, const unsigned char rho[ DIL_SEEDBYTES ])
{
    unsigned int k, l;

    for (k = 0; k < 8; ++k) {
fff77034:	3b 80 00 00 	li      r28,0
fff77038:	57 88 68 24 	rlwinm  r8,r28,13,0,18
        for (l = 0; l < 7; ++l) {
            if(k<2){
              poly_uniform(&( mat01[k].vec[l] ), rho, (k <<8) +l);
fff7703c:	57 89 44 2e 	rlwinm  r9,r28,8,16,23
fff77040:	39 5c ff fe 	addi    r10,r28,-2
fff77044:	91 01 29 40 	stw     r8,10560(r1)
fff77048:	91 21 29 38 	stw     r9,10552(r1)
fff7704c:	91 41 29 44 	stw     r10,10564(r1)
            }
            if((k>=2)&&(k<=4)){
              poly_uniform(&( mat234[k-2].vec[l] ), rho, (k <<8) +l);
fff77050:	3b e0 00 00 	li      r31,0
{
    unsigned int k, l;

    for (k = 0; k < 8; ++k) {
        for (l = 0; l < 7; ++l) {
            if(k<2){
fff77054:	28 1c 00 01 	cmplwi  r28,1
fff77058:	41 a1 00 2c 	bgt     fff77084 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x1ac>
fff7705c:	81 41 29 40 	lwz     r10,10560(r1)
fff77060:	81 01 29 38 	lwz     r8,10552(r1)
fff77064:	57 e3 50 2a 	rlwinm  r3,r31,10,0,21
              poly_uniform(&( mat01[k].vec[l] ), rho, (k <<8) +l);
fff77068:	81 21 29 3c 	lwz     r9,10556(r1)
fff7706c:	7c 63 52 14 	add     r3,r3,r10
fff77070:	7c a8 fa 14 	add     r5,r8,r31
fff77074:	7c 69 1a 14 	add     r3,r9,r3
fff77078:	38 81 29 08 	addi    r4,r1,10504
fff7707c:	54 a5 04 3e 	clrlwi  r5,r5,16
fff77080:	4b ff fb 19 	bl      fff76b98 <_ZL12poly_uniformP4polyPKht>
            }
            if((k>=2)&&(k<=4)){
fff77084:	81 41 29 44 	lwz     r10,10564(r1)
fff77088:	28 0a 00 02 	cmplwi  r10,2
fff7708c:	41 a1 00 1c 	bgt     fff770a8 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x1d0>
fff77090:	81 01 29 38 	lwz     r8,10552(r1)
              poly_uniform(&( mat234[k-2].vec[l] ), rho, (k <<8) +l);
fff77094:	81 21 29 34 	lwz     r9,10548(r1)
fff77098:	57 e3 50 2a 	rlwinm  r3,r31,10,0,21
fff7709c:	7c a8 fa 14 	add     r5,r8,r31
fff770a0:	7c 69 1a 14 	add     r3,r9,r3
fff770a4:	48 00 00 20 	b       fff770c4 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x1ec>
            }
            if(k>=5){
fff770a8:	28 1c 00 04 	cmplwi  r28,4
fff770ac:	40 a1 00 24 	ble     fff770d0 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x1f8>
fff770b0:	81 41 29 38 	lwz     r10,10552(r1)
              poly_uniform(&( mat567[k-5].vec[l] ), rho, (k <<8) +l);
fff770b4:	81 01 29 30 	lwz     r8,10544(r1)
fff770b8:	57 e3 50 2a 	rlwinm  r3,r31,10,0,21
fff770bc:	7c aa fa 14 	add     r5,r10,r31
fff770c0:	7c 68 1a 14 	add     r3,r8,r3
fff770c4:	38 81 29 08 	addi    r4,r1,10504
fff770c8:	54 a5 04 3e 	clrlwi  r5,r5,16
fff770cc:	4b ff fa cd 	bl      fff76b98 <_ZL12poly_uniformP4polyPKht>
expand_matrix_8x7(polyvec_max *mat01,polyvec_max *mat234,polyvec_max *mat567, const unsigned char rho[ DIL_SEEDBYTES ])
{
    unsigned int k, l;

    for (k = 0; k < 8; ++k) {
        for (l = 0; l < 7; ++l) {
fff770d0:	3b ff 00 01 	addi    r31,r31,1
fff770d4:	06 5f 3f c0 	cmpwibne r31,7,fff77054 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x17c>
fff770d8:	15 21 29 30 	lvd     d9,10544(r1)
fff770dc:	39 29 20 00 	addi    r9,r9,8192
fff770e0:	39 4a 20 00 	addi    r10,r10,8192
static void
expand_matrix_8x7(polyvec_max *mat01,polyvec_max *mat234,polyvec_max *mat567, const unsigned char rho[ DIL_SEEDBYTES ])
{
    unsigned int k, l;

    for (k = 0; k < 8; ++k) {
fff770e4:	3b 9c 00 01 	addi    r28,r28,1
fff770e8:	19 21 29 30 	stvd    d9,10544(r1)
fff770ec:	06 5c 47 a6 	cmpwibne r28,8,fff77038 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x160>
fff770f0:	3b 80 00 00 	li      r28,0
polyvec7_ntt(polyvec7 *v)
{
    unsigned int i;

    for (i = 0; i < 7; ++i) {
        poly_ntt256(&( v->vec[i] ));
fff770f4:	81 21 29 70 	lwz     r9,10608(r1)
fff770f8:	7c 69 e2 14 	add     r3,r9,r28
fff770fc:	4b ff f2 35 	bl      fff76330 <_ZL11poly_ntt256P4poly>
static void
polyvec7_ntt(polyvec7 *v)
{
    unsigned int i;

    for (i = 0; i < 7; ++i) {
fff77100:	2c 1c 18 00 	cmpwi   r28,6144
fff77104:	3b 9c 04 00 	addi    r28,r28,1024
fff77108:	40 82 ff ec 	bne     fff770f4 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x21c>
fff7710c:	83 e1 29 28 	lwz     r31,10536(r1)
fff77110:	3b 80 00 00 	li      r28,0
    expand_matrix_8x7(mat01,mat234,mat567, rho);
    polyvec7_ntt((polyvec7 *) z);   /* L */

    for (i = 0; i < 8 ; ++i) {

      if(i<2){
fff77114:	28 1c 00 01 	cmplwi  r28,1
fff77118:	41 a1 00 1c 	bgt     fff77134 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x25c>
      polyvec7_pointwise_acc_montgomery(&( w1->vec[i] ),
                               (const polyvec7 *) &( mat01[i] ),
                               (const polyvec7 *) z);
fff7711c:	81 41 29 3c 	lwz     r10,10556(r1)
fff77120:	57 84 68 24 	rlwinm  r4,r28,13,0,18
fff77124:	80 a1 29 70 	lwz     r5,10608(r1)
fff77128:	7f e3 fb 78 	mr      r3,r31
fff7712c:	7c 8a 22 14 	add     r4,r10,r4
fff77130:	4b ff f5 15 	bl      fff76644 <_ZL33polyvec7_pointwise_acc_montgomeryP4polyPK8polyvec7S3_>
fff77134:	39 5c ff fe 	addi    r10,r28,-2
      }
      if((i>=2)&&(i<=4)){
fff77138:	28 0a 00 02 	cmplwi  r10,2
      polyvec7_pointwise_acc_montgomery(&( w1->vec[i] ),
                               (const polyvec7 *) &( mat234[i-2] ),
                               (const polyvec7 *) z);
fff7713c:	7f e3 fb 78 	mr      r3,r31
fff77140:	80 81 29 2c 	lwz     r4,10540(r1)
      if(i<2){
      polyvec7_pointwise_acc_montgomery(&( w1->vec[i] ),
                               (const polyvec7 *) &( mat01[i] ),
                               (const polyvec7 *) z);
      }
      if((i>=2)&&(i<=4)){
fff77144:	40 81 00 14 	ble     fff77158 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x280>
      polyvec7_pointwise_acc_montgomery(&( w1->vec[i] ),
                               (const polyvec7 *) &( mat234[i-2] ),
                               (const polyvec7 *) z);
      }
      if(i>=5){
fff77148:	28 1c 00 04 	cmplwi  r28,4
fff7714c:	40 a1 00 14 	ble     fff77160 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x288>
      polyvec7_pointwise_acc_montgomery(&( w1->vec[i] ),
                               (const polyvec7 *) &( mat567[i-5] ),
                               (const polyvec7 *) z);
fff77150:	7f e3 fb 78 	mr      r3,r31
fff77154:	7f c4 f3 78 	mr      r4,r30
fff77158:	80 a1 29 70 	lwz     r5,10608(r1)
fff7715c:	4b ff f4 e9 	bl      fff76644 <_ZL33polyvec7_pointwise_acc_montgomeryP4polyPK8polyvec7S3_>
fff77160:	81 01 29 2c 	lwz     r8,10540(r1)
            /* Matrix-vector multiplication; compute Az - c2^dt1 */

    expand_matrix_8x7(mat01,mat234,mat567, rho);
    polyvec7_ntt((polyvec7 *) z);   /* L */

    for (i = 0; i < 8 ; ++i) {
fff77164:	3b 9c 00 01 	addi    r28,r28,1
fff77168:	39 08 20 00 	addi    r8,r8,8192
fff7716c:	3b ff 04 00 	addi    r31,r31,1024
fff77170:	91 01 29 2c 	stw     r8,10540(r1)
fff77174:	3b de 20 00 	addi    r30,r30,8192
fff77178:	06 5c 47 ce 	cmpwibne r28,8,fff77114 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x23c>
                               (const polyvec7 *) &( mat567[i-5] ),
                               (const polyvec7 *) z);
      }
    }

    cp = c;
fff7717c:	38 81 24 08 	addi    r4,r1,9224
fff77180:	38 a0 04 00 	li      r5,1024
fff77184:	7f a3 eb 78 	mr      r3,r29
fff77188:	48 00 32 31 	bl      fff7a3b8 <memcpy>
fff7718c:	3b e1 00 08 	addi    r31,r1,8
    poly_ntt256(&cp);
fff77190:	7f a3 eb 78 	mr      r3,r29
fff77194:	4b ff f1 9d 	bl      fff76330 <_ZL11poly_ntt256P4poly>
fff77198:	7f fe fb 78 	mr      r30,r31
polyvec8_shiftl(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
        poly_shiftl(&( v->vec[i] ));
fff7719c:	7f c3 f3 78 	mr      r3,r30
fff771a0:	3b de 04 00 	addi    r30,r30,1024
fff771a4:	4b ff f1 6d 	bl      fff76310 <_ZL11poly_shiftlP4poly>
static void
polyvec8_shiftl(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
fff771a8:	04 5d f7 fa 	cmpwbne r29,r30,fff7719c <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x2c4>
fff771ac:	7f fe fb 78 	mr      r30,r31
polyvec8_ntt(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
        poly_ntt256(&( v->vec[i] ));
fff771b0:	7f c3 f3 78 	mr      r3,r30
fff771b4:	3b de 04 00 	addi    r30,r30,1024
fff771b8:	4b ff f1 79 	bl      fff76330 <_ZL11poly_ntt256P4poly>
static void
polyvec8_ntt(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
fff771bc:	04 5d f7 fa 	cmpwbne r29,r30,fff771b0 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x2d8>
    polyvec8_shiftl((polyvec8 *) t1);
    polyvec8_ntt((polyvec8 *) t1);

    for (i = 0; i < 8; ++i) {
        poly_pointwise_montgomery(&( t1->vec[i] ), &cp,
                                  &( t1->vec[i] ));
fff771c0:	7f e3 fb 78 	mr      r3,r31
fff771c4:	7f e5 fb 78 	mr      r5,r31
fff771c8:	7f a4 eb 78 	mr      r4,r29
fff771cc:	3b ff 04 00 	addi    r31,r31,1024
fff771d0:	4b ff f1 69 	bl      fff76338 <_ZL25poly_pointwise_montgomeryP4polyPKS_S2_>


    polyvec8_shiftl((polyvec8 *) t1);
    polyvec8_ntt((polyvec8 *) t1);

    for (i = 0; i < 8; ++i) {
fff771d4:	04 5d ff f6 	cmpwbne r29,r31,fff771c0 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x2e8>
fff771d8:	3b e0 00 00 	li      r31,0
fff771dc:	81 21 29 28 	lwz     r9,10536(r1)
    unsigned int i;

    for (i = 0; i < 8; ++i) {
        poly_sub(&( r->vec[i] ),
                 &( u->vec[i] ),
                 &( v->vec[i] ));
fff771e0:	39 41 00 08 	addi    r10,r1,8
fff771e4:	7c 69 fa 14 	add     r3,r9,r31
fff771e8:	7c aa fa 14 	add     r5,r10,r31
fff771ec:	7c 64 1b 78 	mr      r4,r3
fff771f0:	4b ff f0 f1 	bl      fff762e0 <_ZL8poly_subP4polyPKS_S2_>
static void
polyvec8_sub(polyvec8 *r, const polyvec8 *u, const polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
fff771f4:	2c 1f 1c 00 	cmpwi   r31,7168
fff771f8:	3b ff 04 00 	addi    r31,r31,1024
fff771fc:	40 82 ff e0 	bne     fff771dc <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x304>
fff77200:	3b e0 00 00 	li      r31,0
polyvec8_reduce(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
        poly_reduce(&( v->vec[i] ));
fff77204:	81 21 29 28 	lwz     r9,10536(r1)
fff77208:	7c 69 fa 14 	add     r3,r9,r31
fff7720c:	4b ff f0 35 	bl      fff76240 <_ZL11poly_reduceP4poly>
static void
polyvec8_reduce(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
fff77210:	2c 1f 1c 00 	cmpwi   r31,7168
fff77214:	3b ff 04 00 	addi    r31,r31,1024
fff77218:	40 82 ff ec 	bne     fff77204 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x32c>
fff7721c:	3b e0 00 00 	li      r31,0
polyvec8_invntt_tomont(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
        poly_invntt_tomont(&( v->vec[i] ));
fff77220:	81 21 29 28 	lwz     r9,10536(r1)
fff77224:	7c 69 fa 14 	add     r3,r9,r31
fff77228:	4b ff f1 0d 	bl      fff76334 <_ZL18poly_invntt_tomontP4poly>
static void
polyvec8_invntt_tomont(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
fff7722c:	2c 1f 1c 00 	cmpwi   r31,7168
fff77230:	3b ff 04 00 	addi    r31,r31,1024
fff77234:	40 82 ff ec 	bne     fff77220 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x348>
fff77238:	3b e0 00 00 	li      r31,0
polyvec8_csubq(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
        poly_csubq(&( v->vec[i] ));
fff7723c:	81 21 29 28 	lwz     r9,10536(r1)
fff77240:	7c 69 fa 14 	add     r3,r9,r31
fff77244:	4b ff f0 39 	bl      fff7627c <_ZL10poly_csubqP4poly>
static void
polyvec8_csubq(polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
fff77248:	2c 1f 1c 00 	cmpwi   r31,7168
fff7724c:	3b ff 04 00 	addi    r31,r31,1024
fff77250:	40 82 ff ec 	bne     fff7723c <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x364>
fff77254:	3b e0 00 00 	li      r31,0
fff77258:	81 21 29 28 	lwz     r9,10536(r1)
    unsigned int i;

    for (i = 0; i < 8; ++i) {
        poly_use_hint(&( r->vec[i] ),
                      &( u->vec[i] ),
                      &( v->vec[i] ));
fff7725c:	81 41 29 74 	lwz     r10,10612(r1)
fff77260:	7c 69 fa 14 	add     r3,r9,r31
fff77264:	7c aa fa 14 	add     r5,r10,r31
fff77268:	7c 64 1b 78 	mr      r4,r3
fff7726c:	4b ff f1 31 	bl      fff7639c <_ZL13poly_use_hintP4polyPKS_S2_>
            const polyvec8 *u,
            const polyvec8 *v)
{
    unsigned int i;

    for (i = 0; i < 8; ++i) {
fff77270:	2c 1f 1c 00 	cmpwi   r31,7168
fff77274:	3b ff 04 00 	addi    r31,r31,1024
fff77278:	40 82 ff e0 	bne     fff77258 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x380>
    polyvec8_use_hint((polyvec8 *) w1, (const polyvec8 *) w1,
                      (const polyvec8 *)h);

                 /* Call random oracle and verify challenge */

    dil_challenge(&cp, mu, w1, 8);
fff7727c:	80 a1 29 28 	lwz     r5,10536(r1)
fff77280:	7f a3 eb 78 	mr      r3,r29
fff77284:	38 81 28 d8 	addi    r4,r1,10456
fff77288:	4b ff f6 d1 	bl      fff76958 <_ZL13dil_challengeP4polyPKhPK11polyvec_maxj.constprop.2>
fff7728c:	39 00 01 00 	li      r8,256
fff77290:	7d 09 03 a6 	mtctr   r8
fff77294:	39 20 00 00 	li      r9,0

    for (i = 0; i < DIL_N; ++i) {
        if (c.coeffs[i] != cp.coeffs[i])
fff77298:	39 41 24 08 	addi    r10,r1,9224
fff7729c:	7d 09 50 2e 	lwzx    r8,r9,r10
fff772a0:	39 41 20 08 	addi    r10,r1,8200
fff772a4:	7d 49 50 2e 	lwzx    r10,r9,r10
fff772a8:	04 48 56 66 	cmpwbne r8,r10,fff76f74 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x9c>
fff772ac:	39 29 00 04 	addi    r9,r9,4

                 /* Call random oracle and verify challenge */

    dil_challenge(&cp, mu, w1, 8);

    for (i = 0; i < DIL_N; ++i) {
fff772b0:	42 00 ff e8 	bdnz    fff77298 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_+0x3c0>
        if (c.coeffs[i] != cp.coeffs[i])
            return 0;
    }

    return 1;
fff772b4:	38 60 00 01 	li      r3,1
}
fff772b8:	80 01 29 64 	lwz     r0,10596(r1)
fff772bc:	17 81 29 50 	lvd     d28,10576(r1)
fff772c0:	7c 08 03 a6 	mtlr    r0
fff772c4:	17 c1 29 58 	lvd     d30,10584(r1)
fff772c8:	38 21 29 60 	addi    r1,r1,10592
fff772cc:	4e 80 00 20 	blr
fff772d0:	00 00 00 00 	.long 0x0
fff772d4:	00 00 00 01 	.long 0x1
fff772d8:	00 00 00 00 	.long 0x0
fff772dc:	00 00 80 82 	.long 0x8082
fff772e0:	80 00 00 00 	lwz     r0,0(0)
fff772e4:	00 00 80 8a 	.long 0x808a
fff772e8:	80 00 00 00 	lwz     r0,0(0)
fff772ec:	80 00 80 00 	lwz     r0,-32768(0)
fff772f0:	00 00 00 00 	.long 0x0
fff772f4:	00 00 80 8b 	.long 0x808b
fff772f8:	00 00 00 00 	.long 0x0
fff772fc:	80 00 00 01 	lwz     r0,1(0)
fff77300:	80 00 00 00 	lwz     r0,0(0)
fff77304:	80 00 80 81 	lwz     r0,-32639(0)
fff77308:	80 00 00 00 	lwz     r0,0(0)
fff7730c:	00 00 80 09 	.long 0x8009
fff77310:	00 00 00 00 	.long 0x0
fff77314:	00 00 00 8a 	.long 0x8a
fff77318:	00 00 00 00 	.long 0x0
fff7731c:	00 00 00 88 	.long 0x88
fff77320:	00 00 00 00 	.long 0x0
fff77324:	80 00 80 09 	lwz     r0,-32759(0)
fff77328:	00 00 00 00 	.long 0x0
fff7732c:	80 00 00 0a 	lwz     r0,10(0)
fff77330:	00 00 00 00 	.long 0x0
fff77334:	80 00 80 8b 	lwz     r0,-32629(0)
fff77338:	80 00 00 00 	lwz     r0,0(0)
fff7733c:	00 00 00 8b 	.long 0x8b
fff77340:	80 00 00 00 	lwz     r0,0(0)
fff77344:	00 00 80 89 	.long 0x8089
fff77348:	80 00 00 00 	lwz     r0,0(0)
fff7734c:	00 00 80 03 	.long 0x8003
fff77350:	80 00 00 00 	lwz     r0,0(0)
fff77354:	00 00 80 02 	.long 0x8002
fff77358:	80 00 00 00 	lwz     r0,0(0)
fff7735c:	00 00 00 80 	.long 0x80
fff77360:	00 00 00 00 	.long 0x0
fff77364:	00 00 80 0a 	.long 0x800a
fff77368:	80 00 00 00 	lwz     r0,0(0)
fff7736c:	80 00 00 0a 	lwz     r0,10(0)
fff77370:	80 00 00 00 	lwz     r0,0(0)
fff77374:	80 00 80 81 	lwz     r0,-32639(0)
fff77378:	80 00 00 00 	lwz     r0,0(0)
fff7737c:	00 00 80 80 	.long 0x8080
fff77380:	00 00 00 00 	.long 0x0
fff77384:	80 00 00 01 	lwz     r0,1(0)
fff77388:	80 00 00 00 	lwz     r0,0(0)
fff7738c:	80 00 80 08 	lwz     r0,-32760(0)
fff77390:	00 00 00 00 	.long 0x0
fff77394:	00 00 64 f7 	.long 0x64f7
fff77398:	00 58 11 03 	.long 0x581103
fff7739c:	00 77 f5 04 	.long 0x77f504
fff773a0:	00 03 9e 44 	.long 0x39e44
fff773a4:	00 74 01 19 	.long 0x740119
fff773a8:	00 72 81 29 	.long 0x728129
fff773ac:	00 07 1e 24 	.long 0x71e24
fff773b0:	00 1b de 2b 	.long 0x1bde2b
fff773b4:	00 23 e9 2b 	.long 0x23e92b
fff773b8:	00 7a 64 ae 	.long 0x7a64ae
fff773bc:	00 5f f4 80 	.long 0x5ff480
fff773c0:	00 2f 9a 75 	.long 0x2f9a75
fff773c4:	00 53 db 0a 	.long 0x53db0a
fff773c8:	00 2f 7a 49 	.long 0x2f7a49
fff773cc:	00 28 e5 27 	.long 0x28e527
fff773d0:	00 29 96 58 	.long 0x299658
fff773d4:	00 0f a0 70 	.long 0xfa070
fff773d8:	00 6f 65 a5 	.long 0x6f65a5
fff773dc:	00 36 b7 88 	.long 0x36b788
fff773e0:	00 77 7d 91 	.long 0x777d91
fff773e4:	00 6e ca a1 	.long 0x6ecaa1
fff773e8:	00 27 f9 68 	.long 0x27f968
fff773ec:	00 5f b3 7c 	.long 0x5fb37c
fff773f0:	00 5f 8d d7 	.long 0x5f8dd7
fff773f4:	00 44 fa e8 	.long 0x44fae8
fff773f8:	00 6a 84 f8 	.long 0x6a84f8
fff773fc:	00 4d dc 99 	.long 0x4ddc99
fff77400:	00 1a d0 35 	.long 0x1ad035
fff77404:	00 7f 94 23 	.long 0x7f9423
fff77408:	00 3d 32 01 	.long 0x3d3201
fff7740c:	00 04 45 c5 	.long 0x445c5
fff77410:	00 29 4a 67 	.long 0x294a67
fff77414:	00 01 76 20 	.long 0x17620
fff77418:	00 2e f4 cd 	.long 0x2ef4cd
fff7741c:	00 35 de c5 	.long 0x35dec5
fff77420:	00 66 85 04 	.long 0x668504
fff77424:	00 49 10 2d 	.long 0x49102d
fff77428:	00 59 27 d5 	.long 0x5927d5
fff7742c:	00 3b be af 	.long 0x3bbeaf
fff77430:	00 44 f5 86 	.long 0x44f586
fff77434:	00 51 6e 7d 	.long 0x516e7d
fff77438:	00 36 8a 96 	.long 0x368a96
fff7743c:	00 54 1e 42 	.long 0x541e42
fff77440:	00 36 04 00 	.long 0x360400
fff77444:	00 7b 4a 4e 	.long 0x7b4a4e
fff77448:	00 23 d6 9c 	.long 0x23d69c
fff7744c:	00 77 a5 5e 	.long 0x77a55e
fff77450:	00 65 f2 3e 	.long 0x65f23e
fff77454:	00 66 ca d7 	.long 0x66cad7
fff77458:	00 35 7e 1e 	.long 0x357e1e
fff7745c:	00 45 8f 5a 	.long 0x458f5a
fff77460:	00 35 84 3f 	.long 0x35843f
fff77464:	00 5f 36 18 	.long 0x5f3618
fff77468:	00 67 74 5d 	.long 0x67745d
fff7746c:	00 38 73 8c 	.long 0x38738c
fff77470:	00 0c 63 a8 	.long 0xc63a8
fff77474:	00 08 1b 9a 	.long 0x81b9a
fff77478:	00 0e 8f 76 	.long 0xe8f76
fff7747c:	00 3b 38 53 	.long 0x3b3853
fff77480:	00 3b 85 34 	.long 0x3b8534
fff77484:	00 58 dc 31 	.long 0x58dc31
fff77488:	00 1f 9d 54 	.long 0x1f9d54
fff7748c:	00 55 2f 2e 	.long 0x552f2e
fff77490:	00 43 e6 e6 	.long 0x43e6e6
fff77494:	00 68 8c 82 	.long 0x688c82
fff77498:	00 47 c1 d0 	.long 0x47c1d0
fff7749c:	00 51 78 1a 	.long 0x51781a
fff774a0:	00 69 b6 5e 	.long 0x69b65e
fff774a4:	00 35 09 ee 	.long 0x3509ee
fff774a8:	00 21 35 c7 	.long 0x2135c7
fff774ac:	00 67 af bc 	.long 0x67afbc
fff774b0:	00 6c af 76 	.long 0x6caf76
fff774b4:	00 1d 97 72 	.long 0x1d9772
fff774b8:	00 41 90 73 	.long 0x419073
fff774bc:	00 70 9c f7 	.long 0x709cf7
fff774c0:	00 4f 32 81 	.long 0x4f3281
fff774c4:	00 4f b2 af 	.long 0x4fb2af
fff774c8:	00 48 70 e1 	.long 0x4870e1
fff774cc:	00 01 ef ca 	.long 0x1efca
fff774d0:	00 34 10 f2 	.long 0x3410f2
fff774d4:	00 70 de 86 	.long 0x70de86
fff774d8:	00 20 c6 38 	.long 0x20c638
fff774dc:	00 29 6e 9f 	.long 0x296e9f
fff774e0:	00 52 97 a4 	.long 0x5297a4
fff774e4:	00 47 84 4c 	.long 0x47844c
fff774e8:	00 79 9a 6e 	.long 0x799a6e
fff774ec:	00 5a 14 0a 	.long 0x5a140a
fff774f0:	00 75 a2 83 	.long 0x75a283
fff774f4:	00 6d 21 14 	.long 0x6d2114
fff774f8:	00 7f 86 3c 	.long 0x7f863c
fff774fc:	00 6b e9 f8 	.long 0x6be9f8
fff77500:	00 7a 0b de 	.long 0x7a0bde
fff77504:	00 14 95 d4 	.long 0x1495d4
fff77508:	00 1c 45 63 	.long 0x1c4563
fff7750c:	00 6a 0c 63 	.long 0x6a0c63
fff77510:	00 4c db ea 	.long 0x4cdbea
fff77514:	00 04 0a f0 	.long 0x40af0
fff77518:	00 07 c4 17 	.long 0x7c417
fff7751c:	00 2f 45 88 	.long 0x2f4588
fff77520:	00 00 ad 00 	.long 0xad00
fff77524:	00 6f 16 bf 	.long 0x6f16bf
fff77528:	00 0d cd 44 	.long 0xdcd44
fff7752c:	00 3c 67 5a 	.long 0x3c675a
fff77530:	00 47 0b cb 	.long 0x470bcb
fff77534:	00 7f be 7f 	.long 0x7fbe7f
fff77538:	00 19 39 48 	.long 0x193948
fff7753c:	00 4e 49 c1 	.long 0x4e49c1
fff77540:	00 24 75 6c 	.long 0x24756c
fff77544:	00 7c a7 e0 	.long 0x7ca7e0
fff77548:	00 0b 98 a1 	.long 0xb98a1
fff7754c:	00 6b c8 09 	.long 0x6bc809
fff77550:	00 02 e4 6c 	.long 0x2e46c
fff77554:	00 49 a8 09 	.long 0x49a809
fff77558:	00 30 36 c2 	.long 0x3036c2
fff7755c:	00 63 9f f7 	.long 0x639ff7
fff77560:	00 5b 1c 94 	.long 0x5b1c94
fff77564:	00 7d 2a e1 	.long 0x7d2ae1
fff77568:	00 14 13 05 	.long 0x141305
fff7756c:	00 14 77 92 	.long 0x147792
fff77570:	00 13 9e 25 	.long 0x139e25
fff77574:	00 67 b0 e1 	.long 0x67b0e1
fff77578:	00 73 79 45 	.long 0x737945
fff7757c:	00 69 e8 03 	.long 0x69e803
fff77580:	00 51 ce a3 	.long 0x51cea3
fff77584:	00 44 a7 9d 	.long 0x44a79d
fff77588:	00 48 80 58 	.long 0x488058
fff7758c:	00 3a 97 d9 	.long 0x3a97d9
fff77590:	00 1f ea 93 	.long 0x1fea93
fff77594:	00 33 ff 5a 	.long 0x33ff5a
fff77598:	00 23 58 d4 	.long 0x2358d4
fff7759c:	00 3a 41 f8 	.long 0x3a41f8
fff775a0:	00 4c df 73 	.long 0x4cdf73
fff775a4:	00 22 3d fb 	.long 0x223dfb
fff775a8:	00 5a 8b a0 	.long 0x5a8ba0
fff775ac:	00 49 84 23 	.long 0x498423
fff775b0:	00 04 12 f5 	.long 0x412f5
fff775b4:	00 25 25 87 	.long 0x252587
fff775b8:	00 6d 04 f1 	.long 0x6d04f1
fff775bc:	00 35 9b 5d 	.long 0x359b5d
fff775c0:	00 4a 28 a1 	.long 0x4a28a1
fff775c4:	00 46 82 fd 	.long 0x4682fd
fff775c8:	00 6d 9b 57 	.long 0x6d9b57
fff775cc:	00 4f 25 df 	.long 0x4f25df
fff775d0:	00 0d be 5e 	.long 0xdbe5e
fff775d4:	00 1c 5e 1a 	.long 0x1c5e1a
fff775d8:	00 0d e0 e6 	.long 0xde0e6
fff775dc:	00 0c 7f 5a 	.long 0xc7f5a
fff775e0:	00 07 8f 83 	.long 0x78f83
fff775e4:	00 67 42 8b 	.long 0x67428b
fff775e8:	00 7f 37 05 	.long 0x7f3705
fff775ec:	00 77 e6 fd 	.long 0x77e6fd
fff775f0:	00 75 e0 22 	.long 0x75e022
fff775f4:	00 50 3a f7 	.long 0x503af7
fff775f8:	00 1f 00 84 	.long 0x1f0084
fff775fc:	00 30 ef 86 	.long 0x30ef86
fff77600:	00 49 99 7e 	.long 0x49997e
fff77604:	00 77 dc d7 	.long 0x77dcd7
fff77608:	00 74 25 93 	.long 0x742593
fff7760c:	00 49 01 c3 	.long 0x4901c3
fff77610:	00 05 39 19 	.long 0x53919
fff77614:	00 04 61 0c 	.long 0x4610c
fff77618:	00 5a ad 42 	.long 0x5aad42
fff7761c:	00 3e b0 1b 	.long 0x3eb01b
fff77620:	00 34 72 e7 	.long 0x3472e7
fff77624:	00 4c e0 3c 	.long 0x4ce03c
fff77628:	00 1a 7c c7 	.long 0x1a7cc7
fff7762c:	00 03 19 24 	.long 0x31924
fff77630:	00 2b 5e e5 	.long 0x2b5ee5
fff77634:	00 29 11 99 	.long 0x291199
fff77638:	00 58 5a 3b 	.long 0x585a3b
fff7763c:	00 13 4d 71 	.long 0x134d71
fff77640:	00 3d e1 1c 	.long 0x3de11c
fff77644:	00 13 09 84 	.long 0x130984
fff77648:	00 25 f0 51 	.long 0x25f051
fff7764c:	00 18 5a 46 	.long 0x185a46
fff77650:	00 46 65 19 	.long 0x466519
fff77654:	00 13 14 be 	.long 0x1314be
fff77658:	00 28 38 91 	.long 0x283891
fff7765c:	00 49 bb 91 	.long 0x49bb91
fff77660:	00 52 30 8a 	.long 0x52308a
fff77664:	00 1c 85 3f 	.long 0x1c853f
fff77668:	00 1d 0b 4b 	.long 0x1d0b4b
fff7766c:	00 6f d6 a7 	.long 0x6fd6a7
fff77670:	00 6b 88 bf 	.long 0x6b88bf
fff77674:	00 12 e1 1b 	.long 0x12e11b
fff77678:	00 4d 3e 3f 	.long 0x4d3e3f
fff7767c:	00 6a 0d 30 	.long 0x6a0d30
fff77680:	00 78 fd e5 	.long 0x78fde5
fff77684:	00 14 06 c7 	.long 0x1406c7
fff77688:	00 32 72 83 	.long 0x327283
fff7768c:	00 61 ed 6f 	.long 0x61ed6f
fff77690:	00 6c 59 54 	.long 0x6c5954
fff77694:	00 1d 40 99 	.long 0x1d4099
fff77698:	00 59 05 79 	.long 0x590579
fff7769c:	00 6a e5 ae 	.long 0x6ae5ae
fff776a0:	00 16 e4 05 	.long 0x16e405
fff776a4:	00 0b db e7 	.long 0xbdbe7
fff776a8:	00 22 1d e8 	.long 0x221de8
fff776ac:	00 33 f8 cf 	.long 0x33f8cf
fff776b0:	00 77 99 35 	.long 0x779935
fff776b4:	00 54 aa 0d 	.long 0x54aa0d
fff776b8:	00 66 5f f9 	.long 0x665ff9
fff776bc:	00 63 b1 58 	.long 0x63b158
fff776c0:	00 58 71 1c 	.long 0x58711c
fff776c4:	00 47 0c 13 	.long 0x470c13
fff776c8:	00 09 10 d8 	.long 0x910d8
fff776cc:	00 46 3e 20 	.long 0x463e20
fff776d0:	00 61 26 59 	.long 0x612659
fff776d4:	00 25 1d 8b 	.long 0x251d8b
fff776d8:	00 25 73 b7 	.long 0x2573b7
fff776dc:	00 7d 5c 90 	.long 0x7d5c90
fff776e0:	00 1d dd 98 	.long 0x1ddd98
fff776e4:	00 33 68 98 	.long 0x336898
fff776e8:	00 02 d4 bb 	.long 0x2d4bb
fff776ec:	00 6d 73 a8 	.long 0x6d73a8
fff776f0:	00 4f 4c bf 	.long 0x4f4cbf
fff776f4:	00 02 7c 1c 	.long 0x27c1c
fff776f8:	00 18 aa 08 	.long 0x18aa08
fff776fc:	00 2d fd 71 	.long 0x2dfd71
fff77700:	00 0c 5c a5 	.long 0xc5ca5
fff77704:	00 19 37 9a 	.long 0x19379a
fff77708:	00 47 81 68 	.long 0x478168
fff7770c:	00 64 6c 3e 	.long 0x646c3e
fff77710:	00 51 81 3d 	.long 0x51813d
fff77714:	00 35 c5 39 	.long 0x35c539
fff77718:	00 3b 01 15 	.long 0x3b0115
fff7771c:	00 04 1d c0 	.long 0x41dc0
fff77720:	00 21 c4 f7 	.long 0x21c4f7
fff77724:	00 70 fb f5 	.long 0x70fbf5
fff77728:	00 1a 35 e7 	.long 0x1a35e7
fff7772c:	00 07 34 0e 	.long 0x7340e
fff77730:	00 79 5d 46 	.long 0x795d46
fff77734:	00 1a 4c d0 	.long 0x1a4cd0
fff77738:	00 64 5c af 	.long 0x645caf
fff7773c:	00 1d 26 68 	.long 0x1d2668
fff77740:	00 66 6e 99 	.long 0x666e99
fff77744:	00 6f 06 34 	.long 0x6f0634
fff77748:	00 7b e5 db 	.long 0x7be5db
fff7774c:	00 45 5f dc 	.long 0x455fdc
fff77750:	00 53 07 65 	.long 0x530765
fff77754:	00 5d c1 b0 	.long 0x5dc1b0
fff77758:	00 79 73 de 	.long 0x7973de
fff7775c:	00 5c fd 0a 	.long 0x5cfd0a
fff77760:	00 02 cc 93 	.long 0x2cc93
fff77764:	00 70 f8 06 	.long 0x70f806
fff77768:	00 18 9c 2a 	.long 0x189c2a
fff7776c:	00 49 c5 aa 	.long 0x49c5aa
fff77770:	00 77 6a 51 	.long 0x776a51
fff77774:	00 3b cf 2c 	.long 0x3bcf2c
fff77778:	00 7f 23 4f 	.long 0x7f234f
fff7777c:	00 6b 16 e0 	.long 0x6b16e0
fff77780:	00 3c 15 ca 	.long 0x3c15ca
fff77784:	00 15 5e 68 	.long 0x155e68
fff77788:	00 72 f6 b7 	.long 0x72f6b7
fff7778c:	00 1e 29 ce 	.long 0x1e29ce

fff77790 <CSWTCH.70>:
fff77790:	60 78 00 8c                                         `x..

fff77794 <CSWTCH.74>:
fff77794:	0a 8d 0d 26 00 00 12 3c                             ...&...<

Disassembly of section .cmnutils:

fff77ba0 <_ZN13sbe_local_LFRC1Ev>:
    {
        spi_clock_divider = 0;
        boot_selection = 0;
        mpipl = 0;
        ipl_reset = 0;
        hreset = 0;
fff77ba0:	a1 23 00 02 	lhz     r9,2(r3)
    uint32_t bitsreserved : 10;           //Bit 38-47 Reserved
    uint32_t pau_freq_in_mhz : 16;        //Bit 48-63 : odyssey,p11 :  PAU system frequency in MHz

    sbe_local_LFR()
    {
        spi_clock_divider = 0;
fff77ba4:	39 40 00 00 	li      r10,0
        ipl_reset = 0;
        hreset = 0;
        reserved = 0;
        mpipl_reset_done = 0;
        round_trip_delay = 0;
        secure_mode = 0;
fff77ba8:	71 29 10 ff 	andi.   r9,r9,4351
        pau_freq_in_mhz = 0;
fff77bac:	b1 43 00 06 	sth     r10,6(r3)
        ipl_reset = 0;
        hreset = 0;
        reserved = 0;
        mpipl_reset_done = 0;
        round_trip_delay = 0;
        secure_mode = 0;
fff77bb0:	51 49 64 e6 	rlwimi  r9,r10,12,19,19
fff77bb4:	91 23 00 00 	stw     r9,0(r3)
        pau_freq_in_mhz = 0;
        tpm_spi_clock_freq_Mhz = 0;
fff77bb8:	39 20 00 00 	li      r9,0
fff77bbc:	99 23 00 03 	stb     r9,3(r3)
        tpm_spi_clock_delay = 0;
fff77bc0:	81 23 00 04 	lwz     r9,4(r3)
        disable_scom_filtering = 0;
        disable_invalid_scom_addr_check = 0;
        // This is required else these gets initialised with dummy data
        bitsreserved = 0;
fff77bc4:	55 29 01 be 	clrlwi  r9,r9,6
fff77bc8:	51 49 81 9e 	rlwimi  r9,r10,16,6,15
fff77bcc:	91 23 00 04 	stw     r9,4(r3)
fff77bd0:	4e 80 00 20 	blr

fff77bd4 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_>:
        static bool simics = isSimics();
        return simics;
    }

    HASH_LIST_RET_t check_file_hash(const char *i_fname, const sha3_t &i_hash, const uint8_t *i_hash_list)
    {
fff77bd4:	94 21 ff e8 	stwu    r1,-24(r1)
fff77bd8:	7c 08 02 a6 	mflr    r0
fff77bdc:	1b 81 00 08 	stvd    d28,8(r1)
fff77be0:	1b c1 00 10 	stvd    d30,16(r1)
fff77be4:	90 01 00 1c 	stw     r0,28(r1)
fff77be8:	7c bf 2b 78 	mr      r31,r5
fff77bec:	7c 7e 1b 78 	mr      r30,r3
fff77bf0:	7c 9d 23 78 	mr      r29,r4
        const int in_fnlen = strlen(i_fname);
fff77bf4:	48 00 28 91 	bl      fff7a484 <strlen>
fff77bf8:	7c 7c 1b 78 	mr      r28,r3

        // First Byte in hash list is version and 2nd byte is hash algorithm used.
        //We need to skip these two fields and start searching for file
        i_hash_list += 2;
fff77bfc:	39 3f 00 02 	addi    r9,r31,2
        {
            //1Byte is reserved
            i_hash_list += 1;

            //1Byte is file name length
            const uint8_t fnlen = *i_hash_list++;
fff77c00:	38 89 00 02 	addi    r4,r9,2
fff77c04:	89 29 00 01 	lbz     r9,1(r9)

            if (!fnlen)
fff77c08:	06 49 00 16 	bwnz    r9,fff77c34 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0x60>
            {
                SBE_ERROR_BIN("File not found in hash list", i_fname, in_fnlen);
fff77c0c:	2c 1c 00 fe 	cmpwi   r28,254
fff77c10:	3c 60 44 e3 	lis     r3,17635
fff77c14:	60 63 00 ff 	ori     r3,r3,255
fff77c18:	41 81 00 0c 	bgt     fff77c24 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0x50>
fff77c1c:	57 83 04 3e 	clrlwi  r3,r28,16
fff77c20:	64 63 44 e3 	oris    r3,r3,17635
fff77c24:	7f c4 f3 78 	mr      r4,r30
fff77c28:	48 00 3c a5 	bl      fff7b8cc <pk_trace_binary>
                return FILE_NOT_FOUND;
fff77c2c:	3b e0 00 02 	li      r31,2
fff77c30:	48 00 00 70 	b       fff77ca0 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0xcc>
            }

            const sha3_t *filehash = (const sha3_t *)(i_hash_list + fnlen);
fff77c34:	7f e4 4a 14 	add     r31,r4,r9
            if (in_fnlen == fnlen && !memcmp(i_fname, i_hash_list, fnlen))
fff77c38:	04 5c 48 30 	cmpwbne r28,r9,fff77c98 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0xc4>
fff77c3c:	7f c3 f3 78 	mr      r3,r30
fff77c40:	7f 85 e3 78 	mr      r5,r28
fff77c44:	48 00 28 01 	bl      fff7a444 <memcmp>
fff77c48:	06 43 00 28 	bwnz    r3,fff77c98 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0xc4>
            {
                if (!memcmp(filehash, i_hash, sizeof(i_hash)))
fff77c4c:	7f e3 fb 78 	mr      r3,r31
fff77c50:	7f a4 eb 78 	mr      r4,r29
fff77c54:	38 a0 00 40 	li      r5,64
fff77c58:	48 00 27 ed 	bl      fff7a444 <memcmp>
fff77c5c:	7c 7f 1b 78 	mr      r31,r3
fff77c60:	06 43 00 08 	bwnz    r3,fff77c70 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0x9c>
                {
                    SBE_INFO("File hash matches");
fff77c64:	3c 60 af 74 	lis     r3,-20620
fff77c68:	48 00 35 75 	bl      fff7b1dc <pk_trace_tiny>
                    return HASH_COMPARE_PASS;
fff77c6c:	48 00 00 34 	b       fff77ca0 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0xcc>
                }
                else
                {
                    SBE_ERROR_BIN("File hash does not match", i_fname, in_fnlen);
fff77c70:	2c 1c 00 ff 	cmpwi   r28,255
fff77c74:	3c 60 f0 42 	lis     r3,-4030
fff77c78:	60 63 00 ff 	ori     r3,r3,255
fff77c7c:	41 82 00 0c 	beq     fff77c88 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0xb4>
fff77c80:	57 83 04 3e 	clrlwi  r3,r28,16
fff77c84:	64 63 f0 42 	oris    r3,r3,61506
fff77c88:	7f c4 f3 78 	mr      r4,r30
fff77c8c:	48 00 3c 41 	bl      fff7b8cc <pk_trace_binary>
                    return HASH_COMPARE_FAIL;
fff77c90:	3b e0 00 01 	li      r31,1
fff77c94:	48 00 00 0c 	b       fff77ca0 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0xcc>
                }
            }

            i_hash_list = (const uint8_t *)(filehash + 1);
fff77c98:	39 3f 00 40 	addi    r9,r31,64
        }
fff77c9c:	4b ff ff 64 	b       fff77c00 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_+0x2c>
    }
fff77ca0:	80 01 00 1c 	lwz     r0,28(r1)
fff77ca4:	7f e3 fb 78 	mr      r3,r31
fff77ca8:	7c 08 03 a6 	mtlr    r0
fff77cac:	17 81 00 08 	lvd     d28,8(r1)
fff77cb0:	17 c1 00 10 	lvd     d30,16(r1)
fff77cb4:	38 21 00 18 	addi    r1,r1,24
fff77cb8:	4e 80 00 20 	blr

fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>:

    void updateErrorCodeAndHalt(uint16_t i_errorCode)
    {
fff77cbc:	94 21 ff e0 	stwu    r1,-32(r1)
fff77cc0:	7c 08 02 a6 	mflr    r0
fff77cc4:	1b c1 00 18 	stvd    d30,24(r1)
fff77cc8:	7c 7f 1b 78 	mr      r31,r3
        secureBootFailStatus_t secureBootFailStatus;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, &secureBootFailStatus.iv_mbx13);
fff77ccc:	3c 60 00 05 	lis     r3,5
fff77cd0:	38 81 00 08 	addi    r4,r1,8
fff77cd4:	60 63 01 84 	ori     r3,r3,388
            i_hash_list = (const uint8_t *)(filehash + 1);
        }
    }

    void updateErrorCodeAndHalt(uint16_t i_errorCode)
    {
fff77cd8:	90 01 00 24 	stw     r0,36(r1)
        secureBootFailStatus_t secureBootFailStatus;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, &secureBootFailStatus.iv_mbx13);
fff77cdc:	48 00 25 51 	bl      fff7a22c <getscom_abs>
        secureBootFailStatus.iv_secureHeaderFailStatusCode = i_errorCode;
fff77ce0:	81 21 00 08 	lwz     r9,8(r1)
        putscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, secureBootFailStatus.iv_mbx13);
fff77ce4:	3c 60 00 05 	lis     r3,5

    void updateErrorCodeAndHalt(uint16_t i_errorCode)
    {
        secureBootFailStatus_t secureBootFailStatus;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, &secureBootFailStatus.iv_mbx13);
        secureBootFailStatus.iv_secureHeaderFailStatusCode = i_errorCode;
fff77ce8:	53 e9 05 3e 	rlwimi  r9,r31,0,20,31
fff77cec:	91 21 00 08 	stw     r9,8(r1)
        putscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, secureBootFailStatus.iv_mbx13);
fff77cf0:	60 63 01 84 	ori     r3,r3,388
fff77cf4:	14 a1 00 08 	lvd     d5,8(r1)
fff77cf8:	48 00 25 25 	bl      fff7a21c <putscom_abs>
        SBE_ERROR(SBE_FUNC "Halting PPE...");
fff77cfc:	3c 60 e6 25 	lis     r3,-6619
fff77d00:	48 00 34 dd 	bl      fff7b1dc <pk_trace_tiny>
        pk_halt();
fff77d04:	48 00 2c 81 	bl      fff7a984 <pk_halt>

fff77d08 <_ZN3SBE15updateErrorCodeEt>:
    }

    void updateErrorCode(uint16_t i_errorCode)
    {
fff77d08:	94 21 ff e0 	stwu    r1,-32(r1)
fff77d0c:	7c 08 02 a6 	mflr    r0
fff77d10:	1b c1 00 18 	stvd    d30,24(r1)
fff77d14:	7c 7f 1b 78 	mr      r31,r3
        secureBootFailStatus_t secureBootFailStatus;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, &secureBootFailStatus.iv_mbx13);
fff77d18:	3c 60 00 05 	lis     r3,5
fff77d1c:	38 81 00 08 	addi    r4,r1,8
fff77d20:	60 63 01 84 	ori     r3,r3,388
        SBE_ERROR(SBE_FUNC "Halting PPE...");
        pk_halt();
    }

    void updateErrorCode(uint16_t i_errorCode)
    {
fff77d24:	90 01 00 24 	stw     r0,36(r1)
        secureBootFailStatus_t secureBootFailStatus;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, &secureBootFailStatus.iv_mbx13);
fff77d28:	48 00 25 05 	bl      fff7a22c <getscom_abs>
        secureBootFailStatus.iv_secureHeaderFailStatusCode = i_errorCode;
fff77d2c:	81 21 00 08 	lwz     r9,8(r1)
        putscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, secureBootFailStatus.iv_mbx13);
fff77d30:	3c 60 00 05 	lis     r3,5

    void updateErrorCode(uint16_t i_errorCode)
    {
        secureBootFailStatus_t secureBootFailStatus;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, &secureBootFailStatus.iv_mbx13);
        secureBootFailStatus.iv_secureHeaderFailStatusCode = i_errorCode;
fff77d34:	53 e9 05 3e 	rlwimi  r9,r31,0,20,31
fff77d38:	91 21 00 08 	stw     r9,8(r1)
        putscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW, secureBootFailStatus.iv_mbx13);
fff77d3c:	60 63 01 84 	ori     r3,r3,388
fff77d40:	14 a1 00 08 	lvd     d5,8(r1)
fff77d44:	48 00 24 d9 	bl      fff7a21c <putscom_abs>
    }
fff77d48:	80 01 00 24 	lwz     r0,36(r1)
fff77d4c:	17 c1 00 18 	lvd     d30,24(r1)
fff77d50:	7c 08 03 a6 	mtlr    r0
fff77d54:	38 21 00 20 	addi    r1,r1,32
fff77d58:	4e 80 00 20 	blr

fff77d5c <_ZN3SBE8isHresetEv>:
        // Read Freq value from LFR and update CMN_GLOBAL->sbe_freq
        updateSbeGlobalFreqFromLFR();
    }

    bool isHreset(void)
    {
fff77d5c:	94 21 ff e8 	stwu    r1,-24(r1)
fff77d60:	7c 08 02 a6 	mflr    r0
        #define SBE_FUNC "IS_HRESET"
        bool isHreset = false;
        sbe_local_LFR lfrReg;
fff77d64:	38 61 00 08 	addi    r3,r1,8
        // Read Freq value from LFR and update CMN_GLOBAL->sbe_freq
        updateSbeGlobalFreqFromLFR();
    }

    bool isHreset(void)
    {
fff77d68:	90 01 00 1c 	stw     r0,28(r1)
        #define SBE_FUNC "IS_HRESET"
        bool isHreset = false;
        sbe_local_LFR lfrReg;
fff77d6c:	4b ff fe 35 	bl      fff77ba0 <_ZN13sbe_local_LFRC1Ev>
        PPE_LVD(0xc0002040, lfrReg);
fff77d70:	3d 00 c0 00 	lis     r8,-16384
fff77d74:	61 08 20 40 	ori     r8,r8,8256
fff77d78:	15 08 00 00 	lvd     d8,0(r8)
        isHreset = lfrReg.hreset;
        return (isHreset);
        #undef SBE_FUNC
    }
fff77d7c:	80 01 00 1c 	lwz     r0,28(r1)
    bool isHreset(void)
    {
        #define SBE_FUNC "IS_HRESET"
        bool isHreset = false;
        sbe_local_LFR lfrReg;
        PPE_LVD(0xc0002040, lfrReg);
fff77d80:	19 01 00 08 	stvd    d8,8(r1)
        isHreset = lfrReg.hreset;
        return (isHreset);
        #undef SBE_FUNC
    }
fff77d84:	7c 08 03 a6 	mtlr    r0
fff77d88:	80 61 00 08 	lwz     r3,8(r1)
fff77d8c:	54 63 8f fe 	rlwinm  r3,r3,17,31,31
fff77d90:	38 21 00 18 	addi    r1,r1,24
fff77d94:	4e 80 00 20 	blr

fff77d98 <_ZN3SBE18updateProgressCodeEh>:

    void updateProgressCode(uint8_t value)
    {
fff77d98:	94 21 ff e0 	stwu    r1,-32(r1)
fff77d9c:	7c 08 02 a6 	mflr    r0
fff77da0:	1b c1 00 18 	stvd    d30,24(r1)
fff77da4:	7c 7f 1b 78 	mr      r31,r3
        messagingReg_t messagingReg;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, &messagingReg.iv_messagingReg);
fff77da8:	3c 60 00 05 	lis     r3,5
fff77dac:	38 81 00 08 	addi    r4,r1,8
fff77db0:	60 63 00 09 	ori     r3,r3,9
        return (isHreset);
        #undef SBE_FUNC
    }

    void updateProgressCode(uint8_t value)
    {
fff77db4:	90 01 00 24 	stw     r0,36(r1)
        messagingReg_t messagingReg;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, &messagingReg.iv_messagingReg);
fff77db8:	48 00 24 75 	bl      fff7a22c <getscom_abs>
        messagingReg.iv_progressCode = value;
fff77dbc:	81 21 00 08 	lwz     r9,8(r1)
        putscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, messagingReg.iv_messagingReg);
fff77dc0:	3c 60 00 05 	lis     r3,5

    void updateProgressCode(uint8_t value)
    {
        messagingReg_t messagingReg;
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, &messagingReg.iv_messagingReg);
        messagingReg.iv_progressCode = value;
fff77dc4:	53 e9 06 be 	rlwimi  r9,r31,0,26,31
fff77dc8:	91 21 00 08 	stw     r9,8(r1)
        putscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, messagingReg.iv_messagingReg);
fff77dcc:	60 63 00 09 	ori     r3,r3,9
fff77dd0:	14 a1 00 08 	lvd     d5,8(r1)
fff77dd4:	48 00 24 49 	bl      fff7a21c <putscom_abs>
    }
fff77dd8:	80 01 00 24 	lwz     r0,36(r1)
fff77ddc:	17 c1 00 18 	lvd     d30,24(r1)
fff77de0:	7c 08 03 a6 	mtlr    r0
fff77de4:	38 21 00 20 	addi    r1,r1,32
fff77de8:	4e 80 00 20 	blr

fff77dec <_Z13_get_metadataPKvm>:
#include "metadata_base.H"

const void *_get_metadata(const void *start, uint32_t tag)
{
    uint32_t *ptr = (uint32_t *)start;
    while (*ptr) {
fff77dec:	81 23 00 00 	lwz     r9,0(r3)
fff77df0:	06 c9 00 1c 	bwz     r9,fff77e28 <_Z13_get_metadataPKvm+0x3c>
        ImageMetadataHeader *hdr = (ImageMetadataHeader *)ptr++;
        if (hdr->tag == tag)
fff77df4:	89 23 00 00 	lbz     r9,0(r3)

const void *_get_metadata(const void *start, uint32_t tag)
{
    uint32_t *ptr = (uint32_t *)start;
    while (*ptr) {
        ImageMetadataHeader *hdr = (ImageMetadataHeader *)ptr++;
fff77df8:	39 03 00 04 	addi    r8,r3,4
        if (hdr->tag == tag)
fff77dfc:	55 2a 80 1e 	rlwinm  r10,r9,16,0,15
fff77e00:	89 23 00 01 	lbz     r9,1(r3)
fff77e04:	55 29 40 2e 	rlwinm  r9,r9,8,0,23
fff77e08:	7d 29 53 78 	or      r9,r9,r10
fff77e0c:	89 43 00 02 	lbz     r10,2(r3)
fff77e10:	7d 49 4b 78 	or      r9,r10,r9
fff77e14:	04 c9 20 0e 	cmpwbeq r9,r4,fff77e30 <_Z13_get_metadataPKvm+0x44>
        {
            return ptr;
        }
        ptr += hdr->len;
fff77e18:	89 23 00 03 	lbz     r9,3(r3)
fff77e1c:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
fff77e20:	7c 68 4a 14 	add     r3,r8,r9
fff77e24:	4b ff ff c8 	b       fff77dec <_Z13_get_metadataPKvm>
    }
    return nullptr;
fff77e28:	38 60 00 00 	li      r3,0
fff77e2c:	4e 80 00 20 	blr
    uint32_t *ptr = (uint32_t *)start;
    while (*ptr) {
        ImageMetadataHeader *hdr = (ImageMetadataHeader *)ptr++;
        if (hdr->tag == tag)
        {
            return ptr;
fff77e30:	7d 03 43 78 	mr      r3,r8
        }
        ptr += hdr->len;
    }
    return nullptr;
}
fff77e34:	4e 80 00 20 	blr

Disassembly of section .cmncore:

fff78238 <_Z27createAndResumeThreadHelperP8PkThreadPFvPvES1_mj19sbeThreadPriorities>:
                                PkThreadRoutine   i_thread_routine,
                                void             *io_pArg,
                                PkAddress         i_stack,
                                size_t            i_stack_size,
                                sbeThreadPriorities  i_priority)
{
fff78238:	94 21 ff f0 	stwu    r1,-16(r1)
fff7823c:	7c 08 02 a6 	mflr    r0
    rc =  pk_thread_create(io_pThread,
                             i_thread_routine,
                             io_pArg,
                             i_stack,
                             i_stack_size,
                             (PkThreadPriority)i_priority);
fff78240:	55 08 06 3e 	clrlwi  r8,r8,24
                                PkThreadRoutine   i_thread_routine,
                                void             *io_pArg,
                                PkAddress         i_stack,
                                size_t            i_stack_size,
                                sbeThreadPriorities  i_priority)
{
fff78244:	1b c1 00 08 	stvd    d30,8(r1)
fff78248:	90 01 00 14 	stw     r0,20(r1)
fff7824c:	7c 7e 1b 78 	mr      r30,r3
    rc =  pk_thread_create(io_pThread,
                             i_thread_routine,
                             io_pArg,
                             i_stack,
                             i_stack_size,
                             (PkThreadPriority)i_priority);
fff78250:	48 00 31 3d 	bl      fff7b38c <pk_thread_create>
fff78254:	7c 7f 1b 78 	mr      r31,r3
    if(rc == PK_OK)
fff78258:	06 43 00 0a 	bwnz    r3,fff7826c <_Z27createAndResumeThreadHelperP8PkThreadPFvPvES1_mj19sbeThreadPriorities+0x34>
    {
        // resume the thread once created
        rc = pk_thread_resume(io_pThread);
fff7825c:	7f c3 f3 78 	mr      r3,r30
fff78260:	48 00 34 ad 	bl      fff7b70c <pk_thread_resume>
fff78264:	7c 7f 1b 78 	mr      r31,r3
    }

    // Check for errors creating or resuming the thread
    if(rc != PK_OK)
fff78268:	06 c3 00 10 	bwz     r3,fff78288 <_Z27createAndResumeThreadHelperP8PkThreadPFvPvES1_mj19sbeThreadPriorities+0x50>
    {
        SBE_ERROR ("Failure creating/resuming thread, rc=[%d]", rc);
fff7826c:	3c 60 bf 45 	lis     r3,-16571
fff78270:	60 63 00 01 	ori     r3,r3,1
fff78274:	7f e5 fb 78 	mr      r5,r31
fff78278:	38 c0 00 00 	li      r6,0
fff7827c:	38 e0 00 00 	li      r7,0
fff78280:	39 00 00 00 	li      r8,0
fff78284:	48 00 35 55 	bl      fff7b7d8 <pk_trace_big>
    }

    return rc;
}
fff78288:	80 01 00 14 	lwz     r0,20(r1)
fff7828c:	7f e3 fb 78 	mr      r3,r31
fff78290:	7c 08 03 a6 	mtlr    r0
fff78294:	17 c1 00 08 	lvd     d30,8(r1)
fff78298:	38 21 00 10 	addi    r1,r1,16
fff7829c:	4e 80 00 20 	blr

fff782a0 <_ZN19CMNGlobalsSingleton11getInstanceEv>:
//////////////////////////////////////////////////////////////////

CMNGlobalsSingleton* cmnGlobal = &CMNGlobalsSingleton::getInstance();
CMNGlobalsSingleton& CMNGlobalsSingleton::getInstance()
{
    static CMNGlobalsSingleton iv_instance;
fff782a0:	89 2d 01 a0 	lbz     r9,416(r13)
fff782a4:	7d 29 07 74 	extsb   r9,r9
fff782a8:	06 49 00 0e 	bwnz    r9,fff782c4 <_ZN19CMNGlobalsSingleton11getInstanceEv+0x24>

    private:
    // Constructor
    CMNGlobalsSingleton():
    SBERole(SBE_ROLE_MASTER),
    sbefreq(( 133 * 1000 * 1000)/SBE::SBE_TO_NEST_FREQ_FACTOR)
fff782ac:	91 2d 01 98 	stw     r9,408(r13)
fff782b0:	3d 20 01 fb 	lis     r9,507
fff782b4:	61 29 5a d0 	ori     r9,r9,23248
fff782b8:	91 2d 01 9c 	stw     r9,412(r13)
fff782bc:	39 20 00 01 	li      r9,1
fff782c0:	99 2d 01 a0 	stb     r9,416(r13)
    return iv_instance;
}
fff782c4:	38 6d 01 98 	addi    r3,r13,408
fff782c8:	4e 80 00 20 	blr

fff782cc <_GLOBAL__sub_I_cmnGlobal>:
bool  CMNGlobalsSingleton::isHreset = false;
fff782cc:	94 21 ff f8 	stwu    r1,-8(r1)
fff782d0:	7c 08 02 a6 	mflr    r0
fff782d4:	90 01 00 0c 	stw     r0,12(r1)

////////////////////////////////////////////////////////////////
//// @brief Stacks for Non-critical Interrupts and Threads
//////////////////////////////////////////////////////////////////

CMNGlobalsSingleton* cmnGlobal = &CMNGlobalsSingleton::getInstance();
fff782d8:	4b ff ff c9 	bl      fff782a0 <_ZN19CMNGlobalsSingleton11getInstanceEv>
CMNGlobalsSingleton& CMNGlobalsSingleton::getInstance()
{
    static CMNGlobalsSingleton iv_instance;
    return iv_instance;
}
bool  CMNGlobalsSingleton::isHreset = false;
fff782dc:	80 01 00 0c 	lwz     r0,12(r1)

////////////////////////////////////////////////////////////////
//// @brief Stacks for Non-critical Interrupts and Threads
//////////////////////////////////////////////////////////////////

CMNGlobalsSingleton* cmnGlobal = &CMNGlobalsSingleton::getInstance();
fff782e0:	90 6d 01 94 	stw     r3,404(r13)
CMNGlobalsSingleton& CMNGlobalsSingleton::getInstance()
{
    static CMNGlobalsSingleton iv_instance;
    return iv_instance;
}
bool  CMNGlobalsSingleton::isHreset = false;
fff782e4:	7c 08 03 a6 	mtlr    r0
fff782e8:	38 21 00 08 	addi    r1,r1,8
fff782ec:	4e 80 00 20 	blr

Disassembly of section .cmnsromcore:

fff786f0 <_ZL14dilithium_wrapPKhS0_S0_mm>:
static int dilithium_wrap(const unsigned char *sig,
                   const unsigned char *msg,
                   const unsigned char *pub,
                   const uint32_t scratchStart,
                   const uint32_t scratchSize)
{
fff786f0:	94 21 ff c8 	stwu    r1,-56(r1)
fff786f4:	7c 08 02 a6 	mflr    r0
fff786f8:	1b 81 00 28 	stvd    d28,40(r1)
fff786fc:	7c 7c 1b 78 	mr      r28,r3
 * an embedded archive, so we defer this step until the first scratch
 * allocation.
 */
void scratch_init_memory()
{
    SBE_INFO("Initilizing scratch area" );
fff78700:	3c 60 4d 27 	lis     r3,19751
fff78704:	18 81 00 18 	stvd    d4,24(r1)

public :

scratch(uint32_t scratch_start, uint32_t scratch_size)
{
    iv_scratch_bottom_init = scratch_start + scratch_size;
fff78708:	7f a6 3a 14 	add     r29,r6,r7
 * an embedded archive, so we defer this step until the first scratch
 * allocation.
 */
void scratch_init_memory()
{
    SBE_INFO("Initilizing scratch area" );
fff7870c:	90 c1 00 20 	stw     r6,32(r1)
fff78710:	90 01 00 3c 	stw     r0,60(r1)
fff78714:	1b c1 00 30 	stvd    d30,48(r1)
fff78718:	48 00 2a c5 	bl      fff7b1dc <pk_trace_tiny>

    for (uint64_t *ptr = (uint64_t *)iv_scratch_limit; ptr < (uint64_t *)iv_scratch_bottom_init; ptr++)
fff7871c:	80 c1 00 20 	lwz     r6,32(r1)
    {
        *ptr = 0;
fff78720:	38 80 00 00 	li      r4,0
 */
void scratch_init_memory()
{
    SBE_INFO("Initilizing scratch area" );

    for (uint64_t *ptr = (uint64_t *)iv_scratch_limit; ptr < (uint64_t *)iv_scratch_bottom_init; ptr++)
fff78724:	7c ca 33 78 	mr      r10,r6
    {
        *ptr = 0;
fff78728:	38 a0 00 00 	li      r5,0
 */
void scratch_init_memory()
{
    SBE_INFO("Initilizing scratch area" );

    for (uint64_t *ptr = (uint64_t *)iv_scratch_limit; ptr < (uint64_t *)iv_scratch_bottom_init; ptr++)
fff7872c:	05 0a e8 08 	cmplwbge r10,r29,fff7873c <_ZL14dilithium_wrapPKhS0_S0_mm+0x4c>
    {
        *ptr = 0;
fff78730:	18 8a 00 00 	stvd    d4,0(r10)
 */
void scratch_init_memory()
{
    SBE_INFO("Initilizing scratch area" );

    for (uint64_t *ptr = (uint64_t *)iv_scratch_limit; ptr < (uint64_t *)iv_scratch_bottom_init; ptr++)
fff78734:	39 4a 00 08 	addi    r10,r10,8
fff78738:	4b ff ff f4 	b       fff7872c <_ZL14dilithium_wrapPKhS0_S0_mm+0x3c>
 *         NULL if not enough space was available
 */
void *scratch_alloc(uint32_t size)
{
    const uint32_t rounded_size = (size + 7) & ~7;
    const uint32_t new_bottom = iv_scratch_bottom - rounded_size - 8;
fff7873c:	3f fd ff ff 	addis   r31,r29,-1
fff78740:	39 1f 9f f8 	addi    r8,r31,-24584
fff78744:	3b df a0 00 	addi    r30,r31,-24576
    if (new_bottom < iv_scratch_limit)
fff78748:	05 08 30 12 	cmplwbge r8,r6,fff7876c <_ZL14dilithium_wrapPKhS0_S0_mm+0x7c>
    {
        SBE_ERROR("Out of scratch space! rounded_size=0x%X limit=0x%X bottom=0x%X",
                  rounded_size, iv_scratch_limit, iv_scratch_bottom);
fff7874c:	3c 60 b2 d7 	lis     r3,-19753
fff78750:	3c a0 00 01 	lis     r5,1
fff78754:	60 63 00 03 	ori     r3,r3,3
fff78758:	60 a5 60 00 	ori     r5,r5,24576
fff7875c:	7f a7 eb 78 	mr      r7,r29
fff78760:	39 00 00 00 	li      r8,0
fff78764:	48 00 30 75 	bl      fff7b7d8 <pk_trace_big>
fff78768:	48 00 00 30 	b       fff78798 <_ZL14dilithium_wrapPKhS0_S0_mm+0xa8>
        return NULL;
    }

    SBE_INFO("scratch_alloc: rounded_size=0x%X limit=0x%X old_bottom=0x%X new_bottom=0x%X",
              rounded_size, iv_scratch_limit, iv_scratch_bottom, new_bottom);
fff7876c:	3c 60 84 fd 	lis     r3,-31491
fff78770:	3c a0 00 01 	lis     r5,1
fff78774:	7f a7 eb 78 	mr      r7,r29
fff78778:	60 63 00 04 	ori     r3,r3,4
fff7877c:	60 a5 60 00 	ori     r5,r5,24576
fff78780:	48 00 30 59 	bl      fff7b7d8 <pk_trace_big>

    uint64_t new_bottom_value = CANARY << 32 | iv_scratch_bottom;
fff78784:	3c c0 fe ed 	lis     r6,-275
fff78788:	60 c6 b0 b0 	ori     r6,r6,45232
fff7878c:	7f a7 eb 78 	mr      r7,r29
    *(volatile uint64_t *)new_bottom = new_bottom_value;
fff78790:	18 df 9f f8 	stvd    d6,-24584(r31)

    // Prepare the Dilithium stack
    polyvec_max *scratch = (polyvec_max *)sbeScratch.scratch_alloc(sizeof(polyvec_max) * 11);
    polyvec_max *w1      = scratch;

    if (w1 == NULL) {
fff78794:	06 5e 00 0a 	bwnz    r30,fff787a8 <_ZL14dilithium_wrapPKhS0_S0_mm+0xb8>
      SBE_ERROR("Couldn't reserve enough stack space!!!!");
fff78798:	3c 60 0b 76 	lis     r3,2934
fff7879c:	48 00 2a 41 	bl      fff7b1dc <pk_trace_tiny>
      return -1;
fff787a0:	38 60 ff ff 	li      r3,-1
fff787a4:	48 00 00 a8 	b       fff7884c <_ZL14dilithium_wrapPKhS0_S0_mm+0x15c>
    } else {
      SBE_INFO("No problemo with stack!!!");
fff787a8:	3c 60 61 db 	lis     r3,25051
fff787ac:	48 00 2a 31 	bl      fff7b1dc <pk_trace_tiny>
    }

    polyvec_max *mat01   = w1 + 1;
    polyvec_max *mat234  = mat01 + 2;
    polyvec_max *mat567  = mat234 + 3;
fff787b0:	3d 3e 00 01 	addis   r9,r30,1
fff787b4:	39 49 c0 00 	addi    r10,r9,-16384

    // Run the signature verification
    int retval = ref_verify2(sig, DILITHIUM_SIG_SIZE,
                 msg, SHA3_DIGEST_LENGTH, //mbytes,
                 pub, DILITHIUM_PUB_KEY_SIZE,
                 w1, mat01, mat234, mat567, z, h);
fff787b8:	91 41 00 0c 	stw     r10,12(r1)
    }

    polyvec_max *mat01   = w1 + 1;
    polyvec_max *mat234  = mat01 + 2;
    polyvec_max *mat567  = mat234 + 3;
    polyvec_max *z       = mat567 + 3;
fff787bc:	39 49 20 00 	addi    r10,r9,8192
    polyvec_max *h       = z + 1;
fff787c0:	39 29 40 00 	addi    r9,r9,16384

    // Run the signature verification
    int retval = ref_verify2(sig, DILITHIUM_SIG_SIZE,
                 msg, SHA3_DIGEST_LENGTH, //mbytes,
                 pub, DILITHIUM_PUB_KEY_SIZE,
                 w1, mat01, mat234, mat567, z, h);
fff787c4:	91 41 00 10 	stw     r10,16(r1)
fff787c8:	91 21 00 14 	stw     r9,20(r1)
fff787cc:	80 a1 00 18 	lwz     r5,24(r1)
fff787d0:	80 e1 00 1c 	lwz     r7,28(r1)
fff787d4:	93 e1 00 08 	stw     r31,8(r1)
fff787d8:	7f c9 f3 78 	mr      r9,r30
fff787dc:	38 80 12 3c 	li      r4,4668
fff787e0:	38 c0 00 40 	li      r6,64
fff787e4:	39 00 09 20 	li      r8,2336
fff787e8:	39 5f c0 00 	addi    r10,r31,-16384
fff787ec:	7f 83 e3 78 	mr      r3,r28
fff787f0:	4b ff e6 e9 	bl      fff76ed8 <_Z11ref_verify2PKhjS0_jS0_jP11polyvec_maxS2_S2_S2_S2_S2_>
fff787f4:	7c 7d 1b 78 	mr      r29,r3

    SBE_INFO("RetVal: %d", retval);
fff787f8:	3c 60 7e 90 	lis     r3,32400
fff787fc:	38 c0 00 00 	li      r6,0
fff78800:	38 e0 00 00 	li      r7,0
fff78804:	60 63 00 01 	ori     r3,r3,1
fff78808:	7f a5 eb 78 	mr      r5,r29
fff7880c:	39 00 00 00 	li      r8,0
fff78810:	48 00 2f c9 	bl      fff7b7d8 <pk_trace_big>
                  "ptr=%p bottom=0x%X", ptr, iv_scratch_bottom);
        PK_PANIC(SBE::PANIC_SCRATCH);
    }

    uint64_t header = *(uint64_t *)old_bottom;
    if (header >> 32 != CANARY)
fff78814:	3d 20 fe ed 	lis     r9,-275
        SBE_ERROR("scratch_free: Attempted to free a scratch block that is not at the bottom, halting! "
                  "ptr=%p bottom=0x%X", ptr, iv_scratch_bottom);
        PK_PANIC(SBE::PANIC_SCRATCH);
    }

    uint64_t header = *(uint64_t *)old_bottom;
fff78818:	80 df 9f f8 	lwz     r6,-24584(r31)
    if (header >> 32 != CANARY)
fff7881c:	61 29 b0 b0 	ori     r9,r9,45232
        SBE_ERROR("scratch_free: Attempted to free a scratch block that is not at the bottom, halting! "
                  "ptr=%p bottom=0x%X", ptr, iv_scratch_bottom);
        PK_PANIC(SBE::PANIC_SCRATCH);
    }

    uint64_t header = *(uint64_t *)old_bottom;
fff78820:	80 ff 9f fc 	lwz     r7,-24580(r31)
    if (header >> 32 != CANARY)
fff78824:	04 c6 48 0e 	cmpwbeq r6,r9,fff78840 <_ZL14dilithium_wrapPKhS0_S0_mm+0x150>
    {
        SBE_ERROR("scratch_free: Block header corrupted, halting! ptr=%p header=0x%08X%08X",
                  ptr, header >> 32, header & 0xFFFFFFFF);
fff78828:	3c 60 2a 32 	lis     r3,10802
fff7882c:	60 63 00 03 	ori     r3,r3,3
fff78830:	7f c5 f3 78 	mr      r5,r30
fff78834:	39 00 00 00 	li      r8,0
fff78838:	48 00 2f a1 	bl      fff7b7d8 <pk_trace_big>
        PK_PANIC(SBE::PANIC_SCRATCH);
fff7883c:	7f fc 08 08 	twu     r28,r1

    sbeScratch.scratch_free((void *)scratch);

    retval = !!(retval > 0); //..1.. ..1..
fff78840:	7f a9 fe 70 	srawi   r9,r29,31
fff78844:	7c 7d 48 50 	subf    r3,r29,r9
fff78848:	54 63 0f fe 	rlwinm  r3,r3,1,31,31

    return retval;
}
fff7884c:	80 01 00 3c 	lwz     r0,60(r1)
fff78850:	17 81 00 28 	lvd     d28,40(r1)
fff78854:	7c 08 03 a6 	mtlr    r0
fff78858:	17 c1 00 30 	lvd     d30,48(r1)
fff7885c:	38 21 00 38 	addi    r1,r1,56
fff78860:	4e 80 00 20 	blr

fff78864 <_ZN3SBE5get64EPv>:
     * @param[in] - *src - Address
     *
     * @return - uint64_t data
     */
    inline uint64_t get64(void* src)
    {
fff78864:	94 21 ff e8 	stwu    r1,-24(r1)
fff78868:	7c 08 02 a6 	mflr    r0
fff7886c:	7c 64 1b 78 	mr      r4,r3
        uint64_t dest;
        memcpy(&dest, src,sizeof(uint64_t));
fff78870:	38 a0 00 08 	li      r5,8
fff78874:	38 61 00 08 	addi    r3,r1,8
     * @param[in] - *src - Address
     *
     * @return - uint64_t data
     */
    inline uint64_t get64(void* src)
    {
fff78878:	90 01 00 1c 	stw     r0,28(r1)
        uint64_t dest;
        memcpy(&dest, src,sizeof(uint64_t));
fff7887c:	48 00 1b 3d 	bl      fff7a3b8 <memcpy>
        return dest;
    }
fff78880:	80 01 00 1c 	lwz     r0,28(r1)
fff78884:	14 61 00 08 	lvd     d3,8(r1)
fff78888:	7c 08 03 a6 	mtlr    r0
fff7888c:	38 21 00 18 	addi    r1,r1,24
fff78890:	4e 80 00 20 	blr

fff78894 <_ZN3SBE5get32EPv>:
     * @param[in] - *src - Address
     *
     * @return - uint32_t data
     */
    inline uint32_t get32(void* src)
    {
fff78894:	94 21 ff e8 	stwu    r1,-24(r1)
fff78898:	7c 08 02 a6 	mflr    r0
fff7889c:	7c 64 1b 78 	mr      r4,r3
        uint32_t dest;
        memcpy(&dest, src,sizeof(uint32_t));
fff788a0:	38 a0 00 04 	li      r5,4
fff788a4:	38 61 00 08 	addi    r3,r1,8
     * @param[in] - *src - Address
     *
     * @return - uint32_t data
     */
    inline uint32_t get32(void* src)
    {
fff788a8:	90 01 00 1c 	stw     r0,28(r1)
        uint32_t dest;
        memcpy(&dest, src,sizeof(uint32_t));
fff788ac:	48 00 1b 0d 	bl      fff7a3b8 <memcpy>
        return dest;
    }
fff788b0:	80 01 00 1c 	lwz     r0,28(r1)
fff788b4:	80 61 00 08 	lwz     r3,8(r1)
fff788b8:	7c 08 03 a6 	mtlr    r0
fff788bc:	38 21 00 18 	addi    r1,r1,24
fff788c0:	4e 80 00 20 	blr

fff788c4 <_ZN3SBE5get16EPv>:
     * @param[in] - *src - Address
     *
     * @return - uint16_t data
     */
    inline uint16_t get16(void* src)
    {
fff788c4:	94 21 ff e8 	stwu    r1,-24(r1)
fff788c8:	7c 08 02 a6 	mflr    r0
fff788cc:	7c 64 1b 78 	mr      r4,r3
        uint16_t dest;
        memcpy(&dest, src,sizeof(uint16_t));
fff788d0:	38 a0 00 02 	li      r5,2
fff788d4:	38 61 00 08 	addi    r3,r1,8
     * @param[in] - *src - Address
     *
     * @return - uint16_t data
     */
    inline uint16_t get16(void* src)
    {
fff788d8:	90 01 00 1c 	stw     r0,28(r1)
        uint16_t dest;
        memcpy(&dest, src,sizeof(uint16_t));
fff788dc:	48 00 1a dd 	bl      fff7a3b8 <memcpy>
        return dest;
    }
fff788e0:	80 01 00 1c 	lwz     r0,28(r1)
fff788e4:	a0 61 00 08 	lhz     r3,8(r1)
fff788e8:	7c 08 03 a6 	mtlr    r0
fff788ec:	38 21 00 18 	addi    r1,r1,24
fff788f0:	4e 80 00 20 	blr

fff788f4 <_ZN3SBE4get8EPv>:
     * @param[in] - *src - Address
     *
     * @return - uint8_t data
     */
    inline uint8_t get8(void* src)
    {
fff788f4:	94 21 ff e8 	stwu    r1,-24(r1)
fff788f8:	7c 08 02 a6 	mflr    r0
fff788fc:	7c 64 1b 78 	mr      r4,r3
        uint8_t dest;
        memcpy(&dest, src,sizeof(uint8_t));
fff78900:	38 a0 00 01 	li      r5,1
fff78904:	38 61 00 08 	addi    r3,r1,8
     * @param[in] - *src - Address
     *
     * @return - uint8_t data
     */
    inline uint8_t get8(void* src)
    {
fff78908:	90 01 00 1c 	stw     r0,28(r1)
        uint8_t dest;
        memcpy(&dest, src,sizeof(uint8_t));
fff7890c:	48 00 1a ad 	bl      fff7a3b8 <memcpy>
        return dest;
    }
fff78910:	80 01 00 1c 	lwz     r0,28(r1)
fff78914:	88 61 00 08 	lbz     r3,8(r1)
fff78918:	7c 08 03 a6 	mtlr    r0
fff7891c:	38 21 00 18 	addi    r1,r1,24
fff78920:	4e 80 00 20 	blr

fff78924 <_ZL13valid_ver_algP15ROM_version_rawh>:
 * @param ver_alg pointer to version algo details
 * @param hdr_type Prefix or SW/FW Header
 * @return Status code in case of failure, 0 in case of success
 */
static uint32_t valid_ver_alg(ROM_version_raw* ver_alg, uint8_t hdr_type)
{
fff78924:	94 21 ff e8 	stwu    r1,-24(r1)
fff78928:	7c 08 02 a6 	mflr    r0
fff7892c:	1b c1 00 10 	stvd    d30,16(r1)
fff78930:	90 01 00 1c 	stw     r0,28(r1)
fff78934:	1b 81 00 08 	stvd    d28,8(r1)
fff78938:	7c 7f 1b 78 	mr      r31,r3
fff7893c:	7c 9e 23 78 	mr      r30,r4
    SBE_ENTER(SBE_FUNC);

    uint32_t status;

    //Validate header version
    SBE_INFO("Hdr: Version : %d", SBE::get16(&ver_alg->version));
fff78940:	4b ff ff 85 	bl      fff788c4 <_ZN3SBE5get16EPv>
fff78944:	64 63 35 5d 	oris    r3,r3,13661
fff78948:	48 00 28 95 	bl      fff7b1dc <pk_trace_tiny>
    if(SBE::get16(&ver_alg->version) != HEADER_VERSION)
fff7894c:	7f e3 fb 78 	mr      r3,r31
fff78950:	4b ff ff 75 	bl      fff788c4 <_ZN3SBE5get16EPv>
fff78954:	06 c3 10 0e 	cmpwibeq r3,2,fff78970 <_ZL13valid_ver_algP15ROM_version_rawh+0x4c>
    {
        SBE_ERROR(SBE_FUNC "FAILED: bad header version");
fff78958:	3c 60 b8 9d 	lis     r3,-18275
fff7895c:	48 00 28 81 	bl      fff7b1dc <pk_trace_tiny>
        status = (hdr_type == PREFIX_HDR) ? SHV_RC_PREFIX_HDR_VER_TEST : SHV_RC_SW_HDR_VER_TEST;
fff78960:	39 20 04 30 	li      r9,1072
fff78964:	06 de 08 3e 	cmpwibeq r30,1,fff789e0 <_ZL13valid_ver_algP15ROM_version_rawh+0xbc>
fff78968:	39 20 04 40 	li      r9,1088
fff7896c:	48 00 00 74 	b       fff789e0 <_ZL13valid_ver_algP15ROM_version_rawh+0xbc>
        return status;
    }

    //Validate header hash algo version
    SBE_INFO("Hdr: hash algo : %d", SBE::get8(&ver_alg->hash_alg));
fff78970:	3b bf 00 02 	addi    r29,r31,2
fff78974:	7f a3 eb 78 	mr      r3,r29
fff78978:	4b ff ff 7d 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff7897c:	64 63 e0 35 	oris    r3,r3,57397
fff78980:	48 00 28 5d 	bl      fff7b1dc <pk_trace_tiny>
    if(SBE::get8(&ver_alg->hash_alg) != HASH_ALG_SHA3_512)
fff78984:	7f a3 eb 78 	mr      r3,r29
fff78988:	4b ff ff 6d 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff7898c:	06 c3 10 0e 	cmpwibeq r3,2,fff789a8 <_ZL13valid_ver_algP15ROM_version_rawh+0x84>
    {
        SBE_ERROR(SBE_FUNC "FAILED: bad hash algorithm version");
fff78990:	3c 60 d6 45 	lis     r3,-10683
fff78994:	48 00 28 49 	bl      fff7b1dc <pk_trace_tiny>
        status = (hdr_type == PREFIX_HDR) ? SHV_RC_PREFIX_HASH_ALGO_TEST : SHV_RC_SW_HASH_ALGO_TEST;
fff78998:	39 20 04 31 	li      r9,1073
fff7899c:	06 de 08 22 	cmpwibeq r30,1,fff789e0 <_ZL13valid_ver_algP15ROM_version_rawh+0xbc>
fff789a0:	39 20 04 41 	li      r9,1089
fff789a4:	48 00 00 3c 	b       fff789e0 <_ZL13valid_ver_algP15ROM_version_rawh+0xbc>
        return status;
    }

    //Validate header sign algo version
    SBE_INFO("Hdr: Sign Algo : %d", SBE::get8(&ver_alg->sig_alg));
fff789a8:	3b ff 00 03 	addi    r31,r31,3
fff789ac:	7f e3 fb 78 	mr      r3,r31
fff789b0:	4b ff ff 45 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff789b4:	64 63 e0 ff 	oris    r3,r3,57599
fff789b8:	48 00 28 25 	bl      fff7b1dc <pk_trace_tiny>
    if(SBE::get8(&ver_alg->sig_alg) != SIG_ALG_ECDSA521_DILITHIUM)
fff789bc:	7f e3 fb 78 	mr      r3,r31
fff789c0:	4b ff ff 35 	bl      fff788f4 <_ZN3SBE4get8EPv>
        status = (hdr_type == PREFIX_HDR) ? SHV_RC_PREFIX_SIG_ALGO_TEST : SHV_RC_SW_SIG_ALGO_TEST;
        return status;
    }

    SBE_EXIT(SBE_FUNC);
    return 0;
fff789c4:	39 20 00 00 	li      r9,0
        return status;
    }

    //Validate header sign algo version
    SBE_INFO("Hdr: Sign Algo : %d", SBE::get8(&ver_alg->sig_alg));
    if(SBE::get8(&ver_alg->sig_alg) != SIG_ALG_ECDSA521_DILITHIUM)
fff789c8:	06 c3 10 0c 	cmpwibeq r3,2,fff789e0 <_ZL13valid_ver_algP15ROM_version_rawh+0xbc>
    {
        SBE_ERROR(SBE_FUNC "FAILED: bad signature algorithm version");
fff789cc:	3c 60 73 90 	lis     r3,29584
fff789d0:	48 00 28 0d 	bl      fff7b1dc <pk_trace_tiny>
        status = (hdr_type == PREFIX_HDR) ? SHV_RC_PREFIX_SIG_ALGO_TEST : SHV_RC_SW_SIG_ALGO_TEST;
fff789d4:	39 20 04 32 	li      r9,1074
fff789d8:	06 de 08 04 	cmpwibeq r30,1,fff789e0 <_ZL13valid_ver_algP15ROM_version_rawh+0xbc>
fff789dc:	39 20 04 42 	li      r9,1090
    }

    SBE_EXIT(SBE_FUNC);
    return 0;
    #undef SBE_FUNC
}
fff789e0:	80 01 00 1c 	lwz     r0,28(r1)
fff789e4:	17 81 00 08 	lvd     d28,8(r1)
fff789e8:	7c 08 03 a6 	mtlr    r0
fff789ec:	17 c1 00 10 	lvd     d30,16(r1)
fff789f0:	7d 23 4b 78 	mr      r3,r9
fff789f4:	38 21 00 18 	addi    r1,r1,24
fff789f8:	4e 80 00 20 	blr

fff789fc <_ZL10ROM_verifyP6shvReqP6shvRsp>:
 * @param *shvRsp Secure Header Verification Response struct
 *
 * @return Secure container verification response(ROM_DONE/POM_FAILED)
 */
static ROM_response ROM_verify(shvReq_t *shvReq, shvRsp_t *shvRsp)
{
fff789fc:	94 21 f5 e8 	stwu    r1,-2584(r1)
fff78a00:	7c 08 02 a6 	mflr    r0
fff78a04:	1b c1 0a 10 	stvd    d30,2576(r1)
fff78a08:	90 01 0a 1c 	stw     r0,2588(r1)
fff78a0c:	1b 81 0a 08 	stvd    d28,2568(r1)
    //2468 bytes is MAX hash we calculate and hence buffer size is 2472 bytes.
    //i.e ECDSA PUB Key + Dilithium PUB Key
    //NOTE: The same buffer is used for hash list as well.
    //Currently considering hash list wont grow more than 2472
    const uint32_t hashDataBuffSize = sizeof(uint64_t) * 309;
    uint8_t hashDataBuff[hashDataBuffSize]  __attribute__ ((aligned(8))) = {0x00};
fff78a10:	38 a0 09 a8 	li      r5,2472
static ROM_response ROM_verify(shvReq_t *shvReq, shvRsp_t *shvRsp)
{
    #define SBE_FUNC " ROM_verify "
    SBE_ENTER(SBE_FUNC);

    ROM_container_raw* container = (ROM_container_raw *)shvReq->containerStartOffset;
fff78a14:	83 a3 00 00 	lwz     r29,0(r3)
 * @param *shvRsp Secure Header Verification Response struct
 *
 * @return Secure container verification response(ROM_DONE/POM_FAILED)
 */
static ROM_response ROM_verify(shvReq_t *shvReq, shvRsp_t *shvRsp)
{
fff78a18:	7c 7f 1b 78 	mr      r31,r3
fff78a1c:	7c 9e 23 78 	mr      r30,r4
    //2468 bytes is MAX hash we calculate and hence buffer size is 2472 bytes.
    //i.e ECDSA PUB Key + Dilithium PUB Key
    //NOTE: The same buffer is used for hash list as well.
    //Currently considering hash list wont grow more than 2472
    const uint32_t hashDataBuffSize = sizeof(uint64_t) * 309;
    uint8_t hashDataBuff[hashDataBuffSize]  __attribute__ ((aligned(8))) = {0x00};
fff78a20:	38 61 00 08 	addi    r3,r1,8
fff78a24:	38 80 00 00 	li      r4,0
fff78a28:	48 00 18 bd 	bl      fff7a2e4 <memset>
    uint32_t hdrStatusChecks = 0;

    /**************************************** Trivial Checks ***************************************/

    //Validate Magic Number
    SBE_INFO("Magic number: 0x%X", SBE::get32(&container->magic_number));
fff78a2c:	7f a3 eb 78 	mr      r3,r29
fff78a30:	4b ff fe 65 	bl      fff78894 <_ZN3SBE5get32EPv>
fff78a34:	7c 65 1b 78 	mr      r5,r3
fff78a38:	3c 60 61 2a 	lis     r3,24874
fff78a3c:	60 63 00 01 	ori     r3,r3,1
fff78a40:	38 c0 00 00 	li      r6,0
fff78a44:	38 e0 00 00 	li      r7,0
fff78a48:	39 00 00 00 	li      r8,0
fff78a4c:	48 00 2d 8d 	bl      fff7b7d8 <pk_trace_big>
    if(SBE::get32(&container->magic_number) != ROM_MAGIC_NUMBER)
fff78a50:	7f a3 eb 78 	mr      r3,r29
fff78a54:	4b ff fe 41 	bl      fff78894 <_ZN3SBE5get32EPv>
fff78a58:	3d 20 17 08 	lis     r9,5896
fff78a5c:	61 29 20 11 	ori     r9,r9,8209
fff78a60:	04 43 48 1c 	cmpwbne r3,r9,fff78a98 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x9c>
    {
        SBE_ERROR (SBE_FUNC "FAILED : bad container magic number");
        VERIFY_FAILED(SHV_RC_MAGIC_NUMBER_TEST);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_MAGIC_CHECK);
fff78a64:	88 7f 00 40 	lbz     r3,64(r31)

    //Validate Container Version
    SBE_INFO("Container Version: 0x%X", SBE::get16(&container->version));
fff78a68:	3b 9d 00 04 	addi    r28,r29,4
    {
        SBE_ERROR (SBE_FUNC "FAILED : bad container magic number");
        VERIFY_FAILED(SHV_RC_MAGIC_NUMBER_TEST);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_MAGIC_CHECK);
fff78a6c:	38 63 00 05 	addi    r3,r3,5
fff78a70:	54 63 06 3e 	clrlwi  r3,r3,24
fff78a74:	4b ff f3 25 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Validate Container Version
    SBE_INFO("Container Version: 0x%X", SBE::get16(&container->version));
fff78a78:	7f 83 e3 78 	mr      r3,r28
fff78a7c:	4b ff fe 49 	bl      fff788c4 <_ZN3SBE5get16EPv>
fff78a80:	64 63 84 c2 	oris    r3,r3,33986
fff78a84:	48 00 27 59 	bl      fff7b1dc <pk_trace_tiny>
    if(SBE::get16(&container->version) != CONTAINER_VERSION)
fff78a88:	7f 83 e3 78 	mr      r3,r28
fff78a8c:	4b ff fe 39 	bl      fff788c4 <_ZN3SBE5get16EPv>
fff78a90:	06 43 10 18 	cmpwibne r3,2,fff78ac0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xc4>
fff78a94:	48 00 00 4c 	b       fff78ae0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xe4>

    //Validate Magic Number
    SBE_INFO("Magic number: 0x%X", SBE::get32(&container->magic_number));
    if(SBE::get32(&container->magic_number) != ROM_MAGIC_NUMBER)
    {
        SBE_ERROR (SBE_FUNC "FAILED : bad container magic number");
fff78a98:	3c 60 52 b5 	lis     r3,21173
fff78a9c:	48 00 27 41 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_MAGIC_NUMBER_TEST);
fff78aa0:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78aa4:	06 49 00 06 	bwnz    r9,fff78ab0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xb4>
fff78aa8:	39 20 04 20 	li      r9,1056
fff78aac:	b1 3e 00 c4 	sth     r9,196(r30)
fff78ab0:	89 3f 00 47 	lbz     r9,71(r31)
fff78ab4:	06 c9 07 d8 	bwz     r9,fff78a64 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x68>
fff78ab8:	38 60 00 01 	li      r3,1
fff78abc:	48 00 08 dc 	b       fff79398 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x99c>

    //Validate Container Version
    SBE_INFO("Container Version: 0x%X", SBE::get16(&container->version));
    if(SBE::get16(&container->version) != CONTAINER_VERSION)
    {
        SBE_ERROR (SBE_FUNC "FAILED : bad container version");
fff78ac0:	3c 60 b4 68 	lis     r3,-19352
fff78ac4:	48 00 27 19 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_CONTAINER_VERSION_TEST);
fff78ac8:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78acc:	06 49 00 06 	bwnz    r9,fff78ad8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xdc>
fff78ad0:	39 20 04 21 	li      r9,1057
fff78ad4:	b1 3e 00 c4 	sth     r9,196(r30)
fff78ad8:	89 3f 00 47 	lbz     r9,71(r31)
fff78adc:	06 49 07 ee 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_CONTAINER_VER_CHECK);
fff78ae0:	88 7f 00 40 	lbz     r3,64(r31)

    //Validate Container Size
    SBE_INFO("Container Size: 0x%X", SBE::get64(&container->container_size));
fff78ae4:	3b 9d 00 06 	addi    r28,r29,6
    {
        SBE_ERROR (SBE_FUNC "FAILED : bad container version");
        VERIFY_FAILED(SHV_RC_CONTAINER_VERSION_TEST);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_CONTAINER_VER_CHECK);
fff78ae8:	38 63 00 06 	addi    r3,r3,6
fff78aec:	54 63 06 3e 	clrlwi  r3,r3,24
fff78af0:	4b ff f2 a9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Validate Container Size
    SBE_INFO("Container Size: 0x%X", SBE::get64(&container->container_size));
fff78af4:	7f 83 e3 78 	mr      r3,r28
fff78af8:	4b ff fd 6d 	bl      fff78864 <_ZN3SBE5get64EPv>
fff78afc:	3c 60 b7 7b 	lis     r3,-18565
fff78b00:	60 63 00 01 	ori     r3,r3,1
fff78b04:	7c 85 23 78 	mr      r5,r4
fff78b08:	38 c0 00 00 	li      r6,0
fff78b0c:	38 e0 00 00 	li      r7,0
fff78b10:	39 00 00 00 	li      r8,0
fff78b14:	48 00 2c c5 	bl      fff7b7d8 <pk_trace_big>
    if(SBE::get64(&container->container_size) != (shvReq->containerSize + shvReq->hashListSize))
fff78b18:	7f 83 e3 78 	mr      r3,r28
fff78b1c:	4b ff fd 49 	bl      fff78864 <_ZN3SBE5get64EPv>
fff78b20:	81 5f 00 08 	lwz     r10,8(r31)
fff78b24:	81 3f 00 04 	lwz     r9,4(r31)
fff78b28:	7d 2a 4a 14 	add     r9,r10,r9
fff78b2c:	06 43 00 04 	bwnz    r3,fff78b34 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x138>
fff78b30:	04 c4 48 12 	cmpwbeq r4,r9,fff78b54 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x158>
    {
        SBE_ERROR (SBE_FUNC "FAILED : bad container size");
fff78b34:	3c 60 94 a2 	lis     r3,-27486
fff78b38:	48 00 26 a5 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_CONTAINER_SIZE_TEST);
fff78b3c:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78b40:	06 49 00 06 	bwnz    r9,fff78b4c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x150>
fff78b44:	39 20 04 22 	li      r9,1058
fff78b48:	b1 3e 00 c4 	sth     r9,196(r30)
fff78b4c:	89 3f 00 47 	lbz     r9,71(r31)
fff78b50:	06 49 07 b4 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SH_CONTAINER_SIZE_CHECK);
fff78b54:	88 7f 00 40 	lbz     r3,64(r31)
fff78b58:	38 63 00 07 	addi    r3,r3,7
fff78b5c:	54 63 06 3e 	clrlwi  r3,r3,24
fff78b60:	4b ff f2 39 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Process HW Keys and verify HW keys Hash
    if(shvReq->controlData.hwKeyHashCheck)
fff78b64:	89 3f 00 42 	lbz     r9,66(r31)
fff78b68:	06 c9 00 2c 	bwz     r9,fff78bc0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x1c4>
    {
        memcpy(hashDataBuff, &container->hw_pkey_a, (sizeof(ecc_key_t) + sizeof(dilithium_key_t)));
fff78b6c:	38 9d 00 14 	addi    r4,r29,20
fff78b70:	38 a0 09 a4 	li      r5,2468
fff78b74:	38 61 00 08 	addi    r3,r1,8
fff78b78:	48 00 18 41 	bl      fff7a3b8 <memcpy>
        sha3_Hash(hashDataBuff, (sizeof(ecc_key_t) + sizeof(dilithium_key_t)), &digest);
fff78b7c:	38 61 00 08 	addi    r3,r1,8
fff78b80:	38 80 09 a4 	li      r4,2468
fff78b84:	38 a1 09 b0 	addi    r5,r1,2480
fff78b88:	4b ff 8a c1 	bl      fff71648 <_Z9sha3_HashPKhjPA64_h>
        //Return the calculated SHA3-512 HW Key Hash.
        memcpy(shvRsp->sha3.hwKeyHash,digest,SHA3_DIGEST_LENGTH);
fff78b8c:	38 81 09 b0 	addi    r4,r1,2480
fff78b90:	38 a0 00 40 	li      r5,64
fff78b94:	7f c3 f3 78 	mr      r3,r30
fff78b98:	48 00 18 21 	bl      fff7a3b8 <memcpy>

        UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_KEY_HASH_CALCULATION);
fff78b9c:	88 7f 00 40 	lbz     r3,64(r31)
fff78ba0:	38 63 00 08 	addi    r3,r3,8
fff78ba4:	54 63 06 3e 	clrlwi  r3,r3,24
fff78ba8:	4b ff f1 f1 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        if(memcmp(digest, shvReq->pubKeyHashSet1, SHA3_DIGEST_LENGTH))
fff78bac:	80 9f 00 14 	lwz     r4,20(r31)
fff78bb0:	38 61 09 b0 	addi    r3,r1,2480
fff78bb4:	38 a0 00 40 	li      r5,64
fff78bb8:	48 00 18 8d 	bl      fff7a444 <memcmp>
fff78bbc:	06 43 00 18 	bwnz    r3,fff78bec <_ZL10ROM_verifyP6shvReqP6shvRsp+0x1f0>
                VERIFY_FAILED(SHV_RC_HW_KEY_HASH_TEST);
            }
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_KEY_HASH_CHECK);
fff78bc0:	88 7f 00 40 	lbz     r3,64(r31)
    /**************************************************************************************************/

    /**************************************** Prefix Hdr Checks ***************************************/

    // process prefix header
    prefix = (ROM_prefix_header_raw*)&container->prefix;
fff78bc4:	3b 9d 09 b8 	addi    r28,r29,2488
                VERIFY_FAILED(SHV_RC_HW_KEY_HASH_TEST);
            }
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_KEY_HASH_CHECK);
fff78bc8:	38 63 00 09 	addi    r3,r3,9
fff78bcc:	54 63 06 3e 	clrlwi  r3,r3,24
fff78bd0:	4b ff f1 c9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>
    /**************************************** Prefix Hdr Checks ***************************************/

    // process prefix header
    prefix = (ROM_prefix_header_raw*)&container->prefix;
    // test for valid header version, hash & signature algorithms (sanity check)
    hdrStatusChecks = valid_ver_alg(&prefix->ver_alg, PREFIX_HDR);
fff78bd4:	7f 83 e3 78 	mr      r3,r28
fff78bd8:	38 80 00 01 	li      r4,1
fff78bdc:	4b ff fd 49 	bl      fff78924 <_ZL13valid_ver_algP15ROM_version_rawh>
fff78be0:	7c 69 1b 78 	mr      r9,r3
    if(hdrStatusChecks)
fff78be4:	06 43 00 28 	bwnz    r3,fff78c34 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x238>
fff78be8:	48 00 00 70 	b       fff78c58 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x25c>

        UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_KEY_HASH_CALCULATION);

        if(memcmp(digest, shvReq->pubKeyHashSet1, SHA3_DIGEST_LENGTH))
        {
            SBE_INFO(SBE_FUNC "HW Key Hash Set1 Invalid. Trying with HW Key Hash Set2");
fff78bec:	3c 60 27 08 	lis     r3,9992
fff78bf0:	48 00 25 ed 	bl      fff7b1dc <pk_trace_tiny>
            if(memcmp(digest, shvReq->pubKeyHashSet2, SHA3_DIGEST_LENGTH))
fff78bf4:	80 9f 00 18 	lwz     r4,24(r31)
fff78bf8:	38 61 09 b0 	addi    r3,r1,2480
fff78bfc:	38 a0 00 40 	li      r5,64
fff78c00:	48 00 18 45 	bl      fff7a444 <memcmp>
fff78c04:	06 c3 07 de 	bwz     r3,fff78bc0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x1c4>
            {
                SBE_INFO(SBE_FUNC "HW Key Hash Set1 & Set2 Invalid");
fff78c08:	3c 60 5b 3a 	lis     r3,23354
fff78c0c:	48 00 25 d1 	bl      fff7b1dc <pk_trace_tiny>
                SBE_ERROR (SBE_FUNC "FAILED : Invalid HW key's");
fff78c10:	3c 60 0e 5e 	lis     r3,3678
fff78c14:	48 00 25 c9 	bl      fff7b1dc <pk_trace_tiny>
                VERIFY_FAILED(SHV_RC_HW_KEY_HASH_TEST);
fff78c18:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78c1c:	06 49 00 06 	bwnz    r9,fff78c28 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x22c>
fff78c20:	39 20 04 23 	li      r9,1059
fff78c24:	b1 3e 00 c4 	sth     r9,196(r30)
fff78c28:	89 3f 00 47 	lbz     r9,71(r31)
fff78c2c:	06 c9 07 ca 	bwz     r9,fff78bc0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x1c4>
fff78c30:	4b ff fe 88 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    prefix = (ROM_prefix_header_raw*)&container->prefix;
    // test for valid header version, hash & signature algorithms (sanity check)
    hdrStatusChecks = valid_ver_alg(&prefix->ver_alg, PREFIX_HDR);
    if(hdrStatusChecks)
    {
        SBE_ERROR(SBE_FUNC "FAILED : bad prefix header version or hash/sig algo's");
fff78c34:	3c 60 ef 0a 	lis     r3,-4342
fff78c38:	91 21 0a 00 	stw     r9,2560(r1)
fff78c3c:	48 00 25 a1 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(hdrStatusChecks);
fff78c40:	a1 5e 00 c4 	lhz     r10,196(r30)
fff78c44:	81 21 0a 00 	lwz     r9,2560(r1)
fff78c48:	06 4a 00 04 	bwnz    r10,fff78c50 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x254>
fff78c4c:	b1 3e 00 c4 	sth     r9,196(r30)
fff78c50:	89 3f 00 47 	lbz     r9,71(r31)
fff78c54:	06 49 07 32 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_HDR_CHECK);
fff78c58:	88 7f 00 40 	lbz     r3,64(r31)
fff78c5c:	38 63 00 0a 	addi    r3,r3,10
fff78c60:	54 63 06 3e 	clrlwi  r3,r3,24
fff78c64:	4b ff f1 35 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>
    if(hashDataBuffSize < PREFIX_HEADER_SIZE(prefix))
    {
        VERIFY_FAILED(SHV_RC_PREFIX_HEADER_SZ_TEST);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_HDR_SIZE_CHECK);
fff78c68:	88 7f 00 40 	lbz     r3,64(r31)
fff78c6c:	38 63 00 0b 	addi    r3,r3,11
fff78c70:	54 63 06 3e 	clrlwi  r3,r3,24
fff78c74:	4b ff f1 25 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Calculate Hash of prefix header
    if(shvReq->controlData.ecdsaCheck || shvReq->controlData.dilithiumCheck)
fff78c78:	89 3f 00 43 	lbz     r9,67(r31)
fff78c7c:	06 49 00 06 	bwnz    r9,fff78c88 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x28c>
fff78c80:	89 3f 00 44 	lbz     r9,68(r31)
fff78c84:	06 c9 00 12 	bwz     r9,fff78ca8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x2ac>
    {
        memcpy(hashDataBuff, prefix, PREFIX_HEADER_SIZE(prefix));
fff78c88:	7f 84 e3 78 	mr      r4,r28
fff78c8c:	38 a0 00 6c 	li      r5,108
fff78c90:	38 61 00 08 	addi    r3,r1,8
fff78c94:	48 00 17 25 	bl      fff7a3b8 <memcpy>
        sha3_Hash(hashDataBuff, PREFIX_HEADER_SIZE(prefix), &digest);
fff78c98:	38 61 00 08 	addi    r3,r1,8
fff78c9c:	38 80 00 6c 	li      r4,108
fff78ca0:	38 a1 09 b0 	addi    r5,r1,2480
fff78ca4:	4b ff 89 a5 	bl      fff71648 <_Z9sha3_HashPKhjPA64_h>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_HDR_HASH_CALCULATION);
fff78ca8:	88 7f 00 40 	lbz     r3,64(r31)
fff78cac:	38 63 00 0c 	addi    r3,r3,12
fff78cb0:	54 63 06 3e 	clrlwi  r3,r3,24
fff78cb4:	4b ff f0 e5 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Verify HW signature A (ECDSA521)
    if(shvReq->controlData.ecdsaCheck)
fff78cb8:	89 3f 00 43 	lbz     r9,67(r31)
fff78cbc:	06 49 00 10 	bwnz    r9,fff78cdc <_ZL10ROM_verifyP6shvReqP6shvRsp+0x2e0>
            SBE_ERROR(SBE_FUNC "FAILED : Invalid HW signature A, ECDSA521");
            VERIFY_FAILED(SHV_RC_HW_ECDSA_SIG_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_SIG_A_CHECK);
fff78cc0:	88 7f 00 40 	lbz     r3,64(r31)
fff78cc4:	38 63 00 0d 	addi    r3,r3,13
fff78cc8:	54 63 06 3e 	clrlwi  r3,r3,24
fff78ccc:	4b ff f0 cd 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Verify HW signature D (Dilithium)
    if(shvReq->controlData.dilithiumCheck)
fff78cd0:	89 3f 00 44 	lbz     r9,68(r31)
fff78cd4:	06 49 00 20 	bwnz    r9,fff78d14 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x318>
fff78cd8:	48 00 00 54 	b       fff78d2c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x330>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_HDR_HASH_CALCULATION);

    //Verify HW signature A (ECDSA521)
    if(shvReq->controlData.ecdsaCheck)
    {
        if(ec_verify(container->hw_pkey_a, digest, hw_data->hw_sig_a) < 1)
fff78cdc:	38 7d 00 14 	addi    r3,r29,20
fff78ce0:	38 81 09 b0 	addi    r4,r1,2480
fff78ce4:	38 bd 0a 24 	addi    r5,r29,2596
fff78ce8:	4b ff 9f 71 	bl      fff72c58 <_Z9ec_verifyPKhS0_S0_>
fff78cec:	06 a3 07 ea 	bwgtz   r3,fff78cc0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x2c4>
        {
            SBE_ERROR(SBE_FUNC "FAILED : Invalid HW signature A, ECDSA521");
fff78cf0:	3c 60 1b 4b 	lis     r3,6987
fff78cf4:	48 00 24 e9 	bl      fff7b1dc <pk_trace_tiny>
            VERIFY_FAILED(SHV_RC_HW_ECDSA_SIG_TEST);
fff78cf8:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78cfc:	06 49 00 06 	bwnz    r9,fff78d08 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x30c>
fff78d00:	39 20 04 34 	li      r9,1076
fff78d04:	b1 3e 00 c4 	sth     r9,196(r30)
fff78d08:	89 3f 00 47 	lbz     r9,71(r31)
fff78d0c:	06 c9 07 da 	bwz     r9,fff78cc0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x2c4>
fff78d10:	4b ff fd a8 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    {
        if(! (dilithium_wrap(hw_data->hw_sig_d,
                        digest,
                        container->hw_pkey_d,
                        shvReq->scratchStart,
                        shvReq->scratchSize)))
fff78d14:	14 df 00 38 	lvd     d6,56(r31)
fff78d18:	38 7d 0a a8 	addi    r3,r29,2728
fff78d1c:	38 81 09 b0 	addi    r4,r1,2480
fff78d20:	38 bd 00 98 	addi    r5,r29,152
fff78d24:	4b ff f9 cd 	bl      fff786f0 <_ZL14dilithium_wrapPKhS0_S0_mm>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_SIG_A_CHECK);

    //Verify HW signature D (Dilithium)
    if(shvReq->controlData.dilithiumCheck)
    {
        if(! (dilithium_wrap(hw_data->hw_sig_d,
fff78d28:	06 c3 00 3c 	bwz     r3,fff78da0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x3a4>
            SBE_ERROR(SBE_FUNC "FAILED : Invalid HW signature D, Dilithium");
            VERIFY_FAILED(SHV_RC_HW_DILITHIUM_SIG_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_SIG_D_CHECK);
fff78d2c:	88 7f 00 40 	lbz     r3,64(r31)

    SBE_INFO("Prefix Hdr: Reserved : %d", SBE::get64(&prefix->reserved));
    SBE_INFO("Prefix Hdr: flags : %X", SBE::get32(&prefix->flags));
fff78d30:	3b 9d 09 c4 	addi    r28,r29,2500
            SBE_ERROR(SBE_FUNC "FAILED : Invalid HW signature D, Dilithium");
            VERIFY_FAILED(SHV_RC_HW_DILITHIUM_SIG_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HW_SIG_D_CHECK);
fff78d34:	38 63 00 0e 	addi    r3,r3,14
fff78d38:	54 63 06 3e 	clrlwi  r3,r3,24
fff78d3c:	4b ff f0 5d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    SBE_INFO("Prefix Hdr: Reserved : %d", SBE::get64(&prefix->reserved));
fff78d40:	38 7d 09 bc 	addi    r3,r29,2492
fff78d44:	4b ff fb 21 	bl      fff78864 <_ZN3SBE5get64EPv>
fff78d48:	3c 60 8a d3 	lis     r3,-29997
fff78d4c:	7c 85 23 78 	mr      r5,r4
fff78d50:	38 c0 00 00 	li      r6,0
fff78d54:	38 e0 00 00 	li      r7,0
fff78d58:	39 00 00 00 	li      r8,0
fff78d5c:	60 63 00 01 	ori     r3,r3,1
fff78d60:	48 00 2a 79 	bl      fff7b7d8 <pk_trace_big>
    SBE_INFO("Prefix Hdr: flags : %X", SBE::get32(&prefix->flags));
fff78d64:	7f 83 e3 78 	mr      r3,r28
fff78d68:	4b ff fb 2d 	bl      fff78894 <_ZN3SBE5get32EPv>
fff78d6c:	7c 65 1b 78 	mr      r5,r3
fff78d70:	3c 60 42 ef 	lis     r3,17135
fff78d74:	60 63 00 01 	ori     r3,r3,1
fff78d78:	38 c0 00 00 	li      r6,0
fff78d7c:	38 e0 00 00 	li      r7,0
fff78d80:	39 00 00 00 	li      r8,0
fff78d84:	48 00 2a 55 	bl      fff7b7d8 <pk_trace_big>
    //Return the Prefix Hdr flag
    shvRsp->flag = SBE::get32(&prefix->flags);
fff78d88:	7f 83 e3 78 	mr      r3,r28
fff78d8c:	4b ff fb 09 	bl      fff78894 <_ZN3SBE5get32EPv>
fff78d90:	90 7e 00 c0 	stw     r3,192(r30)

    // test for machine specific matching ecid
    if(shvReq->controlData.ecidCheck)
fff78d94:	89 3f 00 45 	lbz     r9,69(r31)
fff78d98:	06 49 00 16 	bwnz    r9,fff78dc4 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x3c8>
fff78d9c:	48 00 00 3c 	b       fff78dd8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x3dc>
                        digest,
                        container->hw_pkey_d,
                        shvReq->scratchStart,
                        shvReq->scratchSize)))
        {
            SBE_ERROR(SBE_FUNC "FAILED : Invalid HW signature D, Dilithium");
fff78da0:	3c 60 60 50 	lis     r3,24656
fff78da4:	48 00 24 39 	bl      fff7b1dc <pk_trace_tiny>
            VERIFY_FAILED(SHV_RC_HW_DILITHIUM_SIG_TEST);
fff78da8:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78dac:	06 49 00 06 	bwnz    r9,fff78db8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x3bc>
fff78db0:	39 20 04 35 	li      r9,1077
fff78db4:	b1 3e 00 c4 	sth     r9,196(r30)
fff78db8:	89 3f 00 47 	lbz     r9,71(r31)
fff78dbc:	06 c9 07 b8 	bwz     r9,fff78d2c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x330>
fff78dc0:	4b ff fc f8 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    shvRsp->flag = SBE::get32(&prefix->flags);

    // test for machine specific matching ecid
    if(shvReq->controlData.ecidCheck)
    {
        if(memcmp(prefix->ecid,shvReq->hwEcid,ECID_SIZE))
fff78dc4:	80 9f 00 28 	lwz     r4,40(r31)
fff78dc8:	38 7d 0a 11 	addi    r3,r29,2577
fff78dcc:	38 a0 00 10 	li      r5,16
fff78dd0:	48 00 16 75 	bl      fff7a444 <memcmp>
fff78dd4:	06 43 00 2e 	bwnz    r3,fff78e30 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x434>
            SBE_ERROR(SBE_FUNC "FAILED : unauthorized prefix ecid");
            VERIFY_FAILED(SHV_RC_PREFIX_ECID_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_ECID_CHECK);
fff78dd8:	88 7f 00 40 	lbz     r3,64(r31)

    // test for valid prefix payload hash
    SBE_INFO("Prefix Hdr: Payload Size: %d", SBE::get64(&prefix->payload_size));
fff78ddc:	3b 9d 09 c9 	addi    r28,r29,2505
            SBE_ERROR(SBE_FUNC "FAILED : unauthorized prefix ecid");
            VERIFY_FAILED(SHV_RC_PREFIX_ECID_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_ECID_CHECK);
fff78de0:	38 63 00 0f 	addi    r3,r3,15
fff78de4:	54 63 06 3e 	clrlwi  r3,r3,24
fff78de8:	4b ff ef b1 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // test for valid prefix payload hash
    SBE_INFO("Prefix Hdr: Payload Size: %d", SBE::get64(&prefix->payload_size));
fff78dec:	7f 83 e3 78 	mr      r3,r28
fff78df0:	4b ff fa 75 	bl      fff78864 <_ZN3SBE5get64EPv>
fff78df4:	3c 60 da 3e 	lis     r3,-9666
fff78df8:	60 63 00 01 	ori     r3,r3,1
fff78dfc:	7c 85 23 78 	mr      r5,r4
fff78e00:	38 c0 00 00 	li      r6,0
fff78e04:	38 e0 00 00 	li      r7,0
fff78e08:	39 00 00 00 	li      r8,0
fff78e0c:	48 00 29 cd 	bl      fff7b7d8 <pk_trace_big>
    size = SBE::get64(&prefix->payload_size);
fff78e10:	7f 83 e3 78 	mr      r3,r28
fff78e14:	4b ff fa 51 	bl      fff78864 <_ZN3SBE5get64EPv>
fff78e18:	90 61 09 fc 	stw     r3,2556(r1)
fff78e1c:	7c 9c 23 78 	mr      r28,r4

    // Validate the prefix payload fits in our hashDataBuff
    if (hashDataBuffSize < size)
fff78e20:	06 43 00 1a 	bwnz    r3,fff78e54 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x458>
fff78e24:	28 04 09 a8 	cmplwi  r4,2472
fff78e28:	41 a1 00 2c 	bgt     fff78e54 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x458>
fff78e2c:	48 00 00 40 	b       fff78e6c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x470>
    // test for machine specific matching ecid
    if(shvReq->controlData.ecidCheck)
    {
        if(memcmp(prefix->ecid,shvReq->hwEcid,ECID_SIZE))
        {
            SBE_ERROR(SBE_FUNC "FAILED : unauthorized prefix ecid");
fff78e30:	3c 60 e2 a8 	lis     r3,-7512
fff78e34:	48 00 23 a9 	bl      fff7b1dc <pk_trace_tiny>
            VERIFY_FAILED(SHV_RC_PREFIX_ECID_TEST);
fff78e38:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78e3c:	06 49 00 06 	bwnz    r9,fff78e48 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x44c>
fff78e40:	39 20 04 36 	li      r9,1078
fff78e44:	b1 3e 00 c4 	sth     r9,196(r30)
fff78e48:	89 3f 00 47 	lbz     r9,71(r31)
fff78e4c:	06 c9 07 c6 	bwz     r9,fff78dd8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x3dc>
fff78e50:	4b ff fc 68 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    size = SBE::get64(&prefix->payload_size);

    // Validate the prefix payload fits in our hashDataBuff
    if (hashDataBuffSize < size)
    {
        VERIFY_FAILED(SHV_RC_PREFIX_PAYLD_SZ_TEST);
fff78e54:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78e58:	06 49 00 06 	bwnz    r9,fff78e64 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x468>
fff78e5c:	39 20 04 3a 	li      r9,1082
fff78e60:	b1 3e 00 c4 	sth     r9,196(r30)
fff78e64:	89 3f 00 47 	lbz     r9,71(r31)
fff78e68:	06 49 06 28 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_PAYLD_SZ_CHECK);
fff78e6c:	88 7f 00 40 	lbz     r3,64(r31)
fff78e70:	38 63 00 10 	addi    r3,r3,16
fff78e74:	54 63 06 3e 	clrlwi  r3,r3,24
fff78e78:	4b ff ef 21 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    memcpy(hashDataBuff, &hw_data->sw_pkey_p, size);
fff78e7c:	39 3d 1c e4 	addi    r9,r29,7396
fff78e80:	7d 24 4b 78 	mr      r4,r9
fff78e84:	7f 85 e3 78 	mr      r5,r28
fff78e88:	38 61 00 08 	addi    r3,r1,8
fff78e8c:	91 21 09 f8 	stw     r9,2552(r1)
fff78e90:	48 00 15 29 	bl      fff7a3b8 <memcpy>
    sha3_Hash(hashDataBuff, size, &digest);
fff78e94:	38 61 00 08 	addi    r3,r1,8
fff78e98:	7f 84 e3 78 	mr      r4,r28
fff78e9c:	38 a1 09 b0 	addi    r5,r1,2480
fff78ea0:	4b ff 87 a9 	bl      fff71648 <_Z9sha3_HashPKhjPA64_h>
    //Return the calculated SHA3-512 FW/SW Key Hash.
    memcpy(shvRsp->sha3.fwKeyHash,digest,SHA3_DIGEST_LENGTH);
fff78ea4:	38 81 09 b0 	addi    r4,r1,2480
fff78ea8:	38 a0 00 40 	li      r5,64
fff78eac:	38 7e 00 40 	addi    r3,r30,64
fff78eb0:	48 00 15 09 	bl      fff7a3b8 <memcpy>
    memcpy(hashDataBuff, &prefix->payload_hash, SHA3_DIGEST_LENGTH);
fff78eb4:	38 9d 09 d1 	addi    r4,r29,2513
fff78eb8:	38 a0 00 40 	li      r5,64
fff78ebc:	38 61 00 08 	addi    r3,r1,8
fff78ec0:	48 00 14 f9 	bl      fff7a3b8 <memcpy>

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_PAYLOAD_HASH_CALCULATION);
fff78ec4:	88 7f 00 40 	lbz     r3,64(r31)
fff78ec8:	38 63 00 11 	addi    r3,r3,17
fff78ecc:	54 63 06 3e 	clrlwi  r3,r3,24
fff78ed0:	4b ff ee c9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    if(memcmp(&hashDataBuff, digest, sizeof(sha3_t)))
fff78ed4:	38 61 00 08 	addi    r3,r1,8
fff78ed8:	38 81 09 b0 	addi    r4,r1,2480
fff78edc:	38 a0 00 40 	li      r5,64
fff78ee0:	48 00 15 65 	bl      fff7a444 <memcmp>
fff78ee4:	06 c3 00 12 	bwz     r3,fff78f08 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x50c>
    {
        SBE_ERROR(SBE_FUNC "FAILED : invalid prefix payload hash");
fff78ee8:	3c 60 b7 d2 	lis     r3,-18478
fff78eec:	48 00 22 f1 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_PREFIX_HASH_TEST);
fff78ef0:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78ef4:	06 49 00 06 	bwnz    r9,fff78f00 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x504>
fff78ef8:	39 20 04 37 	li      r9,1079
fff78efc:	b1 3e 00 c4 	sth     r9,196(r30)
fff78f00:	89 3f 00 47 	lbz     r9,71(r31)
fff78f04:	06 49 05 da 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PREFIX_PAYLOAD_HASH_CHECK);
fff78f08:	88 7f 00 40 	lbz     r3,64(r31)
fff78f0c:	38 63 00 12 	addi    r3,r3,18
fff78f10:	54 63 06 3e 	clrlwi  r3,r3,24
fff78f14:	4b ff ee 85 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // test for valid sw key count
    SBE_INFO("Prefix Hdr: SW Key Count: %d", SBE::get8(&prefix->sw_key_count));
fff78f18:	39 3d 09 c8 	addi    r9,r29,2504
fff78f1c:	7d 23 4b 78 	mr      r3,r9
fff78f20:	91 21 0a 00 	stw     r9,2560(r1)
fff78f24:	4b ff f9 d1 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff78f28:	64 63 fe 43 	oris    r3,r3,65091
fff78f2c:	48 00 22 b1 	bl      fff7b1dc <pk_trace_tiny>
    if (SBE::get8(&prefix->sw_key_count) != SW_KEY_COUNT)
fff78f30:	81 21 0a 00 	lwz     r9,2560(r1)
fff78f34:	7d 23 4b 78 	mr      r3,r9
fff78f38:	4b ff f9 bd 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff78f3c:	06 c3 10 12 	cmpwibeq r3,2,fff78f60 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x564>
    {
        SBE_ERROR(SBE_FUNC "FAILED : sw key count not equal to 2");
fff78f40:	3c 60 1a 1c 	lis     r3,6684
fff78f44:	48 00 22 99 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_SW_KEY_INVALID_COUNT);
fff78f48:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78f4c:	06 49 00 06 	bwnz    r9,fff78f58 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x55c>
fff78f50:	39 20 04 39 	li      r9,1081
fff78f54:	b1 3e 00 c4 	sth     r9,196(r30)
fff78f58:	89 3f 00 47 	lbz     r9,71(r31)
fff78f5c:	06 49 05 ae 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_KEY_COUNT_CHECK);
fff78f60:	88 7f 00 40 	lbz     r3,64(r31)
fff78f64:	38 63 00 13 	addi    r3,r3,19
fff78f68:	54 63 06 3e 	clrlwi  r3,r3,24
fff78f6c:	4b ff ee 2d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // finish procesing prefix header
    // test for protection of all sw key material (sanity check)
    if(size != (sizeof(ecc_key_t) + sizeof(dilithium_key_t)))
fff78f70:	81 21 09 fc 	lwz     r9,2556(r1)
fff78f74:	06 49 00 06 	bwnz    r9,fff78f80 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x584>
fff78f78:	2c 1c 09 a4 	cmpwi   r28,2468
fff78f7c:	41 82 00 24 	beq     fff78fa0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x5a4>
    {
        SBE_ERROR(SBE_FUNC "FAILED : incomplete sw key protection in prefix header");
fff78f80:	3c 60 9d 3a 	lis     r3,-25286
fff78f84:	48 00 22 59 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_SW_KEY_PROTECTION_TEST);
fff78f88:	a1 3e 00 c4 	lhz     r9,196(r30)
fff78f8c:	06 49 00 06 	bwnz    r9,fff78f98 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x59c>
fff78f90:	39 20 04 38 	li      r9,1080
fff78f94:	b1 3e 00 c4 	sth     r9,196(r30)
fff78f98:	89 3f 00 47 	lbz     r9,71(r31)
fff78f9c:	06 49 05 8e 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_KEY_PROTECTION_CHECK);
fff78fa0:	88 7f 00 40 	lbz     r3,64(r31)
    /**************************************************************************************************/

    /**************************************** SW/FW Hdr Checks ***************************************/

    // start processing sw header
    header = (ROM_sw_header_raw*)(hw_data->sw_pkey_s + sizeof(dilithium_key_t));
fff78fa4:	3b 9d 26 88 	addi    r28,r29,9864
    {
        SBE_ERROR(SBE_FUNC "FAILED : incomplete sw key protection in prefix header");
        VERIFY_FAILED(SHV_RC_SW_KEY_PROTECTION_TEST);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_KEY_PROTECTION_CHECK);
fff78fa8:	38 63 00 14 	addi    r3,r3,20
fff78fac:	54 63 06 3e 	clrlwi  r3,r3,24
fff78fb0:	4b ff ed e9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // start processing sw header
    header = (ROM_sw_header_raw*)(hw_data->sw_pkey_s + sizeof(dilithium_key_t));

    // test for fw secure version
    SBE_INFO("SW Hdr: Secure Version: %d", SBE::get8(&header->fw_secure_version));
fff78fb4:	39 3d 26 a0 	addi    r9,r29,9888
fff78fb8:	7d 23 4b 78 	mr      r3,r9
fff78fbc:	91 21 0a 00 	stw     r9,2560(r1)
fff78fc0:	4b ff f9 35 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff78fc4:	64 63 d7 b5 	oris    r3,r3,55221
fff78fc8:	48 00 22 15 	bl      fff7b1dc <pk_trace_tiny>
    if(shvReq->controlData.matchingMSVCheck)
fff78fcc:	89 5f 00 46 	lbz     r10,70(r31)
fff78fd0:	81 21 0a 00 	lwz     r9,2560(r1)
fff78fd4:	06 ca 00 1e 	bwz     r10,fff79010 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x614>
    {
        if(SBE::get8(&header->fw_secure_version) != shvReq->msv)
fff78fd8:	7d 23 4b 78 	mr      r3,r9
fff78fdc:	4b ff f9 19 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff78fe0:	89 3f 00 41 	lbz     r9,65(r31)
fff78fe4:	04 49 18 1e 	cmpwbne r9,r3,fff79020 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x624>
            SBE_ERROR(SBE_FUNC "FAILED : bad container fw secure version");
            VERIFY_FAILED(SHV_RC_SECURE_VERSION_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_FW_SECURE_VERSION_CHECK);
fff78fe8:	88 7f 00 40 	lbz     r3,64(r31)
fff78fec:	38 63 00 15 	addi    r3,r3,21
fff78ff0:	54 63 06 3e 	clrlwi  r3,r3,24
fff78ff4:	4b ff ed a5 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // test for valid header version, hash & signature algorithms (sanity check)
    hdrStatusChecks = valid_ver_alg(&header->ver_alg, SW_HDR);
fff78ff8:	7f 83 e3 78 	mr      r3,r28
fff78ffc:	38 80 00 02 	li      r4,2
fff79000:	4b ff f9 25 	bl      fff78924 <_ZL13valid_ver_algP15ROM_version_rawh>
fff79004:	7c 69 1b 78 	mr      r9,r3
    if(hdrStatusChecks)
fff79008:	06 43 00 1e 	bwnz    r3,fff79044 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x648>
fff7900c:	48 00 00 5c 	b       fff79068 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x66c>
            VERIFY_FAILED(SHV_RC_SECURE_VERSION_TEST);
        }
    }
    else
    {
        if(SBE::get8(&header->fw_secure_version) < shvReq->msv)
fff79010:	7d 23 4b 78 	mr      r3,r9
fff79014:	4b ff f8 e1 	bl      fff788f4 <_ZN3SBE4get8EPv>
fff79018:	89 3f 00 41 	lbz     r9,65(r31)
fff7901c:	05 29 1f e6 	cmplwble r9,r3,fff78fe8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x5ec>
        {
            SBE_ERROR(SBE_FUNC "FAILED : bad container fw secure version");
fff79020:	3c 60 01 7e 	lis     r3,382
fff79024:	48 00 21 b9 	bl      fff7b1dc <pk_trace_tiny>
            VERIFY_FAILED(SHV_RC_SECURE_VERSION_TEST);
fff79028:	a1 3e 00 c4 	lhz     r9,196(r30)
fff7902c:	06 49 00 06 	bwnz    r9,fff79038 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x63c>
fff79030:	39 20 04 47 	li      r9,1095
fff79034:	b1 3e 00 c4 	sth     r9,196(r30)
fff79038:	89 3f 00 47 	lbz     r9,71(r31)
fff7903c:	06 c9 07 d6 	bwz     r9,fff78fe8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x5ec>
fff79040:	4b ff fa 78 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>

    // test for valid header version, hash & signature algorithms (sanity check)
    hdrStatusChecks = valid_ver_alg(&header->ver_alg, SW_HDR);
    if(hdrStatusChecks)
    {
        SBE_ERROR(SBE_FUNC "FAILED : bad sw header version or hash/sign algo's");
fff79044:	3c 60 61 08 	lis     r3,24840
fff79048:	91 21 0a 00 	stw     r9,2560(r1)
fff7904c:	48 00 21 91 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(hdrStatusChecks);
fff79050:	a1 5e 00 c4 	lhz     r10,196(r30)
fff79054:	81 21 0a 00 	lwz     r9,2560(r1)
fff79058:	06 4a 00 04 	bwnz    r10,fff79060 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x664>
fff7905c:	b1 3e 00 c4 	sth     r9,196(r30)
fff79060:	89 3f 00 47 	lbz     r9,71(r31)
fff79064:	06 49 05 2a 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_HEADER_CHECK);
fff79068:	88 7f 00 40 	lbz     r3,64(r31)
fff7906c:	38 63 00 16 	addi    r3,r3,22
fff79070:	54 63 06 3e 	clrlwi  r3,r3,24
fff79074:	4b ff ed 25 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // test for machine specific matching ecid
    if(shvReq->controlData.ecidCheck)
fff79078:	89 3f 00 45 	lbz     r9,69(r31)
fff7907c:	06 c9 00 0c 	bwz     r9,fff79094 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x698>
    {
        if(memcmp(header->ecid,shvReq->swEcid,ECID_SIZE))
fff79080:	80 9f 00 2c 	lwz     r4,44(r31)
fff79084:	38 7d 26 f1 	addi    r3,r29,9969
fff79088:	38 a0 00 10 	li      r5,16
fff7908c:	48 00 13 b9 	bl      fff7a444 <memcmp>
fff79090:	06 43 00 10 	bwnz    r3,fff790b0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x6b4>
            SBE_ERROR(SBE_FUNC "FAILED : unauthorized SW ecid");
            VERIFY_FAILED(SHV_RC_SW_ECID_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_ECID_CHECK);
fff79094:	88 7f 00 40 	lbz     r3,64(r31)
fff79098:	38 63 00 17 	addi    r3,r3,23
fff7909c:	54 63 06 3e 	clrlwi  r3,r3,24
fff790a0:	4b ff ec f9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    sw_sig = (ROM_sw_sig_raw*) (header->reserved1 + 7);

    //Calculate Hash of SW/FW header
    if(shvReq->controlData.ecdsaCheck || shvReq->controlData.dilithiumCheck)
fff790a4:	89 3f 00 43 	lbz     r9,67(r31)
fff790a8:	06 c9 00 16 	bwz     r9,fff790d4 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x6d8>
fff790ac:	48 00 00 30 	b       fff790dc <_ZL10ROM_verifyP6shvReqP6shvRsp+0x6e0>
    // test for machine specific matching ecid
    if(shvReq->controlData.ecidCheck)
    {
        if(memcmp(header->ecid,shvReq->swEcid,ECID_SIZE))
        {
            SBE_ERROR(SBE_FUNC "FAILED : unauthorized SW ecid");
fff790b0:	3c 60 dd 0c 	lis     r3,-8948
fff790b4:	48 00 21 29 	bl      fff7b1dc <pk_trace_tiny>
            VERIFY_FAILED(SHV_RC_SW_ECID_TEST);
fff790b8:	a1 3e 00 c4 	lhz     r9,196(r30)
fff790bc:	06 49 00 06 	bwnz    r9,fff790c8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x6cc>
fff790c0:	39 20 04 4a 	li      r9,1098
fff790c4:	b1 3e 00 c4 	sth     r9,196(r30)
fff790c8:	89 3f 00 47 	lbz     r9,71(r31)
fff790cc:	06 c9 07 e4 	bwz     r9,fff79094 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x698>
fff790d0:	4b ff f9 e8 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_ECID_CHECK);

    sw_sig = (ROM_sw_sig_raw*) (header->reserved1 + 7);

    //Calculate Hash of SW/FW header
    if(shvReq->controlData.ecdsaCheck || shvReq->controlData.dilithiumCheck)
fff790d4:	89 3f 00 44 	lbz     r9,68(r31)
fff790d8:	06 c9 00 12 	bwz     r9,fff790fc <_ZL10ROM_verifyP6shvReqP6shvRsp+0x700>
    {
        memcpy(hashDataBuff, header, SW_HEADER_SIZE(header));
fff790dc:	7f 84 e3 78 	mr      r4,r28
fff790e0:	38 a0 00 80 	li      r5,128
fff790e4:	38 61 00 08 	addi    r3,r1,8
fff790e8:	48 00 12 d1 	bl      fff7a3b8 <memcpy>
        sha3_Hash(hashDataBuff, SW_HEADER_SIZE(header), &digest);
fff790ec:	38 61 00 08 	addi    r3,r1,8
fff790f0:	38 80 00 80 	li      r4,128
fff790f4:	38 a1 09 b0 	addi    r5,r1,2480
fff790f8:	4b ff 85 51 	bl      fff71648 <_Z9sha3_HashPKhjPA64_h>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_HDR_HASH_CALCULATION);
fff790fc:	88 7f 00 40 	lbz     r3,64(r31)
fff79100:	38 63 00 18 	addi    r3,r3,24
fff79104:	54 63 06 3e 	clrlwi  r3,r3,24
fff79108:	4b ff ec 91 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // test for valid sw header signatures (all)
    //Verify SW signature P (ECDSA521)
    if(shvReq->controlData.ecdsaCheck)
fff7910c:	89 3f 00 43 	lbz     r9,67(r31)
fff79110:	06 49 00 10 	bwnz    r9,fff79130 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x734>
            SBE_ERROR(SBE_FUNC "FAILED : Invalid SW signature P, ECDSA521");
            VERIFY_FAILED(SHV_RC_SW_ECDSA_SIG_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_SIG_P_CHECK);
fff79114:	88 7f 00 40 	lbz     r3,64(r31)
fff79118:	38 63 00 19 	addi    r3,r3,25
fff7911c:	54 63 06 3e 	clrlwi  r3,r3,24
fff79120:	4b ff ec 79 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Verify SW signature S (Dilithium)
    if(shvReq->controlData.dilithiumCheck)
fff79124:	89 3f 00 44 	lbz     r9,68(r31)
fff79128:	06 49 00 20 	bwnz    r9,fff79168 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x76c>
fff7912c:	48 00 00 54 	b       fff79180 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x784>

    // test for valid sw header signatures (all)
    //Verify SW signature P (ECDSA521)
    if(shvReq->controlData.ecdsaCheck)
    {
        if(ec_verify(hw_data->sw_pkey_p, digest, sw_sig->sw_sig_p) < 1)
fff79130:	80 61 09 f8 	lwz     r3,2552(r1)
fff79134:	38 81 09 b0 	addi    r4,r1,2480
fff79138:	38 bd 27 08 	addi    r5,r29,9992
fff7913c:	4b ff 9b 1d 	bl      fff72c58 <_Z9ec_verifyPKhS0_S0_>
fff79140:	06 a3 07 ea 	bwgtz   r3,fff79114 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x718>
        {
            SBE_ERROR(SBE_FUNC "FAILED : Invalid SW signature P, ECDSA521");
fff79144:	3c 60 39 a8 	lis     r3,14760
fff79148:	48 00 20 95 	bl      fff7b1dc <pk_trace_tiny>
            VERIFY_FAILED(SHV_RC_SW_ECDSA_SIG_TEST);
fff7914c:	a1 3e 00 c4 	lhz     r9,196(r30)
fff79150:	06 49 00 06 	bwnz    r9,fff7915c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x760>
fff79154:	39 20 04 48 	li      r9,1096
fff79158:	b1 3e 00 c4 	sth     r9,196(r30)
fff7915c:	89 3f 00 47 	lbz     r9,71(r31)
fff79160:	06 c9 07 da 	bwz     r9,fff79114 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x718>
fff79164:	4b ff f9 54 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    {
        if(! (dilithium_wrap(sw_sig->sw_sig_s,
                        digest,
                        hw_data->sw_pkey_s,
                        shvReq->scratchStart,
                        shvReq->scratchSize)))
fff79168:	14 df 00 38 	lvd     d6,56(r31)
fff7916c:	38 7d 27 8c 	addi    r3,r29,10124
fff79170:	38 81 09 b0 	addi    r4,r1,2480
fff79174:	38 bd 1d 68 	addi    r5,r29,7528
fff79178:	4b ff f5 79 	bl      fff786f0 <_ZL14dilithium_wrapPKhS0_S0_mm>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_SIG_P_CHECK);

    //Verify SW signature S (Dilithium)
    if(shvReq->controlData.dilithiumCheck)
    {
        if(! (dilithium_wrap(sw_sig->sw_sig_s,
fff7917c:	06 c3 00 18 	bwz     r3,fff791ac <_ZL10ROM_verifyP6shvReqP6shvRsp+0x7b0>
            SBE_ERROR(SBE_FUNC "FAILED : Invalid SW signature S, Dilithium");
            VERIFY_FAILED(SHV_RC_SW_DILITHIUM_SIG_TEST);
        }
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_SIG_S_CHECK);
fff79180:	88 7f 00 40 	lbz     r3,64(r31)
fff79184:	38 63 00 1a 	addi    r3,r3,26
fff79188:	54 63 06 3e 	clrlwi  r3,r3,24
fff7918c:	4b ff ec 0d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // test for valid component ID
    if(SBE::get64(&header->component_id) != shvReq->componentId)
fff79190:	38 7d 26 94 	addi    r3,r29,9876
fff79194:	4b ff f6 d1 	bl      fff78864 <_ZN3SBE5get64EPv>
fff79198:	81 3f 00 20 	lwz     r9,32(r31)
fff7919c:	04 49 18 1a 	cmpwbne r9,r3,fff791d0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x7d4>
fff791a0:	81 3f 00 24 	lwz     r9,36(r31)
fff791a4:	04 49 20 16 	cmpwbne r9,r4,fff791d0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x7d4>
fff791a8:	48 00 00 48 	b       fff791f0 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x7f4>
                        digest,
                        hw_data->sw_pkey_s,
                        shvReq->scratchStart,
                        shvReq->scratchSize)))
        {
            SBE_ERROR(SBE_FUNC "FAILED : Invalid SW signature S, Dilithium");
fff791ac:	3c 60 b6 68 	lis     r3,-18840
fff791b0:	48 00 20 2d 	bl      fff7b1dc <pk_trace_tiny>
            VERIFY_FAILED(SHV_RC_SW_DILITHIUM_SIG_TEST);
fff791b4:	a1 3e 00 c4 	lhz     r9,196(r30)
fff791b8:	06 49 00 06 	bwnz    r9,fff791c4 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x7c8>
fff791bc:	39 20 04 49 	li      r9,1097
fff791c0:	b1 3e 00 c4 	sth     r9,196(r30)
fff791c4:	89 3f 00 47 	lbz     r9,71(r31)
fff791c8:	06 c9 07 dc 	bwz     r9,fff79180 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x784>
fff791cc:	4b ff f8 ec 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SW_SIG_S_CHECK);

    // test for valid component ID
    if(SBE::get64(&header->component_id) != shvReq->componentId)
    {
        SBE_ERROR(SBE_FUNC "FAILED : invalid component ID ");
fff791d0:	3c 60 91 f4 	lis     r3,-28172
fff791d4:	48 00 20 09 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_COMPONENT_ID_TEST);
fff791d8:	a1 3e 00 c4 	lhz     r9,196(r30)
fff791dc:	06 49 00 06 	bwnz    r9,fff791e8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x7ec>
fff791e0:	39 20 04 46 	li      r9,1094
fff791e4:	b1 3e 00 c4 	sth     r9,196(r30)
fff791e8:	89 3f 00 47 	lbz     r9,71(r31)
fff791ec:	06 49 04 66 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_COMPONENT_ID_CHECK);
fff791f0:	88 7f 00 40 	lbz     r3,64(r31)

    // Compare proctected payload size
    SBE_INFO("SW/FW Hdr: Payload Size Protected: %d", SBE::get64(&header->payload_size_protected));
fff791f4:	3b 9d 26 a1 	addi    r28,r29,9889
    {
        SBE_ERROR(SBE_FUNC "FAILED : invalid component ID ");
        VERIFY_FAILED(SHV_RC_COMPONENT_ID_TEST);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_COMPONENT_ID_CHECK);
fff791f8:	38 63 00 1b 	addi    r3,r3,27
fff791fc:	54 63 06 3e 	clrlwi  r3,r3,24
fff79200:	4b ff eb 99 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // Compare proctected payload size
    SBE_INFO("SW/FW Hdr: Payload Size Protected: %d", SBE::get64(&header->payload_size_protected));
fff79204:	7f 83 e3 78 	mr      r3,r28
fff79208:	4b ff f6 5d 	bl      fff78864 <_ZN3SBE5get64EPv>
fff7920c:	3c 60 04 f3 	lis     r3,1267
fff79210:	60 63 00 01 	ori     r3,r3,1
fff79214:	7c 85 23 78 	mr      r5,r4
fff79218:	38 c0 00 00 	li      r6,0
fff7921c:	38 e0 00 00 	li      r7,0
fff79220:	39 00 00 00 	li      r8,0
fff79224:	48 00 25 b5 	bl      fff7b7d8 <pk_trace_big>
    if(SBE::get64(&header->payload_size_protected) != shvReq->hashListSize)
fff79228:	7f 83 e3 78 	mr      r3,r28
fff7922c:	4b ff f6 39 	bl      fff78864 <_ZN3SBE5get64EPv>
fff79230:	81 3f 00 08 	lwz     r9,8(r31)
fff79234:	06 43 00 04 	bwnz    r3,fff7923c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x840>
fff79238:	04 c4 48 20 	cmpwbeq r4,r9,fff79278 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x87c>
    {
        SBE_ERROR(SBE_FUNC "FAILED : Invalid protcted payload section size exp:%d, act:%d",
fff7923c:	7f 83 e3 78 	mr      r3,r28
fff79240:	4b ff f6 25 	bl      fff78864 <_ZN3SBE5get64EPv>
                   SBE::get64(&header->payload_size_protected),shvReq->hashListSize);
fff79244:	3c 60 84 e4 	lis     r3,-31516
fff79248:	80 df 00 08 	lwz     r6,8(r31)
fff7924c:	60 63 00 02 	ori     r3,r3,2
fff79250:	7c 85 23 78 	mr      r5,r4
fff79254:	38 e0 00 00 	li      r7,0
fff79258:	39 00 00 00 	li      r8,0
fff7925c:	48 00 25 7d 	bl      fff7b7d8 <pk_trace_big>
        VERIFY_FAILED(SHV_RC_SW_PROTECTED_PAYLD_SZ_TEST);
fff79260:	a1 3e 00 c4 	lhz     r9,196(r30)
fff79264:	06 49 00 06 	bwnz    r9,fff79270 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x874>
fff79268:	39 20 04 44 	li      r9,1092
fff7926c:	b1 3e 00 c4 	sth     r9,196(r30)
fff79270:	89 3f 00 47 	lbz     r9,71(r31)
fff79274:	06 49 04 22 	bwnz    r9,fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PROTECTED_PAYLOAD_SIZE_CHECK);
fff79278:	88 7f 00 40 	lbz     r3,64(r31)

    // Compare un proctected payload size
    SBE_INFO("SW/FW Hdr: Payload Size Un-Protected: %d", SBE::get64(&header->payload_size_unprotected));
fff7927c:	3b 9d 26 a9 	addi    r28,r29,9897
        SBE_ERROR(SBE_FUNC "FAILED : Invalid protcted payload section size exp:%d, act:%d",
                   SBE::get64(&header->payload_size_protected),shvReq->hashListSize);
        VERIFY_FAILED(SHV_RC_SW_PROTECTED_PAYLD_SZ_TEST);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PROTECTED_PAYLOAD_SIZE_CHECK);
fff79280:	38 63 00 1c 	addi    r3,r3,28
fff79284:	54 63 06 3e 	clrlwi  r3,r3,24
fff79288:	4b ff eb 11 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // Compare un proctected payload size
    SBE_INFO("SW/FW Hdr: Payload Size Un-Protected: %d", SBE::get64(&header->payload_size_unprotected));
fff7928c:	7f 83 e3 78 	mr      r3,r28
fff79290:	4b ff f5 d5 	bl      fff78864 <_ZN3SBE5get64EPv>
fff79294:	3c 60 b0 d1 	lis     r3,-20271
fff79298:	60 63 00 01 	ori     r3,r3,1
fff7929c:	7c 85 23 78 	mr      r5,r4
fff792a0:	38 c0 00 00 	li      r6,0
fff792a4:	38 e0 00 00 	li      r7,0
fff792a8:	39 00 00 00 	li      r8,0
fff792ac:	48 00 25 2d 	bl      fff7b7d8 <pk_trace_big>
    if(SBE::get64(&header->payload_size_unprotected) != shvReq->unproctectedPayloadSize)
fff792b0:	7f 83 e3 78 	mr      r3,r28
fff792b4:	4b ff f5 b1 	bl      fff78864 <_ZN3SBE5get64EPv>
fff792b8:	81 3f 00 0c 	lwz     r9,12(r31)
fff792bc:	06 43 00 04 	bwnz    r3,fff792c4 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x8c8>
fff792c0:	04 c4 48 22 	cmpwbeq r4,r9,fff79304 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x908>
    {
        SBE_ERROR(SBE_FUNC "FAILED : Invalid un-protcted payload section size exp:%d, act:%d",
fff792c4:	7f 83 e3 78 	mr      r3,r28
fff792c8:	4b ff f5 9d 	bl      fff78864 <_ZN3SBE5get64EPv>
                   SBE::get64(&header->payload_size_unprotected),shvReq->unproctectedPayloadSize);
fff792cc:	3c 60 13 e2 	lis     r3,5090
fff792d0:	80 df 00 0c 	lwz     r6,12(r31)
fff792d4:	60 63 00 02 	ori     r3,r3,2
fff792d8:	7c 85 23 78 	mr      r5,r4
fff792dc:	38 e0 00 00 	li      r7,0
fff792e0:	39 00 00 00 	li      r8,0
fff792e4:	48 00 24 f5 	bl      fff7b7d8 <pk_trace_big>
        VERIFY_FAILED(SHV_RC_SW_UNPROTECTED_PAYLD_SZ_TEST);
fff792e8:	a1 3e 00 c4 	lhz     r9,196(r30)
fff792ec:	06 49 00 06 	bwnz    r9,fff792f8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x8fc>
fff792f0:	39 20 04 45 	li      r9,1093
fff792f4:	b1 3e 00 c4 	sth     r9,196(r30)
fff792f8:	89 3f 00 47 	lbz     r9,71(r31)
fff792fc:	06 c9 00 04 	bwz     r9,fff79304 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x908>
fff79300:	4b ff f7 b8 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_UNPROTECTED_PAYLOAD_SIZE_CHECK);
fff79304:	88 7f 00 40 	lbz     r3,64(r31)
fff79308:	38 63 00 1d 	addi    r3,r3,29
fff7930c:	54 63 06 3e 	clrlwi  r3,r3,24
fff79310:	4b ff ea 89 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // Validate hash of hash list(payload).
    //Return the calculated SHA3-512 Payload Hash.
    //We are just returing the hash calculated during pak read, which was passed
    //as a input
    memcpy(shvRsp->sha3.payloadHash, shvReq->payloadHash, sizeof(sha3_t));
fff79314:	80 9f 00 10 	lwz     r4,16(r31)
fff79318:	38 a0 00 40 	li      r5,64
fff7931c:	38 7e 00 80 	addi    r3,r30,128
fff79320:	48 00 10 99 	bl      fff7a3b8 <memcpy>

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PAYLOAD_HASH_CALCULATION);
fff79324:	88 7f 00 40 	lbz     r3,64(r31)
fff79328:	38 63 00 1e 	addi    r3,r3,30
fff7932c:	54 63 06 3e 	clrlwi  r3,r3,24
fff79330:	4b ff ea 69 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    memcpy(hashDataBuff, &header->payload_hash_protected, SHA3_DIGEST_LENGTH);
fff79334:	38 9d 26 b1 	addi    r4,r29,9905
fff79338:	38 a0 00 40 	li      r5,64
fff7933c:	38 61 00 08 	addi    r3,r1,8
fff79340:	48 00 10 79 	bl      fff7a3b8 <memcpy>
    if(memcmp(&hashDataBuff, shvReq->payloadHash, SHA3_DIGEST_LENGTH))
fff79344:	80 9f 00 10 	lwz     r4,16(r31)
fff79348:	38 61 00 08 	addi    r3,r1,8
fff7934c:	38 a0 00 40 	li      r5,64
fff79350:	48 00 10 f5 	bl      fff7a444 <memcmp>
fff79354:	06 c3 00 14 	bwz     r3,fff7937c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x980>
    {
        SBE_ERROR(SBE_FUNC "FAILED : invalid sw payload hash");
fff79358:	3c 60 c9 11 	lis     r3,-14063
fff7935c:	48 00 1e 81 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_SW_HASH_TEST);
fff79360:	a1 3e 00 c4 	lhz     r9,196(r30)
fff79364:	06 49 00 06 	bwnz    r9,fff79370 <_ZL10ROM_verifyP6shvReqP6shvRsp+0x974>
fff79368:	39 20 04 4b 	li      r9,1099
fff7936c:	b1 3e 00 c4 	sth     r9,196(r30)
fff79370:	89 3f 00 47 	lbz     r9,71(r31)
fff79374:	06 c9 00 04 	bwz     r9,fff7937c <_ZL10ROM_verifyP6shvReqP6shvRsp+0x980>
fff79378:	4b ff f7 40 	b       fff78ab8 <_ZL10ROM_verifyP6shvReqP6shvRsp+0xbc>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_PAYLOAD_HASH_CHECK);
fff7937c:	88 7f 00 40 	lbz     r3,64(r31)
fff79380:	38 63 00 1f 	addi    r3,r3,31
fff79384:	54 63 06 3e 	clrlwi  r3,r3,24
fff79388:	4b ff ea 11 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    /**************************************************************************************************/

    SBE_INFO("Secure HDR Verified");
fff7938c:	3c 60 38 43 	lis     r3,14403
fff79390:	48 00 1e 4d 	bl      fff7b1dc <pk_trace_tiny>

    SBE_EXIT(SBE_FUNC);
    return ROM_DONE;
fff79394:	38 60 00 00 	li      r3,0
    #undef SBE_FUNC
}
fff79398:	80 01 0a 1c 	lwz     r0,2588(r1)
fff7939c:	17 81 0a 08 	lvd     d28,2568(r1)
fff793a0:	7c 08 03 a6 	mtlr    r0
fff793a4:	17 c1 0a 10 	lvd     d30,2576(r1)
fff793a8:	38 21 0a 18 	addi    r1,r1,2584
fff793ac:	4e 80 00 20 	blr

fff793b0 <verifySecureHdr>:

ROM_response verifySecureHdr(shvReq_t *shvReq, shvRsp_t *shvRsp)
{
fff793b0:	94 21 ff f0 	stwu    r1,-16(r1)
fff793b4:	7c 08 02 a6 	mflr    r0
fff793b8:	1b c1 00 08 	stvd    d30,8(r1)
fff793bc:	7c 7f 1b 78 	mr      r31,r3
    SBE_ENTER(SBE_FUNC);

    ROM_response status = ROM_DONE;

    // Get the current SBE Messaging Register value
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, &shvReq->sbeMsgRegValue);
fff793c0:	3c 60 00 05 	lis     r3,5
    return ROM_DONE;
    #undef SBE_FUNC
}

ROM_response verifySecureHdr(shvReq_t *shvReq, shvRsp_t *shvRsp)
{
fff793c4:	7c 9e 23 78 	mr      r30,r4
    SBE_ENTER(SBE_FUNC);

    ROM_response status = ROM_DONE;

    // Get the current SBE Messaging Register value
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, &shvReq->sbeMsgRegValue);
fff793c8:	60 63 00 09 	ori     r3,r3,9
fff793cc:	38 9f 00 30 	addi    r4,r31,48
    return ROM_DONE;
    #undef SBE_FUNC
}

ROM_response verifySecureHdr(shvReq_t *shvReq, shvRsp_t *shvRsp)
{
fff793d0:	90 01 00 14 	stw     r0,20(r1)
    SBE_ENTER(SBE_FUNC);

    ROM_response status = ROM_DONE;

    // Get the current SBE Messaging Register value
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SB_MSG, &shvReq->sbeMsgRegValue);
fff793d4:	48 00 0e 59 	bl      fff7a22c <getscom_abs>
    SBE_INFO(SBE_FUNC "SBE Messaging Reg value [0x%08X 0x%08X]" ,SBE::higher32BWord(shvReq->sbeMsgRegValue),
                    SBE::lower32BWord(shvReq->sbeMsgRegValue));
fff793d8:	14 bf 00 30 	lvd     d5,48(r31)
fff793dc:	3c 60 22 41 	lis     r3,8769
fff793e0:	60 63 00 02 	ori     r3,r3,2
fff793e4:	38 e0 00 00 	li      r7,0
fff793e8:	39 00 00 00 	li      r8,0
fff793ec:	48 00 23 ed 	bl      fff7b7d8 <pk_trace_big>

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_MSG_REG_FETCH);
fff793f0:	88 7f 00 40 	lbz     r3,64(r31)
fff793f4:	4b ff e9 a5 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // Lets do some sanity checks before we verify the container
    if(shvReq->containerSize != SECURE_HEADER_SIZE)
fff793f8:	81 3f 00 04 	lwz     r9,4(r31)
fff793fc:	2c 09 3c 00 	cmpwi   r9,15360
fff79400:	40 a2 00 24 	bne     fff79424 <verifySecureHdr+0x74>
    {
        SBE_INFO(SBE_FUNC "Sanity Check: Invalid Container size");
        VERIFY_FAILED(SHV_RC_CONTAINER_SIZE_CHECK);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_CONTAINER_SIZE_CHECK);
fff79404:	88 7f 00 40 	lbz     r3,64(r31)
fff79408:	38 63 00 01 	addi    r3,r3,1
fff7940c:	54 63 06 3e 	clrlwi  r3,r3,24
fff79410:	4b ff e9 89 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    if(shvReq->hashListSize < MINIMUM_SECURE_HEADER_PAYLOAD_SIZE)
fff79414:	81 3f 00 08 	lwz     r9,8(r31)
fff79418:	28 09 00 40 	cmplwi  r9,64
fff7941c:	40 81 00 30 	ble     fff7944c <verifySecureHdr+0x9c>
fff79420:	48 00 00 4c 	b       fff7946c <verifySecureHdr+0xbc>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_MSG_REG_FETCH);

    // Lets do some sanity checks before we verify the container
    if(shvReq->containerSize != SECURE_HEADER_SIZE)
    {
        SBE_INFO(SBE_FUNC "Sanity Check: Invalid Container size");
fff79424:	3c 60 dc c8 	lis     r3,-9016
fff79428:	48 00 1d b5 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_CONTAINER_SIZE_CHECK);
fff7942c:	a1 3e 00 c4 	lhz     r9,196(r30)
fff79430:	06 49 00 06 	bwnz    r9,fff7943c <verifySecureHdr+0x8c>
fff79434:	39 20 04 10 	li      r9,1040
fff79438:	b1 3e 00 c4 	sth     r9,196(r30)
fff7943c:	89 3f 00 47 	lbz     r9,71(r31)
fff79440:	06 c9 07 e2 	bwz     r9,fff79404 <verifySecureHdr+0x54>
fff79444:	38 60 00 01 	li      r3,1
fff79448:	48 00 01 24 	b       fff7956c <verifySecureHdr+0x1bc>

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_CONTAINER_SIZE_CHECK);

    if(shvReq->hashListSize < MINIMUM_SECURE_HEADER_PAYLOAD_SIZE)
    {
        SBE_INFO(SBE_FUNC "Sanity Check: Invalid payload size");
fff7944c:	3c 60 f6 fc 	lis     r3,-2308
fff79450:	48 00 1d 8d 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_MINIMUM_PAYLOAD_SIZE_CHECK);
fff79454:	a1 3e 00 c4 	lhz     r9,196(r30)
fff79458:	06 49 00 06 	bwnz    r9,fff79464 <verifySecureHdr+0xb4>
fff7945c:	39 20 04 11 	li      r9,1041
fff79460:	b1 3e 00 c4 	sth     r9,196(r30)
fff79464:	89 3f 00 47 	lbz     r9,71(r31)
fff79468:	06 49 07 ee 	bwnz    r9,fff79444 <verifySecureHdr+0x94>
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HASH_LIST_SIZE_CHECK);
fff7946c:	88 7f 00 40 	lbz     r3,64(r31)
fff79470:	38 63 00 02 	addi    r3,r3,2
fff79474:	54 63 06 3e 	clrlwi  r3,r3,24
fff79478:	4b ff e9 21 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //If Dilithium check is enabled, check if minimum scratch size is requested
    if(shvReq->controlData.dilithiumCheck && (shvReq->scratchSize < MINIMUM_DILITHIUM_SCRATCH_SIZE))
fff7947c:	89 3f 00 44 	lbz     r9,68(r31)
fff79480:	06 c9 00 0a 	bwz     r9,fff79494 <verifySecureHdr+0xe4>
fff79484:	3d 20 00 02 	lis     r9,2
fff79488:	81 5f 00 3c 	lwz     r10,60(r31)
fff7948c:	61 29 57 ff 	ori     r9,r9,22527
fff79490:	05 2a 48 1e 	cmplwble r10,r9,fff794cc <verifySecureHdr+0x11c>
        SBE_INFO(SBE_FUNC "Sanity Check: Not enough scratch size.Minimum scratch size required %d ",
                 MINIMUM_DILITHIUM_SCRATCH_SIZE);
        VERIFY_FAILED(SHV_RC_MINIMUM_SCRATCH_SIZE_CHECK);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SCRATCH_SIZE_CHECK);
fff79494:	88 7f 00 40 	lbz     r3,64(r31)
fff79498:	38 63 00 03 	addi    r3,r3,3
fff7949c:	54 63 06 3e 	clrlwi  r3,r3,24
fff794a0:	4b ff e8 f9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //If Dilithium check is enabled, check if scratch start offest is not NULL
    SBE_INFO(SBE_FUNC "scratch start is %08x ", shvReq->scratchStart);
fff794a4:	3c 60 c2 19 	lis     r3,-15847
fff794a8:	80 bf 00 38 	lwz     r5,56(r31)
fff794ac:	60 63 00 01 	ori     r3,r3,1
fff794b0:	38 c0 00 00 	li      r6,0
fff794b4:	38 e0 00 00 	li      r7,0
fff794b8:	39 00 00 00 	li      r8,0
fff794bc:	48 00 23 1d 	bl      fff7b7d8 <pk_trace_big>
    if(shvReq->controlData.dilithiumCheck && (shvReq->scratchStart == 0x00))
fff794c0:	89 3f 00 44 	lbz     r9,68(r31)
fff794c4:	06 49 00 22 	bwnz    r9,fff79508 <verifySecureHdr+0x158>
fff794c8:	48 00 00 48 	b       fff79510 <verifySecureHdr+0x160>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_HASH_LIST_SIZE_CHECK);

    //If Dilithium check is enabled, check if minimum scratch size is requested
    if(shvReq->controlData.dilithiumCheck && (shvReq->scratchSize < MINIMUM_DILITHIUM_SCRATCH_SIZE))
    {
        SBE_INFO(SBE_FUNC "Sanity Check: Not enough scratch size.Minimum scratch size required %d ",
fff794cc:	3c 60 07 3d 	lis     r3,1853
fff794d0:	3c a0 00 02 	lis     r5,2
fff794d4:	60 63 00 01 	ori     r3,r3,1
fff794d8:	60 a5 58 00 	ori     r5,r5,22528
fff794dc:	38 c0 00 00 	li      r6,0
fff794e0:	38 e0 00 00 	li      r7,0
fff794e4:	39 00 00 00 	li      r8,0
fff794e8:	48 00 22 f1 	bl      fff7b7d8 <pk_trace_big>
                 MINIMUM_DILITHIUM_SCRATCH_SIZE);
        VERIFY_FAILED(SHV_RC_MINIMUM_SCRATCH_SIZE_CHECK);
fff794ec:	a1 3e 00 c4 	lhz     r9,196(r30)
fff794f0:	06 49 00 06 	bwnz    r9,fff794fc <verifySecureHdr+0x14c>
fff794f4:	39 20 04 12 	li      r9,1042
fff794f8:	b1 3e 00 c4 	sth     r9,196(r30)
fff794fc:	89 3f 00 47 	lbz     r9,71(r31)
fff79500:	06 c9 07 ca 	bwz     r9,fff79494 <verifySecureHdr+0xe4>
fff79504:	4b ff ff 40 	b       fff79444 <verifySecureHdr+0x94>

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SCRATCH_SIZE_CHECK);

    //If Dilithium check is enabled, check if scratch start offest is not NULL
    SBE_INFO(SBE_FUNC "scratch start is %08x ", shvReq->scratchStart);
    if(shvReq->controlData.dilithiumCheck && (shvReq->scratchStart == 0x00))
fff79508:	81 3f 00 38 	lwz     r9,56(r31)
fff7950c:	06 c9 00 1e 	bwz     r9,fff79548 <verifySecureHdr+0x198>
    {
        SBE_INFO(SBE_FUNC "Sanity Check: Scratch start offset is NULL");
        VERIFY_FAILED(SHV_RC_SCRATCH_START_OFFSET_CHECK);
    }

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SCRATCH_START_OFFSET_CHECK);
fff79510:	88 7f 00 40 	lbz     r3,64(r31)
fff79514:	38 63 00 04 	addi    r3,r3,4
fff79518:	54 63 06 3e 	clrlwi  r3,r3,24
fff7951c:	4b ff e8 7d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Verify the Secure Header
    status = ROM_verify(shvReq, shvRsp);
fff79520:	7f c4 f3 78 	mr      r4,r30
fff79524:	7f e3 fb 78 	mr      r3,r31
fff79528:	4b ff f4 d5 	bl      fff789fc <_ZL10ROM_verifyP6shvReqP6shvRsp>
fff7952c:	7c 7e 1b 78 	mr      r30,r3

    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SECURE_HDR_VERIFICATION);
fff79530:	88 7f 00 40 	lbz     r3,64(r31)
fff79534:	38 63 00 20 	addi    r3,r3,32
fff79538:	54 63 06 3e 	clrlwi  r3,r3,24
fff7953c:	4b ff e8 5d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    SBE_EXIT(SBE_FUNC);
    return status;
fff79540:	7f c3 f3 78 	mr      r3,r30
fff79544:	48 00 00 28 	b       fff7956c <verifySecureHdr+0x1bc>

    //If Dilithium check is enabled, check if scratch start offest is not NULL
    SBE_INFO(SBE_FUNC "scratch start is %08x ", shvReq->scratchStart);
    if(shvReq->controlData.dilithiumCheck && (shvReq->scratchStart == 0x00))
    {
        SBE_INFO(SBE_FUNC "Sanity Check: Scratch start offset is NULL");
fff79548:	3c 60 e1 1e 	lis     r3,-7906
fff7954c:	48 00 1c 91 	bl      fff7b1dc <pk_trace_tiny>
        VERIFY_FAILED(SHV_RC_SCRATCH_START_OFFSET_CHECK);
fff79550:	a1 3e 00 c4 	lhz     r9,196(r30)
fff79554:	06 49 00 06 	bwnz    r9,fff79560 <verifySecureHdr+0x1b0>
fff79558:	39 20 04 13 	li      r9,1043
fff7955c:	b1 3e 00 c4 	sth     r9,196(r30)
fff79560:	89 3f 00 47 	lbz     r9,71(r31)
fff79564:	06 c9 07 d6 	bwz     r9,fff79510 <verifySecureHdr+0x160>
fff79568:	4b ff fe dc 	b       fff79444 <verifySecureHdr+0x94>
    UPDATE_SBE_PROGRESS_CODE(COMPLETED_SECURE_HDR_VERIFICATION);

    SBE_EXIT(SBE_FUNC);
    return status;
    #undef SBE_FUNC
}
fff7956c:	80 01 00 14 	lwz     r0,20(r1)
fff79570:	17 c1 00 08 	lvd     d30,8(r1)
fff79574:	7c 08 03 a6 	mtlr    r0
fff79578:	38 21 00 10 	addi    r1,r1,16
fff7957c:	4e 80 00 20 	blr

fff79580 <_Z21getSignatureAlgoCheckbbb>:
                              bool signatureDisableFuseVal)
{
    bool enable = signatureEnableScratchVal | signatureEnableFuseVal;
    bool disable = signatureDisableFuseVal;

    if(enable == false && disable == false)
fff79580:	06 43 00 04 	bwnz    r3,fff79588 <_Z21getSignatureAlgoCheckbbb+0x8>
fff79584:	06 c4 00 0c 	bwz     r4,fff7959c <_Z21getSignatureAlgoCheckbbb+0x1c>
        return DISABLE_SIGNATURE_ALGO;
    else if(enable == true && disable == false)
        return ENABLE_SIGNATURE_ALGO;
fff79588:	38 60 00 01 	li      r3,1
    bool enable = signatureEnableScratchVal | signatureEnableFuseVal;
    bool disable = signatureDisableFuseVal;

    if(enable == false && disable == false)
        return DISABLE_SIGNATURE_ALGO;
    else if(enable == true && disable == false)
fff7958c:	06 c5 00 08 	bwz     r5,fff7959c <_Z21getSignatureAlgoCheckbbb+0x1c>
        return ENABLE_SIGNATURE_ALGO;
    else if(enable == false && disable == true)
        return DISABLE_SIGNATURE_ALGO;
    else
        return (signatureEnableFuseVal ? INVALID_SIGNATURE_CNFG : DISABLE_SIGNATURE_ALGO);
fff79590:	38 60 00 02 	li      r3,2
fff79594:	06 44 00 04 	bwnz    r4,fff7959c <_Z21getSignatureAlgoCheckbbb+0x1c>
fff79598:	38 60 00 00 	li      r3,0
}
fff7959c:	4e 80 00 20 	blr

fff795a0 <_Z34applyTripleModularRedundancyVotingh>:
     * Ex. 000 - 0  001 - 0
     *     010 - 0  011 - 1
     *     100 - 0  101 - 1
     *     110 - 1  111 - 1
     ********************************************************/
    if ((data == 0x3)  || (data == 0x5) || (data == 0x6) || (data == 0x7))
fff795a0:	06 c3 18 10 	cmpwibeq r3,3,fff795c0 <_Z34applyTripleModularRedundancyVotingh+0x20>
fff795a4:	38 63 ff fb 	addi    r3,r3,-5
fff795a8:	28 03 00 02 	cmplwi  r3,2
fff795ac:	39 20 00 01 	li      r9,1
fff795b0:	40 81 00 08 	ble     fff795b8 <_Z34applyTripleModularRedundancyVotingh+0x18>
fff795b4:	39 20 00 00 	li      r9,0
    return minSecVer;
}

uint8_t applyTripleModularRedundancyVoting(uint8_t data)
{
    uint8_t resultantValue = 0x0;
fff795b8:	55 23 06 3e 	clrlwi  r3,r9,24
fff795bc:	4e 80 00 20 	blr
     *     100 - 0  101 - 1
     *     110 - 1  111 - 1
     ********************************************************/
    if ((data == 0x3)  || (data == 0x5) || (data == 0x6) || (data == 0x7))
    {
      resultantValue = 0x1;
fff795c0:	38 60 00 01 	li      r3,1
    }

    return resultantValue;
}
fff795c4:	4e 80 00 20 	blr

fff795c8 <_Z6getMSVy>:
    else
        return (signatureEnableFuseVal ? INVALID_SIGNATURE_CNFG : DISABLE_SIGNATURE_ALGO);
}

uint8_t getMSV (uint64_t msvFuseBank)
{
fff795c8:	94 21 ff e8 	stwu    r1,-24(r1)
fff795cc:	7c 08 02 a6 	mflr    r0
fff795d0:	1b 81 00 08 	stvd    d28,8(r1)
fff795d4:	90 01 00 1c 	stw     r0,28(r1)
fff795d8:	1b c1 00 10 	stvd    d30,16(r1)
fff795dc:	7c 9d 23 78 	mr      r29,r4
fff795e0:	7c 7c 1b 78 	mr      r28,r3
fff795e4:	3b c0 00 00 	li      r30,0
fff795e8:	1d 1e 00 03 	mulli   r8,r30,3
fff795ec:	39 08 00 01 	addi    r8,r8,1

    /* MSV check fuse bank, msv max is 21 */
    for (uint8_t i = 0; i < 21; i++)
    {
        /* 63rd bit is resevered, +1 for reserved bit  */
        if (applyTripleModularRedundancyVoting((msvFuseBank >> (1 + (i * 3))) & 0x07))
fff795f0:	7f 88 44 76 	srvd    d8,d28,r8
fff795f4:	55 23 07 7e 	clrlwi  r3,r9,29
fff795f8:	57 df 06 3e 	clrlwi  r31,r30,24
fff795fc:	4b ff ff a5 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
fff79600:	06 c3 00 08 	bwz     r3,fff79610 <_Z6getMSVy+0x48>
        {
            minSecVer = 21 - i;
fff79604:	20 7f 00 15 	subfic  r3,r31,21
fff79608:	54 63 06 3e 	clrlwi  r3,r3,24
            break;
fff7960c:	48 00 00 10 	b       fff7961c <_Z6getMSVy+0x54>
fff79610:	3b de 00 01 	addi    r30,r30,1
{
    /* Calculated FW minimum secure version */
    uint8_t minSecVer = 0;

    /* MSV check fuse bank, msv max is 21 */
    for (uint8_t i = 0; i < 21; i++)
fff79614:	06 5e af ea 	cmpwibne r30,21,fff795e8 <_Z6getMSVy+0x20>
}

uint8_t getMSV (uint64_t msvFuseBank)
{
    /* Calculated FW minimum secure version */
    uint8_t minSecVer = 0;
fff79618:	38 60 00 00 	li      r3,0
            break;
        }
    }

    return minSecVer;
}
fff7961c:	80 01 00 1c 	lwz     r0,28(r1)
fff79620:	17 81 00 08 	lvd     d28,8(r1)
fff79624:	7c 08 03 a6 	mtlr    r0
fff79628:	17 c1 00 10 	lvd     d30,16(r1)
fff7962c:	38 21 00 18 	addi    r1,r1,24
fff79630:	4e 80 00 20 	blr

Disassembly of section .ekbcmnsrompak:

fff79a38 <_ZL10hash_blockPKvmPA64_h>:

#ifdef __USE_SHA3__

// Make sure this function is not inlined so we don't add the SHA3 context to each potential caller's stack
static __attribute__((noinline)) void hash_block(const void* i_data, uint32_t i_size, sha3_t* o_hash)
{
fff79a38:	94 21 ff 08 	stwu    r1,-248(r1)
fff79a3c:	7c 08 02 a6 	mflr    r0
fff79a40:	1b 81 00 e8 	stvd    d28,232(r1)
fff79a44:	1b c1 00 f0 	stvd    d30,240(r1)
fff79a48:	7c 7d 1b 78 	mr      r29,r3
fff79a4c:	7c 9e 23 78 	mr      r30,r4
    sha3_ctx_t ctx;
    sha3_init(&ctx);
fff79a50:	38 61 00 08 	addi    r3,r1,8

#ifdef __USE_SHA3__

// Make sure this function is not inlined so we don't add the SHA3 context to each potential caller's stack
static __attribute__((noinline)) void hash_block(const void* i_data, uint32_t i_size, sha3_t* o_hash)
{
fff79a54:	90 01 00 fc 	stw     r0,252(r1)
fff79a58:	7c bf 2b 78 	mr      r31,r5
    sha3_ctx_t ctx;
    sha3_init(&ctx);
fff79a5c:	4b ff 7a b9 	bl      fff71514 <_Z9sha3_initP10sha3_ctx_t>
    sha3_update(&ctx, i_data, i_size);
fff79a60:	7f a4 eb 78 	mr      r4,r29
fff79a64:	7f c5 f3 78 	mr      r5,r30
fff79a68:	38 61 00 08 	addi    r3,r1,8
fff79a6c:	4b ff 7a e5 	bl      fff71550 <_Z11sha3_updateP10sha3_ctx_tPKvj>
    sha3_final(o_hash, &ctx);
fff79a70:	7f e3 fb 78 	mr      r3,r31
fff79a74:	38 81 00 08 	addi    r4,r1,8
fff79a78:	4b ff 7b 55 	bl      fff715cc <_Z10sha3_finalPA64_hP10sha3_ctx_t>
}
fff79a7c:	80 01 00 fc 	lwz     r0,252(r1)
fff79a80:	17 81 00 e8 	lvd     d28,232(r1)
fff79a84:	7c 08 03 a6 	mtlr    r0
fff79a88:	17 c1 00 f0 	lvd     d30,240(r1)
fff79a8c:	38 21 00 f8 	addi    r1,r1,248
fff79a90:	4e 80 00 20 	blr

fff79a94 <_ZN11FileArchive5Entry10decompressEPvmPA64_h>:
#endif

ARC_RET_t FileArchive::Entry::decompress(void* o_buffer, uint32_t i_size, sha3_t* o_hash)
{
fff79a94:	94 21 ff e8 	stwu    r1,-24(r1)
fff79a98:	7c 08 02 a6 	mflr    r0
    if ((uintptr_t)o_buffer & 3)
fff79a9c:	54 89 07 be 	clrlwi  r9,r4,30
    sha3_final(o_hash, &ctx);
}
#endif

ARC_RET_t FileArchive::Entry::decompress(void* o_buffer, uint32_t i_size, sha3_t* o_hash)
{
fff79aa0:	1b 81 00 08 	stvd    d28,8(r1)
fff79aa4:	90 01 00 1c 	stw     r0,28(r1)
fff79aa8:	1b c1 00 10 	stvd    d30,16(r1)
fff79aac:	7c 9d 23 78 	mr      r29,r4
    if ((uintptr_t)o_buffer & 3)
fff79ab0:	06 c9 00 14 	bwz     r9,fff79ad8 <_ZN11FileArchive5Entry10decompressEPvmPA64_h+0x44>
    {
        ARC_ERROR("FileArchive::Entry::decompress: Output buffer is not 4-byte aligned - o_buffer=%p", o_buffer);
fff79ab4:	3c 60 24 b7 	lis     r3,9399
fff79ab8:	60 63 00 01 	ori     r3,r3,1
fff79abc:	7c 85 23 78 	mr      r5,r4
fff79ac0:	38 c0 00 00 	li      r6,0
fff79ac4:	38 e0 00 00 	li      r7,0
fff79ac8:	39 00 00 00 	li      r8,0
fff79acc:	48 00 1d 0d 	bl      fff7b7d8 <pk_trace_big>
        return ARC_INVALID_PARAMS;
fff79ad0:	3b e0 00 01 	li      r31,1
fff79ad4:	48 00 00 64 	b       fff79b38 <_ZN11FileArchive5Entry10decompressEPvmPA64_h+0xa4>
fff79ad8:	7c dc 33 78 	mr      r28,r6
    }

    if (i_size < iv_uncompressedSize)
fff79adc:	80 c3 00 0c 	lwz     r6,12(r3)
fff79ae0:	7c 7e 1b 78 	mr      r30,r3
fff79ae4:	05 05 30 10 	cmplwbge r5,r6,fff79b04 <_ZN11FileArchive5Entry10decompressEPvmPA64_h+0x70>
    {
        ARC_ERROR("FileArchive::Entry::decompress: Output buffer too small - i_size=%d iv_uncompressedSize=%d",
                  i_size, iv_uncompressedSize);
fff79ae8:	3c 60 c7 9c 	lis     r3,-14436
fff79aec:	60 63 00 02 	ori     r3,r3,2
fff79af0:	38 e0 00 00 	li      r7,0
fff79af4:	39 00 00 00 	li      r8,0
fff79af8:	48 00 1c e1 	bl      fff7b7d8 <pk_trace_big>
        return ARC_INPUT_BUFFER_OVERFLOW;
fff79afc:	3b e0 00 03 	li      r31,3
fff79b00:	48 00 00 38 	b       fff79b38 <_ZN11FileArchive5Entry10decompressEPvmPA64_h+0xa4>
    }

    if (iv_method != PAK_METHOD_STORE)
fff79b04:	a1 43 00 00 	lhz     r10,0(r3)
    {
#ifdef __USE_COMPRESSION__
        const int filter = (iv_method == PAK_METHOD_ZLIB_PPC) ? TINF_FILTER_PPC : TINF_FILTER_NONE;
        return tinf_uncompress(o_buffer, i_size, iv_compressedData, iv_compressedSize, NULL, o_hash, filter);
#else
        return ARC_FUNCTIONALITY_NOT_SUPPORTED;
fff79b08:	3b e0 00 02 	li      r31,2
        ARC_ERROR("FileArchive::Entry::decompress: Output buffer too small - i_size=%d iv_uncompressedSize=%d",
                  i_size, iv_uncompressedSize);
        return ARC_INPUT_BUFFER_OVERFLOW;
    }

    if (iv_method != PAK_METHOD_STORE)
fff79b0c:	06 4a 08 16 	cmpwibne r10,1,fff79b38 <_ZN11FileArchive5Entry10decompressEPvmPA64_h+0xa4>
        return ARC_FUNCTIONALITY_NOT_SUPPORTED;
#endif
    }
    else
    {
        memcpy(o_buffer, iv_compressedData, iv_uncompressedSize);
fff79b10:	7c 83 23 78 	mr      r3,r4
fff79b14:	80 9e 00 04 	lwz     r4,4(r30)
fff79b18:	7c c5 33 78 	mr      r5,r6
fff79b1c:	48 00 08 9d 	bl      fff7a3b8 <memcpy>
#else
            return ARC_FUNCTIONALITY_NOT_SUPPORTED;
#endif
        }

        return ARC_OPERATION_SUCCESSFUL;
fff79b20:	3b e0 00 00 	li      r31,0
    }
    else
    {
        memcpy(o_buffer, iv_compressedData, iv_uncompressedSize);

        if (o_hash)
fff79b24:	06 dc 00 0a 	bwz     r28,fff79b38 <_ZN11FileArchive5Entry10decompressEPvmPA64_h+0xa4>
        {
#ifdef __USE_SHA3__
            // Keep this in a separate function so we don't incur the stack space cost
            // of the SHA3 context unless we need to.
            hash_block(o_buffer, iv_uncompressedSize, o_hash);
fff79b28:	80 9e 00 0c 	lwz     r4,12(r30)
fff79b2c:	7f a3 eb 78 	mr      r3,r29
fff79b30:	7f 85 e3 78 	mr      r5,r28
fff79b34:	4b ff ff 05 	bl      fff79a38 <_ZL10hash_blockPKvmPA64_h>
#endif
        }

        return ARC_OPERATION_SUCCESSFUL;
    }
}
fff79b38:	80 01 00 1c 	lwz     r0,28(r1)
fff79b3c:	7f e3 fb 78 	mr      r3,r31
fff79b40:	7c 08 03 a6 	mtlr    r0
fff79b44:	17 81 00 08 	lvd     d28,8(r1)
fff79b48:	17 c1 00 10 	lvd     d30,16(r1)
fff79b4c:	38 21 00 18 	addi    r1,r1,24
fff79b50:	4e 80 00 20 	blr

fff79b54 <_ZN11FileArchive5Entry19get_stored_data_ptrERPKv>:

ARC_RET_t FileArchive::Entry::get_stored_data_ptr(const void*& o_buffer)
{
    if (iv_method != PAK_METHOD_STORE)
fff79b54:	a1 23 00 00 	lhz     r9,0(r3)
fff79b58:	06 c9 08 16 	cmpwibeq r9,1,fff79b84 <_ZN11FileArchive5Entry19get_stored_data_ptrERPKv+0x30>
        return ARC_OPERATION_SUCCESSFUL;
    }
}

ARC_RET_t FileArchive::Entry::get_stored_data_ptr(const void*& o_buffer)
{
fff79b5c:	94 21 ff f8 	stwu    r1,-8(r1)
fff79b60:	7c 08 02 a6 	mflr    r0
    if (iv_method != PAK_METHOD_STORE)
    {
        ARC_ERROR("Attempting to get stored data pointer for compressed file");
fff79b64:	3c 60 db 70 	lis     r3,-9360
        return ARC_OPERATION_SUCCESSFUL;
    }
}

ARC_RET_t FileArchive::Entry::get_stored_data_ptr(const void*& o_buffer)
{
fff79b68:	90 01 00 0c 	stw     r0,12(r1)
    if (iv_method != PAK_METHOD_STORE)
    {
        ARC_ERROR("Attempting to get stored data pointer for compressed file");
fff79b6c:	48 00 16 71 	bl      fff7b1dc <pk_trace_tiny>
        return ARC_FUNCTIONALITY_NOT_SUPPORTED;
    }

    o_buffer = iv_compressedData;
    return ARC_OPERATION_SUCCESSFUL;
}
fff79b70:	80 01 00 0c 	lwz     r0,12(r1)
ARC_RET_t FileArchive::Entry::get_stored_data_ptr(const void*& o_buffer)
{
    if (iv_method != PAK_METHOD_STORE)
    {
        ARC_ERROR("Attempting to get stored data pointer for compressed file");
        return ARC_FUNCTIONALITY_NOT_SUPPORTED;
fff79b74:	38 60 00 02 	li      r3,2
    }

    o_buffer = iv_compressedData;
    return ARC_OPERATION_SUCCESSFUL;
}
fff79b78:	7c 08 03 a6 	mtlr    r0
fff79b7c:	38 21 00 08 	addi    r1,r1,8
fff79b80:	4e 80 00 20 	blr
    {
        ARC_ERROR("Attempting to get stored data pointer for compressed file");
        return ARC_FUNCTIONALITY_NOT_SUPPORTED;
    }

    o_buffer = iv_compressedData;
fff79b84:	81 23 00 04 	lwz     r9,4(r3)
    return ARC_OPERATION_SUCCESSFUL;
fff79b88:	38 60 00 00 	li      r3,0
    {
        ARC_ERROR("Attempting to get stored data pointer for compressed file");
        return ARC_FUNCTIONALITY_NOT_SUPPORTED;
    }

    o_buffer = iv_compressedData;
fff79b8c:	91 24 00 00 	stw     r9,0(r4)
    return ARC_OPERATION_SUCCESSFUL;
fff79b90:	4e 80 00 20 	blr

fff79b94 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv>:
    return ARC_OPERATION_SUCCESSFUL;
}
#endif

ARC_RET_t FileArchive::_locate_file(const char* i_fname, Entry* o_entry, void*& o_ptr)
{
fff79b94:	94 21 ff b0 	stwu    r1,-80(r1)
fff79b98:	7c 08 02 a6 	mflr    r0
fff79b9c:	1b 81 00 40 	stvd    d28,64(r1)
fff79ba0:	90 01 00 54 	stw     r0,84(r1)
fff79ba4:	1b c1 00 48 	stvd    d30,72(r1)
fff79ba8:	7c 9d 23 78 	mr      r29,r4
fff79bac:	90 a1 00 28 	stw     r5,40(r1)
fff79bb0:	7c dc 33 78 	mr      r28,r6
    uint8_t* ptr = static_cast<uint8_t*>(iv_firstFile);
fff79bb4:	83 e3 00 00 	lwz     r31,0(r3)
    uint16_t fname_len = i_fname ? strlen(i_fname) : 0;
fff79bb8:	39 40 00 00 	li      r10,0
fff79bbc:	06 c4 00 08 	bwz     r4,fff79bcc <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x38>
fff79bc0:	7c 83 23 78 	mr      r3,r4
fff79bc4:	48 00 08 c1 	bl      fff7a484 <strlen>
fff79bc8:	54 6a 04 3e 	clrlwi  r10,r3,16

    while (true)
    {
        if (uintptr_t(ptr) & 7)
fff79bcc:	57 e8 07 7e 	clrlwi  r8,r31,29
fff79bd0:	06 c8 00 0c 	bwz     r8,fff79be8 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x54>
        {
            ARC_ERROR("Unaligned file header: %p", ptr);
fff79bd4:	3c 60 5d e0 	lis     r3,24032
fff79bd8:	60 63 00 01 	ori     r3,r3,1
fff79bdc:	7f e5 fb 78 	mr      r5,r31
fff79be0:	38 c0 00 00 	li      r6,0
fff79be4:	48 00 00 7c 	b       fff79c60 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0xcc>

        // The pak layout is big endian
        hdrc.h.iv_magic = be32toh(hdrc.h.iv_magic);

        // Check the magic to make sure we are at the start of an entry
        if (hdrc.h.iv_magic == PAK_END)
fff79be8:	3d 20 2f 50 	lis     r9,12112
            PakFileHeaderCore h;
            uint64_t u;
        } hdrc __attribute__((aligned(8)));

        // Using a volatile pointer forces the PPE compiler to emit lvd/stvd
        hdrc.u = *(volatile uint64_t*)ptr;
fff79bec:	14 9f 00 00 	lvd     d4,0(r31)

        // The pak layout is big endian
        hdrc.h.iv_magic = be32toh(hdrc.h.iv_magic);

        // Check the magic to make sure we are at the start of an entry
        if (hdrc.h.iv_magic == PAK_END)
fff79bf0:	61 29 41 4b 	ori     r9,r9,16715
fff79bf4:	04 49 20 1e 	cmpwbne r9,r4,fff79c30 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x9c>
        {
            if (i_fname)
fff79bf8:	06 dd 00 14 	bwz     r29,fff79c20 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x8c>
            {
#if defined(__SBE_PPE__) || defined(__PPE_QME)
                ARC_ERROR_BIN("File not found:", i_fname, fname_len);
fff79bfc:	28 0a 00 fe 	cmplwi  r10,254
fff79c00:	3c 60 aa 12 	lis     r3,-21998
fff79c04:	60 63 00 ff 	ori     r3,r3,255
fff79c08:	41 81 00 08 	bgt     fff79c10 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x7c>
fff79c0c:	65 43 aa 12 	oris    r3,r10,43538
fff79c10:	7f a4 eb 78 	mr      r4,r29
fff79c14:	48 00 1c b9 	bl      fff7b8cc <pk_trace_binary>
#else
                ARC_ERROR("File not found: %s", i_fname);
#endif
                return ARC_FILE_NOT_FOUND;
fff79c18:	38 60 00 05 	li      r3,5
fff79c1c:	48 00 01 68 	b       fff79d84 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1f0>
            }
            else
            {
                // The end magic is 4 bytes + 4 bytes of total size
                o_ptr = ptr + 8;
fff79c20:	3b ff 00 08 	addi    r31,r31,8
fff79c24:	93 fc 00 00 	stw     r31,0(r28)
                return ARC_OPERATION_SUCCESSFUL;
fff79c28:	38 60 00 00 	li      r3,0
fff79c2c:	48 00 01 58 	b       fff79d84 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1f0>
            }
        }

        if (hdrc.h.iv_magic == PAK_PAD)
fff79c30:	3d 20 50 41 	lis     r9,20545
fff79c34:	61 29 4b 50 	ori     r9,r9,19280
fff79c38:	04 49 20 08 	cmpwbne r9,r4,fff79c48 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0xb4>
        {
            hdrc.h.iv_padsize = be32toh(hdrc.h.iv_padsize);
            ptr += hdrc.h.iv_padsize + 8;
fff79c3c:	39 05 00 08 	addi    r8,r5,8
fff79c40:	7f ff 42 14 	add     r31,r31,r8
fff79c44:	4b ff ff 88 	b       fff79bcc <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x38>
            continue;
        }

        if (hdrc.h.iv_magic != PAK_START)
fff79c48:	3c c0 50 41 	lis     r6,20545
fff79c4c:	60 c6 4b 21 	ori     r6,r6,19233
fff79c50:	04 c6 20 12 	cmpwbeq r6,r4,fff79c74 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0xe0>
        {
            ARC_ERROR("Incorrect file header magic value: 0x%08X, expected: 0x%08X", hdrc.h.iv_magic, PAK_START);
fff79c54:	3c 60 38 50 	lis     r3,14416
fff79c58:	60 63 00 02 	ori     r3,r3,2
fff79c5c:	7c 85 23 78 	mr      r5,r4
fff79c60:	38 e0 00 00 	li      r7,0
fff79c64:	39 00 00 00 	li      r8,0
fff79c68:	48 00 1b 71 	bl      fff7b7d8 <pk_trace_big>
            o_ptr = ptr;
fff79c6c:	93 fc 00 00 	stw     r31,0(r28)
fff79c70:	48 00 00 e0 	b       fff79d50 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1bc>

        hdrc.h.iv_version = be16toh(hdrc.h.iv_version);
        hdrc.h.iv_hesize = be16toh(hdrc.h.iv_hesize);

        // The header core checked out, advance to the extended data
        ptr += 8;
fff79c74:	39 1f 00 08 	addi    r8,r31,8
            o_ptr = ptr;
            return ARC_FILE_CORRUPTED;
        }

        hdrc.h.iv_version = be16toh(hdrc.h.iv_version);
        hdrc.h.iv_hesize = be16toh(hdrc.h.iv_hesize);
fff79c78:	54 be 04 3e 	clrlwi  r30,r5,16
        // If the version were to change - that would be handled here
        // Do this in two pieces:
        // 1) Copy in the values for the fixed length vars
        // 2) Set name to name start in ptr to avoid allocating a new copy of the name
        PakFileHeaderExtended hdre;
        memcpy(&hdre, ptr, PakHeaderExtendedSize);
fff79c7c:	7d 04 43 78 	mr      r4,r8
fff79c80:	38 a0 00 14 	li      r5,20
fff79c84:	38 61 00 08 	addi    r3,r1,8
fff79c88:	91 01 00 2c 	stw     r8,44(r1)
fff79c8c:	91 41 00 38 	stw     r10,56(r1)
fff79c90:	48 00 07 29 	bl      fff7a3b8 <memcpy>
        hdre.iv_csize = be32toh(hdre.iv_csize);
        hdre.iv_dsize = be32toh(hdre.iv_dsize);
        hdre.iv_psize = be32toh(hdre.iv_psize);

        // Advance over the extended header to the data
        ptr += hdrc.h.iv_hesize;
fff79c94:	81 01 00 2c 	lwz     r8,44(r1)
        // 2) Set name to name start in ptr to avoid allocating a new copy of the name
        PakFileHeaderExtended hdre;
        memcpy(&hdre, ptr, PakHeaderExtendedSize);
        char* name = (char*)(ptr + PakHeaderExtendedSize);
        // The pak layout is big endian
        hdre.iv_nsize = be16toh(hdre.iv_nsize);
fff79c98:	a0 a1 00 0a 	lhz     r5,10(r1)
        hdre.iv_crc = be32toh(hdre.iv_crc);
        hdre.iv_csize = be32toh(hdre.iv_csize);
fff79c9c:	80 01 00 10 	lwz     r0,16(r1)
        hdre.iv_dsize = be32toh(hdre.iv_dsize);
fff79ca0:	80 c1 00 14 	lwz     r6,20(r1)
        hdre.iv_psize = be32toh(hdre.iv_psize);
fff79ca4:	80 e1 00 18 	lwz     r7,24(r1)

        // Advance over the extended header to the data
        ptr += hdrc.h.iv_hesize;
fff79ca8:	7f c8 f2 14 	add     r30,r8,r30

        /*
         * The file name in the pak header is not zero-terminated
         * Use the length first and then memcmp to find the file
         */
        if (i_fname && (hdre.iv_nsize == fname_len)
fff79cac:	81 41 00 38 	lwz     r10,56(r1)
fff79cb0:	06 dd 00 66 	bwz     r29,fff79d7c <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1e8>
fff79cb4:	04 45 50 64 	cmpwbne r5,r10,fff79d7c <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1e8>
            && !memcmp(name, i_fname, fname_len))
fff79cb8:	7d 45 53 78 	mr      r5,r10
fff79cbc:	38 7f 00 1c 	addi    r3,r31,28
fff79cc0:	7f a4 eb 78 	mr      r4,r29
fff79cc4:	90 01 00 34 	stw     r0,52(r1)
fff79cc8:	90 c1 00 30 	stw     r6,48(r1)
fff79ccc:	90 e1 00 2c 	stw     r7,44(r1)
fff79cd0:	48 00 07 75 	bl      fff7a444 <memcmp>
fff79cd4:	80 01 00 34 	lwz     r0,52(r1)
fff79cd8:	80 c1 00 30 	lwz     r6,48(r1)
fff79cdc:	80 e1 00 2c 	lwz     r7,44(r1)
fff79ce0:	81 41 00 38 	lwz     r10,56(r1)
fff79ce4:	06 43 00 4c 	bwnz    r3,fff79d7c <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1e8>
        {
#ifndef __USE_COMPRESSION__

            if(hdre.iv_method == PAK_METHOD_ZLIB || hdre.iv_method == PAK_METHOD_ZLIB_FAST
               || hdre.iv_method == PAK_METHOD_ZLIB_PPC)
fff79ce8:	89 21 00 09 	lbz     r9,9(r1)
        if (i_fname && (hdre.iv_nsize == fname_len)
            && !memcmp(name, i_fname, fname_len))
        {
#ifndef __USE_COMPRESSION__

            if(hdre.iv_method == PAK_METHOD_ZLIB || hdre.iv_method == PAK_METHOD_ZLIB_FAST
fff79cec:	39 49 ff fe 	addi    r10,r9,-2
fff79cf0:	28 0a 00 02 	cmplwi  r10,2
fff79cf4:	41 81 00 0c 	bgt     fff79d00 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x16c>
               || hdre.iv_method == PAK_METHOD_ZLIB_PPC)
            {
                ARC_ERROR("Archive is compressed, "
                          "but compression support is not enabled");
fff79cf8:	3c 60 27 f1 	lis     r3,10225
fff79cfc:	48 00 00 0c 	b       fff79d08 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x174>
                return ARC_FUNCTIONALITY_NOT_SUPPORTED;
            }

            if (hdre.iv_method != PAK_METHOD_STORE)
fff79d00:	06 c9 08 0a 	cmpwibeq r9,1,fff79d14 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x180>
#else
            if (hdre.iv_method != PAK_METHOD_STORE && hdre.iv_method != PAK_METHOD_ZLIB
                && hdre.iv_method != PAK_METHOD_ZLIB_FAST && hdre.iv_method != PAK_METHOD_ZLIB_PPC)
#endif
            {
                ARC_ERROR("Unsupported compression format: 0x%04x", hdre.iv_method);
fff79d04:	65 23 2e fa 	oris    r3,r9,12026
fff79d08:	48 00 14 d5 	bl      fff7b1dc <pk_trace_tiny>
                return ARC_FUNCTIONALITY_NOT_SUPPORTED;
fff79d0c:	38 60 00 02 	li      r3,2
fff79d10:	48 00 00 74 	b       fff79d84 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1f0>
            }

            if (uintptr_t(ptr) & 7)
fff79d14:	57 c9 07 7e 	clrlwi  r9,r30,29
fff79d18:	06 c9 00 0a 	bwz     r9,fff79d2c <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x198>
            {
                ARC_ERROR("Unaligned compressed data: %p", ptr);
fff79d1c:	3c 60 c9 77 	lis     r3,-13961
fff79d20:	60 63 00 01 	ori     r3,r3,1
fff79d24:	7f c5 f3 78 	mr      r5,r30
fff79d28:	48 00 00 18 	b       fff79d40 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1ac>
                return ARC_FILE_CORRUPTED;
            }

            if (hdre.iv_psize & 7)
fff79d2c:	54 e9 07 7e 	clrlwi  r9,r7,29
fff79d30:	06 c9 00 14 	bwz     r9,fff79d58 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1c4>
            {
                ARC_ERROR("Unaligned payload size: %d", hdre.iv_dsize);
fff79d34:	3c 60 85 9d 	lis     r3,-31331
fff79d38:	60 63 00 01 	ori     r3,r3,1
fff79d3c:	7c c5 33 78 	mr      r5,r6
fff79d40:	38 c0 00 00 	li      r6,0
fff79d44:	38 e0 00 00 	li      r7,0
fff79d48:	39 00 00 00 	li      r8,0
fff79d4c:	48 00 1a 8d 	bl      fff7b7d8 <pk_trace_big>
                return ARC_FILE_CORRUPTED;
fff79d50:	38 60 00 04 	li      r3,4
fff79d54:	48 00 00 30 	b       fff79d84 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1f0>
            }

            // Everything checks out, setup the return data
            o_entry->iv_method = hdre.iv_method;
fff79d58:	81 41 00 28 	lwz     r10,40(r1)
fff79d5c:	39 20 00 01 	li      r9,1
            o_entry->iv_compressedData = ptr;
fff79d60:	93 ca 00 04 	stw     r30,4(r10)
            o_entry->iv_compressedSize = hdre.iv_csize;
            o_entry->iv_uncompressedSize = hdre.iv_dsize;
            // Advance to the end of the entry
            o_ptr = ptr + hdre.iv_psize;
fff79d64:	7f de 3a 14 	add     r30,r30,r7
                ARC_ERROR("Unaligned payload size: %d", hdre.iv_dsize);
                return ARC_FILE_CORRUPTED;
            }

            // Everything checks out, setup the return data
            o_entry->iv_method = hdre.iv_method;
fff79d68:	b1 2a 00 00 	sth     r9,0(r10)
            o_entry->iv_compressedData = ptr;
            o_entry->iv_compressedSize = hdre.iv_csize;
fff79d6c:	90 0a 00 08 	stw     r0,8(r10)
            o_entry->iv_uncompressedSize = hdre.iv_dsize;
fff79d70:	90 ca 00 0c 	stw     r6,12(r10)
            // Advance to the end of the entry
            o_ptr = ptr + hdre.iv_psize;
fff79d74:	93 dc 00 00 	stw     r30,0(r28)
            return ARC_OPERATION_SUCCESSFUL;
fff79d78:	48 00 00 0c 	b       fff79d84 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x1f0>
        }

        // Not the right file, skip to the next header
        ptr += hdre.iv_psize;
fff79d7c:	7f fe 3a 14 	add     r31,r30,r7
fff79d80:	4b ff fe 4c 	b       fff79bcc <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv+0x38>
    }
}
fff79d84:	80 01 00 54 	lwz     r0,84(r1)
fff79d88:	17 81 00 40 	lvd     d28,64(r1)
fff79d8c:	7c 08 03 a6 	mtlr    r0
fff79d90:	17 c1 00 48 	lvd     d30,72(r1)
fff79d94:	38 21 00 50 	addi    r1,r1,80
fff79d98:	4e 80 00 20 	blr

fff79d9c <_ZN11FileArchive11locate_fileEPKcRNS_5EntryE>:

ARC_RET_t FileArchive::locate_file(const char* i_fname, Entry& o_entry)
{
fff79d9c:	94 21 ff e8 	stwu    r1,-24(r1)
fff79da0:	7c 08 02 a6 	mflr    r0
    void* dummy;
    return _locate_file(i_fname, &o_entry, dummy);
fff79da4:	38 c1 00 08 	addi    r6,r1,8
        ptr += hdre.iv_psize;
    }
}

ARC_RET_t FileArchive::locate_file(const char* i_fname, Entry& o_entry)
{
fff79da8:	90 01 00 1c 	stw     r0,28(r1)
    void* dummy;
    return _locate_file(i_fname, &o_entry, dummy);
fff79dac:	4b ff fd e9 	bl      fff79b94 <_ZN11FileArchive12_locate_fileEPKcPNS_5EntryERPv>
}
fff79db0:	80 01 00 1c 	lwz     r0,28(r1)
fff79db4:	7c 08 03 a6 	mtlr    r0
fff79db8:	38 21 00 18 	addi    r1,r1,24
fff79dbc:	4e 80 00 20 	blr

Disassembly of section .pkbase:

fff7a1c0 <udivmodsi4_loop>:
fff7a1c0:	05 04 18 0e 	cmplwbge r4,r3,fff7a1dc <udivmodsi4_loop+0x1c>
fff7a1c4:	42 40 00 14 	bdz     fff7a1d8 <udivmodsi4_loop+0x18>
fff7a1c8:	06 84 00 0a 	bwltz   r4,fff7a1dc <udivmodsi4_loop+0x1c>
fff7a1cc:	54 84 08 3c 	rlwinm  r4,r4,1,0,30
fff7a1d0:	55 29 08 3c 	rlwinm  r9,r9,1,0,30
fff7a1d4:	4b ff ff ec 	b       fff7a1c0 <udivmodsi4_loop>
fff7a1d8:	39 20 00 00 	li      r9,0
fff7a1dc:	39 40 00 00 	li      r10,0
fff7a1e0:	06 c9 00 0e 	bwz     r9,fff7a1fc <udivmodsi4_loop+0x3c>
fff7a1e4:	05 83 20 06 	cmplwblt r3,r4,fff7a1f0 <udivmodsi4_loop+0x30>
fff7a1e8:	7c 64 18 50 	subf    r3,r4,r3
fff7a1ec:	7d 4a 4b 78 	or      r10,r10,r9
fff7a1f0:	55 29 f8 7e 	rlwinm  r9,r9,31,1,31
fff7a1f4:	54 84 f8 7e 	rlwinm  r4,r4,31,1,31
fff7a1f8:	4b ff ff e8 	b       fff7a1e0 <udivmodsi4_loop+0x20>
fff7a1fc:	06 45 00 04 	bwnz    r5,fff7a204 <udivmodsi4_loop+0x44>
fff7a200:	7d 43 53 78 	mr      r3,r10
fff7a204:	4e 80 00 20 	blr

fff7a208 <__umodsi3>:
fff7a208:	38 a0 00 01 	li      r5,1
fff7a20c:	39 40 00 21 	li      r10,33
fff7a210:	7d 49 03 a6 	mtctr   r10
fff7a214:	39 20 00 01 	li      r9,1
fff7a218:	4b ff ff a8 	b       fff7a1c0 <udivmodsi4_loop>

fff7a21c <putscom_abs>:

uint32_t putscom_abs(const uint32_t i_address, uint64_t i_data)
{

    // Perform the Store Virtual Double instruction
    PPE_STVD(i_address, i_data);
fff7a21c:	18 a3 00 00 	stvd    d5,0(r3)

    // Get the MSR[SIBRC] as the return code
    uint32_t rc = mfmsr();
fff7a220:	7c 60 00 a6 	mfmsr   r3
    rc = ((rc & MSR_SIBRC) >> (32 - (MSR_SIBRC_START_BIT + MSR_SIBRC_LEN)));
    return (rc);

}
fff7a224:	54 63 67 7e 	rlwinm  r3,r3,12,29,31
fff7a228:	4e 80 00 20 	blr

fff7a22c <getscom_abs>:

uint32_t getscom_abs( const uint32_t i_address, uint64_t* o_data)
{
    uint64_t temp;
    // Perform the Load Virtual Double instruction
    PPE_LVD(i_address, temp);
fff7a22c:	15 03 00 00 	lvd     d8,0(r3)
    PPE_STVD(o_data, temp);
fff7a230:	19 04 00 00 	stvd    d8,0(r4)

    // Get the MSR[SIBRC] as the return code
    uint32_t rc = mfmsr();
fff7a234:	7c 60 00 a6 	mfmsr   r3
    rc = ((rc & MSR_SIBRC) >> (32 - (MSR_SIBRC_START_BIT + MSR_SIBRC_LEN)));
    return (rc);
}
fff7a238:	54 63 67 7e 	rlwinm  r3,r3,12,29,31
fff7a23c:	4e 80 00 20 	blr

fff7a240 <_memcpy>:
}


static inline void* _memcpy(void* vdest, const void* vsrc, size_t len)
{
    uint32_t alignDest = ((uint32_t)vdest) & 0x7;
fff7a240:	54 6a 07 7e 	clrlwi  r10,r3,29
    uint32_t alignSrc = ((uint32_t)vsrc) & 0x7;
fff7a244:	54 89 07 7e 	clrlwi  r9,r4,29
    size_t i = 0;
    char* cdest = (char*)vdest;
fff7a248:	7c 68 1b 78 	mr      r8,r3
    const char* csrc = (const char*)vsrc;

    if(alignDest == alignSrc) //align and do fast copy
fff7a24c:	04 4a 48 3a 	cmpwbne r10,r9,fff7a2c0 <_memcpy+0x80>
    {

        if(alignDest != 0)
fff7a250:	06 ca 00 04 	bwz     r10,fff7a258 <_memcpy+0x18>
        {
            alignDest = 8 - alignDest;
fff7a254:	21 4a 00 08 	subfic  r10,r10,8
static inline void* _memcpy(void* vdest, const void* vsrc, size_t len)
{
    uint32_t alignDest = ((uint32_t)vdest) & 0x7;
    uint32_t alignSrc = ((uint32_t)vsrc) & 0x7;
    size_t i = 0;
    char* cdest = (char*)vdest;
fff7a258:	7c 68 1b 78 	mr      r8,r3
        if(alignDest != 0)
        {
            alignDest = 8 - alignDest;
        }

        if(len > alignDest) //else fall back to 1 byte copy
fff7a25c:	05 25 50 32 	cmplwble r5,r10,fff7a2c0 <_memcpy+0x80>
fff7a260:	39 4a 00 01 	addi    r10,r10,1
fff7a264:	7d 49 03 a6 	mtctr   r10
fff7a268:	39 20 00 00 	li      r9,0
        {

            for (; i < alignDest; ++i)
fff7a26c:	42 40 00 14 	bdz     fff7a280 <_memcpy+0x40>
            {
                cdest[i] = csrc[i];
fff7a270:	7d 44 48 ae 	lbzx    r10,r4,r9
fff7a274:	7d 43 49 ae 	stbx    r10,r3,r9
        }

        if(len > alignDest) //else fall back to 1 byte copy
        {

            for (; i < alignDest; ++i)
fff7a278:	39 29 00 01 	addi    r9,r9,1
fff7a27c:	4b ff ff f0 	b       fff7a26c <_memcpy+0x2c>
fff7a280:	7d 49 28 50 	subf    r10,r9,r5
fff7a284:	55 47 e8 fe 	rlwinm  r7,r10,29,3,31
fff7a288:	38 e7 00 01 	addi    r7,r7,1
fff7a28c:	7c e9 03 a6 	mtctr   r7
            {
                cdest[i] = csrc[i];
                len--;
            }

            uint64_t* lldest = (uint64_t*)&cdest[alignDest];
fff7a290:	7d 03 4a 14 	add     r8,r3,r9
            const uint64_t* llsrc = (const uint64_t*)&csrc[alignDest];
fff7a294:	7d 24 4a 14 	add     r9,r4,r9
fff7a298:	38 a9 ff f8 	addi    r5,r9,-8
fff7a29c:	38 88 ff f8 	addi    r4,r8,-8

            while (len >= sizeof(uint64_t))
fff7a2a0:	42 40 00 10 	bdz     fff7a2b0 <_memcpy+0x70>
            {
                *lldest++ = *llsrc++;
fff7a2a4:	24 c5 00 08 	lvdu    d6,8(r5)
fff7a2a8:	58 c4 00 08 	stvdu   d6,8(r4)
fff7a2ac:	4b ff ff f4 	b       fff7a2a0 <_memcpy+0x60>
fff7a2b0:	55 45 07 7e 	clrlwi  r5,r10,29
fff7a2b4:	55 4a 00 38 	rlwinm  r10,r10,0,0,28
fff7a2b8:	7d 08 52 14 	add     r8,r8,r10
fff7a2bc:	7c 89 52 14 	add     r4,r9,r10

        }
    }

    // Loop, copying 1 byte
    i = 0;
fff7a2c0:	38 a5 00 01 	addi    r5,r5,1
fff7a2c4:	7c a9 03 a6 	mtctr   r5
fff7a2c8:	39 20 00 00 	li      r9,0

    for (; i < len; ++i)
fff7a2cc:	42 40 00 14 	bdz     fff7a2e0 <_memcpy+0xa0>
    {
        cdest[i] = csrc[i];
fff7a2d0:	7d 44 48 ae 	lbzx    r10,r4,r9
fff7a2d4:	7d 48 49 ae 	stbx    r10,r8,r9
    }

    // Loop, copying 1 byte
    i = 0;

    for (; i < len; ++i)
fff7a2d8:	39 29 00 01 	addi    r9,r9,1
fff7a2dc:	4b ff ff f0 	b       fff7a2cc <_memcpy+0x8c>
        cdest[i] = csrc[i];
    }

    return vdest;

}
fff7a2e0:	4e 80 00 20 	blr

fff7a2e4 <memset>:
extern "C"
{
#endif
void* memset(void* vdest, int ch, size_t len)
{
    uint32_t addr = (uint32_t)vdest;
fff7a2e4:	39 45 00 01 	addi    r10,r5,1
#ifdef __cplusplus
extern "C"
{
#endif
void* memset(void* vdest, int ch, size_t len)
{
fff7a2e8:	94 21 ff e8 	stwu    r1,-24(r1)
    uint32_t addr = (uint32_t)vdest;
fff7a2ec:	7d 49 03 a6 	mtctr   r10
#ifdef __cplusplus
extern "C"
{
#endif
void* memset(void* vdest, int ch, size_t len)
{
fff7a2f0:	1b 81 00 08 	stvd    d28,8(r1)
fff7a2f4:	1b c1 00 10 	stvd    d30,16(r1)
    uint32_t addr = (uint32_t)vdest;
fff7a2f8:	7c 69 1b 78 	mr      r9,r3
fff7a2fc:	42 40 00 28 	bdz     fff7a324 <memset+0x40>

    while(len && (addr & 0x7)) // not 8 byte aligned
fff7a300:	55 2a 07 7e 	clrlwi  r10,r9,29
fff7a304:	06 ca 00 0a 	bwz     r10,fff7a318 <memset+0x34>
    {
        uint8_t* p = (uint8_t*)addr;
        *p = ch;
fff7a308:	98 89 00 00 	stb     r4,0(r9)
        ++addr;
        --len;
fff7a30c:	38 a5 ff ff 	addi    r5,r5,-1

    while(len && (addr & 0x7)) // not 8 byte aligned
    {
        uint8_t* p = (uint8_t*)addr;
        *p = ch;
        ++addr;
fff7a310:	39 29 00 01 	addi    r9,r9,1
fff7a314:	4b ff ff e8 	b       fff7a2fc <memset+0x18>
        --len;
    }

    if(len >= sizeof(uint64_t))
fff7a318:	28 05 00 07 	cmplwi  r5,7
fff7a31c:	7c aa 2b 78 	mr      r10,r5
fff7a320:	41 a1 00 14 	bgt     fff7a334 <memset+0x50>
fff7a324:	38 a5 00 01 	addi    r5,r5,1
fff7a328:	39 40 00 00 	li      r10,0
fff7a32c:	7c a9 03 a6 	mtctr   r5
fff7a330:	48 00 00 68 	b       fff7a398 <memset+0xb4>
fff7a334:	39 05 ff f8 	addi    r8,r5,-8
    {
        uint64_t lch = ch & 0xff;
fff7a338:	54 9f 06 3e 	clrlwi  r31,r4,24
fff7a33c:	3b c0 00 00 	li      r30,0
fff7a340:	55 08 e8 fe 	rlwinm  r8,r8,29,3,31
        lch |= lch << 8;
fff7a344:	7b dc 45 e4 	rldicr  d28,d30,8,55
fff7a348:	39 08 00 01 	addi    r8,r8,1
fff7a34c:	7f a7 fb 78 	or      r7,r29,r31
fff7a350:	7f 86 e3 78 	mr      r6,r28
fff7a354:	7d 09 03 a6 	mtctr   r8
        lch |= lch << 16;
fff7a358:	78 de 83 e4 	rldicr  d30,d6,16,47
fff7a35c:	7f e0 3b 78 	or      r0,r31,r7
fff7a360:	7f c6 33 78 	or      r6,r30,r6
        lch |= lch << 32;
fff7a364:	7c 06 33 78 	or      r6,r0,r6
fff7a368:	38 e9 ff f8 	addi    r7,r9,-8
fff7a36c:	39 07 00 08 	addi    r8,r7,8

        while(len >= sizeof(uint64_t))
        {
            uint64_t* p = (uint64_t*)addr;
            *p = lch;
fff7a370:	90 c7 00 08 	stw     r6,8(r7)
fff7a374:	90 07 00 0c 	stw     r0,12(r7)
fff7a378:	7d 07 43 78 	mr      r7,r8
        uint64_t lch = ch & 0xff;
        lch |= lch << 8;
        lch |= lch << 16;
        lch |= lch << 32;

        while(len >= sizeof(uint64_t))
fff7a37c:	42 00 ff f0 	bdnz    fff7a36c <memset+0x88>
fff7a380:	39 4a ff f8 	addi    r10,r10,-8
fff7a384:	39 29 00 08 	addi    r9,r9,8
fff7a388:	55 4a 00 38 	rlwinm  r10,r10,0,0,28
fff7a38c:	54 a5 07 7e 	clrlwi  r5,r5,29
fff7a390:	7d 29 52 14 	add     r9,r9,r10
fff7a394:	4b ff ff 90 	b       fff7a324 <memset+0x40>
            len -= sizeof(uint64_t);
            addr += sizeof(uint64_t);
        }
    }

    while(len)
fff7a398:	42 40 00 10 	bdz     fff7a3a8 <memset+0xc4>
    {
        uint8_t* p = (uint8_t*)addr;
        *p = ch;
fff7a39c:	7c 8a 49 ae 	stbx    r4,r10,r9
fff7a3a0:	39 4a 00 01 	addi    r10,r10,1
fff7a3a4:	4b ff ff f4 	b       fff7a398 <memset+0xb4>
        ++addr;
        --len;
    }

    return vdest;
}
fff7a3a8:	17 81 00 08 	lvd     d28,8(r1)
fff7a3ac:	17 c1 00 10 	lvd     d30,16(r1)
fff7a3b0:	38 21 00 18 	addi    r1,r1,24
fff7a3b4:	4e 80 00 20 	blr

fff7a3b8 <memcpy>:
    return vdest;

}

void* memcpy(void* vdest, const void* vsrc, size_t len)
{
fff7a3b8:	94 21 ff f0 	stwu    r1,-16(r1)
fff7a3bc:	7c 08 02 a6 	mflr    r0
fff7a3c0:	1b c1 00 08 	stvd    d30,8(r1)
fff7a3c4:	90 01 00 14 	stw     r0,20(r1)
fff7a3c8:	7c 7f 1b 78 	mr      r31,r3
    if((vdest > vsrc) && ((vsrc + len) > vdest))
fff7a3cc:	05 23 20 08 	cmplwble r3,r4,fff7a3dc <memcpy+0x24>
fff7a3d0:	7d 24 2a 14 	add     r9,r4,r5
fff7a3d4:	05 03 48 04 	cmplwbge r3,r9,fff7a3dc <memcpy+0x24>
    {
        asm volatile ( "trap" );
fff7a3d8:	7f e0 00 08 	trap
    }

    if((vsrc > vdest) && ((vdest + len) > vsrc))
fff7a3dc:	05 24 f8 08 	cmplwble r4,r31,fff7a3ec <memcpy+0x34>
fff7a3e0:	7d 3f 2a 14 	add     r9,r31,r5
fff7a3e4:	05 04 48 04 	cmplwbge r4,r9,fff7a3ec <memcpy+0x34>
    {
        asm volatile ( "trap" );
fff7a3e8:	7f e0 00 08 	trap
    }

    _memcpy(vdest, vsrc, len);
fff7a3ec:	7f e3 fb 78 	mr      r3,r31
fff7a3f0:	4b ff fe 51 	bl      fff7a240 <_memcpy>

    return vdest;
}
fff7a3f4:	80 01 00 14 	lwz     r0,20(r1)
fff7a3f8:	7f e3 fb 78 	mr      r3,r31
fff7a3fc:	7c 08 03 a6 	mtlr    r0
fff7a400:	17 c1 00 08 	lvd     d30,8(r1)
fff7a404:	38 21 00 10 	addi    r1,r1,16
fff7a408:	4e 80 00 20 	blr

fff7a40c <memmove>:

void* memmove(void* vdest, const void* vsrc, size_t len)
{
fff7a40c:	38 e5 00 01 	addi    r7,r5,1
fff7a410:	7c 6a 1b 78 	mr      r10,r3
fff7a414:	7c 88 23 78 	mr      r8,r4
fff7a418:	7c a9 2b 78 	mr      r9,r5
fff7a41c:	7c e9 03 a6 	mtctr   r7
    // Copy first-to-last
    if (vdest <= vsrc)
fff7a420:	05 a3 20 04 	cmplwbgt r3,r4,fff7a428 <memmove+0x1c>
    {
        return _memcpy(vdest, vsrc, len);
fff7a424:	4b ff fe 1c 	b       fff7a240 <_memcpy>
fff7a428:	42 40 00 14 	bdz     fff7a43c <memmove+0x30>
    const char* src = (const char*)(vsrc);
    size_t i = len;

    for (; i > 0;)
    {
        --i;
fff7a42c:	39 29 ff ff 	addi    r9,r9,-1
        dest[i] = src[i];
fff7a430:	7c e8 48 ae 	lbzx    r7,r8,r9
fff7a434:	7c ea 49 ae 	stbx    r7,r10,r9
fff7a438:	4b ff ff f0 	b       fff7a428 <memmove+0x1c>
    }

    return vdest;
}
fff7a43c:	7d 43 53 78 	mr      r3,r10
fff7a440:	4e 80 00 20 	blr

fff7a444 <memcmp>:
int memcmp(const void* p1, const void* p2, size_t len)
{
    const char* c1 = (const char*)(p1);
    const char* c2 = (const char*)(p2);

    size_t i = 0;
fff7a444:	38 a5 00 01 	addi    r5,r5,1
fff7a448:	7c a9 03 a6 	mtctr   r5
fff7a44c:	39 40 00 00 	li      r10,0

    for (; i < len; ++i)
fff7a450:	42 40 00 24 	bdz     fff7a474 <memcmp+0x30>
    {
        long n = (long)(c1[i]) - (long)(c2[i]);
fff7a454:	7d 23 50 ae 	lbzx    r9,r3,r10
fff7a458:	7d 04 50 ae 	lbzx    r8,r4,r10
fff7a45c:	7d 29 07 74 	extsb   r9,r9
fff7a460:	7d 08 07 74 	extsb   r8,r8
fff7a464:	7d 28 48 50 	subf    r9,r8,r9

        if (n != 0)
fff7a468:	06 49 00 0a 	bwnz    r9,fff7a47c <memcmp+0x38>
    const char* c1 = (const char*)(p1);
    const char* c2 = (const char*)(p2);

    size_t i = 0;

    for (; i < len; ++i)
fff7a46c:	39 4a 00 01 	addi    r10,r10,1
fff7a470:	4b ff ff e0 	b       fff7a450 <memcmp+0xc>
        {
            return n;
        }
    }

    return 0;
fff7a474:	38 60 00 00 	li      r3,0
fff7a478:	4e 80 00 20 	blr
fff7a47c:	7d 23 4b 78 	mr      r3,r9
}
fff7a480:	4e 80 00 20 	blr

fff7a484 <strlen>:
    }
}

size_t strlen(const char* a)
{
    size_t length = 0;
fff7a484:	39 20 00 00 	li      r9,0

    while(*a++)
fff7a488:	7d 43 48 ae 	lbzx    r10,r3,r9
fff7a48c:	06 ca 00 06 	bwz     r10,fff7a498 <strlen+0x14>
    {
        length++;
fff7a490:	39 29 00 01 	addi    r9,r9,1
fff7a494:	4b ff ff f4 	b       fff7a488 <strlen+0x4>
    }

    return length;
}
fff7a498:	7d 23 4b 78 	mr      r3,r9
fff7a49c:	4e 80 00 20 	blr

fff7a4a0 <__muldi3>:

#endif //__PPE42A__

// 64 bit signed multiply
unsigned long long __muldi3(unsigned long long _a, unsigned long long _b)
{
fff7a4a0:	7c 89 23 78 	mr      r9,r4
fff7a4a4:	7c 68 1b 78 	mr      r8,r3
    unsigned long long sum = 0;
fff7a4a8:	38 80 00 00 	li      r4,0
fff7a4ac:	38 60 00 00 	li      r3,0

    while(_a)
fff7a4b0:	7d 0a 4b 78 	or      r10,r8,r9
fff7a4b4:	06 ca 00 10 	bwz     r10,fff7a4d4 <__muldi3+0x34>
    {
        if(_a & 1)
fff7a4b8:	55 2a 07 fe 	clrlwi  r10,r9,31
fff7a4bc:	06 ca 00 06 	bwz     r10,fff7a4c8 <__muldi3+0x28>
        {
            sum += _b;
fff7a4c0:	7c 84 30 14 	addc    r4,r4,r6
fff7a4c4:	7c 63 29 14 	adde    r3,r3,r5
        }

        _a >>= 1;
fff7a4c8:	79 08 f8 42 	rldicl  d8,d8,63,1
        _b <<= 1;
fff7a4cc:	78 a5 0f a4 	rldicr  d5,d5,1,62
fff7a4d0:	4b ff ff e0 	b       fff7a4b0 <__muldi3+0x10>
    }

    return sum;
}
fff7a4d4:	4e 80 00 20 	blr

Disassembly of section .pk:

fff7a8e8 <__pk_boot>:
fff7a8e8:	38 60 00 00 	li      r3,0
fff7a8ec:	7c 74 53 a6 	mtspr   340,r3
fff7a8f0:	3c 40 ff f8 	lis     r2,-8
fff7a8f4:	60 42 00 00 	ori     r2,r2,0
fff7a8f8:	3d a0 ff f8 	lis     r13,-8
fff7a8fc:	61 ad 01 d8 	ori     r13,r13,472
fff7a900:	3c 20 ff f8 	lis     r1,-8
fff7a904:	60 21 77 ff 	ori     r1,r1,30719
fff7a908:	54 21 00 38 	rlwinm  r1,r1,0,0,28
fff7a90c:	94 61 ff f8 	stwu    r3,-8(r1)
fff7a910:	7c 70 43 a6 	mtsprg  0,r3
fff7a914:	3c 60 01 80 	lis     r3,384
fff7a918:	60 63 00 04 	ori     r3,r3,4
fff7a91c:	7c 74 4b a6 	mtspr   308,r3
fff7a920:	38 60 00 00 	li      r3,0
fff7a924:	7c 7c 4b a6 	mtspr   316,r3
fff7a928:	3c 60 00 82 	lis     r3,130
fff7a92c:	60 63 18 00 	ori     r3,r3,6144
fff7a930:	7c 60 01 24 	mtmsr   r3
fff7a934:	7c 00 04 ac 	sync    
fff7a938:	48 00 02 4d 	bl      fff7ab84 <__ppe42_system_setup>
fff7a93c:	38 60 00 00 	li      r3,0
fff7a940:	3c 80 00 00 	lis     r4,0
fff7a944:	60 84 00 00 	ori     r4,r4,0
fff7a948:	48 00 04 fd 	bl      fff7ae44 <__pk_main>
fff7a94c:	48 00 00 28 	b       fff7a974 <__pk_idle_thread_from_bootloader>
	...

fff7a960 <__pk_idle_thread>:
fff7a960:	7c 70 42 a6 	mfsprg  r3,0
fff7a964:	54 63 84 3e 	rlwinm  r3,r3,16,16,31
fff7a968:	64 63 a0 80 	oris    r3,r3,41088
fff7a96c:	7c 70 43 a6 	mtsprg  0,r3
fff7a970:	80 2d 01 4c 	lwz     r1,332(r13)

fff7a974 <__pk_idle_thread_from_bootloader>:
fff7a974:	80 6d 01 30 	lwz     r3,304(r13)
fff7a978:	64 63 00 04 	oris    r3,r3,4
fff7a97c:	4b ff 56 95 	bl      fff70010 <__set_msr>
fff7a980:	48 00 00 00 	b       fff7a980 <__pk_idle_thread_from_bootloader+0xc>

fff7a984 <pk_halt>:
fff7a984:	3f e0 30 00 	lis     r31,12288
fff7a988:	7f f4 4b a6 	mtspr   308,r31
fff7a98c:	00 00 00 00 	.long 0x0

fff7a990 <dec_handler>:
fff7a990:	38 80 00 58 	li      r4,88
fff7a994:	50 83 82 5e 	rlwimi  r3,r4,16,9,15
fff7a998:	64 63 40 00 	oris    r3,r3,16384
fff7a99c:	7c 70 43 a6 	mtsprg  0,r3
fff7a9a0:	3c 60 08 00 	lis     r3,2048
fff7a9a4:	7c 70 53 a6 	mtspr   336,r3
fff7a9a8:	48 00 07 35 	bl      fff7b0dc <__pk_timer_handler>
fff7a9ac:	48 00 01 5c 	b       fff7ab08 <check_for_ext_interrupt>

fff7a9b0 <__pk_next_thread_resume>:
fff7a9b0:	80 6d 01 38 	lwz     r3,312(r13)
fff7a9b4:	90 6d 01 3c 	stw     r3,316(r13)
fff7a9b8:	06 c3 07 d4 	bwz     r3,fff7a960 <__pk_idle_thread>
fff7a9bc:	80 23 00 00 	lwz     r1,0(r3)

fff7a9c0 <restore_and_update_sprg0>:
fff7a9c0:	8b ed 01 34 	lbz     r31,308(r13)
fff7a9c4:	80 61 00 0c 	lwz     r3,12(r1)
fff7a9c8:	53 e3 c0 8e 	rlwimi  r3,r31,24,2,7
fff7a9cc:	7c 70 43 a6 	mtsprg  0,r3
fff7a9d0:	48 00 01 ac 	b       fff7ab7c <ctx_pop>

fff7a9d4 <fit_handler>:
fff7a9d4:	38 80 00 59 	li      r4,89
fff7a9d8:	50 83 82 5e 	rlwimi  r3,r4,16,9,15
fff7a9dc:	64 63 40 00 	oris    r3,r3,16384
fff7a9e0:	7c 70 43 a6 	mtsprg  0,r3
fff7a9e4:	80 6d 01 70 	lwz     r3,368(r13)
fff7a9e8:	3c c0 04 00 	lis     r6,1024
fff7a9ec:	7c d0 53 a6 	mtspr   336,r6
fff7a9f0:	80 cd 01 7c 	lwz     r6,380(r13)
fff7a9f4:	7c c8 03 a6 	mtlr    r6
fff7a9f8:	4e 80 00 21 	blrl
fff7a9fc:	48 00 01 0c 	b       fff7ab08 <check_for_ext_interrupt>

fff7aa00 <watchdog_handler>:
fff7aa00:	38 80 00 5a 	li      r4,90
fff7aa04:	50 83 82 5e 	rlwimi  r3,r4,16,9,15
fff7aa08:	64 63 40 00 	oris    r3,r3,16384
fff7aa0c:	7c 70 43 a6 	mtsprg  0,r3
fff7aa10:	3c c0 40 00 	lis     r6,16384
fff7aa14:	7c d0 53 a6 	mtspr   336,r6
fff7aa18:	80 cd 01 78 	lwz     r6,376(r13)
fff7aa1c:	7c c8 03 a6 	mtlr    r6
fff7aa20:	4e 80 00 21 	blrl
fff7aa24:	48 00 00 e4 	b       fff7ab08 <check_for_ext_interrupt>
fff7aa28:	48 00 00 18 	b       fff7aa40 <ctx_check_discard>
fff7aa2c:	60 00 00 00 	nop
fff7aa30:	60 00 00 00 	nop
fff7aa34:	60 00 00 00 	nop
fff7aa38:	60 00 00 00 	nop
fff7aa3c:	60 00 00 00 	nop

fff7aa40 <ctx_check_discard>:
fff7aa40:	07 84 40 1a 	bb0wi   r4,8,fff7aa74 <ctx_interrupt_check>
fff7aa44:	38 21 00 58 	addi    r1,r1,88
fff7aa48:	4e 80 00 20 	blr

fff7aa4c <__ctx_switch>:
fff7aa4c:	7c 68 02 a6 	mflr    r3
fff7aa50:	7c 80 00 a6 	mfmsr   r4
fff7aa54:	7c 00 01 46 	wrteei  0
fff7aa58:	7c 7a 03 a6 	mtsrr0  r3
fff7aa5c:	7c 9b 03 a6 	mtsrr1  r4
fff7aa60:	7c 00 04 ac 	sync    
fff7aa64:	f8 21 ff af 	stcxu   r1,-88(r1)
fff7aa68:	3c a0 ff f7 	lis     r5,-9
fff7aa6c:	60 a5 a9 b0 	ori     r5,r5,43440
fff7aa70:	7c a8 03 a6 	mtlr    r5

fff7aa74 <ctx_interrupt_check>:
fff7aa74:	7c 70 42 a6 	mfsprg  r3,0
fff7aa78:	07 03 08 14 	bb1wi   r3,1,fff7aaa0 <kernel_stack_check>
fff7aa7c:	80 8d 01 3c 	lwz     r4,316(r13)
fff7aa80:	06 c4 00 0a 	bwz     r4,fff7aa94 <stack_good>
fff7aa84:	90 24 00 00 	stw     r1,0(r4)
fff7aa88:	80 e4 00 04 	lwz     r7,4(r4)
fff7aa8c:	05 87 08 04 	cmplwblt r7,r1,fff7aa94 <stack_good>
fff7aa90:	7f e3 28 08 	twu     r3,r5

fff7aa94 <stack_good>:
fff7aa94:	90 2d 01 50 	stw     r1,336(r13)
fff7aa98:	80 2d 01 4c 	lwz     r1,332(r13)
fff7aa9c:	4e 80 00 20 	blr

fff7aaa0 <kernel_stack_check>:
fff7aaa0:	80 ed 01 48 	lwz     r7,328(r13)
fff7aaa4:	05 87 08 04 	cmplwblt r7,r1,fff7aaac <ctx_push_complete>
fff7aaa8:	7f e3 28 08 	twu     r3,r5

fff7aaac <ctx_push_complete>:
fff7aaac:	4e 80 00 20 	blr

fff7aab0 <__get_ext_irq>:
fff7aab0:	7c 70 42 a6 	mfsprg  r3,0
fff7aab4:	3c a0 00 82 	lis     r5,130
fff7aab8:	60 a5 18 00 	ori     r5,r5,6144
fff7aabc:	7c a0 01 24 	mtmsr   r5
fff7aac0:	7c 00 04 ac 	sync    
fff7aac4:	3c a0 c0 00 	lis     r5,-16384
fff7aac8:	14 a5 00 80 	lvd     d5,128(r5)
fff7aacc:	7c a4 00 34 	cntlzw  r4,r5
fff7aad0:	06 24 f8 06 	cmpwible r4,31,fff7aadc <call_external_irq_handler>
fff7aad4:	7c c4 00 34 	cntlzw  r4,r6
fff7aad8:	38 84 00 20 	addi    r4,r4,32

fff7aadc <call_external_irq_handler>:
fff7aadc:	50 83 82 5e 	rlwimi  r3,r4,16,9,15
fff7aae0:	64 63 40 00 	oris    r3,r3,16384
fff7aae4:	7c 70 43 a6 	mtsprg  0,r3
fff7aae8:	54 83 18 38 	rlwinm  r3,r4,3,0,28
fff7aaec:	3c c0 ff f8 	lis     r6,-8
fff7aaf0:	60 c6 00 48 	ori     r6,r6,72
fff7aaf4:	7c a6 18 2e 	lwzx    r5,r6,r3
fff7aaf8:	38 63 00 04 	addi    r3,r3,4
fff7aafc:	7c 66 18 2e 	lwzx    r3,r6,r3
fff7ab00:	7c a8 03 a6 	mtlr    r5
fff7ab04:	4e 80 00 21 	blrl

fff7ab08 <check_for_ext_interrupt>:
fff7ab08:	7f f0 42 a6 	mfsprg  r31,0
fff7ab0c:	67 ff 00 80 	oris    r31,r31,128
fff7ab10:	7f f0 43 a6 	mtsprg  0,r31
fff7ab14:	7c 00 81 46 	wrteei  1
fff7ab18:	7c 00 01 46 	wrteei  0

fff7ab1c <check_interrupted_bh>:
fff7ab1c:	57 e4 46 be 	rlwinm  r4,r31,8,26,31
fff7ab20:	2c 04 00 21 	cmpwi   r4,33
fff7ab24:	41 82 00 50 	beq     fff7ab74 <ctx_pop_with_sprg0>

fff7ab28 <check_for_bh>:
fff7ab28:	80 8d 01 54 	lwz     r4,340(r13)
fff7ab2c:	80 a4 00 00 	lwz     r5,0(r4)
fff7ab30:	05 c4 28 10 	cmplwbeq r4,r5,fff7ab50 <restore_interrupted_sp>

fff7ab34 <process_bottom_halves>:
fff7ab34:	57 e3 02 42 	rlwinm  r3,r31,0,9,1
fff7ab38:	64 63 21 00 	oris    r3,r3,8448
fff7ab3c:	7c 70 43 a6 	mtsprg  0,r3
fff7ab40:	7c 00 81 46 	wrteei  1
fff7ab44:	48 00 03 7d 	bl      fff7aec0 <_pk_process_bh>
fff7ab48:	7c 00 01 46 	wrteei  0
fff7ab4c:	7f f0 43 a6 	mtsprg  0,r31

fff7ab50 <restore_interrupted_sp>:
fff7ab50:	80 2d 01 50 	lwz     r1,336(r13)

fff7ab54 <check_thread_mode>:
fff7ab54:	07 9f 00 10 	bb0wi   r31,0,fff7ab74 <ctx_pop_with_sprg0>

fff7ab58 <check_for_ctx_switch>:
fff7ab58:	80 6d 01 40 	lwz     r3,320(r13)
fff7ab5c:	06 c3 00 08 	bwz     r3,fff7ab6c <check_for_idle_thread>
fff7ab60:	38 60 00 00 	li      r3,0
fff7ab64:	90 6d 01 40 	stw     r3,320(r13)
fff7ab68:	4b ff fe 48 	b       fff7a9b0 <__pk_next_thread_resume>

fff7ab6c <check_for_idle_thread>:
fff7ab6c:	80 6d 01 3c 	lwz     r3,316(r13)
fff7ab70:	06 c3 06 f8 	bwz     r3,fff7a960 <__pk_idle_thread>

fff7ab74 <ctx_pop_with_sprg0>:
fff7ab74:	80 01 00 0c 	lwz     r0,12(r1)
fff7ab78:	7c 10 43 a6 	mtsprg  0,r0

fff7ab7c <ctx_pop>:
fff7ab7c:	e8 21 00 5f 	lcxu    r1,88(r1)
fff7ab80:	4c 00 00 64 	rfi

fff7ab84 <__ppe42_system_setup>:
    PkIrqId irq;

    // Initialize the interrupt vectors.
    for (irq = 0; irq < EXTERNAL_IRQS; irq++)
    {
        __ppe42_irq_handlers[irq].handler = __ppe42_default_irq_handler;
fff7ab84:	39 00 00 40 	li      r8,64
fff7ab88:	7d 09 03 a6 	mtctr   r8
fff7ab8c:	3d 20 ff f8 	lis     r9,-8
void __hwmacro_setup(void);


void
__ppe42_system_setup()
{
fff7ab90:	39 40 00 00 	li      r10,0
    PkIrqId irq;

    // Initialize the interrupt vectors.
    for (irq = 0; irq < EXTERNAL_IRQS; irq++)
    {
        __ppe42_irq_handlers[irq].handler = __ppe42_default_irq_handler;
fff7ab94:	39 29 ab dc 	addi    r9,r9,-21540
fff7ab98:	39 0d fe 70 	addi    r8,r13,-400
fff7ab9c:	7d 28 51 2e 	stwx    r9,r8,r10
fff7aba0:	39 4a 00 08 	addi    r10,r10,8
    //Only do this if the application hasn't provided a static table definition
#ifndef STATIC_IRQ_TABLE
    PkIrqId irq;

    // Initialize the interrupt vectors.
    for (irq = 0; irq < EXTERNAL_IRQS; irq++)
fff7aba4:	42 00 ff f4 	bdnz    fff7ab98 <__ppe42_system_setup+0x14>
    {
        __ppe42_irq_handlers[irq].handler = __ppe42_default_irq_handler;
    }

    //NOTE: EXTERNAL_IRQS is the phantom interrupt assigned irq
    __ppe42_irq_handlers[irq].handler = __ppe42_phantom_irq_handler;
fff7aba8:	3d 40 ff f8 	lis     r10,-8
fff7abac:	39 4a ab e4 	addi    r10,r10,-21532
fff7abb0:	91 48 02 00 	stw     r10,512(r8)

#endif /*STATIC_IRQ_TABLE*/
    // Initialize special interrupt handlers

    __ppe42_fit_routine = __ppe42_default_irq_handler;
    __ppe42_fit_arg = 0;
fff7abb4:	39 40 00 00 	li      r10,0
    __ppe42_irq_handlers[irq].handler = __ppe42_phantom_irq_handler;

#endif /*STATIC_IRQ_TABLE*/
    // Initialize special interrupt handlers

    __ppe42_fit_routine = __ppe42_default_irq_handler;
fff7abb8:	91 2d 01 7c 	stw     r9,380(r13)
    __ppe42_fit_arg = 0;
fff7abbc:	91 4d 01 70 	stw     r10,368(r13)

    __ppe42_watchdog_routine = __ppe42_default_irq_handler;
fff7abc0:	91 2d 01 78 	stw     r9,376(r13)
    __ppe42_watchdog_arg = 0;
fff7abc4:	91 4d 01 74 	stw     r10,372(r13)

    //Clear all status bits in the TSR
    mtspr(SPRN_TSR, TSR_ENW | TSR_WIS | TSR_DIS | TSR_FIS);
fff7abc8:	3d 20 cc 00 	lis     r9,-13312
fff7abcc:	7d 30 53 a6 	mtspr   336,r9
#ifdef APPCFG_USE_EXT_TIMEBASE
    //Enable the DEC interrupt and configure it to use the external dec_timer signal
    mtspr(SPRN_TCR, TCR_DIE | TCR_DS);
#else
    //Enable the DEC interrupt and configure it to use the internal clock signal
    mtspr(SPRN_TCR, TCR_DIE);
fff7abd0:	3d 20 04 00 	lis     r9,1024
fff7abd4:	7d 34 53 a6 	mtspr   340,r9
    g_pk_op_trace_buf.instance_id = (uint16_t)(mfspr(SPRN_PIR) & PIR_PPE_INSTANCE_MASK);
#endif /*PK_OP_TRACE_SUPPORT*/
#endif  /* PK_TIMER_SUPPORT */

    //call macro-specific setup
    __hwmacro_setup();
fff7abd8:	48 00 05 a8 	b       fff7b180 <__hwmacro_setup>

fff7abdc <__ppe42_default_irq_handler>:
/// by the application.  These interrupts should never fire.

void
__ppe42_default_irq_handler(void* arg, PkIrqId irq)
{
    PK_PANIC(PK_DEFAULT_IRQ_HANDLER);
fff7abdc:	7f e0 30 08 	twu     r0,r6
fff7abe0:	4e 80 00 20 	blr

fff7abe4 <__ppe42_phantom_irq_handler>:
/// 'glitch' occurred on the external interrupt input
/// to the PPE42 core.

void __ppe42_phantom_irq_handler(void* arg, PkIrqId irq)
{
    PK_PANIC(PPE42_PHANTOM_INTERRUPT);
fff7abe4:	7f e0 40 08 	twu     r0,r8
fff7abe8:	4e 80 00 20 	blr

fff7abec <pk_deque_sentinel_create>:
int
pk_deque_sentinel_create(PkDeque* deque)
{
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(deque == 0, PK_INVALID_DEQUE_SENTINEL);
fff7abec:	06 c3 00 0a 	bwz     r3,fff7ac00 <pk_deque_sentinel_create+0x14>
    }

    deque->next = deque->previous = deque;
fff7abf0:	90 63 00 04 	stw     r3,4(r3)
fff7abf4:	90 63 00 00 	stw     r3,0(r3)
    return 0;
fff7abf8:	38 60 00 00 	li      r3,0
fff7abfc:	4e 80 00 20 	blr
int
pk_deque_sentinel_create(PkDeque* deque)
{
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(deque == 0, PK_INVALID_DEQUE_SENTINEL);
fff7ac00:	38 60 fc e1 	li      r3,-799
    }

    deque->next = deque->previous = deque;
    return 0;
}
fff7ac04:	4e 80 00 20 	blr

fff7ac08 <pk_deque_element_create>:
int
pk_deque_element_create(PkDeque* element)
{
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(element == 0, PK_INVALID_DEQUE_ELEMENT);
fff7ac08:	06 c3 00 0a 	bwz     r3,fff7ac1c <pk_deque_element_create+0x14>
    }

    element->next = 0;
fff7ac0c:	39 20 00 00 	li      r9,0
fff7ac10:	91 23 00 00 	stw     r9,0(r3)
    return 0;
fff7ac14:	38 60 00 00 	li      r3,0
fff7ac18:	4e 80 00 20 	blr
int
pk_deque_element_create(PkDeque* element)
{
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(element == 0, PK_INVALID_DEQUE_ELEMENT);
fff7ac1c:	38 60 fc 00 	li      r3,-1024
    }

    element->next = 0;
    return 0;
}
fff7ac20:	4e 80 00 20 	blr

fff7ac24 <pk_set_timebase_rshift>:
uint8_t  __pk_timebase_rshift = 32;

void pk_set_timebase_rshift(uint32_t timebase_freq_hz)
{
    //Use 1.0 scale if less than or equal to 1.0625 * base frequency
    if(timebase_freq_hz <= (PK_BASE_FREQ_HZ + (PK_BASE_FREQ_HZ >> 4)))
fff7ac24:	3d 40 19 54 	lis     r10,6484
fff7ac28:	61 4a fc 40 	ori     r10,r10,64576
fff7ac2c:	3d 20 ff f8 	lis     r9,-8
fff7ac30:	05 a3 50 06 	cmplwbgt r3,r10,fff7ac3c <pk_set_timebase_rshift+0x18>
    {
        __pk_timebase_rshift = 32;
fff7ac34:	39 40 00 20 	li      r10,32
fff7ac38:	48 00 00 44 	b       fff7ac7c <pk_set_timebase_rshift+0x58>
    }

    //use 1.125 scale if between 1.0625 and 1.1875 * base frequency
    else if(timebase_freq_hz <= (PK_BASE_FREQ_HZ + (PK_BASE_FREQ_HZ >> 4) + (PK_BASE_FREQ_HZ >> 3)))
fff7ac3c:	3d 40 1c 4f 	lis     r10,7247
fff7ac40:	61 4a ec c0 	ori     r10,r10,60608
fff7ac44:	05 a3 50 06 	cmplwbgt r3,r10,fff7ac50 <pk_set_timebase_rshift+0x2c>
    {
        __pk_timebase_rshift = 3;
fff7ac48:	39 40 00 03 	li      r10,3
fff7ac4c:	48 00 00 30 	b       fff7ac7c <pk_set_timebase_rshift+0x58>
    }

    //use 1.25 scale if between 1,1875 and 1.375 * base frequency
    else if(timebase_freq_hz <= (PK_BASE_FREQ_HZ + (PK_BASE_FREQ_HZ >> 3) + (PK_BASE_FREQ_HZ >> 2)))
fff7ac50:	3d 40 20 c8 	lis     r10,8392
fff7ac54:	61 4a 55 80 	ori     r10,r10,21888
fff7ac58:	05 a3 50 06 	cmplwbgt r3,r10,fff7ac64 <pk_set_timebase_rshift+0x40>
    {
        __pk_timebase_rshift = 2;
fff7ac5c:	39 40 00 02 	li      r10,2
fff7ac60:	48 00 00 1c 	b       fff7ac7c <pk_set_timebase_rshift+0x58>
    }
    //use 1.5 scale if between 1.375 and 1.75 * base frequency
    else if(timebase_freq_hz <= (PK_BASE_FREQ_HZ + (PK_BASE_FREQ_HZ >> 2) + (PK_BASE_FREQ_HZ >> 1)))
fff7ac64:	3d 40 29 b9 	lis     r10,10681
fff7ac68:	61 4a 27 00 	ori     r10,r10,9984
fff7ac6c:	05 a3 50 06 	cmplwbgt r3,r10,fff7ac78 <pk_set_timebase_rshift+0x54>
    {
        __pk_timebase_rshift = 1;
fff7ac70:	39 40 00 01 	li      r10,1
fff7ac74:	48 00 00 08 	b       fff7ac7c <pk_set_timebase_rshift+0x58>
    }
    //use 2.0 scale if greater than 1.75 * base frequency
    else
    {
        __pk_timebase_rshift = 0;
fff7ac78:	39 40 00 00 	li      r10,0
fff7ac7c:	99 49 00 00 	stb     r10,0(r9)
fff7ac80:	4e 80 00 20 	blr

fff7ac84 <_pk_initialize>:
#ifdef APP_DEFINED_TRACE_BUFFER
    , uint32_t    pk_trace_buffer
    , uint32_t    pk_trace_size
#endif
              )
{
fff7ac84:	94 21 ff d0 	stwu    r1,-48(r1)
fff7ac88:	7c 08 02 a6 	mflr    r0
fff7ac8c:	1b 81 00 20 	stvd    d28,32(r1)
fff7ac90:	90 01 00 34 	stw     r0,52(r1)
fff7ac94:	1b c1 00 28 	stvd    d30,40(r1)
fff7ac98:	18 61 00 08 	stvd    d3,8(r1)
    int rc;

    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF((kernel_stack == 0) ||
fff7ac9c:	06 c3 00 c6 	bwz     r3,fff7ae28 <_pk_initialize+0x1a4>
fff7aca0:	38 60 fd e2 	li      r3,-542
fff7aca4:	06 c4 00 c4 	bwz     r4,fff7ae2c <_pk_initialize+0x1a8>
fff7aca8:	7d 3f 4b 78 	mr      r31,r9
                    (kernel_stack_size == 0),
                    PK_INVALID_ARGUMENT_INIT);
    }

    __pk_timebase_frequency_hz = timebase_frequency_hz;
fff7acac:	3d 20 ff f8 	lis     r9,-8
fff7acb0:	90 e9 00 04 	stw     r7,4(r9)

    __pk_thread_machine_context_default = PK_THREAD_MACHINE_CONTEXT_DEFAULT;
fff7acb4:	3d 20 00 82 	lis     r9,130
fff7acb8:	61 29 98 00 	ori     r9,r9,38912

    //set the shift adjustment to get us closer to the true
    //timebase frequency (versus what was hardcoded)
    pk_set_timebase_rshift(timebase_frequency_hz);
fff7acbc:	7c e3 3b 78 	mr      r3,r7
fff7acc0:	7c be 2b 78 	mr      r30,r5
fff7acc4:	7c dd 33 78 	mr      r29,r6
fff7acc8:	7d 1c 43 78 	mr      r28,r8
                    PK_INVALID_ARGUMENT_INIT);
    }

    __pk_timebase_frequency_hz = timebase_frequency_hz;

    __pk_thread_machine_context_default = PK_THREAD_MACHINE_CONTEXT_DEFAULT;
fff7accc:	91 2d 01 30 	stw     r9,304(r13)

    //set the shift adjustment to get us closer to the true
    //timebase frequency (versus what was hardcoded)
    pk_set_timebase_rshift(timebase_frequency_hz);
fff7acd0:	90 e1 00 18 	stw     r7,24(r1)
fff7acd4:	4b ff ff 51 	bl      fff7ac24 <pk_set_timebase_rshift>

    __pk_kernel_stack_limit = kernel_stack;
fff7acd8:	81 21 00 08 	lwz     r9,8(r1)

    rc = __pk_stack_init(&kernel_stack, &kernel_stack_size);
fff7acdc:	38 61 00 08 	addi    r3,r1,8
fff7ace0:	38 81 00 0c 	addi    r4,r1,12

    //set the shift adjustment to get us closer to the true
    //timebase frequency (versus what was hardcoded)
    pk_set_timebase_rshift(timebase_frequency_hz);

    __pk_kernel_stack_limit = kernel_stack;
fff7ace4:	91 2d 01 48 	stw     r9,328(r13)

    rc = __pk_stack_init(&kernel_stack, &kernel_stack_size);
fff7ace8:	48 00 01 6d 	bl      fff7ae54 <__pk_stack_init>
fff7acec:	7c 69 1b 78 	mr      r9,r3

    if (rc)
fff7acf0:	06 49 00 9e 	bwnz    r9,fff7ae2c <_pk_initialize+0x1a8>
    {
        return rc;
    }

    __pk_kernel_stack = kernel_stack;
fff7acf4:	81 41 00 08 	lwz     r10,8(r1)
#if PK_TIMER_SUPPORT

    // Initialize the time queue sentinel as a circular queue, set the next
    // timeout and clear the cursor.

    pk_deque_sentinel_create((PkDeque*)&__pk_time_queue);
fff7acf8:	91 21 00 14 	stw     r9,20(r1)
    if (rc)
    {
        return rc;
    }

    __pk_kernel_stack = kernel_stack;
fff7acfc:	91 4d 01 4c 	stw     r10,332(r13)
    __pk_kernel_stack_size = kernel_stack_size;
fff7ad00:	81 41 00 0c 	lwz     r10,12(r1)
fff7ad04:	91 4d 01 2c 	stw     r10,300(r13)
#if PK_TIMER_SUPPORT

    // Initialize the time queue sentinel as a circular queue, set the next
    // timeout and clear the cursor.

    pk_deque_sentinel_create((PkDeque*)&__pk_time_queue);
fff7ad08:	39 4d 00 90 	addi    r10,r13,144
fff7ad0c:	7d 43 53 78 	mr      r3,r10
fff7ad10:	91 41 00 10 	stw     r10,16(r1)
fff7ad14:	4b ff fe d9 	bl      fff7abec <pk_deque_sentinel_create>
    __pk_time_queue.cursor = 0;
fff7ad18:	81 21 00 14 	lwz     r9,20(r1)
fff7ad1c:	81 41 00 10 	lwz     r10,16(r1)
    __pk_time_queue.next_timeout = PK_TIMEBASE_MAX;
fff7ad20:	39 00 ff ff 	li      r8,-1

    // Initialize the time queue sentinel as a circular queue, set the next
    // timeout and clear the cursor.

    pk_deque_sentinel_create((PkDeque*)&__pk_time_queue);
    __pk_time_queue.cursor = 0;
fff7ad24:	91 2a 00 10 	stw     r9,16(r10)
    __pk_time_queue.next_timeout = PK_TIMEBASE_MAX;
fff7ad28:	39 20 ff ff 	li      r9,-1
fff7ad2c:	19 0d 00 98 	stvd    d8,152(r13)
#endif  /* PK_TIMER_SUPPORT (timed callback)*/

#if PK_TRACE_SUPPORT

#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF = (PkTraceBuffer*)pk_trace_buffer;
fff7ad30:	3d 20 00 00 	lis     r9,0
fff7ad34:	93 89 ff f8 	stw     r28,-8(r9)
    G_PK_TRACE_BUF->instance_id = (uint16_t)(mfspr(SPRN_PIR) & PIR_PPE_INSTANCE_MASK);
fff7ad38:	7d 5e 42 a6 	mfspr   r10,286

    G_PK_TRACE_BUF->version            = PK_TRACE_VERSION;
fff7ad3c:	80 69 ff f8 	lwz     r3,-8(r9)

#if PK_TRACE_SUPPORT

#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF = (PkTraceBuffer*)pk_trace_buffer;
    G_PK_TRACE_BUF->instance_id = (uint16_t)(mfspr(SPRN_PIR) & PIR_PPE_INSTANCE_MASK);
fff7ad40:	55 4a 06 fe 	clrlwi  r10,r10,27
fff7ad44:	b1 5c 00 14 	sth     r10,20(r28)

    G_PK_TRACE_BUF->version            = PK_TRACE_VERSION;
fff7ad48:	39 40 00 02 	li      r10,2
fff7ad4c:	b1 43 00 00 	sth     r10,0(r3)
    memcpy(G_PK_TRACE_BUF->image_str, PPE_IMG_STRING, PK_TRACE_IMG_STR_SZ);
fff7ad50:	3c 80 ff f8 	lis     r4,-8
fff7ad54:	38 63 00 04 	addi    r3,r3,4
fff7ad58:	38 84 ae 48 	addi    r4,r4,-20920
fff7ad5c:	38 a0 00 10 	li      r5,16
fff7ad60:	91 21 00 14 	stw     r9,20(r1)
fff7ad64:	4b ff f6 55 	bl      fff7a3b8 <memcpy>
    G_PK_TRACE_BUF->hash_prefix        = PK_TRACE_HASH_PREFIX;
fff7ad68:	81 21 00 14 	lwz     r9,20(r1)
        trace_ppe_hash("PARTIAL TRACE ENTRY. HASH_ID = %d", PK_TRACE_HASH_PREFIX);

    G_PK_TRACE_BUF->size               = pk_trace_size;
    G_PK_TRACE_BUF->max_time_change    = PK_TRACE_MTBT;
    G_PK_TRACE_BUF->hz                 = timebase_frequency_hz;
    G_PK_TRACE_BUF->time_adj64         = 0;
fff7ad6c:	39 00 00 00 	li      r8,0
    G_PK_TRACE_BUF = (PkTraceBuffer*)pk_trace_buffer;
    G_PK_TRACE_BUF->instance_id = (uint16_t)(mfspr(SPRN_PIR) & PIR_PPE_INSTANCE_MASK);

    G_PK_TRACE_BUF->version            = PK_TRACE_VERSION;
    memcpy(G_PK_TRACE_BUF->image_str, PPE_IMG_STRING, PK_TRACE_IMG_STR_SZ);
    G_PK_TRACE_BUF->hash_prefix        = PK_TRACE_HASH_PREFIX;
fff7ad70:	81 49 ff f8 	lwz     r10,-8(r9)
fff7ad74:	39 20 38 13 	li      r9,14355
fff7ad78:	b1 2a 00 18 	sth     r9,24(r10)
    G_PK_TRACE_BUF->partial_trace_hash =
fff7ad7c:	39 20 30 0f 	li      r9,12303
fff7ad80:	b1 2a 00 16 	sth     r9,22(r10)
        trace_ppe_hash("PARTIAL TRACE ENTRY. HASH_ID = %d", PK_TRACE_HASH_PREFIX);

    G_PK_TRACE_BUF->size               = pk_trace_size;
    G_PK_TRACE_BUF->max_time_change    = PK_TRACE_MTBT;
fff7ad84:	3d 20 fe 23 	lis     r9,-477
fff7ad88:	61 29 29 af 	ori     r9,r9,10671
fff7ad8c:	91 2a 00 1c 	stw     r9,28(r10)
#else
    //set the trace timebase HZ
    pk_trace_set_freq(timebase_frequency_hz);
#endif

    if(initial_timebase != PK_TIMEBASE_CONTINUES)
fff7ad90:	2c 1e ff ff 	cmpwi   r30,-1
        trace_ppe_hash("PARTIAL TRACE ENTRY. HASH_ID = %d", PK_TRACE_HASH_PREFIX);

    G_PK_TRACE_BUF->size               = pk_trace_size;
    G_PK_TRACE_BUF->max_time_change    = PK_TRACE_MTBT;
    G_PK_TRACE_BUF->hz                 = timebase_frequency_hz;
    G_PK_TRACE_BUF->time_adj64         = 0;
fff7ad94:	39 20 00 00 	li      r9,0
    G_PK_TRACE_BUF->partial_trace_hash =
        trace_ppe_hash("PARTIAL TRACE ENTRY. HASH_ID = %d", PK_TRACE_HASH_PREFIX);

    G_PK_TRACE_BUF->size               = pk_trace_size;
    G_PK_TRACE_BUF->max_time_change    = PK_TRACE_MTBT;
    G_PK_TRACE_BUF->hz                 = timebase_frequency_hz;
fff7ad98:	80 e1 00 18 	lwz     r7,24(r1)
    G_PK_TRACE_BUF->time_adj64         = 0;
fff7ad9c:	19 0a 00 28 	stvd    d8,40(r10)
    G_PK_TRACE_BUF->state.word64       = 0;
fff7ada0:	19 0a 00 30 	stvd    d8,48(r10)

    pk_debug_ptrs.debug_trace_ptr      = G_PK_TRACE_BUF;
fff7ada4:	3d 00 ff f8 	lis     r8,-8
fff7ada8:	39 08 00 08 	addi    r8,r8,8
    memcpy(G_PK_TRACE_BUF->image_str, PPE_IMG_STRING, PK_TRACE_IMG_STR_SZ);
    G_PK_TRACE_BUF->hash_prefix        = PK_TRACE_HASH_PREFIX;
    G_PK_TRACE_BUF->partial_trace_hash =
        trace_ppe_hash("PARTIAL TRACE ENTRY. HASH_ID = %d", PK_TRACE_HASH_PREFIX);

    G_PK_TRACE_BUF->size               = pk_trace_size;
fff7adac:	b3 ea 00 1a 	sth     r31,26(r10)
    G_PK_TRACE_BUF->hz                 = timebase_frequency_hz;
    G_PK_TRACE_BUF->time_adj64         = 0;
    G_PK_TRACE_BUF->state.word64       = 0;

    pk_debug_ptrs.debug_trace_ptr      = G_PK_TRACE_BUF;
    pk_debug_ptrs.debug_trace_size     = G_PK_TRACE_BUF->size;
fff7adb0:	57 ff 04 3e 	clrlwi  r31,r31,16
    G_PK_TRACE_BUF->partial_trace_hash =
        trace_ppe_hash("PARTIAL TRACE ENTRY. HASH_ID = %d", PK_TRACE_HASH_PREFIX);

    G_PK_TRACE_BUF->size               = pk_trace_size;
    G_PK_TRACE_BUF->max_time_change    = PK_TRACE_MTBT;
    G_PK_TRACE_BUF->hz                 = timebase_frequency_hz;
fff7adb4:	90 ea 00 20 	stw     r7,32(r10)
    G_PK_TRACE_BUF->time_adj64         = 0;
    G_PK_TRACE_BUF->state.word64       = 0;

    pk_debug_ptrs.debug_trace_ptr      = G_PK_TRACE_BUF;
fff7adb8:	91 48 00 04 	stw     r10,4(r8)
    pk_debug_ptrs.debug_trace_size     = G_PK_TRACE_BUF->size;
fff7adbc:	93 e8 00 08 	stw     r31,8(r8)
#else
    //set the trace timebase HZ
    pk_trace_set_freq(timebase_frequency_hz);
#endif

    if(initial_timebase != PK_TIMEBASE_CONTINUES)
fff7adc0:	40 82 00 0c 	bne     fff7adcc <_pk_initialize+0x148>
fff7adc4:	2c 1d ff ff 	cmpwi   r29,-1
fff7adc8:	41 82 00 10 	beq     fff7add8 <_pk_initialize+0x154>
    {
        //set the timebase ajdustment for trace synchronization
        pk_trace_set_timebase(initial_timebase);
fff7adcc:	7f c3 f3 78 	mr      r3,r30
fff7add0:	7f a4 eb 78 	mr      r4,r29
fff7add4:	48 00 04 7d 	bl      fff7b250 <pk_trace_set_timebase>
    }

    // Schedule the timer that puts a 64bit timestamp in the trace buffer
    // periodically.  This allows us to use 32bit timestamps.
    pk_timer_schedule(&g_pk_trace_timer,
fff7add8:	3c c0 fc 46 	lis     r6,-954
fff7addc:	38 6d 00 78 	addi    r3,r13,120
fff7ade0:	38 a0 00 00 	li      r5,0
fff7ade4:	60 c6 53 5f 	ori     r6,r6,21343
fff7ade8:	48 00 03 1d 	bl      fff7b104 <pk_timer_schedule>

    int i;

    for (i = 0; i <= PK_THREADS; i++)
    {
        __pk_priority_map[i] = 0;
fff7adec:	39 20 00 21 	li      r9,33
fff7adf0:	7d 29 03 a6 	mtctr   r9
        pk_trace_set_timebase(initial_timebase);
    }

    // Schedule the timer that puts a 64bit timestamp in the trace buffer
    // periodically.  This allows us to use 32bit timestamps.
    pk_timer_schedule(&g_pk_trace_timer,
fff7adf4:	39 40 00 00 	li      r10,0

    int i;

    for (i = 0; i <= PK_THREADS; i++)
    {
        __pk_priority_map[i] = 0;
fff7adf8:	38 e0 00 00 	li      r7,0
fff7adfc:	39 0d 00 a8 	addi    r8,r13,168
fff7ae00:	7c e8 51 2e 	stwx    r7,r8,r10
fff7ae04:	39 20 00 00 	li      r9,0
fff7ae08:	39 4a 00 04 	addi    r10,r10,4
    // Clear the priority map. The final entry [PK_THREADS] is for the idle
    // thread.

    int i;

    for (i = 0; i <= PK_THREADS; i++)
fff7ae0c:	42 00 ff f0 	bdnz    fff7adfc <_pk_initialize+0x178>
// cntlzw().

static inline void
__pk_thread_queue_clear(volatile PkThreadQueue* queue)
{
*queue = 0;
fff7ae10:	91 2d 01 44 	stw     r9,324(r13)
    }

    // Initialize the thread scheduler

    __pk_thread_queue_clear(&__pk_run_queue);
    __pk_current_thread = 0;
fff7ae14:	91 2d 01 3c 	stw     r9,316(r13)
    __pk_next_thread    = 0;
fff7ae18:	91 2d 01 38 	stw     r9,312(r13)
    __pk_delayed_switch = 0;
fff7ae1c:	91 2d 01 40 	stw     r9,320(r13)

#endif  /* PK_THREAD_SUPPORT */

    return PK_OK;
fff7ae20:	38 60 00 00 	li      r3,0
fff7ae24:	48 00 00 08 	b       fff7ae2c <_pk_initialize+0x1a8>
{
    int rc;

    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF((kernel_stack == 0) ||
fff7ae28:	38 60 fd e2 	li      r3,-542
    __pk_delayed_switch = 0;

#endif  /* PK_THREAD_SUPPORT */

    return PK_OK;
}
fff7ae2c:	80 01 00 34 	lwz     r0,52(r1)
fff7ae30:	17 81 00 20 	lvd     d28,32(r1)
fff7ae34:	7c 08 03 a6 	mtlr    r0
fff7ae38:	17 c1 00 28 	lvd     d30,40(r1)
fff7ae3c:	38 21 00 30 	addi    r1,r1,48
fff7ae40:	4e 80 00 20 	blr

fff7ae44 <__pk_main>:
__pk_main(int argc, char** argv)
{
    PK_MAIN_HOOK;

    int main(int argc, char** argv);
    main(argc, argv);
fff7ae44:	48 00 11 04 	b       fff7bf48 <main>
fff7ae48:	53 42 45 5f 	rlwimi. r2,r26,8,21,15
fff7ae4c:	54 52 41 43 	rlwinm. r18,r2,8,5,1
fff7ae50:	45 00 00 00 	.long 0x45000000

fff7ae54 <__pk_stack_init>:
        // stacks, otherwise the initial address is first brought into range
        // before alignment.  The stack is aligned downward, then the size is
        // adjusted to a multiple of the stack type.  Stacks are optionally
        // prepatterned. Alignment is assumed to be a power of 2.

        *stack += *size;
fff7ae54:	81 24 00 00 	lwz     r9,0(r4)
fff7ae58:	81 43 00 00 	lwz     r10,0(r3)

            for (i = 0; i < count; i++)
            {
                if (PK_STACK_PRE_DECREMENT)
                {
                    *(--p) = PK_STACK_PATTERN;
fff7ae5c:	3c e0 03 ab 	lis     r7,939
        // stacks, otherwise the initial address is first brought into range
        // before alignment.  The stack is aligned downward, then the size is
        // adjusted to a multiple of the stack type.  Stacks are optionally
        // prepatterned. Alignment is assumed to be a power of 2.

        *stack += *size;
fff7ae60:	7d 49 52 14 	add     r10,r9,r10
            *stack -= sizeof(PK_STACK_TYPE);
            *size -= sizeof(PK_STACK_TYPE);
        }

        mask = PK_STACK_ALIGNMENT - 1;
        excess = *stack & mask;
fff7ae64:	55 48 07 7e 	clrlwi  r8,r10,29
        *stack -= excess;
        *size -= excess;
fff7ae68:	7d 28 48 50 	subf    r9,r8,r9
            *size -= sizeof(PK_STACK_TYPE);
        }

        mask = PK_STACK_ALIGNMENT - 1;
        excess = *stack & mask;
        *stack -= excess;
fff7ae6c:	7d 48 50 50 	subf    r10,r8,r10
        *size -= excess;
        *size = (*size / sizeof(PK_STACK_TYPE)) * sizeof(PK_STACK_TYPE);
fff7ae70:	55 29 00 3a 	rlwinm  r9,r9,0,0,29
            *size -= sizeof(PK_STACK_TYPE);
        }

        mask = PK_STACK_ALIGNMENT - 1;
        excess = *stack & mask;
        *stack -= excess;
fff7ae74:	91 43 00 00 	stw     r10,0(r3)
        *size -= excess;
        *size = (*size / sizeof(PK_STACK_TYPE)) * sizeof(PK_STACK_TYPE);
fff7ae78:	91 24 00 00 	stw     r9,0(r4)

            for (i = 0; i < count; i++)
            {
                if (PK_STACK_PRE_DECREMENT)
                {
                    *(--p) = PK_STACK_PATTERN;
fff7ae7c:	55 29 f0 be 	rlwinm  r9,r9,30,2,31
fff7ae80:	39 29 00 01 	addi    r9,r9,1
fff7ae84:	7d 29 03 a6 	mtctr   r9
        *size -= excess;
        *size = (*size / sizeof(PK_STACK_TYPE)) * sizeof(PK_STACK_TYPE);

        if (PK_STACK_CHECK)
        {
            p = (PK_STACK_TYPE*)(*stack);
fff7ae88:	7d 48 53 78 	mr      r8,r10

            for (i = 0; i < count; i++)
            {
                if (PK_STACK_PRE_DECREMENT)
                {
                    *(--p) = PK_STACK_PATTERN;
fff7ae8c:	60 e7 cd ef 	ori     r7,r7,52719
        if (PK_STACK_CHECK)
        {
            p = (PK_STACK_TYPE*)(*stack);
            count = *size / sizeof(PK_STACK_TYPE);

            for (i = 0; i < count; i++)
fff7ae90:	42 40 00 0c 	bdz     fff7ae9c <__pk_stack_init+0x48>
            {
                if (PK_STACK_PRE_DECREMENT)
                {
                    *(--p) = PK_STACK_PATTERN;
fff7ae94:	94 e8 ff fc 	stwu    r7,-4(r8)
fff7ae98:	4b ff ff f8 	b       fff7ae90 <__pk_stack_init+0x3c>
/// behind the SP are for the initial subroutine's LR.

static inline void
__pk_stack_create_initial_frame(PkAddress* stack, size_t* size)
{
*stack -= 8;
fff7ae9c:	39 2a ff f8 	addi    r9,r10,-8
fff7aea0:	91 23 00 00 	stw     r9,0(r3)
* size -= 8;
fff7aea4:	81 24 00 00 	lwz     r9,0(r4)

        PK_PANIC(PK_UNIMPLEMENTED);
    }

    return PK_OK;
}
fff7aea8:	38 60 00 00 	li      r3,0
fff7aeac:	39 29 ff f8 	addi    r9,r9,-8
fff7aeb0:	91 24 00 00 	stw     r9,0(r4)
* ((PK_STACK_TYPE*)(*stack)) = 0;
fff7aeb4:	39 20 00 00 	li      r9,0
fff7aeb8:	91 2a ff f8 	stw     r9,-8(r10)
fff7aebc:	4e 80 00 20 	blr

fff7aec0 <_pk_process_bh>:

/// Statically initialize the bottom half queue
PK_DEQUE_SENTINEL_STATIC_CREATE(_pk_bh_queue);

void _pk_process_bh(void)
{
fff7aec0:	94 21 ff f0 	stwu    r1,-16(r1)
fff7aec4:	7c 08 02 a6 	mflr    r0
fff7aec8:	1b c1 00 08 	stvd    d30,8(r1)
fff7aecc:	90 01 00 14 	stw     r0,20(r1)
/// \retval 1 The PkDeque is empty

static inline int
pk_deque_is_empty(PkDeque* deque)
{
    return (deque == deque->next);
fff7aed0:	3b ed 01 54 	addi    r31,r13,340
fff7aed4:	81 2d 01 54 	lwz     r9,340(r13)
static inline PkDeque*
pk_deque_pop_front(PkDeque* deque)
{
    PkDeque* head;

    if (pk_deque_is_empty(deque))
fff7aed8:	04 c9 f8 16 	cmpwbeq r9,r31,fff7af04 <_pk_process_bh+0x44>
        return 0;
    }
    else
    {
        head = (PkDeque*)(deque->next);
        deque->next = head->next;
fff7aedc:	81 49 00 00 	lwz     r10,0(r9)
    PkBottomHalf* bh;

    while((bh = (PkBottomHalf*)pk_deque_pop_front(&_pk_bh_queue)) != 0)
    {
        bh->bh_handler(bh->arg);
fff7aee0:	80 69 00 0c 	lwz     r3,12(r9)
        deque->next->previous = deque;
fff7aee4:	93 ea 00 04 	stw     r31,4(r10)
        return 0;
    }
    else
    {
        head = (PkDeque*)(deque->next);
        deque->next = head->next;
fff7aee8:	91 4d 01 54 	stw     r10,340(r13)
        deque->next->previous = deque;
        head->next = 0;
fff7aeec:	39 40 00 00 	li      r10,0
fff7aef0:	91 49 00 00 	stw     r10,0(r9)
fff7aef4:	81 49 00 08 	lwz     r10,8(r9)
fff7aef8:	7d 49 03 a6 	mtctr   r10
fff7aefc:	4e 80 04 21 	bctrl
fff7af00:	4b ff ff d4 	b       fff7aed4 <_pk_process_bh+0x14>
    }

    return;
}
fff7af04:	80 01 00 14 	lwz     r0,20(r1)
fff7af08:	17 c1 00 08 	lvd     d30,8(r1)
fff7af0c:	7c 08 03 a6 	mtlr    r0
fff7af10:	38 21 00 10 	addi    r1,r1,16
fff7af14:	4e 80 00 20 	blr

fff7af18 <__pk_timer_bh_handler>:
// The main loop iterates on the PkDeque form of the time queue, casting each
// element back up to the PkTimer as it is processed.

static void
__pk_timer_bh_handler(void* arg)
{
fff7af18:	94 21 ff e0 	stwu    r1,-32(r1)
fff7af1c:	7c 08 02 a6 	mflr    r0
fff7af20:	1b c1 00 18 	stvd    d30,24(r1)
fff7af24:	90 01 00 24 	stw     r0,36(r1)
    tq = &__pk_time_queue;

    // Check if we entered the function while it was running in another context.
    if (PK_ERROR_CHECK_KERNEL)
    {
        if (tq->cursor != 0)
fff7af28:	3b ed 00 90 	addi    r31,r13,144
fff7af2c:	81 3f 00 10 	lwz     r9,16(r31)
// The main loop iterates on the PkDeque form of the time queue, casting each
// element back up to the PkTimer as it is processed.

static void
__pk_timer_bh_handler(void* arg)
{
fff7af30:	1b 81 00 10 	stvd    d28,16(r1)
    tq = &__pk_time_queue;

    // Check if we entered the function while it was running in another context.
    if (PK_ERROR_CHECK_KERNEL)
    {
        if (tq->cursor != 0)
fff7af34:	06 c9 00 04 	bwz     r9,fff7af3c <__pk_timer_bh_handler+0x24>
        {
            PK_PANIC(PK_TIMER_HANDLER_INVARIANT);
fff7af38:	7f e4 30 08 	twu     r4,r6

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7af3c:	7f c0 00 a6 	mfmsr   r30

wrteei(0);
fff7af40:	7c 00 01 46 	wrteei  0

    pk_critical_section_enter(&ctx);

    while ((now = pk_timebase_get()) >= tq->next_timeout)
    {
        tq->next_timeout = PK_TIMEBASE_MAX;
fff7af44:	3b 80 ff ff 	li      r28,-1
fff7af48:	3b a0 ff ff 	li      r29,-1
        }
    }

    pk_critical_section_enter(&ctx);

    while ((now = pk_timebase_get()) >= tq->next_timeout)
fff7af4c:	48 00 03 75 	bl      fff7b2c0 <pk_timebase_get>
fff7af50:	81 2d 00 98 	lwz     r9,152(r13)
fff7af54:	7c 68 1b 78 	mr      r8,r3
fff7af58:	05 a9 40 62 	cmplwbgt r9,r8,fff7b01c <__pk_timer_bh_handler+0x104>
fff7af5c:	04 c9 40 5a 	cmpwbeq r9,r8,fff7b010 <__pk_timer_bh_handler+0xf8>
    {
        tq->next_timeout = PK_TIMEBASE_MAX;
fff7af60:	1b 8d 00 98 	stvd    d28,152(r13)
        timer_deque = ((PkDeque*)tq)->next;
fff7af64:	81 2d 00 90 	lwz     r9,144(r13)

        // Iterate through the entire timer list, calling the callback of
        // timed-out elements and finding the timer that will timeout next,
        // which is stored in tq->next_timeout.
        while (timer_deque != (PkDeque*)tq)
fff7af68:	04 c9 ff f2 	cmpwbeq r9,r31,fff7af4c <__pk_timer_bh_handler+0x34>

            timer = (PkTimer*)timer_deque;

            // Setting this to a non-zero value indicates we are in the middle
            // of processing the time queue.
            tq->cursor = timer_deque->next;
fff7af6c:	80 e9 00 00 	lwz     r7,0(r9)
fff7af70:	39 4d 00 90 	addi    r10,r13,144
fff7af74:	90 ea 00 10 	stw     r7,16(r10)

            if (timer->timeout <= now)
fff7af78:	81 49 00 08 	lwz     r10,8(r9)
fff7af7c:	80 c9 00 0c 	lwz     r6,12(r9)
fff7af80:	80 e9 00 00 	lwz     r7,0(r9)
fff7af84:	05 aa 40 28 	cmplwbgt r10,r8,fff7afd4 <__pk_timer_bh_handler+0xbc>
fff7af88:	04 4a 40 04 	cmpwbne r10,r8,fff7af90 <__pk_timer_bh_handler+0x78>
fff7af8c:	05 a6 20 24 	cmplwbgt r6,r4,fff7afd4 <__pk_timer_bh_handler+0xbc>
/// enqueued, but the API does not check for this error.

static inline void
pk_deque_delete(PkDeque* element)
{
    element->previous->next = element->next;
fff7af90:	81 49 00 04 	lwz     r10,4(r9)
fff7af94:	90 ea 00 00 	stw     r7,0(r10)
    element->next->previous = element->previous;
fff7af98:	80 e9 00 00 	lwz     r7,0(r9)
fff7af9c:	91 47 00 04 	stw     r10,4(r7)
    element->next = 0;
fff7afa0:	39 40 00 00 	li      r10,0
fff7afa4:	91 49 00 00 	stw     r10,0(r9)
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7afa8:	7f c0 01 24 	mtmsr   r30

                pk_deque_delete(timer_deque);

                pk_critical_section_exit(&ctx);

                callback = timer->callback;
fff7afac:	81 49 00 10 	lwz     r10,16(r9)

                if (callback)
fff7afb0:	06 ca 00 28 	bwz     r10,fff7b000 <__pk_timer_bh_handler+0xe8>
                {
                    callback(timer->arg);
fff7afb4:	80 69 00 14 	lwz     r3,20(r9)
fff7afb8:	7d 49 03 a6 	mtctr   r10
fff7afbc:	90 81 00 0c 	stw     r4,12(r1)
fff7afc0:	91 01 00 08 	stw     r8,8(r1)
fff7afc4:	4e 80 04 21 	bctrl
fff7afc8:	80 81 00 0c 	lwz     r4,12(r1)
fff7afcc:	81 01 00 08 	lwz     r8,8(r1)
fff7afd0:	48 00 00 30 	b       fff7b000 <__pk_timer_bh_handler+0xe8>
            else
            {

                // This timer has not timed out.  Its timeout will simply
                // participate in the computation of the next timeout.
                tq->next_timeout = MIN(timer->timeout, tq->next_timeout);
fff7afd4:	81 2d 00 98 	lwz     r9,152(r13)
fff7afd8:	80 ff 00 0c 	lwz     r7,12(r31)
fff7afdc:	05 a9 50 06 	cmplwbgt r9,r10,fff7afe8 <__pk_timer_bh_handler+0xd0>
fff7afe0:	04 49 50 08 	cmpwbne r9,r10,fff7aff0 <__pk_timer_bh_handler+0xd8>
fff7afe4:	05 27 30 06 	cmplwble r7,r6,fff7aff0 <__pk_timer_bh_handler+0xd8>
fff7afe8:	7d 49 53 78 	mr      r9,r10
fff7afec:	7c c7 33 78 	mr      r7,r6
fff7aff0:	91 2d 00 98 	stw     r9,152(r13)
fff7aff4:	39 2d 00 90 	addi    r9,r13,144
fff7aff8:	90 e9 00 0c 	stw     r7,12(r9)
fff7affc:	7f c0 01 24 	mtmsr   r30
                pk_critical_section_exit(&ctx);
            }

            timer_deque = tq->cursor;
fff7b000:	81 3f 00 10 	lwz     r9,16(r31)

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b004:	7f c0 00 a6 	mfmsr   r30

wrteei(0);
fff7b008:	7c 00 01 46 	wrteei  0
fff7b00c:	4b ff ff 5c 	b       fff7af68 <__pk_timer_bh_handler+0x50>
        }
    }

    pk_critical_section_enter(&ctx);

    while ((now = pk_timebase_get()) >= tq->next_timeout)
fff7b010:	39 2d 00 90 	addi    r9,r13,144
fff7b014:	81 29 00 0c 	lwz     r9,12(r9)
fff7b018:	05 29 27 a4 	cmplwble r9,r4,fff7af60 <__pk_timer_bh_handler+0x48>
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b01c:	7f c0 01 24 	mtmsr   r30
    // This marks that we are no longer processing the time queue
    tq->cursor = 0;

    // Finally, reschedule the next timeout
    __pk_schedule_hardware_timeout(tq->next_timeout);
}
fff7b020:	80 01 00 24 	lwz     r0,36(r1)
    }

    pk_critical_section_exit(&ctx);

    // This marks that we are no longer processing the time queue
    tq->cursor = 0;
fff7b024:	39 20 00 00 	li      r9,0

    // Finally, reschedule the next timeout
    __pk_schedule_hardware_timeout(tq->next_timeout);
}
fff7b028:	7c 08 03 a6 	mtlr    r0
    }

    pk_critical_section_exit(&ctx);

    // This marks that we are no longer processing the time queue
    tq->cursor = 0;
fff7b02c:	91 3f 00 10 	stw     r9,16(r31)

    // Finally, reschedule the next timeout
    __pk_schedule_hardware_timeout(tq->next_timeout);
}
fff7b030:	17 81 00 10 	lvd     d28,16(r1)
fff7b034:	17 c1 00 18 	lvd     d30,24(r1)

    // This marks that we are no longer processing the time queue
    tq->cursor = 0;

    // Finally, reschedule the next timeout
    __pk_schedule_hardware_timeout(tq->next_timeout);
fff7b038:	14 6d 00 98 	lvd     d3,152(r13)
}
fff7b03c:	38 21 00 20 	addi    r1,r1,32

    // This marks that we are no longer processing the time queue
    tq->cursor = 0;

    // Finally, reschedule the next timeout
    __pk_schedule_hardware_timeout(tq->next_timeout);
fff7b040:	48 00 02 a4 	b       fff7b2e4 <__pk_schedule_hardware_timeout>

fff7b044 <__pk_timer_cancel>:
//  Note that cancelling a timer does not cause a re-evaluation of the next
//  timeout.  This will happen naturally when the current timeout expires.

int
__pk_timer_cancel(PkTimer* timer)
{
fff7b044:	81 23 00 00 	lwz     r9,0(r3)
    int rc;
    PkDeque* timer_deque = (PkDeque*)timer;
    PkTimeQueue* tq = &__pk_time_queue;

    if (!timer_active(timer))
fff7b048:	06 c9 00 1a 	bwz     r9,fff7b07c <__pk_timer_cancel+0x38>

    }
    else
    {

        if (timer_deque == tq->cursor)
fff7b04c:	39 4d 00 90 	addi    r10,r13,144
fff7b050:	81 0a 00 10 	lwz     r8,16(r10)
fff7b054:	04 43 40 04 	cmpwbne r3,r8,fff7b05c <__pk_timer_cancel+0x18>
        {
            tq->cursor = tq->cursor->next;
fff7b058:	91 2a 00 10 	stw     r9,16(r10)
/// enqueued, but the API does not check for this error.

static inline void
pk_deque_delete(PkDeque* element)
{
    element->previous->next = element->next;
fff7b05c:	81 43 00 04 	lwz     r10,4(r3)
fff7b060:	91 2a 00 00 	stw     r9,0(r10)
    element->next->previous = element->previous;
fff7b064:	81 23 00 00 	lwz     r9,0(r3)
fff7b068:	91 49 00 04 	stw     r10,4(r9)
    element->next = 0;
fff7b06c:	39 20 00 00 	li      r9,0
fff7b070:	91 23 00 00 	stw     r9,0(r3)
        }

        pk_deque_delete(timer_deque);
        rc = 0;
fff7b074:	38 60 00 00 	li      r3,0
fff7b078:	4e 80 00 20 	blr
    PkTimeQueue* tq = &__pk_time_queue;

    if (!timer_active(timer))
    {

        rc = -PK_TIMER_NOT_ACTIVE;
fff7b07c:	38 60 fc f9 	li      r3,-775
        pk_deque_delete(timer_deque);
        rc = 0;
    }

    return rc;
}
fff7b080:	4e 80 00 20 	blr

fff7b084 <__pk_timer_schedule>:
void
__pk_timer_schedule(PkTimer* timer)
{
    PkTimeQueue* tq = &__pk_time_queue;

    if (!timer_active(timer))
fff7b084:	81 03 00 00 	lwz     r8,0(r3)
// we are in the midst of processing the time queue, and the end of time queue
// processing will schedule the next hardware timemout.

void
__pk_timer_schedule(PkTimer* timer)
{
fff7b088:	7c 69 1b 78 	mr      r9,r3
fff7b08c:	39 4d 00 90 	addi    r10,r13,144
    PkTimeQueue* tq = &__pk_time_queue;

    if (!timer_active(timer))
fff7b090:	06 48 00 0c 	bwnz    r8,fff7b0a8 <__pk_timer_schedule+0x24>
/// but the API does not check for this error.

static inline void
pk_deque_push_back(PkDeque* deque, PkDeque* element)
{
    deque->previous->next = element;
fff7b094:	81 0d 00 94 	lwz     r8,148(r13)
fff7b098:	90 68 00 00 	stw     r3,0(r8)
    element->previous = deque->previous;
fff7b09c:	91 03 00 04 	stw     r8,4(r3)
    element->next = deque;
fff7b0a0:	91 43 00 00 	stw     r10,0(r3)
    deque->previous = element;
fff7b0a4:	90 6d 00 94 	stw     r3,148(r13)
    {
        pk_deque_push_back((PkDeque*)tq, (PkDeque*)timer);
    }

    if (timer->timeout < tq->next_timeout)
fff7b0a8:	14 69 00 08 	lvd     d3,8(r9)
fff7b0ac:	81 2d 00 98 	lwz     r9,152(r13)
fff7b0b0:	05 a9 18 0a 	cmplwbgt r9,r3,fff7b0c4 <__pk_timer_schedule+0x40>
fff7b0b4:	04 49 18 12 	cmpwbne r9,r3,fff7b0d8 <__pk_timer_schedule+0x54>
fff7b0b8:	39 2d 00 90 	addi    r9,r13,144
fff7b0bc:	81 29 00 0c 	lwz     r9,12(r9)
fff7b0c0:	05 29 20 0c 	cmplwble r9,r4,fff7b0d8 <__pk_timer_schedule+0x54>
    {
        tq->next_timeout = timer->timeout;

        if (tq->cursor == 0)
fff7b0c4:	81 2a 00 10 	lwz     r9,16(r10)
        pk_deque_push_back((PkDeque*)tq, (PkDeque*)timer);
    }

    if (timer->timeout < tq->next_timeout)
    {
        tq->next_timeout = timer->timeout;
fff7b0c8:	90 6d 00 98 	stw     r3,152(r13)
fff7b0cc:	90 8a 00 0c 	stw     r4,12(r10)

        if (tq->cursor == 0)
fff7b0d0:	06 49 00 04 	bwnz    r9,fff7b0d8 <__pk_timer_schedule+0x54>
        {
            __pk_schedule_hardware_timeout(tq->next_timeout);
fff7b0d4:	48 00 02 10 	b       fff7b2e4 <__pk_schedule_hardware_timeout>
fff7b0d8:	4e 80 00 20 	blr

fff7b0dc <__pk_timer_handler>:
extern PkDeque _pk_bh_queue SECTION(".sdata.pk");

static inline void
pk_bh_schedule(PkBottomHalf* bottom_half)
{
    if(!pk_deque_is_queued((PkDeque*)bottom_half))
fff7b0dc:	81 4d 01 5c 	lwz     r10,348(r13)
fff7b0e0:	39 2d 01 5c 	addi    r9,r13,348
fff7b0e4:	06 4a 00 0e 	bwnz    r10,fff7b100 <__pk_timer_handler+0x24>
/// but the API does not check for this error.

static inline void
pk_deque_push_back(PkDeque* deque, PkDeque* element)
{
    deque->previous->next = element;
fff7b0e8:	81 4d 01 58 	lwz     r10,344(r13)
fff7b0ec:	91 2a 00 00 	stw     r9,0(r10)
    element->previous = deque->previous;
fff7b0f0:	91 4d 01 60 	stw     r10,352(r13)
    element->next = deque;
fff7b0f4:	39 4d 01 54 	addi    r10,r13,340
fff7b0f8:	91 4d 01 5c 	stw     r10,348(r13)
    deque->previous = element;
fff7b0fc:	91 2d 01 58 	stw     r9,344(r13)
fff7b100:	4e 80 00 20 	blr

fff7b104 <pk_timer_schedule>:
///

int
pk_timer_schedule(PkTimer*    timer,
                  PkInterval interval)
{
fff7b104:	94 21 ff e8 	stwu    r1,-24(r1)
fff7b108:	7c 08 02 a6 	mflr    r0
fff7b10c:	1b c1 00 10 	stvd    d30,16(r1)
fff7b110:	1b 81 00 08 	stvd    d28,8(r1)
fff7b114:	7c df 33 78 	mr      r31,r6
fff7b118:	7c be 2b 78 	mr      r30,r5
fff7b11c:	90 01 00 1c 	stw     r0,28(r1)
fff7b120:	7c 7d 1b 78 	mr      r29,r3
    PkMachineContext ctx;
    PkTimebase  timeout = pk_timebase_get() + PK_INTERVAL_SCALE(interval);
fff7b124:	48 00 01 9d 	bl      fff7b2c0 <pk_timebase_get>
fff7b128:	3d 20 ff f8 	lis     r9,-8
fff7b12c:	89 09 00 00 	lbz     r8,0(r9)
fff7b130:	7f c8 44 76 	srvd    d8,d30,r8
fff7b134:	7f ff 48 14 	addc    r31,r31,r9
fff7b138:	7f de 41 14 	adde    r30,r30,r8
fff7b13c:	7f ff 20 14 	addc    r31,r31,r4
fff7b140:	7f de 19 14 	adde    r30,r30,r3

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b144:	7f 80 00 a6 	mfmsr   r28

wrteei(0);
fff7b148:	7c 00 01 46 	wrteei  0

    pk_critical_section_enter(&ctx);

    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(timer == 0, PK_INVALID_TIMER_AT_SCHEDULE);
fff7b14c:	38 60 fd fd 	li      r3,-515
fff7b150:	06 dd 00 0c 	bwz     r29,fff7b168 <pk_timer_schedule+0x64>
    }

    timer->timeout = timeout;
fff7b154:	1b dd 00 08 	stvd    d30,8(r29)
    __pk_timer_schedule(timer);
fff7b158:	7f a3 eb 78 	mr      r3,r29
fff7b15c:	4b ff ff 29 	bl      fff7b084 <__pk_timer_schedule>
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b160:	7f 80 01 24 	mtmsr   r28

    pk_critical_section_exit(&ctx);

    return PK_OK;
fff7b164:	38 60 00 00 	li      r3,0
}
fff7b168:	80 01 00 1c 	lwz     r0,28(r1)
fff7b16c:	17 81 00 08 	lvd     d28,8(r1)
fff7b170:	7c 08 03 a6 	mtlr    r0
fff7b174:	17 c1 00 10 	lvd     d30,16(r1)
fff7b178:	38 21 00 18 	addi    r1,r1,24
fff7b17c:	4e 80 00 20 	blr

fff7b180 <__hwmacro_setup>:

void
__hwmacro_setup(void)
{
    //mask all interrupts to prevent spurious pulse to PPE
    out64(STD_LCL_EIMR, 0xffffffffffffffffull);
fff7b180:	3d 40 c0 00 	lis     r10,-16384
fff7b184:	39 00 ff ff 	li      r8,-1
fff7b188:	39 20 ff ff 	li      r9,-1
fff7b18c:	61 4a 00 20 	ori     r10,r10,32
fff7b190:	19 0a 00 00 	stvd    d8,0(r10)

    //set up the configured polarity
    out64(STD_LCL_EIPR, g_ext_irqs_polarity);
fff7b194:	15 0d fe 58 	lvd     d8,-424(r13)
fff7b198:	39 4a 00 20 	addi    r10,r10,32
fff7b19c:	19 0a 00 00 	stvd    d8,0(r10)

    //set up the configured type
    out64(STD_LCL_EITR, g_ext_irqs_type);
fff7b1a0:	15 0d fe 60 	lvd     d8,-416(r13)
fff7b1a4:	39 4a 00 20 	addi    r10,r10,32
fff7b1a8:	19 0a 00 00 	stvd    d8,0(r10)

    //clear the status of all edge interrupts
    out64(STD_LCL_EISR_CLR, g_ext_irqs_type);
fff7b1ac:	15 0d fe 60 	lvd     d8,-416(r13)
fff7b1b0:	39 4a ff b8 	addi    r10,r10,-72
fff7b1b4:	19 0a 00 00 	stvd    d8,0(r10)

    //unmask the interrupts that are to be enabled by default
    out64(STD_LCL_EIMR_CLR, g_ext_irqs_enable);
fff7b1b8:	15 0d fe 68 	lvd     d8,-408(r13)
fff7b1bc:	19 0a 00 20 	stvd    d8,32(r10)

    //wait for the last operation to complete
    sync();
fff7b1c0:	7c 00 04 ac 	sync    
fff7b1c4:	4e 80 00 20 	blr

fff7b1c8 <pk_trace_timer_callback>:
#if PK_TRACE_TIMER_OUTPUT
    // guarantee at least one trace before the lower 32bit timebase flips
    PK_TRACE("PERIODIC TIMESTAMPING TRACE");
#endif
    // restart the timer
    pk_timer_schedule(&g_pk_trace_timer,
fff7b1c8:	3c c0 fc 46 	lis     r6,-954
fff7b1cc:	38 6d 00 78 	addi    r3,r13,120
fff7b1d0:	38 a0 00 00 	li      r5,0
fff7b1d4:	60 c6 53 5f 	ori     r6,r6,21343
fff7b1d8:	4b ff ff 2c 	b       fff7b104 <pk_timer_schedule>

fff7b1dc <pk_trace_tiny>:
// Creates an 8 byte entry in the trace buffer that includes a timestamp,
// a format string hash value and a 16 bit parameter.
//
// i_parm has the hash value combined with the 16 bit parameter
void pk_trace_tiny(uint32_t i_parm)
{
fff7b1dc:	94 21 ff f0 	stwu    r1,-16(r1)
fff7b1e0:	7c 08 02 a6 	mflr    r0
fff7b1e4:	1b c1 00 08 	stvd    d30,8(r1)
fff7b1e8:	90 01 00 14 	stw     r0,20(r1)
fff7b1ec:	7c 7f 1b 78 	mr      r31,r3
    uint64_t            tb64;
    PkMachineContext    ctx;

    //fill in the footer data
    footer.parms.word32 = i_parm;
    tb64 = pk_timebase_get();
fff7b1f0:	48 00 00 d1 	bl      fff7b2c0 <pk_timebase_get>
    state.tbu32 = tb64 >> 32;
    footer.time_format.word32 = tb64 & 0x00000000ffffffffull;

    footer.time_format.format = PK_TRACE_FORMAT_TINY;
fff7b1f4:	39 20 00 01 	li      r9,1
fff7b1f8:	51 24 07 be 	rlwimi  r4,r9,0,30,31

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b1fc:	7c e0 00 a6 	mfmsr   r7

wrteei(0);
fff7b200:	7c 00 01 46 	wrteei  0
    pk_critical_section_enter(&ctx);

    //load the current byte count and calculate the address for this
    //entry in the cb
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[G_PK_TRACE_BUF->state.offset & PK_TRACE_CB_MASK];
fff7b204:	3d 20 00 00 	lis     r9,0
fff7b208:	81 49 ff f8 	lwz     r10,-8(r9)
fff7b20c:	a1 2a 00 1a 	lhz     r9,26(r10)
fff7b210:	81 0a 00 34 	lwz     r8,52(r10)
fff7b214:	39 29 ff ff 	addi    r9,r9,-1
fff7b218:	7d 29 40 38 	and     r9,r9,r8
fff7b21c:	39 29 00 30 	addi    r9,r9,48
fff7b220:	7d 2a 4a 14 	add     r9,r10,r9
    ptr64 = (uint64_t*)&g_pk_trace_buf.cb[g_pk_trace_buf.state.offset & PK_TRACE_CB_MASK];
#endif

    //calculate the offset for the next entry in the cb
#ifdef APP_DEFINED_TRACE_BUFFER
    state.offset = G_PK_TRACE_BUF->state.offset + sizeof(PkTraceTiny);
fff7b224:	39 08 00 08 	addi    r8,r8,8

#endif

    //update the cb state (tbu and offset)
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->state.word64 = state.word64;
fff7b228:	90 6a 00 30 	stw     r3,48(r10)
fff7b22c:	91 0a 00 34 	stw     r8,52(r10)
    g_pk_trace_buf.state.word64 = state.word64;
#endif

    //write the data to the circular buffer including the
    //timesamp, string hash, and 16bit parameter
    *ptr64 = footer.word64;
fff7b230:	93 e9 00 08 	stw     r31,8(r9)
fff7b234:	90 89 00 0c 	stw     r4,12(r9)
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b238:	7c e0 01 24 	mtmsr   r7

    //exit the critical section
    pk_critical_section_exit(&ctx);
}
fff7b23c:	80 01 00 14 	lwz     r0,20(r1)
fff7b240:	17 c1 00 08 	lvd     d30,8(r1)
fff7b244:	7c 08 03 a6 	mtlr    r0
fff7b248:	38 21 00 10 	addi    r1,r1,16
fff7b24c:	4e 80 00 20 	blr

fff7b250 <pk_trace_set_timebase>:
// as the current timebase for tracing purposes.  It can also be used
// to set the current time to 0.  This function changes the timebase for
// all entries that are currently in the trace buffer.  Setting the current
// timebase to 0 will cause previous traces to have very large timestamps.
void pk_trace_set_timebase(PkTimebase timebase)
{
fff7b250:	94 21 ff e8 	stwu    r1,-24(r1)
fff7b254:	7c 08 02 a6 	mflr    r0
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->time_adj64 = timebase - pk_timebase_get();
fff7b258:	3d 20 00 00 	lis     r9,0
// as the current timebase for tracing purposes.  It can also be used
// to set the current time to 0.  This function changes the timebase for
// all entries that are currently in the trace buffer.  Setting the current
// timebase to 0 will cause previous traces to have very large timestamps.
void pk_trace_set_timebase(PkTimebase timebase)
{
fff7b25c:	1b 81 00 08 	stvd    d28,8(r1)
fff7b260:	1b c1 00 10 	stvd    d30,16(r1)
fff7b264:	90 01 00 1c 	stw     r0,28(r1)
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->time_adj64 = timebase - pk_timebase_get();
fff7b268:	83 a9 ff f8 	lwz     r29,-8(r9)
// as the current timebase for tracing purposes.  It can also be used
// to set the current time to 0.  This function changes the timebase for
// all entries that are currently in the trace buffer.  Setting the current
// timebase to 0 will cause previous traces to have very large timestamps.
void pk_trace_set_timebase(PkTimebase timebase)
{
fff7b26c:	7c 9f 23 78 	mr      r31,r4
fff7b270:	7c 7e 1b 78 	mr      r30,r3
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->time_adj64 = timebase - pk_timebase_get();
fff7b274:	48 00 00 4d 	bl      fff7b2c0 <pk_timebase_get>
#else
    g_pk_trace_buf.time_adj64 = timebase - pk_timebase_get();
#endif
}
fff7b278:	80 01 00 1c 	lwz     r0,28(r1)
// all entries that are currently in the trace buffer.  Setting the current
// timebase to 0 will cause previous traces to have very large timestamps.
void pk_trace_set_timebase(PkTimebase timebase)
{
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->time_adj64 = timebase - pk_timebase_get();
fff7b27c:	7f e4 f8 10 	subfc   r31,r4,r31
fff7b280:	7f c3 f1 10 	subfe   r30,r3,r30
#else
    g_pk_trace_buf.time_adj64 = timebase - pk_timebase_get();
#endif
}
fff7b284:	7c 08 03 a6 	mtlr    r0
// all entries that are currently in the trace buffer.  Setting the current
// timebase to 0 will cause previous traces to have very large timestamps.
void pk_trace_set_timebase(PkTimebase timebase)
{
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->time_adj64 = timebase - pk_timebase_get();
fff7b288:	1b dd 00 28 	stvd    d30,40(r29)
#else
    g_pk_trace_buf.time_adj64 = timebase - pk_timebase_get();
#endif
}
fff7b28c:	17 81 00 08 	lvd     d28,8(r1)
fff7b290:	17 c1 00 10 	lvd     d30,16(r1)
fff7b294:	38 21 00 18 	addi    r1,r1,24
fff7b298:	4e 80 00 20 	blr
fff7b29c:	00 00 00 00 	.long 0x0

fff7b2a0 <pk_timebase32_get>:
fff7b2a0:	14 8d 01 80 	lvd     d4,384(r13)
fff7b2a4:	80 6d 01 8c 	lwz     r3,396(r13)
fff7b2a8:	7c 16 02 a6 	mfdec   r0
fff7b2ac:	80 cd 01 84 	lwz     r6,388(r13)
fff7b2b0:	05 45 37 f8 	cmplwbne r5,r6,fff7b2a0 <pk_timebase32_get>
fff7b2b4:	7c a0 20 50 	subf    r5,r0,r4
fff7b2b8:	7c 65 1a 14 	add     r3,r5,r3
fff7b2bc:	4e 80 00 20 	blr

fff7b2c0 <pk_timebase_get>:
fff7b2c0:	14 ad 01 80 	lvd     d5,384(r13)
fff7b2c4:	14 6d 01 88 	lvd     d3,392(r13)
fff7b2c8:	7c 16 02 a6 	mfdec   r0
fff7b2cc:	80 ed 01 84 	lwz     r7,388(r13)
fff7b2d0:	05 46 3f f8 	cmplwbne r6,r7,fff7b2c0 <pk_timebase_get>
fff7b2d4:	7c c0 28 50 	subf    r6,r0,r5
fff7b2d8:	7c 86 20 14 	addc    r4,r6,r4
fff7b2dc:	7c 63 01 94 	addze   r3,r3
fff7b2e0:	4e 80 00 20 	blr

fff7b2e4 <__pk_schedule_hardware_timeout>:
{
    PkTimebase       now;
    uint32_t         new_dec;
    uint32_t         dec;

    if (timeout != PK_TIMEBASE_MAX)
fff7b2e4:	2c 03 ff ff 	cmpwi   r3,-1
// in the future in accordance with the PK specification.

#ifndef APPCFG_USE_EXT_TIMEBASE
void
__pk_schedule_hardware_timeout(PkTimebase timeout)
{
fff7b2e8:	94 21 ff f0 	stwu    r1,-16(r1)
fff7b2ec:	7c 08 02 a6 	mflr    r0
fff7b2f0:	1b c1 00 08 	stvd    d30,8(r1)
fff7b2f4:	90 01 00 14 	stw     r0,20(r1)
fff7b2f8:	7c 9f 23 78 	mr      r31,r4
fff7b2fc:	7c 7e 1b 78 	mr      r30,r3
    PkTimebase       now;
    uint32_t         new_dec;
    uint32_t         dec;

    if (timeout != PK_TIMEBASE_MAX)
fff7b300:	40 a2 00 0c 	bne     fff7b30c <__pk_schedule_hardware_timeout+0x28>
fff7b304:	2c 04 ff ff 	cmpwi   r4,-1
fff7b308:	41 82 00 70 	beq     fff7b378 <__pk_schedule_hardware_timeout+0x94>
    {

        now = pk_timebase_get();
fff7b30c:	4b ff ff b5 	bl      fff7b2c0 <pk_timebase_get>

        if (timeout <= now)
fff7b310:	05 be 18 06 	cmplwbgt r30,r3,fff7b31c <__pk_schedule_hardware_timeout+0x38>
fff7b314:	04 5e 18 12 	cmpwbne r30,r3,fff7b338 <__pk_schedule_hardware_timeout+0x54>
fff7b318:	05 3f 20 10 	cmplwble r31,r4,fff7b338 <__pk_schedule_hardware_timeout+0x54>
        {
            new_dec = 1;
        }
        else if ((timeout - now) > 0xffff0000)
fff7b31c:	7d 24 f8 10 	subfc   r9,r4,r31
fff7b320:	7d 03 f1 10 	subfe   r8,r3,r30
fff7b324:	06 48 00 0e 	bwnz    r8,fff7b340 <__pk_schedule_hardware_timeout+0x5c>
fff7b328:	3d 40 ff ff 	lis     r10,-1
fff7b32c:	05 8a 48 0a 	cmplwblt r10,r9,fff7b340 <__pk_schedule_hardware_timeout+0x5c>
        {
            new_dec = 0xffff0000;
        }
        else
        {
            new_dec = timeout - now;
fff7b330:	7d 44 f8 50 	subf    r10,r4,r31
fff7b334:	48 00 00 10 	b       fff7b344 <__pk_schedule_hardware_timeout+0x60>

        now = pk_timebase_get();

        if (timeout <= now)
        {
            new_dec = 1;
fff7b338:	39 40 00 01 	li      r10,1
fff7b33c:	48 00 00 08 	b       fff7b344 <__pk_schedule_hardware_timeout+0x60>
        }
        else if ((timeout - now) > 0xffff0000)
        {
            new_dec = 0xffff0000;
fff7b340:	3d 40 ff ff 	lis     r10,-1
            new_dec = timeout - now;
        }

        //read and write the DEC back-to-back so that we lose as little time
        //as possible
        dec = mfspr(SPRN_DEC);
fff7b344:	7c f6 02 a6 	mfdec   r7
        mtspr(SPRN_DEC, new_dec);
fff7b348:	7d 56 03 a6 	mtdec   r10

        //update our 64bit accumulator with how much time has advanced since
        //we last changed it.
        ppe42_64bit_timebase += ppe42_tb_data.dec_start - dec;
fff7b34c:	80 cd 01 80 	lwz     r6,384(r13)
fff7b350:	39 00 00 00 	li      r8,0
fff7b354:	7d 27 30 50 	subf    r9,r7,r6
fff7b358:	14 cd 01 88 	lvd     d6,392(r13)

        //update our start time so we know how much time has advanced since
        //this update of the accumulator
        ppe42_tb_data.dec_start = new_dec;
fff7b35c:	91 4d 01 80 	stw     r10,384(r13)
        dec = mfspr(SPRN_DEC);
        mtspr(SPRN_DEC, new_dec);

        //update our 64bit accumulator with how much time has advanced since
        //we last changed it.
        ppe42_64bit_timebase += ppe42_tb_data.dec_start - dec;
fff7b360:	7d 29 38 14 	addc    r9,r9,r7
fff7b364:	7d 08 31 14 	adde    r8,r8,r6
fff7b368:	19 0d 01 88 	stvd    d8,392(r13)

        //update our start time so we know how much time has advanced since
        //this update of the accumulator
        ppe42_tb_data.dec_start = new_dec;
        ppe42_tb_data.dec_change_tag++;
fff7b36c:	81 2d 01 84 	lwz     r9,388(r13)
fff7b370:	39 29 00 01 	addi    r9,r9,1
fff7b374:	91 2d 01 84 	stw     r9,388(r13)
    }
}
fff7b378:	80 01 00 14 	lwz     r0,20(r1)
fff7b37c:	17 c1 00 08 	lvd     d30,8(r1)
fff7b380:	7c 08 03 a6 	mtlr    r0
fff7b384:	38 21 00 10 	addi    r1,r1,16
fff7b388:	4e 80 00 20 	blr

fff7b38c <pk_thread_create>:
                 PkThreadRoutine  thread_routine,
                 void*              arg,
                 PkAddress        stack,
                 size_t            stack_size,
                 PkThreadPriority priority)
{
fff7b38c:	94 21 ff d8 	stwu    r1,-40(r1)
fff7b390:	7c 08 02 a6 	mflr    r0
fff7b394:	1b c1 00 20 	stvd    d30,32(r1)
fff7b398:	90 01 00 2c 	stw     r0,44(r1)
fff7b39c:	1b 81 00 18 	stvd    d28,24(r1)
fff7b3a0:	7c 7f 1b 78 	mr      r31,r3
fff7b3a4:	18 c1 00 08 	stvd    d6,8(r1)
    int rc;

    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(thread == 0, PK_INVALID_THREAD_AT_CREATE);
fff7b3a8:	3b c0 fe e3 	li      r30,-285
fff7b3ac:	06 c3 00 48 	bwz     r3,fff7b43c <pk_thread_create+0xb0>
fff7b3b0:	7c 9d 23 78 	mr      r29,r4
        PK_ERROR_IF((thread_routine == 0) ||
fff7b3b4:	3b c0 fc fe 	li      r30,-770
fff7b3b8:	06 c4 00 42 	bwz     r4,fff7b43c <pk_thread_create+0xb0>
fff7b3bc:	28 08 00 1f 	cmplwi  r8,31
fff7b3c0:	41 81 00 7c 	bgt     fff7b43c <pk_thread_create+0xb0>
                    (priority >= PK_THREADS),
                    PK_INVALID_ARGUMENT_THREAD1);
    }

    rc = __pk_stack_init(&stack, &stack_size);
fff7b3c4:	38 61 00 08 	addi    r3,r1,8
fff7b3c8:	38 81 00 0c 	addi    r4,r1,12
fff7b3cc:	91 01 00 10 	stw     r8,16(r1)
fff7b3d0:	7c bc 2b 78 	mr      r28,r5
fff7b3d4:	4b ff fa 81 	bl      fff7ae54 <__pk_stack_init>
fff7b3d8:	7c 7e 1b 78 	mr      r30,r3

    if (rc)
fff7b3dc:	81 01 00 10 	lwz     r8,16(r1)
fff7b3e0:	06 43 00 2e 	bwnz    r3,fff7b43c <pk_thread_create+0xb0>
    {
        return rc;
    }

    thread->saved_stack_pointer = stack;
fff7b3e4:	15 21 00 08 	lvd     d9,8(r1)
fff7b3e8:	91 3f 00 00 	stw     r9,0(r31)
    thread->stack_base = stack;

    if (PK_STACK_DIRECTION < 0)
    {

        thread->stack_limit = stack - stack_size;
fff7b3ec:	7d 4a 48 50 	subf    r10,r10,r9
    {
        return rc;
    }

    thread->saved_stack_pointer = stack;
    thread->stack_base = stack;
fff7b3f0:	91 3f 00 08 	stw     r9,8(r31)

    if (PK_STACK_DIRECTION < 0)
    {

        thread->stack_limit = stack - stack_size;
fff7b3f4:	91 5f 00 04 	stw     r10,4(r31)

        if (PK_ERROR_CHECK_API)
        {
            PK_ERROR_IF(thread->stack_limit > thread->stack_base,
fff7b3f8:	05 aa 48 20 	cmplwbgt r10,r9,fff7b438 <pk_thread_create+0xac>
        }
    }

    thread->semaphore = 0;
    thread->priority = priority;
    thread->state = PK_THREAD_STATE_SUSPENDED_RUNNABLE;
fff7b3fc:	39 20 00 01 	li      r9,1
            PK_ERROR_IF(thread->stack_limit < thread->stack_base,
                        PK_INVALID_ARGUMENT_THREAD3);
        }
    }

    thread->semaphore = 0;
fff7b400:	90 7f 00 0c 	stw     r3,12(r31)
    thread->priority = priority;
    thread->state = PK_THREAD_STATE_SUSPENDED_RUNNABLE;
    thread->flags = 0;
fff7b404:	98 7f 00 12 	stb     r3,18(r31)
                        PK_INVALID_ARGUMENT_THREAD3);
        }
    }

    thread->semaphore = 0;
    thread->priority = priority;
fff7b408:	99 1f 00 10 	stb     r8,16(r31)
    thread->state = PK_THREAD_STATE_SUSPENDED_RUNNABLE;
fff7b40c:	99 3f 00 11 	stb     r9,17(r31)
    thread->flags = 0;

    pk_timer_create(&(thread->timer),
fff7b410:	3c 80 ff f8 	lis     r4,-8
fff7b414:	7f e5 fb 78 	mr      r5,r31
fff7b418:	38 7f 00 18 	addi    r3,r31,24
fff7b41c:	38 84 b6 3c 	addi    r4,r4,-18884
fff7b420:	48 00 06 35 	bl      fff7ba54 <pk_timer_create>
                    __pk_thread_timeout,
                    (void*)thread);

    __pk_thread_context_initialize(thread, thread_routine, arg);
fff7b424:	7f e3 fb 78 	mr      r3,r31
fff7b428:	7f a4 eb 78 	mr      r4,r29
fff7b42c:	7f 85 e3 78 	mr      r5,r28
fff7b430:	48 00 05 7d 	bl      fff7b9ac <__pk_thread_context_initialize>

    return rc;
fff7b434:	48 00 00 08 	b       fff7b43c <pk_thread_create+0xb0>

        thread->stack_limit = stack - stack_size;

        if (PK_ERROR_CHECK_API)
        {
            PK_ERROR_IF(thread->stack_limit > thread->stack_base,
fff7b438:	3b c0 fc fd 	li      r30,-771
                    (void*)thread);

    __pk_thread_context_initialize(thread, thread_routine, arg);

    return rc;
}
fff7b43c:	80 01 00 2c 	lwz     r0,44(r1)
fff7b440:	7f c3 f3 78 	mr      r3,r30
fff7b444:	7c 08 03 a6 	mtlr    r0
fff7b448:	17 81 00 18 	lvd     d28,24(r1)
fff7b44c:	17 c1 00 20 	lvd     d30,32(r1)
fff7b450:	38 21 00 28 	addi    r1,r1,40
fff7b454:	4e 80 00 20 	blr

fff7b458 <__pk_start_threads>:
// This is considered part of pk_start_threads() and so is also considered a
// 'core' routine.

void
__pk_start_threads(void)
{
fff7b458:	94 21 ff f8 	stwu    r1,-8(r1)
fff7b45c:	7c 08 02 a6 	mflr    r0
fff7b460:	90 01 00 0c 	stw     r0,12(r1)
    PK_START_THREADS_HOOK;

    __pk_next_thread_resume();
fff7b464:	4b ff f5 4d 	bl      fff7a9b0 <__pk_next_thread_resume>

    PK_PANIC(PK_START_THREADS_RETURNED);
fff7b468:	7f e4 18 08 	twu     r4,r3
}
fff7b46c:	80 01 00 0c 	lwz     r0,12(r1)
fff7b470:	7c 08 03 a6 	mtlr    r0
fff7b474:	38 21 00 08 	addi    r1,r1,8
fff7b478:	4e 80 00 20 	blr

fff7b47c <__pk_thread_map>:
__pk_thread_map(PkThread* thread)
{
    PkThreadPriority priority;

    priority = thread->priority;
    __pk_priority_map[priority] = thread;
fff7b47c:	89 43 00 10 	lbz     r10,16(r3)
fff7b480:	39 0d 00 a8 	addi    r8,r13,168
fff7b484:	55 49 10 3a 	rlwinm  r9,r10,2,0,29
fff7b488:	7c 68 49 2e 	stwx    r3,r8,r9

    if (thread->state == PK_THREAD_STATE_SUSPENDED_RUNNABLE)
fff7b48c:	89 23 00 11 	lbz     r9,17(r3)
fff7b490:	06 c9 08 10 	cmpwibeq r9,1,fff7b4b0 <__pk_thread_map+0x34>
    {

        __pk_thread_queue_insert(&__pk_run_queue, priority);

    }
    else if (thread->flags & PK_THREAD_FLAG_SEMAPHORE_PEND)
fff7b494:	89 23 00 12 	lbz     r9,18(r3)
fff7b498:	07 89 f8 22 	bb0wi   r9,31,fff7b4dc <__pk_thread_map+0x60>
    {

        if (thread->semaphore->count)
fff7b49c:	81 23 00 0c 	lwz     r9,12(r3)
fff7b4a0:	81 09 00 04 	lwz     r8,4(r9)
fff7b4a4:	06 c8 00 12 	bwz     r8,fff7b4c8 <__pk_thread_map+0x4c>
        {

            thread->semaphore->count--;
fff7b4a8:	39 08 ff ff 	addi    r8,r8,-1
fff7b4ac:	91 09 00 04 	stw     r8,4(r9)
}

static inline void
__pk_thread_queue_insert(volatile PkThreadQueue* queue, PkThreadPriority priority)
{
*queue |= (0x80000000u >> priority);
fff7b4b0:	81 2d 01 44 	lwz     r9,324(r13)
fff7b4b4:	3d 00 80 00 	lis     r8,-32768
fff7b4b8:	7d 0a 54 30 	srw     r10,r8,r10
fff7b4bc:	7d 4a 4b 78 	or      r10,r10,r9
fff7b4c0:	91 4d 01 44 	stw     r10,324(r13)
fff7b4c4:	48 00 00 18 	b       fff7b4dc <__pk_thread_map+0x60>
fff7b4c8:	81 09 00 00 	lwz     r8,0(r9)
fff7b4cc:	3c e0 80 00 	lis     r7,-32768
fff7b4d0:	7c ea 54 30 	srw     r10,r7,r10
fff7b4d4:	7d 4a 43 78 	or      r10,r10,r8
fff7b4d8:	91 49 00 00 	stw     r10,0(r9)
            __pk_thread_queue_insert(&(thread->semaphore->pending_threads),
                                     priority);
        }
    }

    thread->state = PK_THREAD_STATE_MAPPED;
fff7b4dc:	39 20 00 02 	li      r9,2
fff7b4e0:	99 23 00 11 	stb     r9,17(r3)
fff7b4e4:	4e 80 00 20 	blr

fff7b4e8 <__pk_thread_unmap>:
__pk_thread_unmap(PkThread* thread)
{
    PkThreadPriority priority;

    priority = thread->priority;
    __pk_priority_map[priority] = 0;
fff7b4e8:	89 23 00 10 	lbz     r9,16(r3)
fff7b4ec:	39 0d 00 a8 	addi    r8,r13,168
fff7b4f0:	55 2a 10 3a 	rlwinm  r10,r9,2,0,29
fff7b4f4:	38 e0 00 00 	li      r7,0
fff7b4f8:	7c e8 51 2e 	stwx    r7,r8,r10
}

static inline int
__pk_thread_queue_member(volatile PkThreadQueue* queue, PkThreadPriority priority)
{
return ((*queue >> (31 - priority)) & 1);
fff7b4fc:	81 0d 01 44 	lwz     r8,324(r13)
fff7b500:	89 43 00 10 	lbz     r10,16(r3)
fff7b504:	21 4a 00 1f 	subfic  r10,r10,31
fff7b508:	7d 0a 54 30 	srw     r10,r8,r10

    if (__pk_thread_is_runnable(thread))
fff7b50c:	07 8a f8 12 	bb0wi   r10,31,fff7b530 <__pk_thread_unmap+0x48>
    {

        thread->state = PK_THREAD_STATE_SUSPENDED_RUNNABLE;
fff7b510:	39 40 00 01 	li      r10,1
}

static inline void
__pk_thread_queue_delete(volatile PkThreadQueue* queue, PkThreadPriority priority)
{
*queue &= ~(0x80000000u >> priority);
fff7b514:	81 0d 01 44 	lwz     r8,324(r13)
fff7b518:	99 43 00 11 	stb     r10,17(r3)
fff7b51c:	3d 40 80 00 	lis     r10,-32768
fff7b520:	7d 49 4c 30 	srw     r9,r10,r9
fff7b524:	7d 09 48 78 	andc    r9,r8,r9
fff7b528:	91 2d 01 44 	stw     r9,324(r13)
fff7b52c:	4e 80 00 20 	blr

    }
    else
    {

        thread->state = PK_THREAD_STATE_SUSPENDED_BLOCKED;
fff7b530:	39 40 00 03 	li      r10,3
fff7b534:	99 43 00 11 	stb     r10,17(r3)

        if (thread->flags & PK_THREAD_FLAG_SEMAPHORE_PEND)
fff7b538:	89 43 00 12 	lbz     r10,18(r3)
fff7b53c:	07 8a f8 0e 	bb0wi   r10,31,fff7b558 <__pk_thread_unmap+0x70>
        {
            __pk_thread_queue_delete(&(thread->semaphore->pending_threads),
fff7b540:	81 03 00 0c 	lwz     r8,12(r3)
fff7b544:	3d 40 80 00 	lis     r10,-32768
fff7b548:	80 e8 00 00 	lwz     r7,0(r8)
fff7b54c:	7d 49 4c 30 	srw     r9,r10,r9
fff7b550:	7c e9 48 78 	andc    r9,r7,r9
fff7b554:	91 28 00 00 	stw     r9,0(r8)
fff7b558:	4e 80 00 20 	blr

fff7b55c <__pk_schedule>:
}

static inline PkThreadPriority
__pk_thread_queue_min(volatile PkThreadQueue* queue)
{
return cntlzw(*queue);
fff7b55c:	81 2d 01 44 	lwz     r9,324(r13)
fff7b560:	7d 29 00 34 	cntlzw  r9,r9
fff7b564:	55 29 06 3e 	clrlwi  r9,r9,24
// end of interrupt processing.

void
__pk_schedule(void)
{
    __pk_next_priority = __pk_thread_queue_min(&__pk_run_queue);
fff7b568:	99 2d 01 34 	stb     r9,308(r13)
    __pk_next_thread = __pk_priority_map[__pk_next_priority];
fff7b56c:	39 4d 00 a8 	addi    r10,r13,168
fff7b570:	89 2d 01 34 	lbz     r9,308(r13)
fff7b574:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
fff7b578:	7d 2a 48 2e 	lwzx    r9,r10,r9
fff7b57c:	91 2d 01 38 	stw     r9,312(r13)

    if ((__pk_next_thread == 0) ||
fff7b580:	06 c9 00 06 	bwz     r9,fff7b58c <__pk_schedule+0x30>
fff7b584:	81 4d 01 3c 	lwz     r10,316(r13)
fff7b588:	04 c9 50 1a 	cmpwbeq r9,r10,fff7b5bc <__pk_schedule+0x60>
        (__pk_next_thread != __pk_current_thread))
    {

        if (__pk_kernel_mode_thread())
fff7b58c:	7d 30 42 a6 	mfsprg  r9,0
fff7b590:	06 09 00 16 	bwgez   r9,fff7b5bc <__pk_schedule+0x60>
        {
            if (__pk_kernel_context_thread())
fff7b594:	7d 30 42 a6 	mfsprg  r9,0
fff7b598:	3d 40 80 00 	lis     r10,-32768
fff7b59c:	55 29 00 02 	rlwinm  r9,r9,0,0,1
fff7b5a0:	04 49 50 0a 	cmpwbne r9,r10,fff7b5b4 <__pk_schedule+0x58>
            {
                if (__pk_current_thread != 0)
fff7b5a4:	81 2d 01 3c 	lwz     r9,316(r13)
fff7b5a8:	06 c9 00 04 	bwz     r9,fff7b5b0 <__pk_schedule+0x54>
                {
                    __pk_switch();
fff7b5ac:	4b ff f4 a0 	b       fff7aa4c <__ctx_switch>
                }
                else
                {
                    __pk_next_thread_resume();
fff7b5b0:	4b ff f4 00 	b       fff7a9b0 <__pk_next_thread_resume>
                }
            }
            else
            {
                __pk_delayed_switch = 1;
fff7b5b4:	39 20 00 01 	li      r9,1
fff7b5b8:	91 2d 01 40 	stw     r9,320(r13)
fff7b5bc:	4e 80 00 20 	blr

fff7b5c0 <__pk_thread_delete>:
// Note that we do not create trace events for unmapped threads since the trace
// tag only encodes the priority, which may be in use by a mapped thread.

void
__pk_thread_delete(PkThread* thread, PkThreadState final_state)
{
fff7b5c0:	94 21 ff e8 	stwu    r1,-24(r1)
fff7b5c4:	7c 08 02 a6 	mflr    r0
fff7b5c8:	1b 81 00 08 	stvd    d28,8(r1)
fff7b5cc:	90 01 00 1c 	stw     r0,28(r1)
fff7b5d0:	1b c1 00 10 	stvd    d30,16(r1)
fff7b5d4:	7c 7c 1b 78 	mr      r28,r3
fff7b5d8:	7c 9d 23 78 	mr      r29,r4

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b5dc:	7f c0 00 a6 	mfmsr   r30

wrteei(0);
fff7b5e0:	7c 00 01 46 	wrteei  0
// Interrupts must be disabled at entry.

static inline int
__pk_thread_is_mapped(PkThread* thread)
{
    return (thread->state == PK_THREAD_STATE_MAPPED);
fff7b5e4:	8b e3 00 11 	lbz     r31,17(r3)
fff7b5e8:	6b ff 00 02 	xori    r31,r31,2
fff7b5ec:	3b ff ff ff 	addi    r31,r31,-1
fff7b5f0:	57 ff 0f fe 	rlwinm  r31,r31,1,31,31

    pk_critical_section_enter(&ctx);

    mapped = __pk_thread_is_mapped(thread);

    if (mapped)
fff7b5f4:	06 df 00 04 	bwz     r31,fff7b5fc <__pk_thread_delete+0x3c>
    {
        __pk_thread_unmap(thread);
fff7b5f8:	4b ff fe f1 	bl      fff7b4e8 <__pk_thread_unmap>
    }

    __pk_timer_cancel(&(thread->timer));
fff7b5fc:	38 7c 00 18 	addi    r3,r28,24
fff7b600:	4b ff fa 45 	bl      fff7b044 <__pk_timer_cancel>
    thread->state = final_state;
fff7b604:	9b bc 00 11 	stb     r29,17(r28)

    if (mapped)
fff7b608:	06 df 00 0c 	bwz     r31,fff7b620 <__pk_thread_delete+0x60>
            {
                PK_KERN_TRACE("THREAD_COMPLETED(%d)", thread->priority);
            }
        }

        if (thread == __pk_current_thread)
fff7b60c:	81 2d 01 3c 	lwz     r9,316(r13)
fff7b610:	04 5c 48 06 	cmpwbne r28,r9,fff7b61c <__pk_thread_delete+0x5c>
        {
            __pk_current_thread = 0;
fff7b614:	39 20 00 00 	li      r9,0
fff7b618:	91 2d 01 3c 	stw     r9,316(r13)
        }

        __pk_schedule();
fff7b61c:	4b ff ff 41 	bl      fff7b55c <__pk_schedule>
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b620:	7f c0 01 24 	mtmsr   r30
    }

    pk_critical_section_exit(&ctx);
}
fff7b624:	80 01 00 1c 	lwz     r0,28(r1)
fff7b628:	17 81 00 08 	lvd     d28,8(r1)
fff7b62c:	7c 08 03 a6 	mtlr    r0
fff7b630:	17 c1 00 10 	lvd     d30,16(r1)
fff7b634:	38 21 00 18 	addi    r1,r1,24
fff7b638:	4e 80 00 20 	blr

fff7b63c <__pk_thread_timeout>:
// Note that we do not create trace events for unmapped threads since the trace
// tag only encodes the priority, which may be in use by a mapped thread.

void
__pk_thread_timeout(void* arg)
{
fff7b63c:	94 21 ff f0 	stwu    r1,-16(r1)
fff7b640:	7c 08 02 a6 	mflr    r0
fff7b644:	1b c1 00 08 	stvd    d30,8(r1)
fff7b648:	90 01 00 14 	stw     r0,20(r1)

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b64c:	7f e0 00 a6 	mfmsr   r31

wrteei(0);
fff7b650:	7c 00 01 46 	wrteei  0
    PkMachineContext ctx;
    PkThread* thread = (PkThread*)arg;

    pk_critical_section_enter(&ctx);

    switch (thread->state)
fff7b654:	89 23 00 11 	lbz     r9,17(r3)
fff7b658:	06 c9 10 0a 	cmpwibeq r9,2,fff7b66c <__pk_thread_timeout+0x30>
fff7b65c:	06 c9 18 26 	cmpwibeq r9,3,fff7b6a8 <__pk_thread_timeout+0x6c>
fff7b660:	06 c9 08 2e 	cmpwibeq r9,1,fff7b6bc <__pk_thread_timeout+0x80>
            thread->flags |= PK_THREAD_FLAG_TIMED_OUT;
            thread->state = PK_THREAD_STATE_SUSPENDED_RUNNABLE;
            break;

        default:
            PK_PANIC(PK_THREAD_TIMEOUT_STATE);
fff7b664:	7f e4 38 08 	twu     r4,r7
fff7b668:	48 00 00 54 	b       fff7b6bc <__pk_thread_timeout+0x80>
}

static inline int
__pk_thread_queue_member(volatile PkThreadQueue* queue, PkThreadPriority priority)
{
return ((*queue >> (31 - priority)) & 1);
fff7b66c:	89 03 00 10 	lbz     r8,16(r3)
fff7b670:	81 4d 01 44 	lwz     r10,324(r13)
fff7b674:	21 28 00 1f 	subfic  r9,r8,31
fff7b678:	7d 4a 4c 30 	srw     r10,r10,r9

    switch (thread->state)
    {

        case PK_THREAD_STATE_MAPPED:
            if (!__pk_thread_is_runnable(thread))
fff7b67c:	07 0a f8 20 	bb1wi   r10,31,fff7b6bc <__pk_thread_timeout+0x80>
            {
                thread->flags |= PK_THREAD_FLAG_TIMED_OUT;
fff7b680:	89 43 00 12 	lbz     r10,18(r3)
}

static inline void
__pk_thread_queue_insert(volatile PkThreadQueue* queue, PkThreadPriority priority)
{
*queue |= (0x80000000u >> priority);
fff7b684:	3d 20 80 00 	lis     r9,-32768
fff7b688:	61 4a 00 04 	ori     r10,r10,4
fff7b68c:	99 43 00 12 	stb     r10,18(r3)
fff7b690:	81 4d 01 44 	lwz     r10,324(r13)
fff7b694:	7d 29 44 30 	srw     r9,r9,r8
fff7b698:	7d 29 53 78 	or      r9,r9,r10
fff7b69c:	91 2d 01 44 	stw     r9,324(r13)
                __pk_thread_queue_insert(&__pk_run_queue, thread->priority);
                __pk_schedule();
fff7b6a0:	4b ff fe bd 	bl      fff7b55c <__pk_schedule>
fff7b6a4:	48 00 00 18 	b       fff7b6bc <__pk_thread_timeout+0x80>

        case PK_THREAD_STATE_SUSPENDED_RUNNABLE:
            break;

        case PK_THREAD_STATE_SUSPENDED_BLOCKED:
            thread->flags |= PK_THREAD_FLAG_TIMED_OUT;
fff7b6a8:	89 23 00 12 	lbz     r9,18(r3)
fff7b6ac:	61 29 00 04 	ori     r9,r9,4
fff7b6b0:	99 23 00 12 	stb     r9,18(r3)
            thread->state = PK_THREAD_STATE_SUSPENDED_RUNNABLE;
fff7b6b4:	39 20 00 01 	li      r9,1
fff7b6b8:	99 23 00 11 	stb     r9,17(r3)
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b6bc:	7f e0 01 24 	mtmsr   r31
        default:
            PK_PANIC(PK_THREAD_TIMEOUT_STATE);
    }

    pk_critical_section_exit(&ctx);
}
fff7b6c0:	80 01 00 14 	lwz     r0,20(r1)
fff7b6c4:	17 c1 00 08 	lvd     d30,8(r1)
fff7b6c8:	7c 08 03 a6 	mtlr    r0
fff7b6cc:	38 21 00 10 	addi    r1,r1,16
fff7b6d0:	4e 80 00 20 	blr

fff7b6d4 <pk_start_threads>:
int
pk_start_threads(void)
{
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(__pk_kernel_mode_thread(), PK_ILLEGAL_CONTEXT_THREAD);
fff7b6d4:	7d 30 42 a6 	mfsprg  r9,0
fff7b6d8:	38 60 fe fe 	li      r3,-258
fff7b6dc:	06 89 00 16 	bwltz   r9,fff7b708 <pk_start_threads+0x34>

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b6e0:	7d 20 00 a6 	mfmsr   r9

wrteei(0);
fff7b6e4:	7c 00 01 46 	wrteei  0
    }

    __pk_call_pk_start_threads();
fff7b6e8:	3d 20 ff f8 	lis     r9,-8
fff7b6ec:	81 4d 01 4c 	lwz     r10,332(r13)
fff7b6f0:	39 29 b4 58 	addi    r9,r9,-19368
fff7b6f4:	7d 41 53 78 	mr      r1,r10
fff7b6f8:	7d 28 03 a6 	mtlr    r9
fff7b6fc:	4e 80 00 21 	blrl
fff7b700:	7f e4 18 08 	twu     r4,r3

    return 0;
fff7b704:	38 60 00 00 	li      r3,0
}
fff7b708:	4e 80 00 20 	blr

fff7b70c <pk_thread_resume>:
{
    PkMachineContext ctx;

    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(thread == 0, PK_INVALID_THREAD_AT_RESUME1);
fff7b70c:	06 c3 00 38 	bwz     r3,fff7b77c <pk_thread_resume+0x70>
/// \retval -PK_PRIORITY_IN_USE_AT_RESUME Another thread is already mapped at
/// the priority of the \a thread.

int
pk_thread_resume(PkThread* thread)
{
fff7b710:	94 21 ff f0 	stwu    r1,-16(r1)
fff7b714:	7c 08 02 a6 	mflr    r0
fff7b718:	1b c1 00 08 	stvd    d30,8(r1)
fff7b71c:	90 01 00 14 	stw     r0,20(r1)

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b720:	7f e0 00 a6 	mfmsr   r31

wrteei(0);
fff7b724:	7c 00 01 46 	wrteei  0
fff7b728:	89 03 00 11 	lbz     r8,17(r3)

    pk_critical_section_enter(&ctx);

    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF_CRITICAL(!__pk_thread_is_active(thread),
fff7b72c:	39 48 ff fc 	addi    r10,r8,-4
fff7b730:	28 0a 00 01 	cmplwi  r10,1
fff7b734:	41 a1 00 10 	bgt     fff7b744 <pk_thread_resume+0x38>
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b738:	7f e0 01 24 	mtmsr   r31
fff7b73c:	38 60 fe fb 	li      r3,-261
fff7b740:	48 00 00 44 	b       fff7b784 <pk_thread_resume+0x78>
                             PK_INVALID_THREAD_AT_RESUME2,
                             &ctx);
    }

    if (!__pk_thread_is_mapped(thread))
fff7b744:	06 c8 10 16 	cmpwibeq r8,2,fff7b770 <pk_thread_resume+0x64>
    {

        if (PK_ERROR_CHECK_API)
        {
            PK_ERROR_IF_CRITICAL(__pk_priority_map[thread->priority] != 0,
fff7b748:	89 23 00 10 	lbz     r9,16(r3)
fff7b74c:	39 4d 00 a8 	addi    r10,r13,168
fff7b750:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
fff7b754:	7d 2a 48 2e 	lwzx    r9,r10,r9
fff7b758:	06 c9 00 08 	bwz     r9,fff7b768 <pk_thread_resume+0x5c>
fff7b75c:	7f e0 01 24 	mtmsr   r31
fff7b760:	38 60 fc f8 	li      r3,-776
fff7b764:	48 00 00 20 	b       fff7b784 <pk_thread_resume+0x78>
                                 PK_PRIORITY_IN_USE_AT_RESUME,
                                 &ctx);
        }

        __pk_thread_map(thread);
fff7b768:	4b ff fd 15 	bl      fff7b47c <__pk_thread_map>
        __pk_schedule();
fff7b76c:	4b ff fd f1 	bl      fff7b55c <__pk_schedule>
fff7b770:	7f e0 01 24 	mtmsr   r31
    }

    pk_critical_section_exit(&ctx);

    return PK_OK;
fff7b774:	38 60 00 00 	li      r3,0
fff7b778:	48 00 00 0c 	b       fff7b784 <pk_thread_resume+0x78>
{
    PkMachineContext ctx;

    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF(thread == 0, PK_INVALID_THREAD_AT_RESUME1);
fff7b77c:	38 60 fe fc 	li      r3,-260
fff7b780:	4e 80 00 20 	blr
    }

    pk_critical_section_exit(&ctx);

    return PK_OK;
}
fff7b784:	80 01 00 14 	lwz     r0,20(r1)
fff7b788:	17 c1 00 08 	lvd     d30,8(r1)
fff7b78c:	7c 08 03 a6 	mtlr    r0
fff7b790:	38 21 00 10 	addi    r1,r1,16
fff7b794:	4e 80 00 20 	blr

fff7b798 <pk_complete>:
int
pk_complete(void)
{
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_UNLESS_THREAD_CONTEXT();
fff7b798:	7d 30 42 a6 	mfsprg  r9,0
fff7b79c:	3d 40 80 00 	lis     r10,-32768
fff7b7a0:	55 29 00 02 	rlwinm  r9,r9,0,0,1
fff7b7a4:	38 60 ff 00 	li      r3,-256
fff7b7a8:	04 49 50 16 	cmpwbne r9,r10,fff7b7d4 <pk_complete+0x3c>

// Note: Casting __pk_current_thread removes the 'volatile' attribute.

int
pk_complete(void)
{
fff7b7ac:	94 21 ff f8 	stwu    r1,-8(r1)
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_UNLESS_THREAD_CONTEXT();
    }

    __pk_thread_delete((PkThread*)__pk_current_thread,
fff7b7b0:	80 6d 01 3c 	lwz     r3,316(r13)

// Note: Casting __pk_current_thread removes the 'volatile' attribute.

int
pk_complete(void)
{
fff7b7b4:	7c 08 02 a6 	mflr    r0
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_UNLESS_THREAD_CONTEXT();
    }

    __pk_thread_delete((PkThread*)__pk_current_thread,
fff7b7b8:	38 80 00 04 	li      r4,4

// Note: Casting __pk_current_thread removes the 'volatile' attribute.

int
pk_complete(void)
{
fff7b7bc:	90 01 00 0c 	stw     r0,12(r1)
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_UNLESS_THREAD_CONTEXT();
    }

    __pk_thread_delete((PkThread*)__pk_current_thread,
fff7b7c0:	4b ff fe 01 	bl      fff7b5c0 <__pk_thread_delete>
                       PK_THREAD_STATE_COMPLETED);

    return PK_OK;
}
fff7b7c4:	80 01 00 0c 	lwz     r0,12(r1)
fff7b7c8:	7c 08 03 a6 	mtlr    r0
fff7b7cc:	38 21 00 08 	addi    r1,r1,8
    }

    __pk_thread_delete((PkThread*)__pk_current_thread,
                       PK_THREAD_STATE_COMPLETED);

    return PK_OK;
fff7b7d0:	38 60 00 00 	li      r3,0
}
fff7b7d4:	4e 80 00 20 	blr

fff7b7d8 <pk_trace_big>:
#include "pk_trace.h"

#if (PK_TRACE_SUPPORT)
void pk_trace_big(uint32_t i_hash_and_count,
                  uint64_t i_parm1, uint64_t i_parm2)
{
fff7b7d8:	94 21 ff e0 	stwu    r1,-32(r1)
fff7b7dc:	7c 08 02 a6 	mflr    r0
fff7b7e0:	1b 81 00 10 	stvd    d28,16(r1)
fff7b7e4:	1b c1 00 18 	stvd    d30,24(r1)
fff7b7e8:	90 01 00 24 	stw     r0,36(r1)
fff7b7ec:	7c be 2b 78 	mr      r30,r5
fff7b7f0:	7c fc 3b 78 	mr      r28,r7
fff7b7f4:	90 61 00 08 	stw     r3,8(r1)
fff7b7f8:	7c df 33 78 	mr      r31,r6
fff7b7fc:	7d 1d 43 78 	mr      r29,r8
    uint32_t            parm_size;
    uint32_t            cur_offset;
    uint32_t            footer_offset;

    //fill in the footer data
    tb64 = pk_timebase_get();
fff7b800:	4b ff fa c1 	bl      fff7b2c0 <pk_timebase_get>
    state.tbu32 = tb64 >> 32;
    footer.time_format.word32 = tb64 & 0x00000000ffffffffull;
    footer.time_format.format = PK_TRACE_FORMAT_BIG;

    //round up to 8 byte boundary
    if(footer.parms.num_parms <= 2)
fff7b804:	80 e1 00 08 	lwz     r7,8(r1)
    //fill in the footer data
    tb64 = pk_timebase_get();
    footer.parms.word32 = i_hash_and_count; //this has the parm count and hash
    state.tbu32 = tb64 >> 32;
    footer.time_format.word32 = tb64 & 0x00000000ffffffffull;
    footer.time_format.format = PK_TRACE_FORMAT_BIG;
fff7b808:	39 20 00 02 	li      r9,2
    uint32_t            parm_size;
    uint32_t            cur_offset;
    uint32_t            footer_offset;

    //fill in the footer data
    tb64 = pk_timebase_get();
fff7b80c:	7c 8a 23 78 	mr      r10,r4
    footer.parms.word32 = i_hash_and_count; //this has the parm count and hash
    state.tbu32 = tb64 >> 32;
    footer.time_format.word32 = tb64 & 0x00000000ffffffffull;
    footer.time_format.format = PK_TRACE_FORMAT_BIG;
fff7b810:	51 2a 07 be 	rlwimi  r10,r9,0,30,31

    //round up to 8 byte boundary
    if(footer.parms.num_parms <= 2)
fff7b814:	54 e9 06 3e 	clrlwi  r9,r7,24
fff7b818:	28 09 00 02 	cmplwi  r9,2
    uint32_t            parm_size;
    uint32_t            cur_offset;
    uint32_t            footer_offset;

    //fill in the footer data
    tb64 = pk_timebase_get();
fff7b81c:	7c 60 1b 78 	mr      r0,r3
    footer.time_format.format = PK_TRACE_FORMAT_BIG;

    //round up to 8 byte boundary
    if(footer.parms.num_parms <= 2)
    {
        parm_size = 8;
fff7b820:	38 a0 00 08 	li      r5,8
    state.tbu32 = tb64 >> 32;
    footer.time_format.word32 = tb64 & 0x00000000ffffffffull;
    footer.time_format.format = PK_TRACE_FORMAT_BIG;

    //round up to 8 byte boundary
    if(footer.parms.num_parms <= 2)
fff7b824:	40 81 00 08 	ble     fff7b82c <pk_trace_big+0x54>
    {
        parm_size = 8;
    }
    else
    {
        parm_size = 16;
fff7b828:	38 a0 00 10 	li      r5,16

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b82c:	7d 00 00 a6 	mfmsr   r8
fff7b830:	7d 08 03 a6 	mtlr    r8

wrteei(0);
fff7b834:	7c 00 01 46 	wrteei  0
    //*****The following operations must be done atomically*****
    pk_critical_section_enter(&ctx);

    //load in the offset in the cb for the entry we are adding
#ifdef APP_DEFINED_TRACE_BUFFER
    cur_offset = G_PK_TRACE_BUF->state.offset;
fff7b838:	3c 60 00 00 	lis     r3,0
fff7b83c:	80 e3 ff f8 	lwz     r7,-8(r3)
fff7b840:	81 07 00 34 	lwz     r8,52(r7)
    //Find the offset for the footer (at the end of the entry)
    footer_offset = cur_offset + parm_size;

    //calculate the address of the footer
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[footer_offset & PK_TRACE_CB_MASK];
fff7b844:	a1 27 00 1a 	lhz     r9,26(r7)
#else
    cur_offset = g_pk_trace_buf.state.offset;
#endif

    //Find the offset for the footer (at the end of the entry)
    footer_offset = cur_offset + parm_size;
fff7b848:	7c c5 42 14 	add     r6,r5,r8

    //calculate the address of the footer
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[footer_offset & PK_TRACE_CB_MASK];
fff7b84c:	39 29 ff ff 	addi    r9,r9,-1
fff7b850:	7c c9 48 38 	and     r9,r6,r9
fff7b854:	39 29 00 30 	addi    r9,r9,48
#else
    ptr64 = (uint64_t*)&g_pk_trace_buf.cb[footer_offset & PK_TRACE_CB_MASK];
#endif

    //calculate the offset for the next entry in the cb
    state.offset = footer_offset + sizeof(PkTraceBig);
fff7b858:	38 c6 00 08 	addi    r6,r6,8
    //Find the offset for the footer (at the end of the entry)
    footer_offset = cur_offset + parm_size;

    //calculate the address of the footer
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[footer_offset & PK_TRACE_CB_MASK];
fff7b85c:	7d 27 4a 14 	add     r9,r7,r9

#endif

    //update the cb state (tbu and offset)
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->state.word64 = state.word64;
fff7b860:	90 07 00 30 	stw     r0,48(r7)
fff7b864:	90 c7 00 34 	stw     r6,52(r7)
    g_pk_trace_buf.state.word64 = state.word64;
#endif

    //write the data to the circular buffer including the
    //timesamp, string hash, and 16bit parameter
    *ptr64 = footer.word64;
fff7b868:	80 e1 00 08 	lwz     r7,8(r1)
    //Find the offset for the footer (at the end of the entry)
    footer_offset = cur_offset + parm_size;

    //calculate the address of the footer
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[footer_offset & PK_TRACE_CB_MASK];
fff7b86c:	38 89 00 08 	addi    r4,r9,8
    g_pk_trace_buf.state.word64 = state.word64;
#endif

    //write the data to the circular buffer including the
    //timesamp, string hash, and 16bit parameter
    *ptr64 = footer.word64;
fff7b870:	90 e9 00 08 	stw     r7,8(r9)
fff7b874:	91 44 00 04 	stw     r10,4(r4)
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b878:	7d 28 02 a6 	mflr    r9
fff7b87c:	7d 20 01 24 	mtmsr   r9


    //write parm values to the circular buffer
    footer_ptr = (PkTraceBig*)ptr64;
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[cur_offset & PK_TRACE_CB_MASK];
fff7b880:	80 e3 ff f8 	lwz     r7,-8(r3)
fff7b884:	a1 47 00 1a 	lhz     r10,26(r7)
fff7b888:	39 4a ff ff 	addi    r10,r10,-1
fff7b88c:	7d 49 40 38 	and     r9,r10,r8
#else
    ptr64 = (uint64_t*)&g_pk_trace_buf.cb[cur_offset & PK_TRACE_CB_MASK];
#endif
    *ptr64 = i_parm1;
fff7b890:	7d 27 4a 14 	add     r9,r7,r9
fff7b894:	1b c9 00 38 	stvd    d30,56(r9)

    if(parm_size > 8)
fff7b898:	06 c5 40 0a 	cmpwibeq r5,8,fff7b8ac <pk_trace_big+0xd4>
    {
#ifdef APP_DEFINED_TRACE_BUFFER
        ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[(cur_offset + 8) & PK_TRACE_CB_MASK];
fff7b89c:	39 28 00 08 	addi    r9,r8,8
fff7b8a0:	7d 48 48 38 	and     r8,r10,r9
#else
        ptr64 = (uint64_t*)&g_pk_trace_buf.cb[(cur_offset + 8) & PK_TRACE_CB_MASK];
#endif
        *ptr64 = i_parm2;
fff7b8a4:	7d 07 42 14 	add     r8,r7,r8
fff7b8a8:	1b 88 00 38 	stvd    d28,56(r8)
    }

    //Mark the trace entry update as being completed
    footer_ptr->parms.complete = 1;
fff7b8ac:	39 20 00 01 	li      r9,1
fff7b8b0:	99 24 00 02 	stb     r9,2(r4)

}
fff7b8b4:	80 01 00 24 	lwz     r0,36(r1)
fff7b8b8:	17 81 00 10 	lvd     d28,16(r1)
fff7b8bc:	7c 08 03 a6 	mtlr    r0
fff7b8c0:	17 c1 00 18 	lvd     d30,24(r1)
fff7b8c4:	38 21 00 20 	addi    r1,r1,32
fff7b8c8:	4e 80 00 20 	blr

fff7b8cc <pk_trace_binary>:

#include "pk_trace.h"

#if (PK_TRACE_SUPPORT)
void pk_trace_binary(uint32_t i_hash_and_size, const void* bufp)
{
fff7b8cc:	94 21 ff e8 	stwu    r1,-24(r1)
fff7b8d0:	7c 08 02 a6 	mflr    r0
fff7b8d4:	1b c1 00 10 	stvd    d30,16(r1)
fff7b8d8:	90 01 00 1c 	stw     r0,28(r1)
fff7b8dc:	7c 7e 1b 78 	mr      r30,r3
fff7b8e0:	1b 81 00 08 	stvd    d28,8(r1)
fff7b8e4:	7c 9f 23 78 	mr      r31,r4
    uint8_t*                dest;
    const uint8_t*          src;
    uint32_t                index;

    //fill in the footer data
    tb64 = pk_timebase_get();
fff7b8e8:	4b ff f9 d9 	bl      fff7b2c0 <pk_timebase_get>
    footer.parms.word32 = i_hash_and_size; //this has the size and hash
    state.tbu32 = tb64 >> 32;
    footer.time_format.word32 = tb64 & 0x00000000ffffffffull;
    footer.time_format.format = PK_TRACE_FORMAT_BINARY;
fff7b8ec:	39 20 00 03 	li      r9,3
fff7b8f0:	51 24 07 be 	rlwimi  r4,r9,0,30,31

    //round up to 8 byte boundary
    data_size = (footer.parms.num_bytes + 7) & ~0x00000007ul;
fff7b8f4:	57 c9 06 3e 	clrlwi  r9,r30,24
fff7b8f8:	39 29 00 07 	addi    r9,r9,7
fff7b8fc:	55 29 00 38 	rlwinm  r9,r9,0,0,28
fff7b900:	28 09 01 00 	cmplwi  r9,256
fff7b904:	40 81 00 08 	ble     fff7b90c <pk_trace_binary+0x40>
fff7b908:	39 20 01 00 	li      r9,256

UNLESS__PPE42_CORE_C__(extern)
inline int
pk_interrupt_disable(PkMachineContext* context)
{
*context = mfmsr();
fff7b90c:	7c 00 00 a6 	mfmsr   r0

wrteei(0);
fff7b910:	7c 00 01 46 	wrteei  0
    //*****The following operations must be done atomically*****
    pk_critical_section_enter(&ctx);

    //load in the offset in the cb for the entry we are adding
#ifdef APP_DEFINED_TRACE_BUFFER
    cb_offset = G_PK_TRACE_BUF->state.offset;
fff7b914:	3c a0 00 00 	lis     r5,0
fff7b918:	81 05 ff f8 	lwz     r8,-8(r5)
fff7b91c:	80 c8 00 34 	lwz     r6,52(r8)
    //Find the offset for the footer (at the end of the entry)
    footer_offset = cb_offset + data_size;

    //calculate the address of the footer
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[footer_offset & PK_TRACE_CB_MASK];
fff7b920:	a1 48 00 1a 	lhz     r10,26(r8)
#else
    cb_offset = g_pk_trace_buf.state.offset;
#endif

    //Find the offset for the footer (at the end of the entry)
    footer_offset = cb_offset + data_size;
fff7b924:	7c e9 32 14 	add     r7,r9,r6

    //calculate the address of the footer
#ifdef APP_DEFINED_TRACE_BUFFER
    ptr64 = (uint64_t*)&G_PK_TRACE_BUF->cb[footer_offset & PK_TRACE_CB_MASK];
fff7b928:	39 4a ff ff 	addi    r10,r10,-1
fff7b92c:	7c ea 50 38 	and     r10,r7,r10
fff7b930:	39 4a 00 30 	addi    r10,r10,48
fff7b934:	7d 48 52 14 	add     r10,r8,r10
fff7b938:	3b aa 00 08 	addi    r29,r10,8
#else
    ptr64 = (uint64_t*)&g_pk_trace_buf.cb[footer_offset & PK_TRACE_CB_MASK];
#endif

    //calculate the offset for the next entry in the cb
    state.offset = footer_offset + sizeof(PkTraceBinary);
fff7b93c:	38 e7 00 08 	addi    r7,r7,8

#endif

    //update the cb state (tbu and offset)
#ifdef APP_DEFINED_TRACE_BUFFER
    G_PK_TRACE_BUF->state.word64 = state.word64;
fff7b940:	90 68 00 30 	stw     r3,48(r8)
fff7b944:	90 e8 00 34 	stw     r7,52(r8)
    g_pk_trace_buf.state.word64 = state.word64;
#endif

    //write the footer data to the circular buffer including the
    //timesamp, string hash and data size
    *ptr64 = footer.word64;
fff7b948:	93 ca 00 08 	stw     r30,8(r10)
fff7b94c:	90 9d 00 04 	stw     r4,4(r29)
if (PK_ERROR_CHECK_API)
{
PK_ERROR_IF(context == 0, PK_INVALID_ARGUMENT_CONTEXT_SET);
}

mtmsr(*context);
fff7b950:	7c 00 01 24 	mtmsr   r0

    //*******************exit the critical section***************
    pk_critical_section_exit(&ctx);

    //write data to the circular buffer
    for(src = bufp, index = 0;
fff7b954:	39 29 00 01 	addi    r9,r9,1
fff7b958:	7d 29 03 a6 	mtctr   r9
        index < data_size;
        index++)
    {
#ifdef APP_DEFINED_TRACE_BUFFER
        dest = &G_PK_TRACE_BUF->cb[(cb_offset + index) & PK_TRACE_CB_MASK];
fff7b95c:	80 e5 ff f8 	lwz     r7,-8(r5)

    //*******************exit the critical section***************
    pk_critical_section_exit(&ctx);

    //write data to the circular buffer
    for(src = bufp, index = 0;
fff7b960:	39 00 00 00 	li      r8,0
fff7b964:	42 40 00 28 	bdz     fff7b98c <pk_trace_binary+0xc0>
        index < data_size;
        index++)
    {
#ifdef APP_DEFINED_TRACE_BUFFER
        dest = &G_PK_TRACE_BUF->cb[(cb_offset + index) & PK_TRACE_CB_MASK];
fff7b968:	a1 47 00 1a 	lhz     r10,26(r7)
fff7b96c:	7d 28 32 14 	add     r9,r8,r6
fff7b970:	39 4a ff ff 	addi    r10,r10,-1
#else
        dest = &g_pk_trace_buf.cb[(cb_offset + index) & PK_TRACE_CB_MASK];
#endif
        *dest = *(src++);
fff7b974:	7c bf 40 ae 	lbzx    r5,r31,r8
    for(src = bufp, index = 0;
        index < data_size;
        index++)
    {
#ifdef APP_DEFINED_TRACE_BUFFER
        dest = &G_PK_TRACE_BUF->cb[(cb_offset + index) & PK_TRACE_CB_MASK];
fff7b978:	7d 29 50 38 	and     r9,r9,r10
#else
        dest = &g_pk_trace_buf.cb[(cb_offset + index) & PK_TRACE_CB_MASK];
#endif
        *dest = *(src++);
fff7b97c:	7d 27 4a 14 	add     r9,r7,r9
fff7b980:	98 a9 00 38 	stb     r5,56(r9)
    pk_critical_section_exit(&ctx);

    //write data to the circular buffer
    for(src = bufp, index = 0;
        index < data_size;
        index++)
fff7b984:	39 08 00 01 	addi    r8,r8,1
fff7b988:	4b ff ff dc 	b       fff7b964 <pk_trace_binary+0x98>
        *dest = *(src++);
    }

    //Mark the trace entry update as being completed
    footer_ptr = (PkTraceBinary*)ptr64;
    footer_ptr->parms.complete = 1;
fff7b98c:	39 20 00 01 	li      r9,1
fff7b990:	99 3d 00 02 	stb     r9,2(r29)

}
fff7b994:	80 01 00 1c 	lwz     r0,28(r1)
fff7b998:	17 81 00 08 	lvd     d28,8(r1)
fff7b99c:	7c 08 03 a6 	mtlr    r0
fff7b9a0:	17 c1 00 10 	lvd     d30,16(r1)
fff7b9a4:	38 21 00 18 	addi    r1,r1,24
fff7b9a8:	4e 80 00 20 	blr

fff7b9ac <__pk_thread_context_initialize>:
fff7b9ac:	80 c3 00 00 	lwz     r6,0(r3)
fff7b9b0:	94 c6 ff a8 	stwu    r6,-88(r6)
fff7b9b4:	38 e0 00 00 	li      r7,0
fff7b9b8:	90 e6 00 08 	stw     r7,8(r6)
fff7b9bc:	3c e0 ff f7 	lis     r7,-9
fff7b9c0:	60 e7 b7 98 	ori     r7,r7,47000
fff7b9c4:	90 e6 00 5c 	stw     r7,92(r6)
fff7b9c8:	90 a6 00 18 	stw     r5,24(r6)
fff7b9cc:	38 e0 04 04 	li      r7,1028
fff7b9d0:	90 e6 00 1c 	stw     r7,28(r6)
fff7b9d4:	38 e0 05 05 	li      r7,1285
fff7b9d8:	90 e6 00 20 	stw     r7,32(r6)
fff7b9dc:	38 e0 06 06 	li      r7,1542
fff7b9e0:	90 e6 00 24 	stw     r7,36(r6)
fff7b9e4:	38 e0 00 00 	li      r7,0
fff7b9e8:	90 e6 00 38 	stw     r7,56(r6)
fff7b9ec:	90 e6 00 3c 	stw     r7,60(r6)
fff7b9f0:	90 86 00 40 	stw     r4,64(r6)
fff7b9f4:	80 ed 01 30 	lwz     r7,304(r13)
fff7b9f8:	90 e6 00 44 	stw     r7,68(r6)
fff7b9fc:	38 e0 00 00 	li      r7,0
fff7ba00:	90 e6 00 10 	stw     r7,16(r6)
fff7ba04:	38 e0 07 07 	li      r7,1799
fff7ba08:	90 e6 00 28 	stw     r7,40(r6)
fff7ba0c:	38 e0 08 08 	li      r7,2056
fff7ba10:	90 e6 00 2c 	stw     r7,44(r6)
fff7ba14:	38 e0 09 09 	li      r7,2313
fff7ba18:	90 e6 00 30 	stw     r7,48(r6)
fff7ba1c:	38 e0 10 10 	li      r7,4112
fff7ba20:	90 e6 00 34 	stw     r7,52(r6)
fff7ba24:	38 e0 28 28 	li      r7,10280
fff7ba28:	90 e6 00 48 	stw     r7,72(r6)
fff7ba2c:	38 e0 29 29 	li      r7,10537
fff7ba30:	90 e6 00 4c 	stw     r7,76(r6)
fff7ba34:	38 e0 30 30 	li      r7,12336
fff7ba38:	90 e6 00 50 	stw     r7,80(r6)
fff7ba3c:	38 e0 31 31 	li      r7,12593
fff7ba40:	90 e6 00 54 	stw     r7,84(r6)
fff7ba44:	3c e0 80 00 	lis     r7,-32768
fff7ba48:	90 e6 00 0c 	stw     r7,12(r6)
fff7ba4c:	90 c3 00 00 	stw     r6,0(r3)
fff7ba50:	4e 80 00 20 	blr

fff7ba54 <pk_timer_create>:

int
pk_timer_create(PkTimer*         timer,
                PkTimerCallback callback,
                void*             arg)
{
fff7ba54:	94 21 ff e8 	stwu    r1,-24(r1)
fff7ba58:	7c 08 02 a6 	mflr    r0
fff7ba5c:	1b c1 00 10 	stvd    d30,16(r1)
fff7ba60:	90 01 00 1c 	stw     r0,28(r1)
fff7ba64:	1b 81 00 08 	stvd    d28,8(r1)
fff7ba68:	7c 7f 1b 78 	mr      r31,r3
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF((timer == 0), PK_INVALID_TIMER_AT_CREATE);
fff7ba6c:	06 c3 00 14 	bwz     r3,fff7ba94 <pk_timer_create+0x40>
fff7ba70:	7c be 2b 78 	mr      r30,r5
fff7ba74:	7c 9d 23 78 	mr      r29,r4
    }

    pk_deque_element_create((PkDeque*)timer);
fff7ba78:	4b ff f1 91 	bl      fff7ac08 <pk_deque_element_create>
    timer->timeout = 0;
fff7ba7c:	39 00 00 00 	li      r8,0
fff7ba80:	39 20 00 00 	li      r9,0
fff7ba84:	19 1f 00 08 	stvd    d8,8(r31)
    timer->callback = callback;
fff7ba88:	1b bf 00 10 	stvd    d29,16(r31)
    timer->arg = arg;

    return PK_OK;
fff7ba8c:	38 60 00 00 	li      r3,0
fff7ba90:	48 00 00 08 	b       fff7ba98 <pk_timer_create+0x44>
                PkTimerCallback callback,
                void*             arg)
{
    if (PK_ERROR_CHECK_API)
    {
        PK_ERROR_IF((timer == 0), PK_INVALID_TIMER_AT_CREATE);
fff7ba94:	38 60 fd fa 	li      r3,-518
    timer->timeout = 0;
    timer->callback = callback;
    timer->arg = arg;

    return PK_OK;
}
fff7ba98:	80 01 00 1c 	lwz     r0,28(r1)
fff7ba9c:	17 81 00 08 	lvd     d28,8(r1)
fff7baa0:	7c 08 03 a6 	mtlr    r0
fff7baa4:	17 c1 00 10 	lvd     d30,16(r1)
fff7baa8:	38 21 00 18 	addi    r1,r1,24
fff7baac:	4e 80 00 20 	blr

Disassembly of section .odysseysrom:

fff7bea0 <__eabi>:
// This function will be used to do any C++ handling required before doing
// any main job. Call to this function should get generated by
// compiler.

void __eabi()
{
fff7bea0:	94 21 ff f0 	stwu    r1,-16(r1)
fff7bea4:	7c 08 02 a6 	mflr    r0
    UPDATE_SROM_SBE_PROGRESS_CODE(EABI_ENTER);
fff7bea8:	38 60 00 03 	li      r3,3
// This function will be used to do any C++ handling required before doing
// any main job. Call to this function should get generated by
// compiler.

void __eabi()
{
fff7beac:	90 01 00 14 	stw     r0,20(r1)
fff7beb0:	1b c1 00 08 	stvd    d30,8(r1)
    UPDATE_SROM_SBE_PROGRESS_CODE(EABI_ENTER);
fff7beb4:	4b ff be e5 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>
fff7beb8:	3d 00 ff f8 	lis     r8,-8
        // Copy initialised data(.data + .sdata) section, data section will
        // start after the end of text section.
        uint32_t *sourceAddr = &_code_end;
        uint32_t *destinationAddr = &_sram_start;
        // Data section will end before the start of bss section.
        while ((uint32_t)destinationAddr < (uint32_t)&_bss_start)
fff7bebc:	3d 20 ff f8 	lis     r9,-8
fff7bec0:	39 40 00 00 	li      r10,0
fff7bec4:	39 08 00 00 	addi    r8,r8,0
fff7bec8:	39 29 03 48 	addi    r9,r9,840
        {
            *destinationAddr++ = *sourceAddr++;
fff7becc:	3c c0 ff f8 	lis     r6,-8
fff7bed0:	7c ea 42 14 	add     r7,r10,r8
        // Copy initialised data(.data + .sdata) section, data section will
        // start after the end of text section.
        uint32_t *sourceAddr = &_code_end;
        uint32_t *destinationAddr = &_sram_start;
        // Data section will end before the start of bss section.
        while ((uint32_t)destinationAddr < (uint32_t)&_bss_start)
fff7bed4:	05 29 38 0c 	cmplwble r9,r7,fff7beec <__eabi+0x4c>
        {
            *destinationAddr++ = *sourceAddr++;
fff7bed8:	38 e6 d9 80 	addi    r7,r6,-9856
fff7bedc:	7c e7 50 2e 	lwzx    r7,r7,r10
fff7bee0:	7c e8 51 2e 	stwx    r7,r8,r10
fff7bee4:	39 4a 00 04 	addi    r10,r10,4
fff7bee8:	4b ff ff e8 	b       fff7bed0 <__eabi+0x30>
        }

        // Initialise bss(.bss and .sbss) section
        destinationAddr = &_bss_start;
        while ((uint32_t)destinationAddr < (uint32_t)&_bss_end)
fff7beec:	3d 40 ff f8 	lis     r10,-8
fff7bef0:	39 4a 66 70 	addi    r10,r10,26224
        {
            *destinationAddr = 0;
fff7bef4:	39 00 00 00 	li      r8,0
            *destinationAddr++ = *sourceAddr++;
        }

        // Initialise bss(.bss and .sbss) section
        destinationAddr = &_bss_start;
        while ((uint32_t)destinationAddr < (uint32_t)&_bss_end)
fff7bef8:	05 09 50 08 	cmplwbge r9,r10,fff7bf08 <__eabi+0x68>
        {
            *destinationAddr = 0;
fff7befc:	91 09 00 00 	stw     r8,0(r9)
            destinationAddr++;
fff7bf00:	39 29 00 04 	addi    r9,r9,4
fff7bf04:	4b ff ff f4 	b       fff7bef8 <__eabi+0x58>
fff7bf08:	3f e0 ff f8 	lis     r31,-8
        }
        // Call global constructors
        void(**ctors)() = &ctor_start_address;
        while( ctors != &ctor_end_address)
fff7bf0c:	3f c0 ff f8 	lis     r30,-8
fff7bf10:	3b ff d9 78 	addi    r31,r31,-9864
fff7bf14:	3b de d9 80 	addi    r30,r30,-9856
fff7bf18:	04 df f0 0c 	cmpwbeq r31,r30,fff7bf30 <__eabi+0x90>
        {
            (*ctors)();
fff7bf1c:	81 3f 00 00 	lwz     r9,0(r31)
            ctors++;
fff7bf20:	3b ff 00 04 	addi    r31,r31,4
        }
        // Call global constructors
        void(**ctors)() = &ctor_start_address;
        while( ctors != &ctor_end_address)
        {
            (*ctors)();
fff7bf24:	7d 29 03 a6 	mtctr   r9
fff7bf28:	4e 80 04 21 	bctrl
fff7bf2c:	4b ff ff ec 	b       fff7bf18 <__eabi+0x78>
            ctors++;
        }
    } while (false);

    UPDATE_SROM_SBE_PROGRESS_CODE(EABI_EXIT);
}
fff7bf30:	80 01 00 14 	lwz     r0,20(r1)
fff7bf34:	17 c1 00 08 	lvd     d30,8(r1)
fff7bf38:	7c 08 03 a6 	mtlr    r0
            (*ctors)();
            ctors++;
        }
    } while (false);

    UPDATE_SROM_SBE_PROGRESS_CODE(EABI_EXIT);
fff7bf3c:	38 60 00 04 	li      r3,4
}
fff7bf40:	38 21 00 10 	addi    r1,r1,16
            (*ctors)();
            ctors++;
        }
    } while (false);

    UPDATE_SROM_SBE_PROGRESS_CODE(EABI_EXIT);
fff7bf44:	4b ff be 54 	b       fff77d98 <_ZN3SBE18updateProgressCodeEh>

fff7bf48 <main>:

////////////////////////////////////////////////////////////////
// @brief - main : ODYSSEY SROM Application main
////////////////////////////////////////////////////////////////
int  main(int argc, char **argv)
{
fff7bf48:	94 21 ff f8 	stwu    r1,-8(r1)
fff7bf4c:	7c 08 02 a6 	mflr    r0
fff7bf50:	90 01 00 0c 	stw     r0,12(r1)
fff7bf54:	4b ff ff 4d 	bl      fff7bea0 <__eabi>
    #define SBE_FUNC " SROM SBE_main "

    UPDATE_SROM_SBE_PROGRESS_CODE(ENTERED_SROM_MAIN);
fff7bf58:	38 60 00 05 	li      r3,5
fff7bf5c:	4b ff be 3d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    int rc = 0;

    // Update metadata
    g_metadata_ptr = (uint32_t)&g_image_metadata;
fff7bf60:	3d 20 ff f7 	lis     r9,-9
fff7bf64:	39 29 01 64 	addi    r9,r9,356
fff7bf68:	3d 40 00 00 	lis     r10,0
                          timebase_frequency_hz
#ifdef APP_DEFINED_TRACE_BUFFER
                          , pk_trace_buffer
                          , pk_trace_size
#endif
                         ));
fff7bf6c:	3c 60 ff f8 	lis     r3,-8
fff7bf70:	3c e0 23 c3 	lis     r7,9155
fff7bf74:	91 2a ff fc 	stw     r9,-4(r10)
fff7bf78:	38 63 63 b0 	addi    r3,r3,25520
fff7bf7c:	38 80 02 00 	li      r4,512
fff7bf80:	38 a0 00 00 	li      r5,0
fff7bf84:	38 c0 00 00 	li      r6,0
fff7bf88:	60 e7 46 00 	ori     r7,r7,17920
fff7bf8c:	39 00 ef c0 	li      r8,-4160
fff7bf90:	39 20 08 00 	li      r9,2048
fff7bf94:	4b ff ec f1 	bl      fff7ac84 <_pk_initialize>
                SROM_TRACE_START_OFFSET,
                SROM_PK_TRACE_SIZE);

        SBE_ENTER(SBE_FUNC);

        if (rc)
fff7bf98:	06 c3 00 08 	bwz     r3,fff7bfa8 <main+0x60>
        {
            SBE_ERROR(SBE_FUNC "PK Initialization failed for SROM image");
fff7bf9c:	3c 60 73 d4 	lis     r3,29652
fff7bfa0:	4b ff f2 3d 	bl      fff7b1dc <pk_trace_tiny>
            break;
fff7bfa4:	48 00 00 74 	b       fff7c018 <main+0xd0>
        }

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_PK_INIT);
fff7bfa8:	38 60 00 06 	li      r3,6
fff7bfac:	4b ff bd ed 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        SBE_INFO(SBE_FUNC "Completed PK initialization for SROM Image");
fff7bfb0:	3c 60 86 e1 	lis     r3,-31007
fff7bfb4:	4b ff f2 29 	bl      fff7b1dc <pk_trace_tiny>
        rc = createAndResumeThreadHelper(&srom_thread,
                sromthreadroutine,
                (void *)0,
                (PkAddress)sromSecureBoot_stack,
                SROM_THREAD_SECURE_BOOT_STACK_SIZE,
                THREAD_PRIORITY_5);
fff7bfb8:	3c 60 ff f8 	lis     r3,-8
fff7bfbc:	3c 80 ff f8 	lis     r4,-8
fff7bfc0:	3c c0 ff f8 	lis     r6,-8
fff7bfc4:	38 a0 00 00 	li      r5,0
fff7bfc8:	38 63 63 80 	addi    r3,r3,25472
fff7bfcc:	38 84 c2 ac 	addi    r4,r4,-15700
fff7bfd0:	38 c6 03 80 	addi    r6,r6,896
fff7bfd4:	38 e0 60 00 	li      r7,24576
fff7bfd8:	39 00 00 05 	li      r8,5
fff7bfdc:	4b ff c2 5d 	bl      fff78238 <_Z27createAndResumeThreadHelperP8PkThreadPFvPvES1_mj19sbeThreadPriorities>
fff7bfe0:	7c 65 1b 78 	mr      r5,r3
        if (rc)
fff7bfe4:	06 c3 00 10 	bwz     r3,fff7c004 <main+0xbc>
        {
            SBE_ERROR(SBE_FUNC "Initialize SROM secure boot thread failed with rc 0x%08X", rc);
fff7bfe8:	3c 60 33 99 	lis     r3,13209
fff7bfec:	60 63 00 01 	ori     r3,r3,1
fff7bff0:	38 c0 00 00 	li      r6,0
fff7bff4:	38 e0 00 00 	li      r7,0
fff7bff8:	39 00 00 00 	li      r8,0
fff7bffc:	4b ff f7 dd 	bl      fff7b7d8 <pk_trace_big>
            break;
fff7c000:	48 00 00 18 	b       fff7c018 <main+0xd0>
        }

        SBE_INFO(SBE_FUNC "sromSecureBoot_thread thread initilised");
fff7c004:	3c 60 52 30 	lis     r3,21040
fff7c008:	4b ff f1 d5 	bl      fff7b1dc <pk_trace_tiny>

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_THREAD_CREATION);
fff7c00c:	38 60 00 07 	li      r3,7
fff7c010:	4b ff bd 89 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        pk_start_threads();
fff7c014:	4b ff f6 c1 	bl      fff7b6d4 <pk_start_threads>

    }while(false);

    // Halt if exited from the loop incase of error
    pk_halt();
fff7c018:	4b ff e9 6d 	bl      fff7a984 <pk_halt>

fff7c01c <_ZN24truncatedHashMeasurement20getSha3TruncatedHashEmmmmmmmmmmmm>:
     * @param regAddr10 Register address to read truncated hash[36-39]
     * @param regAddr11 Register address to read truncated hash[40-43]
     * @param regAddr12 Register address to read truncated hash[44-47]
     */

    void getSha3TruncatedHash(uint32_t regAddr1,uint32_t regAddr2,
fff7c01c:	94 21 ff c8 	stwu    r1,-56(r1)
fff7c020:	7c 08 02 a6 	mflr    r0
fff7c024:	1b c1 00 30 	stvd    d30,48(r1)
fff7c028:	7c 7f 1b 78 	mr      r31,r3
                              uint32_t regAddr7,uint32_t regAddr8,
                              uint32_t regAddr9,uint32_t regAddr10,
                              uint32_t regAddr11,uint32_t regAddr12)
    {
        uint64_t data;
        getscom_abs(regAddr1, &data);
fff7c02c:	7c 83 23 78 	mr      r3,r4
fff7c030:	38 81 00 08 	addi    r4,r1,8
     * @param regAddr10 Register address to read truncated hash[36-39]
     * @param regAddr11 Register address to read truncated hash[40-43]
     * @param regAddr12 Register address to read truncated hash[44-47]
     */

    void getSha3TruncatedHash(uint32_t regAddr1,uint32_t regAddr2,
fff7c034:	90 01 00 3c 	stw     r0,60(r1)
fff7c038:	7d 5e 53 78 	mr      r30,r10
                              uint32_t regAddr7,uint32_t regAddr8,
                              uint32_t regAddr9,uint32_t regAddr10,
                              uint32_t regAddr11,uint32_t regAddr12)
    {
        uint64_t data;
        getscom_abs(regAddr1, &data);
fff7c03c:	90 e1 00 20 	stw     r7,32(r1)
     * @param regAddr10 Register address to read truncated hash[36-39]
     * @param regAddr11 Register address to read truncated hash[40-43]
     * @param regAddr12 Register address to read truncated hash[44-47]
     */

    void getSha3TruncatedHash(uint32_t regAddr1,uint32_t regAddr2,
fff7c040:	1b 81 00 28 	stvd    d28,40(r1)
                              uint32_t regAddr7,uint32_t regAddr8,
                              uint32_t regAddr9,uint32_t regAddr10,
                              uint32_t regAddr11,uint32_t regAddr12)
    {
        uint64_t data;
        getscom_abs(regAddr1, &data);
fff7c044:	90 c1 00 1c 	stw     r6,28(r1)
     * @param regAddr10 Register address to read truncated hash[36-39]
     * @param regAddr11 Register address to read truncated hash[40-43]
     * @param regAddr12 Register address to read truncated hash[44-47]
     */

    void getSha3TruncatedHash(uint32_t regAddr1,uint32_t regAddr2,
fff7c048:	7d 1c 43 78 	mr      r28,r8
fff7c04c:	7d 3d 4b 78 	mr      r29,r9
                              uint32_t regAddr7,uint32_t regAddr8,
                              uint32_t regAddr9,uint32_t regAddr10,
                              uint32_t regAddr11,uint32_t regAddr12)
    {
        uint64_t data;
        getscom_abs(regAddr1, &data);
fff7c050:	90 a1 00 18 	stw     r5,24(r1)
fff7c054:	4b ff e1 d9 	bl      fff7a22c <getscom_abs>
        hash[0] = data >> 32;
fff7c058:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr2, &data);
fff7c05c:	38 81 00 08 	addi    r4,r1,8
                              uint32_t regAddr9,uint32_t regAddr10,
                              uint32_t regAddr11,uint32_t regAddr12)
    {
        uint64_t data;
        getscom_abs(regAddr1, &data);
        hash[0] = data >> 32;
fff7c060:	91 3f 00 00 	stw     r9,0(r31)
        getscom_abs(regAddr2, &data);
fff7c064:	80 a1 00 18 	lwz     r5,24(r1)
fff7c068:	7c a3 2b 78 	mr      r3,r5
fff7c06c:	4b ff e1 c1 	bl      fff7a22c <getscom_abs>
        hash[1] = data >> 32;
fff7c070:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr3, &data);
fff7c074:	38 81 00 08 	addi    r4,r1,8
    {
        uint64_t data;
        getscom_abs(regAddr1, &data);
        hash[0] = data >> 32;
        getscom_abs(regAddr2, &data);
        hash[1] = data >> 32;
fff7c078:	91 3f 00 04 	stw     r9,4(r31)
        getscom_abs(regAddr3, &data);
fff7c07c:	80 c1 00 1c 	lwz     r6,28(r1)
fff7c080:	7c c3 33 78 	mr      r3,r6
fff7c084:	4b ff e1 a9 	bl      fff7a22c <getscom_abs>
        hash[2] = data >> 32;
fff7c088:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr4, &data);
fff7c08c:	38 81 00 08 	addi    r4,r1,8
        getscom_abs(regAddr1, &data);
        hash[0] = data >> 32;
        getscom_abs(regAddr2, &data);
        hash[1] = data >> 32;
        getscom_abs(regAddr3, &data);
        hash[2] = data >> 32;
fff7c090:	91 3f 00 08 	stw     r9,8(r31)
        getscom_abs(regAddr4, &data);
fff7c094:	80 e1 00 20 	lwz     r7,32(r1)
fff7c098:	7c e3 3b 78 	mr      r3,r7
fff7c09c:	4b ff e1 91 	bl      fff7a22c <getscom_abs>
        hash[3] = data >> 32;
fff7c0a0:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr5, &data);
fff7c0a4:	38 81 00 08 	addi    r4,r1,8
        getscom_abs(regAddr2, &data);
        hash[1] = data >> 32;
        getscom_abs(regAddr3, &data);
        hash[2] = data >> 32;
        getscom_abs(regAddr4, &data);
        hash[3] = data >> 32;
fff7c0a8:	91 3f 00 0c 	stw     r9,12(r31)
        getscom_abs(regAddr5, &data);
fff7c0ac:	7f 83 e3 78 	mr      r3,r28
fff7c0b0:	4b ff e1 7d 	bl      fff7a22c <getscom_abs>
        hash[4] = data >> 32;
fff7c0b4:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr6, &data);
fff7c0b8:	38 81 00 08 	addi    r4,r1,8
        getscom_abs(regAddr3, &data);
        hash[2] = data >> 32;
        getscom_abs(regAddr4, &data);
        hash[3] = data >> 32;
        getscom_abs(regAddr5, &data);
        hash[4] = data >> 32;
fff7c0bc:	91 3f 00 10 	stw     r9,16(r31)
        getscom_abs(regAddr6, &data);
fff7c0c0:	7f a3 eb 78 	mr      r3,r29
fff7c0c4:	4b ff e1 69 	bl      fff7a22c <getscom_abs>
        hash[5] = data >> 32;
fff7c0c8:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr7, &data);
fff7c0cc:	38 81 00 08 	addi    r4,r1,8
        getscom_abs(regAddr4, &data);
        hash[3] = data >> 32;
        getscom_abs(regAddr5, &data);
        hash[4] = data >> 32;
        getscom_abs(regAddr6, &data);
        hash[5] = data >> 32;
fff7c0d0:	91 3f 00 14 	stw     r9,20(r31)
        getscom_abs(regAddr7, &data);
fff7c0d4:	7f c3 f3 78 	mr      r3,r30
fff7c0d8:	4b ff e1 55 	bl      fff7a22c <getscom_abs>
        hash[6] = data >> 32;
fff7c0dc:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr8, &data);
fff7c0e0:	80 61 00 40 	lwz     r3,64(r1)
        getscom_abs(regAddr5, &data);
        hash[4] = data >> 32;
        getscom_abs(regAddr6, &data);
        hash[5] = data >> 32;
        getscom_abs(regAddr7, &data);
        hash[6] = data >> 32;
fff7c0e4:	91 3f 00 18 	stw     r9,24(r31)
        getscom_abs(regAddr8, &data);
fff7c0e8:	38 81 00 08 	addi    r4,r1,8
fff7c0ec:	4b ff e1 41 	bl      fff7a22c <getscom_abs>
        hash[7] = data >> 32;
fff7c0f0:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr9, &data);
fff7c0f4:	80 61 00 44 	lwz     r3,68(r1)
        getscom_abs(regAddr6, &data);
        hash[5] = data >> 32;
        getscom_abs(regAddr7, &data);
        hash[6] = data >> 32;
        getscom_abs(regAddr8, &data);
        hash[7] = data >> 32;
fff7c0f8:	91 3f 00 1c 	stw     r9,28(r31)
        getscom_abs(regAddr9, &data);
fff7c0fc:	38 81 00 08 	addi    r4,r1,8
fff7c100:	4b ff e1 2d 	bl      fff7a22c <getscom_abs>
        hash[8] = data >> 32;
fff7c104:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr10,&data);
fff7c108:	80 61 00 48 	lwz     r3,72(r1)
        getscom_abs(regAddr7, &data);
        hash[6] = data >> 32;
        getscom_abs(regAddr8, &data);
        hash[7] = data >> 32;
        getscom_abs(regAddr9, &data);
        hash[8] = data >> 32;
fff7c10c:	91 3f 00 20 	stw     r9,32(r31)
        getscom_abs(regAddr10,&data);
fff7c110:	38 81 00 08 	addi    r4,r1,8
fff7c114:	4b ff e1 19 	bl      fff7a22c <getscom_abs>
        hash[9] = data >> 32;
fff7c118:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr11,&data);
fff7c11c:	80 61 00 4c 	lwz     r3,76(r1)
        getscom_abs(regAddr8, &data);
        hash[7] = data >> 32;
        getscom_abs(regAddr9, &data);
        hash[8] = data >> 32;
        getscom_abs(regAddr10,&data);
        hash[9] = data >> 32;
fff7c120:	91 3f 00 24 	stw     r9,36(r31)
        getscom_abs(regAddr11,&data);
fff7c124:	38 81 00 08 	addi    r4,r1,8
fff7c128:	4b ff e1 05 	bl      fff7a22c <getscom_abs>
        hash[10] = data >> 32;
fff7c12c:	81 21 00 08 	lwz     r9,8(r1)
        getscom_abs(regAddr12,&data);
fff7c130:	80 61 00 50 	lwz     r3,80(r1)
        getscom_abs(regAddr9, &data);
        hash[8] = data >> 32;
        getscom_abs(regAddr10,&data);
        hash[9] = data >> 32;
        getscom_abs(regAddr11,&data);
        hash[10] = data >> 32;
fff7c134:	91 3f 00 28 	stw     r9,40(r31)
        getscom_abs(regAddr12,&data);
fff7c138:	38 81 00 08 	addi    r4,r1,8
fff7c13c:	4b ff e0 f1 	bl      fff7a22c <getscom_abs>
        hash[11] = data >> 32;
fff7c140:	81 21 00 08 	lwz     r9,8(r1)
fff7c144:	91 3f 00 2c 	stw     r9,44(r31)
    }
fff7c148:	80 01 00 3c 	lwz     r0,60(r1)
fff7c14c:	17 81 00 28 	lvd     d28,40(r1)
fff7c150:	7c 08 03 a6 	mtlr    r0
fff7c154:	17 c1 00 30 	lvd     d30,48(r1)
fff7c158:	38 21 00 38 	addi    r1,r1,56
fff7c15c:	4e 80 00 20 	blr

fff7c160 <_ZN14sha3HashOtprom11getSha3HashEmmmmmmmm>:
     * @param regAddr5 Register address storing SHA3  hash[32-39]
     * @param regAddr6 Register address storing SHA3  hash[40-47]
     * @param regAddr7 Register address storing SHA3  hash[48-55]
     * @param regAddr8 Register address storing SHA3  hash[56-63]
     */
    void getSha3Hash(uint32_t regAddr1,uint32_t regAddr2,
fff7c160:	94 21 ff d8 	stwu    r1,-40(r1)
fff7c164:	7c 08 02 a6 	mflr    r0
fff7c168:	1b c1 00 20 	stvd    d30,32(r1)
fff7c16c:	7c 7f 1b 78 	mr      r31,r3
                     uint32_t regAddr3,uint32_t regAddr4,
                     uint32_t regAddr5,uint32_t regAddr6,
                     uint32_t regAddr7,uint32_t regAddr8)
    {
        getscom_abs(regAddr1, &hashValOtpromRead.hash[0]);
fff7c170:	7c 83 23 78 	mr      r3,r4
fff7c174:	7f e4 fb 78 	mr      r4,r31
     * @param regAddr5 Register address storing SHA3  hash[32-39]
     * @param regAddr6 Register address storing SHA3  hash[40-47]
     * @param regAddr7 Register address storing SHA3  hash[48-55]
     * @param regAddr8 Register address storing SHA3  hash[56-63]
     */
    void getSha3Hash(uint32_t regAddr1,uint32_t regAddr2,
fff7c178:	90 01 00 2c 	stw     r0,44(r1)
                     uint32_t regAddr3,uint32_t regAddr4,
                     uint32_t regAddr5,uint32_t regAddr6,
                     uint32_t regAddr7,uint32_t regAddr8)
    {
        getscom_abs(regAddr1, &hashValOtpromRead.hash[0]);
fff7c17c:	18 e1 00 10 	stvd    d7,16(r1)
     * @param regAddr5 Register address storing SHA3  hash[32-39]
     * @param regAddr6 Register address storing SHA3  hash[40-47]
     * @param regAddr7 Register address storing SHA3  hash[48-55]
     * @param regAddr8 Register address storing SHA3  hash[56-63]
     */
    void getSha3Hash(uint32_t regAddr1,uint32_t regAddr2,
fff7c180:	1b 81 00 18 	stvd    d28,24(r1)
fff7c184:	83 c1 00 30 	lwz     r30,48(r1)
fff7c188:	7d 3c 4b 78 	mr      r28,r9
fff7c18c:	7d 5d 53 78 	mr      r29,r10
                     uint32_t regAddr3,uint32_t regAddr4,
                     uint32_t regAddr5,uint32_t regAddr6,
                     uint32_t regAddr7,uint32_t regAddr8)
    {
        getscom_abs(regAddr1, &hashValOtpromRead.hash[0]);
fff7c190:	18 a1 00 08 	stvd    d5,8(r1)
fff7c194:	4b ff e0 99 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr2, &hashValOtpromRead.hash[1]);
fff7c198:	80 a1 00 08 	lwz     r5,8(r1)
fff7c19c:	38 9f 00 08 	addi    r4,r31,8
fff7c1a0:	7c a3 2b 78 	mr      r3,r5
fff7c1a4:	4b ff e0 89 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr3, &hashValOtpromRead.hash[2]);
fff7c1a8:	80 c1 00 0c 	lwz     r6,12(r1)
fff7c1ac:	38 9f 00 10 	addi    r4,r31,16
fff7c1b0:	7c c3 33 78 	mr      r3,r6
fff7c1b4:	4b ff e0 79 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr4, &hashValOtpromRead.hash[3]);
fff7c1b8:	80 e1 00 10 	lwz     r7,16(r1)
fff7c1bc:	38 9f 00 18 	addi    r4,r31,24
fff7c1c0:	7c e3 3b 78 	mr      r3,r7
fff7c1c4:	4b ff e0 69 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr5, &hashValOtpromRead.hash[4]);
fff7c1c8:	81 01 00 14 	lwz     r8,20(r1)
fff7c1cc:	38 9f 00 20 	addi    r4,r31,32
fff7c1d0:	7d 03 43 78 	mr      r3,r8
fff7c1d4:	4b ff e0 59 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr6, &hashValOtpromRead.hash[5]);
fff7c1d8:	38 9f 00 28 	addi    r4,r31,40
fff7c1dc:	7f 83 e3 78 	mr      r3,r28
fff7c1e0:	4b ff e0 4d 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr7, &hashValOtpromRead.hash[6]);
fff7c1e4:	38 9f 00 30 	addi    r4,r31,48
fff7c1e8:	7f a3 eb 78 	mr      r3,r29
fff7c1ec:	4b ff e0 41 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr8, &hashValOtpromRead.hash[7]);
    }
fff7c1f0:	80 01 00 2c 	lwz     r0,44(r1)
fff7c1f4:	17 81 00 18 	lvd     d28,24(r1)
fff7c1f8:	7c 08 03 a6 	mtlr    r0
        getscom_abs(regAddr3, &hashValOtpromRead.hash[2]);
        getscom_abs(regAddr4, &hashValOtpromRead.hash[3]);
        getscom_abs(regAddr5, &hashValOtpromRead.hash[4]);
        getscom_abs(regAddr6, &hashValOtpromRead.hash[5]);
        getscom_abs(regAddr7, &hashValOtpromRead.hash[6]);
        getscom_abs(regAddr8, &hashValOtpromRead.hash[7]);
fff7c1fc:	7f c3 f3 78 	mr      r3,r30
fff7c200:	38 9f 00 38 	addi    r4,r31,56
    }
fff7c204:	17 c1 00 20 	lvd     d30,32(r1)
fff7c208:	38 21 00 28 	addi    r1,r1,40
        getscom_abs(regAddr3, &hashValOtpromRead.hash[2]);
        getscom_abs(regAddr4, &hashValOtpromRead.hash[3]);
        getscom_abs(regAddr5, &hashValOtpromRead.hash[4]);
        getscom_abs(regAddr6, &hashValOtpromRead.hash[5]);
        getscom_abs(regAddr7, &hashValOtpromRead.hash[6]);
        getscom_abs(regAddr8, &hashValOtpromRead.hash[7]);
fff7c20c:	4b ff e0 20 	b       fff7a22c <getscom_abs>

fff7c210 <_ZN22secureBootCtrlSettings25getSecureBootCtrlSettingsEm>:
    /**
     * @brief Read the Secure Boot control data from measurement register
     *
     * @param measurementRegAddr Measurement Register Address
     */
    void getSecureBootCtrlSettings(uint32_t measurementRegAddr)
fff7c210:	94 21 ff e0 	stwu    r1,-32(r1)
fff7c214:	7c 08 02 a6 	mflr    r0
    {
        uint64_t data = 0x00;
fff7c218:	7c 29 0b 78 	mr      r9,r1
fff7c21c:	38 c0 00 00 	li      r6,0
fff7c220:	38 e0 00 00 	li      r7,0
    /**
     * @brief Read the Secure Boot control data from measurement register
     *
     * @param measurementRegAddr Measurement Register Address
     */
    void getSecureBootCtrlSettings(uint32_t measurementRegAddr)
fff7c224:	1b c1 00 18 	stvd    d30,24(r1)
fff7c228:	90 01 00 24 	stw     r0,36(r1)
    {
        uint64_t data = 0x00;
fff7c22c:	58 c9 00 08 	stvdu   d6,8(r9)
    /**
     * @brief Read the Secure Boot control data from measurement register
     *
     * @param measurementRegAddr Measurement Register Address
     */
    void getSecureBootCtrlSettings(uint32_t measurementRegAddr)
fff7c230:	7c 7f 1b 78 	mr      r31,r3
    {
        uint64_t data = 0x00;
        getscom_abs(measurementRegAddr, &data);
fff7c234:	7c 83 23 78 	mr      r3,r4
fff7c238:	7d 24 4b 78 	mr      r4,r9
fff7c23c:	4b ff df f1 	bl      fff7a22c <getscom_abs>
        secureBootControl = data >> 32;
fff7c240:	81 21 00 08 	lwz     r9,8(r1)
fff7c244:	91 3f 00 00 	stw     r9,0(r31)
    }
fff7c248:	80 01 00 24 	lwz     r0,36(r1)
fff7c24c:	17 c1 00 18 	lvd     d30,24(r1)
fff7c250:	7c 08 03 a6 	mtlr    r0
fff7c254:	38 21 00 20 	addi    r1,r1,32
fff7c258:	4e 80 00 20 	blr

fff7c25c <_ZN14sha3HashOtpromC1Ev>:

/**
 * @brief Union to store sha3 hash read from OTPROM reg's
 *
 */
typedef union sha3HashOtprom
fff7c25c:	94 21 ff f8 	stwu    r1,-8(r1)
fff7c260:	7c 08 02 a6 	mflr    r0
fff7c264:	38 80 00 00 	li      r4,0
fff7c268:	38 a0 00 40 	li      r5,64
fff7c26c:	90 01 00 0c 	stw     r0,12(r1)
fff7c270:	4b ff e0 75 	bl      fff7a2e4 <memset>
fff7c274:	80 01 00 0c 	lwz     r0,12(r1)
fff7c278:	7c 08 03 a6 	mtlr    r0
fff7c27c:	38 21 00 08 	addi    r1,r1,8
fff7c280:	4e 80 00 20 	blr

fff7c284 <_ZN24truncatedHashMeasurementC1Ev>:
/**
 * @brief Union to store sha3 truncated hash that needs to be written into
 *        measurement reg's
 *
 */
typedef union truncatedHashMeasurement
fff7c284:	94 21 ff f8 	stwu    r1,-8(r1)
fff7c288:	7c 08 02 a6 	mflr    r0
fff7c28c:	38 80 00 00 	li      r4,0
fff7c290:	38 a0 00 30 	li      r5,48
fff7c294:	90 01 00 0c 	stw     r0,12(r1)
fff7c298:	4b ff e0 4d 	bl      fff7a2e4 <memset>
fff7c29c:	80 01 00 0c 	lwz     r0,12(r1)
fff7c2a0:	7c 08 03 a6 	mtlr    r0
fff7c2a4:	38 21 00 08 	addi    r1,r1,8
fff7c2a8:	4e 80 00 20 	blr

fff7c2ac <_Z17sromthreadroutinePv>:

// SROM secure boot control settings
secureBootCtrlSettings_t sromSecureBootCtrlSettings;

void sromthreadroutine(void *i_pArg)
{
fff7c2ac:	94 21 fc 90 	stwu    r1,-880(r1)
fff7c2b0:	7c 08 02 a6 	mflr    r0
fff7c2b4:	1b c1 03 68 	stvd    d30,872(r1)
    SBE_ENTER(SBE_FUNC);

    do
    {
        // Input for Secure Hdr verification
        shvReq_t shvReq;
fff7c2b8:	38 61 01 68 	addi    r3,r1,360
fff7c2bc:	38 80 00 00 	li      r4,0
fff7c2c0:	38 a0 00 48 	li      r5,72

        //LFR Reg
        sbe_local_LFR lfrReg;

        //Read LFR Reg
        PPE_LVD(scomt::ppe_pc::TP_TPCHIP_PIB_SBE_SBEPRV_LCL_LFR_SCRATCH_RW, lfrReg);
fff7c2c4:	3f c0 c0 00 	lis     r30,-16384

// SROM secure boot control settings
secureBootCtrlSettings_t sromSecureBootCtrlSettings;

void sromthreadroutine(void *i_pArg)
{
fff7c2c8:	90 01 03 74 	stw     r0,884(r1)
fff7c2cc:	1b 81 03 60 	stvd    d28,864(r1)

        //LFR Reg
        sbe_local_LFR lfrReg;

        //Read LFR Reg
        PPE_LVD(scomt::ppe_pc::TP_TPCHIP_PIB_SBE_SBEPRV_LCL_LFR_SCRATCH_RW, lfrReg);
fff7c2d0:	63 de 20 40 	ori     r30,r30,8256
    SBE_ENTER(SBE_FUNC);

    do
    {
        // Input for Secure Hdr verification
        shvReq_t shvReq;
fff7c2d4:	4b ff e0 11 	bl      fff7a2e4 <memset>

        //LFR Reg
        sbe_local_LFR lfrReg;

        //Read LFR Reg
        PPE_LVD(scomt::ppe_pc::TP_TPCHIP_PIB_SBE_SBEPRV_LCL_LFR_SCRATCH_RW, lfrReg);
fff7c2d8:	17 de 00 00 	lvd     d30,0(r30)

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_READING_LFR);
fff7c2dc:	38 60 00 08 	li      r3,8

        //LFR Reg
        sbe_local_LFR lfrReg;

        //Read LFR Reg
        PPE_LVD(scomt::ppe_pc::TP_TPCHIP_PIB_SBE_SBEPRV_LCL_LFR_SCRATCH_RW, lfrReg);
fff7c2e0:	57 dc 77 be 	rlwinm  r28,r30,14,30,31

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_READING_LFR);
fff7c2e4:	4b ff ba b5 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        // Get the partition start offset
        uint32_t partitionStartAddress = getAbsPartitionAddr(lfrReg.boot_selection);
fff7c2e8:	3b a0 00 00 	li      r29,0
fff7c2ec:	06 dc 18 0a 	cmpwibeq r28,3,fff7c300 <_Z17sromthreadroutinePv+0x54>
fff7c2f0:	3d 40 ff f8 	lis     r10,-8
fff7c2f4:	57 89 10 3a 	rlwinm  r9,r28,2,0,29
fff7c2f8:	39 4a cb 00 	addi    r10,r10,-13568
fff7c2fc:	7f aa 48 2e 	lwzx    r29,r10,r9
        SBE_INFO(SBE_FUNC "Partition start Address is : 0x%08x, Partition selected is : 0x%02x",
                   partitionStartAddress,(uint8_t)lfrReg.boot_selection);
fff7c300:	3c 60 8e d4 	lis     r3,-28972
fff7c304:	7f a5 eb 78 	mr      r5,r29
fff7c308:	7f 86 e3 78 	mr      r6,r28
fff7c30c:	38 e0 00 00 	li      r7,0
fff7c310:	39 00 00 00 	li      r8,0
fff7c314:	60 63 00 02 	ori     r3,r3,2
fff7c318:	4b ff f4 c1 	bl      fff7b7d8 <pk_trace_big>
         *
         * @param[in] i_partitionAddress Partition address to update from.
         */
        PakWrapper(void* i_partitionAddress) :
                    iv_fileArchive(i_partitionAddress),
                    fileArchiveEntry()
fff7c31c:	38 80 00 00 	li      r4,0
fff7c320:	38 a0 00 10 	li      r5,16
fff7c324:	38 61 03 24 	addi    r3,r1,804
        /**
         * @brief Initialize a file archive from a known start address
         *
         * @param[in] i_address Location of the beginning of the archive in addressable memory
         */
        FileArchive(void* i_address) : iv_firstFile(i_address) {};
fff7c328:	93 a1 03 20 	stw     r29,800(r1)
fff7c32c:	4b ff df b9 	bl      fff7a2e4 <memset>

        PakWrapper pak((void *)partitionStartAddress);

        //Load the secure container into pibmem
        pakRc = pak.read_file(secure_hdr_file_name, secureContainer, SECURE_HEADER_SIZE, NULL, &shvReq.containerSize);
fff7c330:	3c 80 ff f8 	lis     r4,-8
fff7c334:	3c a0 ff fb 	lis     r5,-5
fff7c338:	38 61 03 20 	addi    r3,r1,800
fff7c33c:	38 84 cb 0c 	addi    r4,r4,-13556
fff7c340:	60 a5 48 00 	ori     r5,r5,18432
fff7c344:	38 c0 3c 00 	li      r6,15360
fff7c348:	38 e0 00 00 	li      r7,0
fff7c34c:	39 01 01 6c 	addi    r8,r1,364
fff7c350:	48 00 07 dd 	bl      fff7cb2c <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm>
fff7c354:	7c 7d 1b 78 	mr      r29,r3
        if(pakRc != ARC_OPERATION_SUCCESSFUL)
fff7c358:	06 c3 00 0c 	bwz     r3,fff7c370 <_Z17sromthreadroutinePv+0xc4>
        {
            SBE_ERROR(SBE_FUNC "Failed to read secure header");
fff7c35c:	3c 60 60 d4 	lis     r3,24788
fff7c360:	4b ff ee 7d 	bl      fff7b1dc <pk_trace_tiny>
            SBE::updateErrorCodeAndHalt(FILE_RC_SECURE_HEADER_FILE_READ_BASE_ERROR + pakRc);
fff7c364:	38 7d 05 10 	addi    r3,r29,1296
fff7c368:	54 63 04 3e 	clrlwi  r3,r3,16
fff7c36c:	4b ff b9 51 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
        }

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_LOADING_SECURE_HEADER_INTO_PIB);
fff7c370:	38 60 00 09 	li      r3,9
fff7c374:	4b ff ba 25 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        //Load the hash list into pibmem
        pakRc = pak.read_file(hash_list_file_name, hashList, HASH_LIST_SIZE, &digest, &shvReq.hashListSize);
fff7c378:	3b 81 01 f0 	addi    r28,r1,496
fff7c37c:	3c 80 ff f8 	lis     r4,-8
fff7c380:	3c a0 00 00 	lis     r5,0
fff7c384:	38 61 03 20 	addi    r3,r1,800
fff7c388:	38 84 ca f0 	addi    r4,r4,-13584
fff7c38c:	38 a5 f7 f8 	addi    r5,r5,-2056
fff7c390:	38 c0 08 00 	li      r6,2048
fff7c394:	7f 87 e3 78 	mr      r7,r28
fff7c398:	39 01 01 70 	addi    r8,r1,368
fff7c39c:	48 00 07 91 	bl      fff7cb2c <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm>
fff7c3a0:	7c 7d 1b 78 	mr      r29,r3
        if(pakRc != ARC_OPERATION_SUCCESSFUL)
fff7c3a4:	06 c3 00 0c 	bwz     r3,fff7c3bc <_Z17sromthreadroutinePv+0x110>
        {
            SBE_ERROR(SBE_FUNC "Failed to read hash list");
fff7c3a8:	3c 60 ca 88 	lis     r3,-13688
fff7c3ac:	4b ff ee 31 	bl      fff7b1dc <pk_trace_tiny>
            SBE::updateErrorCodeAndHalt(FILE_RC_HASH_LIST_FILE_READ_BASE_ERROR + pakRc);
fff7c3b0:	38 7d 05 20 	addi    r3,r29,1312
fff7c3b4:	54 63 04 3e 	clrlwi  r3,r3,16
fff7c3b8:	4b ff b9 05 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
        }

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_LOADING_HASH_LIST_INTO_PIB);
fff7c3bc:	38 60 00 0a 	li      r3,10
fff7c3c0:	4b ff b9 d9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        shvReq.containerStartOffset = (uint32_t *)secureContainer;
fff7c3c4:	3d 20 ff fb 	lis     r9,-5
fff7c3c8:	61 29 48 00 	ori     r9,r9,18432
fff7c3cc:	91 21 01 68 	stw     r9,360(r1)
        shvReq.payloadHash = &digest;
        shvReq.componentId = BOOT_LOADER_SH_COMPONENT_ID;
fff7c3d0:	3d 00 42 4f 	lis     r8,16975
fff7c3d4:	3d 20 5f 4c 	lis     r9,24396
fff7c3d8:	61 08 4f 54 	ori     r8,r8,20308
fff7c3dc:	61 29 44 52 	ori     r9,r9,17490
fff7c3e0:	19 01 01 88 	stvd    d8,392(r1)
        shvReq.scratchStart = SROM_BLDR_CMN_DILITHIUM_SCRATCH_START;
fff7c3e4:	3d 20 ff f8 	lis     r9,-8
fff7c3e8:	61 29 78 00 	ori     r9,r9,30720
fff7c3ec:	91 21 01 a0 	stw     r9,416(r1)
        shvReq.scratchSize = SROM_BLDR_CMN_DILITHIUM_SCRATCH_SIZE;
fff7c3f0:	3d 20 00 02 	lis     r9,2
fff7c3f4:	61 29 d0 00 	ori     r9,r9,53248
fff7c3f8:	91 21 01 a4 	stw     r9,420(r1)
        shvReq.shvProgressCodeStartOffset = SHV_PROGRESS_CODE_START_OFFSET;
fff7c3fc:	39 20 00 18 	li      r9,24
fff7c400:	99 21 01 a8 	stb     r9,424(r1)
        }

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_LOADING_HASH_LIST_INTO_PIB);

        shvReq.containerStartOffset = (uint32_t *)secureContainer;
        shvReq.payloadHash = &digest;
fff7c404:	93 81 01 78 	stw     r28,376(r1)
        shvReq.scratchStart = SROM_BLDR_CMN_DILITHIUM_SCRATCH_START;
        shvReq.scratchSize = SROM_BLDR_CMN_DILITHIUM_SCRATCH_SIZE;
        shvReq.shvProgressCodeStartOffset = SHV_PROGRESS_CODE_START_OFFSET;

        // Calculate SROM SB Settings
        shvSettings();
fff7c408:	48 00 11 e9 	bl      fff7d5f0 <_Z11shvSettingsv>

        //Fill the secure mode enable bit data in LFR reg as well
        //LFR is already read above and isn't modified
        lfrReg.secure_mode = sromSecureBootCtrlSettings.secureModeEnable;
fff7c40c:	81 2d 01 90 	lwz     r9,400(r13)
fff7c410:	51 3e 94 e6 	rlwimi  r30,r9,18,19,19
        PPE_STVD(scomt::ppe_pc::TP_TPCHIP_PIB_SBE_SBEPRV_LCL_LFR_SCRATCH_RW, lfrReg);
fff7c414:	3d 20 c0 00 	lis     r9,-16384
fff7c418:	61 29 20 40 	ori     r9,r9,8256
fff7c41c:	1b c9 00 00 	stvd    d30,0(r9)

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_WRITING_LFR_REG);
fff7c420:	38 60 00 12 	li      r3,18
fff7c424:	4b ff b9 75 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        if(SBE::isHreset())
fff7c428:	4b ff b9 35 	bl      fff77d5c <_ZN3SBE8isHresetEv>
fff7c42c:	06 c3 00 26 	bwz     r3,fff7c478 <_Z17sromthreadroutinePv+0x1cc>
        {
            // SROM secure boot control settings from initial Run
            secureBootCtrlSettings_t sromSecureBootCtrlSettingsInitial;

            sromSecureBootCtrlSettingsInitial.getSecureBootCtrlSettings(MEASUREMENT_REG_24);
fff7c430:	3c 80 00 05 	lis     r4,5
 *        SROM and Boot loader will both use same union
 *        Only SROM will read contents from OTPROM, Boot loader will have to read the Secure Boot settings
 *        used by SROM from measurement reg and use it.
 *
 */
typedef union secureBootCtrlSettings
fff7c434:	39 20 00 00 	li      r9,0
fff7c438:	38 61 00 20 	addi    r3,r1,32
fff7c43c:	60 84 01 b8 	ori     r4,r4,440
fff7c440:	91 21 00 20 	stw     r9,32(r1)
fff7c444:	4b ff fd cd 	bl      fff7c210 <_ZN22secureBootCtrlSettings25getSecureBootCtrlSettingsEm>

            UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_READING_MEAS_REGS_HRESET);
fff7c448:	38 60 00 13 	li      r3,19
fff7c44c:	4b ff b9 4d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

            //Check if SROM boot complete bit is set in HRESET path. If not halt
            if(sromSecureBootCtrlSettingsInitial.bootComplete != 0x01)
fff7c450:	81 21 00 20 	lwz     r9,32(r1)
fff7c454:	07 09 40 0a 	bb1wi   r9,8,fff7c468 <_Z17sromthreadroutinePv+0x1bc>
            {
                SBE_ERROR(SBE_FUNC "SROM Boot complete bit 0x%01x", (bool)sromSecureBootCtrlSettingsInitial.bootComplete);
fff7c458:	3c 60 94 31 	lis     r3,-27599
fff7c45c:	4b ff ed 81 	bl      fff7b1dc <pk_trace_tiny>
                SBE::updateErrorCodeAndHalt(BOOT_RC_SROM_COMPLETE_BIT_NOT_SET_IN_HRESET);
fff7c460:	38 60 03 30 	li      r3,816
fff7c464:	4b ff b8 59 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
            }

            // Check if calculated secure boot settings values match with previous measurments
            if(!(sromSecureBootCtrlSettings.cmpSecureBootSettingsVal(sromSecureBootCtrlSettingsInitial.secureBootControl)))
fff7c468:	80 a1 00 20 	lwz     r5,32(r1)
        bool status = true;

        // From previous run value clear out boot complete bit
        measurementRegVal &= ~(0x00800000);

        if(measurementRegVal != secureBootControl)
fff7c46c:	81 2d 01 90 	lwz     r9,400(r13)
    bool cmpSecureBootSettingsVal(uint32_t measurementRegVal)
    {
        bool status = true;

        // From previous run value clear out boot complete bit
        measurementRegVal &= ~(0x00800000);
fff7c470:	54 aa 02 4e 	rlwinm  r10,r5,0,9,7

        if(measurementRegVal != secureBootControl)
fff7c474:	04 4a 4b 10 	cmpwbne r10,r9,fff7ca94 <_Z17sromthreadroutinePv+0x7e8>
                SBE::updateErrorCodeAndHalt(BOOT_RC_SROM_SECURE_BOOT_SETTINGS_MISMATCH);
            }
        }

        // Read SHA3 hash value of HW Key hash Set1 from OTPROM Reg's
        sha3HashOtprom_t hwKeyHashSet1;
fff7c478:	3b c1 02 b0 	addi    r30,r1,688
fff7c47c:	7f c3 f3 78 	mr      r3,r30
fff7c480:	4b ff fd dd 	bl      fff7c25c <_ZN14sha3HashOtpromC1Ev>
        hwKeyHashSet1.getSha3Hash(HW_PUB_KEY_HASH_SET1_1,HW_PUB_KEY_HASH_SET1_2,
                                           HW_PUB_KEY_HASH_SET1_3,HW_PUB_KEY_HASH_SET1_4,
                                           HW_PUB_KEY_HASH_SET1_5,HW_PUB_KEY_HASH_SET1_6,
                                           HW_PUB_KEY_HASH_SET1_7,HW_PUB_KEY_HASH_SET1_8);
fff7c484:	3d 20 00 01 	lis     r9,1
fff7c488:	61 29 80 0f 	ori     r9,r9,32783
fff7c48c:	91 21 00 08 	stw     r9,8(r1)
fff7c490:	3c 80 00 01 	lis     r4,1
fff7c494:	3c a0 00 01 	lis     r5,1
fff7c498:	3c c0 00 01 	lis     r6,1
fff7c49c:	3c e0 00 01 	lis     r7,1
fff7c4a0:	3d 00 00 01 	lis     r8,1
fff7c4a4:	3d 20 00 01 	lis     r9,1
fff7c4a8:	3d 40 00 01 	lis     r10,1
fff7c4ac:	60 84 80 08 	ori     r4,r4,32776
fff7c4b0:	60 a5 80 09 	ori     r5,r5,32777
fff7c4b4:	60 c6 80 0a 	ori     r6,r6,32778
fff7c4b8:	60 e7 80 0b 	ori     r7,r7,32779
fff7c4bc:	61 08 80 0c 	ori     r8,r8,32780
fff7c4c0:	61 29 80 0d 	ori     r9,r9,32781
fff7c4c4:	61 4a 80 0e 	ori     r10,r10,32782
fff7c4c8:	7f c3 f3 78 	mr      r3,r30
fff7c4cc:	4b ff fc 95 	bl      fff7c160 <_ZN14sha3HashOtprom11getSha3HashEmmmmmmmm>
        shvReq.pubKeyHashSet1 = &hwKeyHashSet1.sha3Hash;

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_HW_KEY_HASH_SET1_OTPROM_READ);

        // Read  SHA3 hash value of HW Key hash Set2 from OTPROM Reg's
        sha3HashOtprom_t hwKeyHashSet2;
fff7c4d0:	3b e1 02 70 	addi    r31,r1,624
                                           HW_PUB_KEY_HASH_SET1_3,HW_PUB_KEY_HASH_SET1_4,
                                           HW_PUB_KEY_HASH_SET1_5,HW_PUB_KEY_HASH_SET1_6,
                                           HW_PUB_KEY_HASH_SET1_7,HW_PUB_KEY_HASH_SET1_8);
        shvReq.pubKeyHashSet1 = &hwKeyHashSet1.sha3Hash;

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_HW_KEY_HASH_SET1_OTPROM_READ);
fff7c4d4:	38 60 00 14 	li      r3,20
        sha3HashOtprom_t hwKeyHashSet1;
        hwKeyHashSet1.getSha3Hash(HW_PUB_KEY_HASH_SET1_1,HW_PUB_KEY_HASH_SET1_2,
                                           HW_PUB_KEY_HASH_SET1_3,HW_PUB_KEY_HASH_SET1_4,
                                           HW_PUB_KEY_HASH_SET1_5,HW_PUB_KEY_HASH_SET1_6,
                                           HW_PUB_KEY_HASH_SET1_7,HW_PUB_KEY_HASH_SET1_8);
        shvReq.pubKeyHashSet1 = &hwKeyHashSet1.sha3Hash;
fff7c4d8:	93 c1 01 7c 	stw     r30,380(r1)

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_HW_KEY_HASH_SET1_OTPROM_READ);
fff7c4dc:	4b ff b8 bd 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        // Read  SHA3 hash value of HW Key hash Set2 from OTPROM Reg's
        sha3HashOtprom_t hwKeyHashSet2;
fff7c4e0:	7f e3 fb 78 	mr      r3,r31
fff7c4e4:	4b ff fd 79 	bl      fff7c25c <_ZN14sha3HashOtpromC1Ev>
        hwKeyHashSet2.getSha3Hash(HW_PUB_KEY_HASH_SET2_1,HW_PUB_KEY_HASH_SET2_2,
                                           HW_PUB_KEY_HASH_SET2_3,HW_PUB_KEY_HASH_SET2_4,
                                           HW_PUB_KEY_HASH_SET2_5,HW_PUB_KEY_HASH_SET2_6,
                                           HW_PUB_KEY_HASH_SET2_7,HW_PUB_KEY_HASH_SET2_8);
fff7c4e8:	3d 20 00 01 	lis     r9,1
fff7c4ec:	61 29 80 17 	ori     r9,r9,32791
fff7c4f0:	91 21 00 08 	stw     r9,8(r1)
fff7c4f4:	3c 80 00 01 	lis     r4,1
fff7c4f8:	3c a0 00 01 	lis     r5,1
fff7c4fc:	3c c0 00 01 	lis     r6,1
fff7c500:	3c e0 00 01 	lis     r7,1
fff7c504:	3d 00 00 01 	lis     r8,1
fff7c508:	3d 20 00 01 	lis     r9,1
fff7c50c:	3d 40 00 01 	lis     r10,1
fff7c510:	60 84 80 10 	ori     r4,r4,32784
fff7c514:	60 a5 80 11 	ori     r5,r5,32785
fff7c518:	60 c6 80 12 	ori     r6,r6,32786
fff7c51c:	60 e7 80 13 	ori     r7,r7,32787
fff7c520:	61 08 80 14 	ori     r8,r8,32788
fff7c524:	61 29 80 15 	ori     r9,r9,32789
fff7c528:	61 4a 80 16 	ori     r10,r10,32790
fff7c52c:	7f e3 fb 78 	mr      r3,r31
fff7c530:	4b ff fc 31 	bl      fff7c160 <_ZN14sha3HashOtprom11getSha3HashEmmmmmmmm>
        shvReq.pubKeyHashSet2 = &hwKeyHashSet2.sha3Hash;

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_HW_KEY_HASH_SET2_OTPROM_READ);
fff7c534:	38 60 00 15 	li      r3,21
        sha3HashOtprom_t hwKeyHashSet2;
        hwKeyHashSet2.getSha3Hash(HW_PUB_KEY_HASH_SET2_1,HW_PUB_KEY_HASH_SET2_2,
                                           HW_PUB_KEY_HASH_SET2_3,HW_PUB_KEY_HASH_SET2_4,
                                           HW_PUB_KEY_HASH_SET2_5,HW_PUB_KEY_HASH_SET2_6,
                                           HW_PUB_KEY_HASH_SET2_7,HW_PUB_KEY_HASH_SET2_8);
        shvReq.pubKeyHashSet2 = &hwKeyHashSet2.sha3Hash;
fff7c538:	93 e1 01 80 	stw     r31,384(r1)

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_HW_KEY_HASH_SET2_OTPROM_READ);
fff7c53c:	4b ff b8 5d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        sha3HashOtprom_t hwKeyHashSet1Set2;
fff7c540:	38 61 02 30 	addi    r3,r1,560
fff7c544:	4b ff fd 19 	bl      fff7c25c <_ZN14sha3HashOtpromC1Ev>
        hwKeyHashSet1Set2.getSha3Hash(
                HASH_OF_HW_PUB_KEY_SET1_SET2_1, HASH_OF_HW_PUB_KEY_SET1_SET2_2,
                HASH_OF_HW_PUB_KEY_SET1_SET2_3, HASH_OF_HW_PUB_KEY_SET1_SET2_4,
                HASH_OF_HW_PUB_KEY_SET1_SET2_5, HASH_OF_HW_PUB_KEY_SET1_SET2_6,
                HASH_OF_HW_PUB_KEY_SET1_SET2_7, HASH_OF_HW_PUB_KEY_SET1_SET2_8
                                     );
fff7c548:	3d 20 00 01 	lis     r9,1
fff7c54c:	61 29 80 1f 	ori     r9,r9,32799
fff7c550:	91 21 00 08 	stw     r9,8(r1)
fff7c554:	3c 80 00 01 	lis     r4,1
fff7c558:	3c a0 00 01 	lis     r5,1
fff7c55c:	3c c0 00 01 	lis     r6,1
fff7c560:	3c e0 00 01 	lis     r7,1
fff7c564:	3d 00 00 01 	lis     r8,1
fff7c568:	3d 20 00 01 	lis     r9,1
fff7c56c:	3d 40 00 01 	lis     r10,1
fff7c570:	60 c6 80 1a 	ori     r6,r6,32794
fff7c574:	60 e7 80 1b 	ori     r7,r7,32795
fff7c578:	61 08 80 1c 	ori     r8,r8,32796
fff7c57c:	61 29 80 1d 	ori     r9,r9,32797
fff7c580:	61 4a 80 1e 	ori     r10,r10,32798
fff7c584:	60 84 80 18 	ori     r4,r4,32792
fff7c588:	60 a5 80 19 	ori     r5,r5,32793
fff7c58c:	38 61 02 30 	addi    r3,r1,560
fff7c590:	4b ff fb d1 	bl      fff7c160 <_ZN14sha3HashOtprom11getSha3HashEmmmmmmmm>

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_HW_KEY_HASH_SET1_SET2_OTPROM_READ);
fff7c594:	38 60 00 16 	li      r3,22
fff7c598:	4b ff b8 01 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        sha3HashOfHash_t hashOfHash;
        memcpy(hashOfHash.hashSet1, hwKeyHashSet1.sha3Hash, SHA3_DIGEST_LENGTH);
fff7c59c:	7f c4 f3 78 	mr      r4,r30
fff7c5a0:	38 a0 00 40 	li      r5,64
fff7c5a4:	38 61 00 e8 	addi    r3,r1,232
fff7c5a8:	4b ff de 11 	bl      fff7a3b8 <memcpy>
        memcpy(hashOfHash.hashSet2, hwKeyHashSet2.sha3Hash, SHA3_DIGEST_LENGTH);
fff7c5ac:	7f e4 fb 78 	mr      r4,r31
fff7c5b0:	38 a0 00 40 	li      r5,64
fff7c5b4:	38 61 01 28 	addi    r3,r1,296
fff7c5b8:	4b ff de 01 	bl      fff7a3b8 <memcpy>
     */
    bool verifyHashOfHash(sha3_t* hashOfHashOtprom)
    {
        bool status = false;
        sha3_t digest;
        sha3_Hash(hashSet1nSet2, sizeof(hashSet1nSet2), &digest);
fff7c5bc:	38 61 00 e8 	addi    r3,r1,232
fff7c5c0:	38 80 00 80 	li      r4,128
fff7c5c4:	38 a1 00 20 	addi    r5,r1,32
fff7c5c8:	4b ff 50 81 	bl      fff71648 <_Z9sha3_HashPKhjPA64_h>
        if(memcmp(digest, hashOfHashOtprom, SHA3_DIGEST_LENGTH) == 0)
fff7c5cc:	38 61 00 20 	addi    r3,r1,32
fff7c5d0:	38 81 02 30 	addi    r4,r1,560
fff7c5d4:	38 a0 00 40 	li      r5,64
fff7c5d8:	4b ff de 6d 	bl      fff7a444 <memcmp>

        // if hash of hash does not match update error code and halt
        if(hashOfHash.verifyHashOfHash(&hwKeyHashSet1Set2.sha3Hash) == false)
fff7c5dc:	06 c3 00 0a 	bwz     r3,fff7c5f0 <_Z17sromthreadroutinePv+0x344>
        {
            SBE_ERROR(SBE_FUNC" Hash of Hashes did not match");
fff7c5e0:	3c 60 c4 6a 	lis     r3,-15254
fff7c5e4:	4b ff eb f9 	bl      fff7b1dc <pk_trace_tiny>
            SBE::updateErrorCodeAndHalt(BOOT_RC_HASH_OF_HASHSETS_MISMATCH);
fff7c5e8:	38 60 03 14 	li      r3,788
fff7c5ec:	4b ff b6 d1 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>

/**
 * @brief Union to read the stored ECID from OTPROM Reg's
 *
 */
typedef union ecid
fff7c5f0:	3b e1 03 48 	addi    r31,r1,840
fff7c5f4:	7f e3 fb 78 	mr      r3,r31
fff7c5f8:	38 80 00 00 	li      r4,0
fff7c5fc:	38 a0 00 10 	li      r5,16
fff7c600:	4b ff dc e5 	bl      fff7a2e4 <memset>
        }

        // NOTE: HW ECID Field in Secure Header is not used
        // Its zeros.
        ecid_t hwEcid;
        shvReq.hwEcid = (uint32_t*)hwEcid.ecid;
fff7c604:	93 e1 01 90 	stw     r31,400(r1)
fff7c608:	3b e1 03 38 	addi    r31,r1,824
fff7c60c:	38 a0 00 10 	li      r5,16
fff7c610:	38 80 00 00 	li      r4,0
fff7c614:	7f e3 fb 78 	mr      r3,r31
fff7c618:	4b ff dc cd 	bl      fff7a2e4 <memset>
     * @param regAddr1 ECID0
     * @param regAddr2 ECID1
     */
    void getEcid(uint32_t regAddr1, uint32_t regAddr2)
    {
        getscom_abs(regAddr1, &ecidOtpromRead.ecid[0]);
fff7c61c:	3c 60 00 01 	lis     r3,1
fff7c620:	7f e4 fb 78 	mr      r4,r31
fff7c624:	60 63 80 00 	ori     r3,r3,32768
fff7c628:	4b ff dc 05 	bl      fff7a22c <getscom_abs>
        getscom_abs(regAddr2, &ecidOtpromRead.ecid[1]);
fff7c62c:	3c 60 00 01 	lis     r3,1
fff7c630:	38 81 03 40 	addi    r4,r1,832
fff7c634:	60 63 80 01 	ori     r3,r3,32769
fff7c638:	4b ff db f5 	bl      fff7a22c <getscom_abs>
        // Read SW/FW ECID from OTPROM Reg's
        ecid_t swEcid;
        swEcid.getEcid(ECID_0,ECID_1);
        shvReq.swEcid = (uint32_t*)swEcid.ecid;

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_ECID_OTPROM_READ);
fff7c63c:	38 60 00 17 	li      r3,23
        shvReq.hwEcid = (uint32_t*)hwEcid.ecid;

        // Read SW/FW ECID from OTPROM Reg's
        ecid_t swEcid;
        swEcid.getEcid(ECID_0,ECID_1);
        shvReq.swEcid = (uint32_t*)swEcid.ecid;
fff7c640:	93 e1 01 94 	stw     r31,404(r1)

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_ECID_OTPROM_READ);
fff7c644:	4b ff b7 55 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        //Fill and write Secure boot control Measurement Reg
        //Update this into measurement reg only after we update the measurement
        //of hash list and set bootComplete bit
        //NOTE: Values will not be updated if HRESET
        shvReq.controlData.secureBootVerificationEnforcement = sromSecureBootCtrlSettings.secureBootVerificationEnforcement;
fff7c648:	81 2d 01 90 	lwz     r9,400(r13)
 *
 */
typedef struct shvRsp
{
    union
    {
fff7c64c:	38 a0 00 c0 	li      r5,192
fff7c650:	55 2a 0f fe 	rlwinm  r10,r9,1,31,31
fff7c654:	99 41 01 af 	stb     r10,431(r1)
        shvReq.controlData.ecdsaCheck = sromSecureBootCtrlSettings.ecdsaSigCheckEnable;
fff7c658:	55 2a 17 fe 	rlwinm  r10,r9,2,31,31
fff7c65c:	99 41 01 ab 	stb     r10,427(r1)
        shvReq.controlData.dilithiumCheck = sromSecureBootCtrlSettings.dilithiumSigCheckEnable;
fff7c660:	55 2a 1f fe 	rlwinm  r10,r9,3,31,31
fff7c664:	99 41 01 ac 	stb     r10,428(r1)
        shvReq.controlData.ecidCheck = sromSecureBootCtrlSettings.ecidCheckEnable;
fff7c668:	55 2a 27 fe 	rlwinm  r10,r9,4,31,31
fff7c66c:	99 41 01 ad 	stb     r10,429(r1)
        shvReq.controlData.hwKeyHashCheck = sromSecureBootCtrlSettings.hwKeyHashVerificationEnable;
fff7c670:	55 2a 2f fe 	rlwinm  r10,r9,5,31,31
fff7c674:	38 80 00 00 	li      r4,0
fff7c678:	99 41 01 aa 	stb     r10,426(r1)
fff7c67c:	38 61 00 20 	addi    r3,r1,32
        shvReq.controlData.matchingMSVCheck = sromSecureBootCtrlSettings.enforceMatchingMSV;
fff7c680:	55 2a 3f fe 	rlwinm  r10,r9,7,31,31
        shvReq.msv = sromSecureBootCtrlSettings.msv;
fff7c684:	55 29 a6 3e 	rlwinm  r9,r9,20,24,31
        shvReq.controlData.secureBootVerificationEnforcement = sromSecureBootCtrlSettings.secureBootVerificationEnforcement;
        shvReq.controlData.ecdsaCheck = sromSecureBootCtrlSettings.ecdsaSigCheckEnable;
        shvReq.controlData.dilithiumCheck = sromSecureBootCtrlSettings.dilithiumSigCheckEnable;
        shvReq.controlData.ecidCheck = sromSecureBootCtrlSettings.ecidCheckEnable;
        shvReq.controlData.hwKeyHashCheck = sromSecureBootCtrlSettings.hwKeyHashVerificationEnable;
        shvReq.controlData.matchingMSVCheck = sromSecureBootCtrlSettings.enforceMatchingMSV;
fff7c688:	99 41 01 ae 	stb     r10,430(r1)
        shvReq.msv = sromSecureBootCtrlSettings.msv;
fff7c68c:	99 21 01 a9 	stb     r9,425(r1)
fff7c690:	4b ff dc 55 	bl      fff7a2e4 <memset>

/**
 * @brief Response struct of secure header verification
 *
 */
typedef struct shvRsp
fff7c694:	39 20 00 00 	li      r9,0

        // Resopnse from secure header verification
        shvRsp_t shvRsp;

        // Verify the Secure Header
        SBE_INFO(SBE_FUNC "Verifying Secure Header....");
fff7c698:	3c 60 3d 59 	lis     r3,15705
fff7c69c:	91 21 00 e0 	stw     r9,224(r1)
fff7c6a0:	b1 21 00 e4 	sth     r9,228(r1)
fff7c6a4:	4b ff eb 39 	bl      fff7b1dc <pk_trace_tiny>
        verifySecureHdr(&shvReq, &shvRsp);
fff7c6a8:	38 81 00 20 	addi    r4,r1,32
fff7c6ac:	38 61 01 68 	addi    r3,r1,360
fff7c6b0:	4b ff cd 01 	bl      fff793b0 <verifySecureHdr>

        SBE_INFO(SBE_FUNC "Prefix Hdr Flags 0x%08x",  shvRsp.flag);
fff7c6b4:	80 a1 00 e0 	lwz     r5,224(r1)
fff7c6b8:	3c 60 ef 02 	lis     r3,-4350
fff7c6bc:	60 63 00 01 	ori     r3,r3,1
fff7c6c0:	38 c0 00 00 	li      r6,0
fff7c6c4:	38 e0 00 00 	li      r7,0
fff7c6c8:	39 00 00 00 	li      r8,0
fff7c6cc:	4b ff f1 0d 	bl      fff7b7d8 <pk_trace_big>

        // In case of HW Key hash/ FW key hash/ Payload hash failure we will
        // write the failing hash value into measurement reg for debug.
        // In case of Successful Secure header verification or if Secure boot
        // enforcement is disabled we calculate the hash of all 3 hash's
        truncatedHashMeasurement_t measurememtHash;
fff7c6d0:	38 61 02 f0 	addi    r3,r1,752
fff7c6d4:	4b ff fb b1 	bl      fff7c284 <_ZN24truncatedHashMeasurementC1Ev>
        if(shvRsp.statusCode == SHV_RC_HW_KEY_HASH_TEST)
fff7c6d8:	a1 21 00 e4 	lhz     r9,228(r1)
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.hwKeyHash, SHA3_TRUNCATED_SIZE);
fff7c6dc:	38 61 02 f0 	addi    r3,r1,752
        // In case of HW Key hash/ FW key hash/ Payload hash failure we will
        // write the failing hash value into measurement reg for debug.
        // In case of Successful Secure header verification or if Secure boot
        // enforcement is disabled we calculate the hash of all 3 hash's
        truncatedHashMeasurement_t measurememtHash;
        if(shvRsp.statusCode == SHV_RC_HW_KEY_HASH_TEST)
fff7c6e0:	28 09 04 23 	cmplwi  r9,1059
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.hwKeyHash, SHA3_TRUNCATED_SIZE);
fff7c6e4:	38 81 00 20 	addi    r4,r1,32
        // In case of HW Key hash/ FW key hash/ Payload hash failure we will
        // write the failing hash value into measurement reg for debug.
        // In case of Successful Secure header verification or if Secure boot
        // enforcement is disabled we calculate the hash of all 3 hash's
        truncatedHashMeasurement_t measurememtHash;
        if(shvRsp.statusCode == SHV_RC_HW_KEY_HASH_TEST)
fff7c6e8:	41 82 00 48 	beq     fff7c730 <_Z17sromthreadroutinePv+0x484>
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.hwKeyHash, SHA3_TRUNCATED_SIZE);
        }
        else if(shvRsp.statusCode == SHV_RC_PREFIX_HASH_TEST)
fff7c6ec:	28 09 04 37 	cmplwi  r9,1079
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.fwKeyHash, SHA3_TRUNCATED_SIZE);
fff7c6f0:	38 61 02 f0 	addi    r3,r1,752
fff7c6f4:	38 81 00 60 	addi    r4,r1,96
        truncatedHashMeasurement_t measurememtHash;
        if(shvRsp.statusCode == SHV_RC_HW_KEY_HASH_TEST)
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.hwKeyHash, SHA3_TRUNCATED_SIZE);
        }
        else if(shvRsp.statusCode == SHV_RC_PREFIX_HASH_TEST)
fff7c6f8:	41 82 00 38 	beq     fff7c730 <_Z17sromthreadroutinePv+0x484>
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.fwKeyHash, SHA3_TRUNCATED_SIZE);
        }
        else if(shvRsp.statusCode == SHV_RC_SW_HASH_TEST)
fff7c6fc:	28 09 04 4b 	cmplwi  r9,1099
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.payloadHash, SHA3_TRUNCATED_SIZE);
fff7c700:	38 61 02 f0 	addi    r3,r1,752
fff7c704:	38 81 00 a0 	addi    r4,r1,160
        }
        else if(shvRsp.statusCode == SHV_RC_PREFIX_HASH_TEST)
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.fwKeyHash, SHA3_TRUNCATED_SIZE);
        }
        else if(shvRsp.statusCode == SHV_RC_SW_HASH_TEST)
fff7c708:	41 82 00 28 	beq     fff7c730 <_Z17sromthreadroutinePv+0x484>
        {
            memcpy(measurememtHash.sha3TruncatedHash, shvRsp.sha3.payloadHash, SHA3_TRUNCATED_SIZE);
        }
        else if(shvRsp.statusCode == NO_ERROR || !(shvReq.controlData.secureBootVerificationEnforcement))
fff7c70c:	06 c9 00 06 	bwz     r9,fff7c718 <_Z17sromthreadroutinePv+0x46c>
fff7c710:	89 21 01 af 	lbz     r9,431(r1)
fff7c714:	06 49 00 12 	bwnz    r9,fff7c738 <_Z17sromthreadroutinePv+0x48c>
        {
            // calculate sha3-512 (hash of boot loader hw keys | hash of boot loader fw keys | hash boot loader hash list)
            sha3_t digest;
            sha3_Hash(shvRsp.sha3.data, sizeof(shvRsp.sha3.data), &digest);
fff7c718:	38 61 00 20 	addi    r3,r1,32
fff7c71c:	38 80 00 c0 	li      r4,192
fff7c720:	38 a1 01 b0 	addi    r5,r1,432
fff7c724:	4b ff 4f 25 	bl      fff71648 <_Z9sha3_HashPKhjPA64_h>
            memcpy(measurememtHash.sha3TruncatedHash, digest, SHA3_TRUNCATED_SIZE);
fff7c728:	38 61 02 f0 	addi    r3,r1,752
fff7c72c:	38 81 01 b0 	addi    r4,r1,432
fff7c730:	38 a0 00 30 	li      r5,48
fff7c734:	4b ff dc 85 	bl      fff7a3b8 <memcpy>

        // Update the above result into Measurement reg's
        // Incase of HRESET dont update results into measurement instead compare the results
        // with previous measurements
        int hresetMeasurementResult = 0x0;
        if(!(SBE::isHreset()))
fff7c738:	4b ff b6 25 	bl      fff77d5c <_ZN3SBE8isHresetEv>
fff7c73c:	06 43 00 d2 	bwnz    r3,fff7c8e0 <_Z17sromthreadroutinePv+0x634>
                              uint32_t regAddr5,uint32_t regAddr6,
                              uint32_t regAddr7,uint32_t regAddr8,
                              uint32_t regAddr9,uint32_t regAddr10,
                              uint32_t regAddr11,uint32_t regAddr12)
    {
        putscom_abs(regAddr1, ((uint64_t)hash[0] << 32));
fff7c740:	80 a1 02 f0 	lwz     r5,752(r1)
fff7c744:	3c 60 00 05 	lis     r3,5
fff7c748:	38 c0 00 00 	li      r6,0
fff7c74c:	60 63 01 a0 	ori     r3,r3,416
fff7c750:	4b ff da cd 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr2, ((uint64_t)hash[1] << 32));
fff7c754:	80 a1 02 f4 	lwz     r5,756(r1)
fff7c758:	3c 60 00 05 	lis     r3,5
fff7c75c:	38 c0 00 00 	li      r6,0
fff7c760:	60 63 01 a1 	ori     r3,r3,417
fff7c764:	4b ff da b9 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr3, ((uint64_t)hash[2] << 32));
fff7c768:	80 a1 02 f8 	lwz     r5,760(r1)
fff7c76c:	3c 60 00 05 	lis     r3,5
fff7c770:	38 c0 00 00 	li      r6,0
fff7c774:	60 63 01 a2 	ori     r3,r3,418
fff7c778:	4b ff da a5 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr4, ((uint64_t)hash[3] << 32));
fff7c77c:	80 a1 02 fc 	lwz     r5,764(r1)
fff7c780:	3c 60 00 05 	lis     r3,5
fff7c784:	38 c0 00 00 	li      r6,0
fff7c788:	60 63 01 a3 	ori     r3,r3,419
fff7c78c:	4b ff da 91 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr5, ((uint64_t)hash[4] << 32));
fff7c790:	80 a1 03 00 	lwz     r5,768(r1)
fff7c794:	3c 60 00 05 	lis     r3,5
fff7c798:	38 c0 00 00 	li      r6,0
fff7c79c:	60 63 01 a4 	ori     r3,r3,420
fff7c7a0:	4b ff da 7d 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr6, ((uint64_t)hash[5] << 32));
fff7c7a4:	80 a1 03 04 	lwz     r5,772(r1)
fff7c7a8:	3c 60 00 05 	lis     r3,5
fff7c7ac:	38 c0 00 00 	li      r6,0
fff7c7b0:	60 63 01 a5 	ori     r3,r3,421
fff7c7b4:	4b ff da 69 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr7, ((uint64_t)hash[6] << 32));
fff7c7b8:	80 a1 03 08 	lwz     r5,776(r1)
fff7c7bc:	3c 60 00 05 	lis     r3,5
fff7c7c0:	38 c0 00 00 	li      r6,0
fff7c7c4:	60 63 01 a6 	ori     r3,r3,422
fff7c7c8:	4b ff da 55 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr8, ((uint64_t)hash[7] << 32));
fff7c7cc:	80 a1 03 0c 	lwz     r5,780(r1)
fff7c7d0:	3c 60 00 05 	lis     r3,5
fff7c7d4:	38 c0 00 00 	li      r6,0
fff7c7d8:	60 63 01 a7 	ori     r3,r3,423
fff7c7dc:	4b ff da 41 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr9, ((uint64_t)hash[8] << 32));
fff7c7e0:	80 a1 03 10 	lwz     r5,784(r1)
fff7c7e4:	3c 60 00 05 	lis     r3,5
fff7c7e8:	38 c0 00 00 	li      r6,0
fff7c7ec:	60 63 01 a8 	ori     r3,r3,424
fff7c7f0:	4b ff da 2d 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr10, ((uint64_t)hash[9] << 32));
fff7c7f4:	80 a1 03 14 	lwz     r5,788(r1)
fff7c7f8:	3c 60 00 05 	lis     r3,5
fff7c7fc:	38 c0 00 00 	li      r6,0
fff7c800:	60 63 01 a9 	ori     r3,r3,425
fff7c804:	4b ff da 19 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr11, ((uint64_t)hash[10] << 32));
fff7c808:	80 a1 03 18 	lwz     r5,792(r1)
fff7c80c:	3c 60 00 05 	lis     r3,5
fff7c810:	38 c0 00 00 	li      r6,0
fff7c814:	60 63 01 aa 	ori     r3,r3,426
fff7c818:	4b ff da 05 	bl      fff7a21c <putscom_abs>
        putscom_abs(regAddr12, ((uint64_t)hash[11] << 32));
fff7c81c:	80 a1 03 1c 	lwz     r5,796(r1)
fff7c820:	3c 60 00 05 	lis     r3,5
fff7c824:	38 c0 00 00 	li      r6,0
fff7c828:	60 63 01 ab 	ori     r3,r3,427
fff7c82c:	4b ff d9 f1 	bl      fff7a21c <putscom_abs>
                                                 MEASUREMENT_REG_4,MEASUREMENT_REG_5,
                                                 MEASUREMENT_REG_6,MEASUREMENT_REG_7,
                                                 MEASUREMENT_REG_8,MEASUREMENT_REG_9,
                                                 MEASUREMENT_REG_10,MEASUREMENT_REG_11);

            truncatedHashMeasurement_t measurementWriteCheckHash;
fff7c830:	38 61 01 b0 	addi    r3,r1,432
fff7c834:	4b ff fa 51 	bl      fff7c284 <_ZN24truncatedHashMeasurementC1Ev>
            measurementWriteCheckHash.getSha3TruncatedHash(MEASUREMENT_REG_0,MEASUREMENT_REG_1,
                                                 MEASUREMENT_REG_2,MEASUREMENT_REG_3,
                                                 MEASUREMENT_REG_4,MEASUREMENT_REG_5,
                                                 MEASUREMENT_REG_6,MEASUREMENT_REG_7,
                                                 MEASUREMENT_REG_8,MEASUREMENT_REG_9,
                                                 MEASUREMENT_REG_10,MEASUREMENT_REG_11);
fff7c838:	3d 20 00 05 	lis     r9,5
fff7c83c:	61 29 01 a7 	ori     r9,r9,423
fff7c840:	91 21 00 08 	stw     r9,8(r1)
fff7c844:	3d 20 00 05 	lis     r9,5
fff7c848:	61 29 01 a8 	ori     r9,r9,424
fff7c84c:	91 21 00 0c 	stw     r9,12(r1)
fff7c850:	3d 20 00 05 	lis     r9,5
fff7c854:	61 29 01 a9 	ori     r9,r9,425
fff7c858:	91 21 00 10 	stw     r9,16(r1)
fff7c85c:	3d 20 00 05 	lis     r9,5
fff7c860:	61 29 01 aa 	ori     r9,r9,426
fff7c864:	91 21 00 14 	stw     r9,20(r1)
fff7c868:	3d 20 00 05 	lis     r9,5
fff7c86c:	61 29 01 ab 	ori     r9,r9,427
fff7c870:	91 21 00 18 	stw     r9,24(r1)
fff7c874:	3c 80 00 05 	lis     r4,5
fff7c878:	3c a0 00 05 	lis     r5,5
fff7c87c:	3c c0 00 05 	lis     r6,5
fff7c880:	3c e0 00 05 	lis     r7,5
fff7c884:	3d 00 00 05 	lis     r8,5
fff7c888:	3d 20 00 05 	lis     r9,5
fff7c88c:	3d 40 00 05 	lis     r10,5
fff7c890:	38 61 01 b0 	addi    r3,r1,432
fff7c894:	60 84 01 a0 	ori     r4,r4,416
fff7c898:	60 a5 01 a1 	ori     r5,r5,417
fff7c89c:	60 c6 01 a2 	ori     r6,r6,418
fff7c8a0:	60 e7 01 a3 	ori     r7,r7,419
fff7c8a4:	61 08 01 a4 	ori     r8,r8,420
fff7c8a8:	61 29 01 a5 	ori     r9,r9,421
fff7c8ac:	61 4a 01 a6 	ori     r10,r10,422
fff7c8b0:	4b ff f7 6d 	bl      fff7c01c <_ZN24truncatedHashMeasurement20getSha3TruncatedHashEmmmmmmmmmmmm>
     *
     * @return zero if comparision pass else non zero
     */
    int compareTruncatedHash(sha3truncated_t sha3PreviousTruncatedHash)
    {
        return (memcmp(sha3PreviousTruncatedHash,sha3TruncatedHash,SHA3_TRUNCATED_SIZE));
fff7c8b4:	38 61 02 f0 	addi    r3,r1,752
fff7c8b8:	38 81 01 b0 	addi    r4,r1,432
fff7c8bc:	38 a0 00 30 	li      r5,48
fff7c8c0:	4b ff db 85 	bl      fff7a444 <memcmp>
            if( measurementWriteCheckHash.compareTruncatedHash(measurememtHash.sha3TruncatedHash) != 0x0)
fff7c8c4:	06 c3 00 0a 	bwz     r3,fff7c8d8 <_Z17sromthreadroutinePv+0x62c>
            {
                SBE_ERROR(SBE_FUNC "Measurement hash write fail." );
fff7c8c8:	3c 60 e8 5d 	lis     r3,-6051
fff7c8cc:	4b ff e9 11 	bl      fff7b1dc <pk_trace_tiny>
                SBE::updateErrorCodeAndHalt(BOOT_RC_SROM_MEASUREMENT_HASH_WRITE_FAIL);
fff7c8d0:	38 60 03 12 	li      r3,786
fff7c8d4:	4b ff b3 e9 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
        }

        // Update the above result into Measurement reg's
        // Incase of HRESET dont update results into measurement instead compare the results
        // with previous measurements
        int hresetMeasurementResult = 0x0;
fff7c8d8:	3b e0 00 00 	li      r31,0
fff7c8dc:	48 00 00 9c 	b       fff7c978 <_Z17sromthreadroutinePv+0x6cc>
            }
        }
        else
        {
            // Read the previous measurement reg's and compare result, if mismatch halt ppe
            truncatedHashMeasurement_t previousMeasurementHash;
fff7c8e0:	38 61 01 b0 	addi    r3,r1,432
fff7c8e4:	4b ff f9 a1 	bl      fff7c284 <_ZN24truncatedHashMeasurementC1Ev>
            previousMeasurementHash.getSha3TruncatedHash(MEASUREMENT_REG_0,MEASUREMENT_REG_1,
                                                         MEASUREMENT_REG_2,MEASUREMENT_REG_3,
                                                         MEASUREMENT_REG_4,MEASUREMENT_REG_5,
                                                         MEASUREMENT_REG_6,MEASUREMENT_REG_7,
                                                         MEASUREMENT_REG_8,MEASUREMENT_REG_9,
                                                         MEASUREMENT_REG_10,MEASUREMENT_REG_11);
fff7c8e8:	3d 20 00 05 	lis     r9,5
fff7c8ec:	61 29 01 a7 	ori     r9,r9,423
fff7c8f0:	91 21 00 08 	stw     r9,8(r1)
fff7c8f4:	3d 20 00 05 	lis     r9,5
fff7c8f8:	61 29 01 a8 	ori     r9,r9,424
fff7c8fc:	91 21 00 0c 	stw     r9,12(r1)
fff7c900:	3d 20 00 05 	lis     r9,5
fff7c904:	61 29 01 a9 	ori     r9,r9,425
fff7c908:	91 21 00 10 	stw     r9,16(r1)
fff7c90c:	3d 20 00 05 	lis     r9,5
fff7c910:	61 29 01 aa 	ori     r9,r9,426
fff7c914:	91 21 00 14 	stw     r9,20(r1)
fff7c918:	3d 20 00 05 	lis     r9,5
fff7c91c:	61 29 01 ab 	ori     r9,r9,427
fff7c920:	91 21 00 18 	stw     r9,24(r1)
fff7c924:	3c 80 00 05 	lis     r4,5
fff7c928:	3c a0 00 05 	lis     r5,5
fff7c92c:	3c c0 00 05 	lis     r6,5
fff7c930:	3c e0 00 05 	lis     r7,5
fff7c934:	3d 00 00 05 	lis     r8,5
fff7c938:	3d 20 00 05 	lis     r9,5
fff7c93c:	3d 40 00 05 	lis     r10,5
fff7c940:	38 61 01 b0 	addi    r3,r1,432
fff7c944:	60 84 01 a0 	ori     r4,r4,416
fff7c948:	60 a5 01 a1 	ori     r5,r5,417
fff7c94c:	60 c6 01 a2 	ori     r6,r6,418
fff7c950:	60 e7 01 a3 	ori     r7,r7,419
fff7c954:	61 08 01 a4 	ori     r8,r8,420
fff7c958:	61 29 01 a5 	ori     r9,r9,421
fff7c95c:	61 4a 01 a6 	ori     r10,r10,422
fff7c960:	4b ff f6 bd 	bl      fff7c01c <_ZN24truncatedHashMeasurement20getSha3TruncatedHashEmmmmmmmmmmmm>
fff7c964:	38 61 02 f0 	addi    r3,r1,752
fff7c968:	38 81 01 b0 	addi    r4,r1,432
fff7c96c:	38 a0 00 30 	li      r5,48
fff7c970:	4b ff da d5 	bl      fff7a444 <memcmp>
fff7c974:	7c 7f 1b 78 	mr      r31,r3

            hresetMeasurementResult =
                previousMeasurementHash.compareTruncatedHash(measurememtHash.sha3TruncatedHash);
        }

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_HASH_WRITE_OR_READ_INTO_MEASUREMENT_REG);
fff7c978:	38 60 00 39 	li      r3,57
fff7c97c:	4b ff b4 1d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        //Set the bootcomplete bit to indicate srom measurements have be written
        //into measurement regs
        if(!(SBE::isHreset()))
fff7c980:	4b ff b3 dd 	bl      fff77d5c <_ZN3SBE8isHresetEv>
fff7c984:	7c 7e 1b 78 	mr      r30,r3
fff7c988:	06 43 00 3c 	bwnz    r3,fff7ca00 <_Z17sromthreadroutinePv+0x754>
        {
            sromSecureBootCtrlSettings.bootComplete = 0x1;
fff7c98c:	80 ad 01 90 	lwz     r5,400(r13)
fff7c990:	39 20 00 01 	li      r9,1

            SBE_INFO(SBE_FUNC "SROM Secure Boot Control Measurement Reg Value: 0x%08x",
fff7c994:	3c 60 27 ec 	lis     r3,10220

        //Set the bootcomplete bit to indicate srom measurements have be written
        //into measurement regs
        if(!(SBE::isHreset()))
        {
            sromSecureBootCtrlSettings.bootComplete = 0x1;
fff7c998:	51 25 ba 10 	rlwimi  r5,r9,23,8,8

            SBE_INFO(SBE_FUNC "SROM Secure Boot Control Measurement Reg Value: 0x%08x",
fff7c99c:	38 e0 00 00 	li      r7,0
fff7c9a0:	39 00 00 00 	li      r8,0
fff7c9a4:	60 63 00 01 	ori     r3,r3,1
fff7c9a8:	38 c0 00 00 	li      r6,0

        //Set the bootcomplete bit to indicate srom measurements have be written
        //into measurement regs
        if(!(SBE::isHreset()))
        {
            sromSecureBootCtrlSettings.bootComplete = 0x1;
fff7c9ac:	90 ad 01 90 	stw     r5,400(r13)

            SBE_INFO(SBE_FUNC "SROM Secure Boot Control Measurement Reg Value: 0x%08x",
fff7c9b0:	4b ff ee 29 	bl      fff7b7d8 <pk_trace_big>
     *
     * @param measurementRegAddr Measurement Register Address
     */
    void putSecureBootCtrlSettings(uint32_t measurementRegAddr)
    {
        putscom_abs(measurementRegAddr, ((uint64_t)secureBootControl << 32));
fff7c9b4:	80 ad 01 90 	lwz     r5,400(r13)
fff7c9b8:	3c 60 00 05 	lis     r3,5
fff7c9bc:	38 c0 00 00 	li      r6,0
fff7c9c0:	60 63 01 b8 	ori     r3,r3,440
fff7c9c4:	4b ff d8 59 	bl      fff7a21c <putscom_abs>
                    sromSecureBootCtrlSettings.secureBootControl);
            sromSecureBootCtrlSettings.putSecureBootCtrlSettings(MEASUREMENT_REG_24);
            secureBootCtrlSettings_t sromSecureBootCtrlSettingsWriteCheck;
            sromSecureBootCtrlSettingsWriteCheck.getSecureBootCtrlSettings(MEASUREMENT_REG_24);
fff7c9c8:	3c 80 00 05 	lis     r4,5
fff7c9cc:	38 61 01 b0 	addi    r3,r1,432
fff7c9d0:	60 84 01 b8 	ori     r4,r4,440
 *        SROM and Boot loader will both use same union
 *        Only SROM will read contents from OTPROM, Boot loader will have to read the Secure Boot settings
 *        used by SROM from measurement reg and use it.
 *
 */
typedef union secureBootCtrlSettings
fff7c9d4:	93 c1 01 b0 	stw     r30,432(r1)
fff7c9d8:	4b ff f8 39 	bl      fff7c210 <_ZN22secureBootCtrlSettings25getSecureBootCtrlSettingsEm>
            if( sromSecureBootCtrlSettingsWriteCheck.secureBootControl
fff7c9dc:	81 2d 01 90 	lwz     r9,400(r13)
fff7c9e0:	81 41 01 b0 	lwz     r10,432(r1)
fff7c9e4:	04 ca 48 0a 	cmpwbeq r10,r9,fff7c9f8 <_Z17sromthreadroutinePv+0x74c>
                != sromSecureBootCtrlSettings.secureBootControl )
            {
              SBE_INFO(SBE_FUNC "SROM Secure boot control settings write fail." );
fff7c9e8:	3c 60 b0 71 	lis     r3,-20367
fff7c9ec:	4b ff e7 f1 	bl      fff7b1dc <pk_trace_tiny>
              SBE::updateErrorCodeAndHalt(BOOT_RC_SROM_SB_SETTINGS_MEASUREMENT_WRITE_FAIL);
fff7c9f0:	38 60 03 13 	li      r3,787
fff7c9f4:	4b ff b2 c9 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
            }
            UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_CONTROL_DATA_WRITE_TO_MEASUREMENT);
fff7c9f8:	38 60 00 3a 	li      r3,58
fff7c9fc:	4b ff b3 9d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>
        }

        // Write Status code into scratch and halt incase of failure if enforcement is enabled
        // if enforcement is disabled we dont halt
        SBE_INFO(SBE_FUNC "Secure Header Verification status code is [0x%02X]", shvRsp.statusCode);
fff7ca00:	a0 61 00 e4 	lhz     r3,228(r1)
fff7ca04:	64 63 e0 21 	oris    r3,r3,57377
fff7ca08:	4b ff e7 d5 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCode(shvRsp.statusCode);
fff7ca0c:	a0 61 00 e4 	lhz     r3,228(r1)
fff7ca10:	4b ff b2 f9 	bl      fff77d08 <_ZN3SBE15updateErrorCodeEt>
        if(shvReq.controlData.secureBootVerificationEnforcement && shvRsp.statusCode != NO_ERROR )
fff7ca14:	89 21 01 af 	lbz     r9,431(r1)
fff7ca18:	06 c9 00 10 	bwz     r9,fff7ca38 <_Z17sromthreadroutinePv+0x78c>
fff7ca1c:	a1 21 00 e4 	lhz     r9,228(r1)
fff7ca20:	06 c9 00 0c 	bwz     r9,fff7ca38 <_Z17sromthreadroutinePv+0x78c>
        {
            SBE_INFO(SBE_FUNC "Enforcement Enabled." );
fff7ca24:	3c 60 cb 92 	lis     r3,-13422
fff7ca28:	4b ff e7 b5 	bl      fff7b1dc <pk_trace_tiny>
            SBE_ERROR(SBE_FUNC "Halting PPE...");
fff7ca2c:	3c 60 61 50 	lis     r3,24912
fff7ca30:	4b ff e7 ad 	bl      fff7b1dc <pk_trace_tiny>
            pk_halt();
fff7ca34:	4b ff df 51 	bl      fff7a984 <pk_halt>
        }

        UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_STATUS_CODE_WRITE_INTO_SCRATCH);
fff7ca38:	38 60 00 3b 	li      r3,59
fff7ca3c:	4b ff b3 5d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        if(shvReq.controlData.secureBootVerificationEnforcement && hresetMeasurementResult != 0x0)
fff7ca40:	89 21 01 af 	lbz     r9,431(r1)
fff7ca44:	06 c9 00 10 	bwz     r9,fff7ca64 <_Z17sromthreadroutinePv+0x7b8>
fff7ca48:	06 df 00 0e 	bwz     r31,fff7ca64 <_Z17sromthreadroutinePv+0x7b8>
        {
            SBE_INFO(SBE_FUNC "Enforcement Enabled. HRESET Path.." );
fff7ca4c:	3c 60 12 97 	lis     r3,4759
fff7ca50:	4b ff e7 8d 	bl      fff7b1dc <pk_trace_tiny>
            SBE_ERROR(SBE_FUNC "Previous measurement results dont match with current results" );
fff7ca54:	3c 60 aa 61 	lis     r3,-21919
fff7ca58:	4b ff e7 85 	bl      fff7b1dc <pk_trace_tiny>
            SBE::updateErrorCodeAndHalt(BOOT_RC_BLDR_MEASUREMENT_MISMATCH_IN_HRESET);
fff7ca5c:	38 60 03 32 	li      r3,818
fff7ca60:	4b ff b2 5d 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
        }

        UPDATE_SROM_SBE_PROGRESS_CODE(LOADING_PAYLOAD_INTO_PIB);
fff7ca64:	38 60 00 3c 	li      r3,60
fff7ca68:	4b ff b3 31 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

        loadAndJumpBldr(&pak, sromSecureBootCtrlSettings.fileHashCalculationEnable);
fff7ca6c:	88 8d 01 90 	lbz     r4,400(r13)
fff7ca70:	38 61 03 20 	addi    r3,r1,800
fff7ca74:	54 84 07 fe 	clrlwi  r4,r4,31
fff7ca78:	48 00 06 19 	bl      fff7d090 <_Z15loadAndJumpBldrP10PakWrapperb>

    } while (false);

    SBE_EXIT(SBE_FUNC);
#undef SBE_FUNC
}
fff7ca7c:	80 01 03 74 	lwz     r0,884(r1)
fff7ca80:	17 81 03 60 	lvd     d28,864(r1)
fff7ca84:	7c 08 03 a6 	mtlr    r0
fff7ca88:	17 c1 03 68 	lvd     d30,872(r1)
fff7ca8c:	38 21 03 70 	addi    r1,r1,880
fff7ca90:	4e 80 00 20 	blr
            }

            // Check if calculated secure boot settings values match with previous measurments
            if(!(sromSecureBootCtrlSettings.cmpSecureBootSettingsVal(sromSecureBootCtrlSettingsInitial.secureBootControl)))
            {
                SBE_INFO(SBE_FUNC "Previous Measurement reg value 0x%08x", sromSecureBootCtrlSettingsInitial.secureBootControl);
fff7ca94:	3c 60 d1 3b 	lis     r3,-11973
fff7ca98:	60 63 00 01 	ori     r3,r3,1
fff7ca9c:	38 c0 00 00 	li      r6,0
fff7caa0:	38 e0 00 00 	li      r7,0
fff7caa4:	39 00 00 00 	li      r8,0
fff7caa8:	4b ff ed 31 	bl      fff7b7d8 <pk_trace_big>
                SBE_INFO(SBE_FUNC "Current Calculated Secure Boot value 0x%08x", sromSecureBootCtrlSettings.secureBootControl);
fff7caac:	80 ad 01 90 	lwz     r5,400(r13)
fff7cab0:	3c 60 10 6d 	lis     r3,4205
fff7cab4:	38 c0 00 00 	li      r6,0
fff7cab8:	38 e0 00 00 	li      r7,0
fff7cabc:	39 00 00 00 	li      r8,0
fff7cac0:	60 63 00 01 	ori     r3,r3,1
fff7cac4:	4b ff ed 15 	bl      fff7b7d8 <pk_trace_big>
                SBE_INFO(SBE_FUNC "Dont consider boot complete bit");
fff7cac8:	3c 60 a6 1f 	lis     r3,-23009
fff7cacc:	4b ff e7 11 	bl      fff7b1dc <pk_trace_tiny>
                SBE_ERROR(SBE_FUNC "HRESET Path: Previous Measurement regs value dont match with current calculated value" );
fff7cad0:	3c 60 eb d4 	lis     r3,-5164
fff7cad4:	4b ff e7 09 	bl      fff7b1dc <pk_trace_tiny>
                SBE::updateErrorCodeAndHalt(BOOT_RC_SROM_SECURE_BOOT_SETTINGS_MISMATCH);
fff7cad8:	38 60 03 31 	li      r3,817
fff7cadc:	4b ff b1 e1 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
fff7cae0:	4b ff f9 98 	b       fff7c478 <_Z17sromthreadroutinePv+0x1cc>

fff7cae4 <_GLOBAL__sub_I_hashList>:
fff7cae4:	39 20 00 00 	li      r9,0
fff7cae8:	91 2d 01 90 	stw     r9,400(r13)
fff7caec:	4e 80 00 20 	blr

fff7caf0 <_ZL19hash_list_file_name>:
fff7caf0:	62 6f 6f 74 2f 68 61 73 68 2e 6c 69 73 74 00 00     boot/hash.list..

fff7cb00 <CSWTCH.12>:
fff7cb00:	fe 00 00 00 fe 40 00 00 fe 80 00 00                 .....@......

fff7cb0c <_ZL20secure_hdr_file_name>:
fff7cb0c:	62 6f 6f 74 2f 73 65 63 75 72 65 2e 68 64 72 00     boot/secure.hdr.

fff7cb1c <__sbe_register_saveoff>:

#include "sbeirq.H"

extern "C" void __sbe_register_saveoff()
{
    asm("b pk_halt\n");
fff7cb1c:	4b ff de 68 	b       fff7a984 <pk_halt>
fff7cb20:	4e 80 00 20 	blr

fff7cb24 <__sbe_machine_check_handler>:
}

extern "C" void __sbe_machine_check_handler()
{
    asm("b pk_halt\n");
fff7cb24:	4b ff de 60 	b       fff7a984 <pk_halt>
fff7cb28:	4e 80 00 20 	blr

fff7cb2c <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm>:
/* IBM_PROLOG_END_TAG                                                     */

#include "pakwrapper.H"

ARC_RET_t PakWrapper::read_file(const char* i_fileName, void* i_destinationAddr, uint32_t i_destinationBufferSize, sha3_t* o_hash, uint32_t *o_uncompressedSize)
{
fff7cb2c:	94 21 ff d8 	stwu    r1,-40(r1)
fff7cb30:	7c 08 02 a6 	mflr    r0
fff7cb34:	1b 81 00 18 	stvd    d28,24(r1)
fff7cb38:	90 01 00 2c 	stw     r0,44(r1)
fff7cb3c:	1b c1 00 20 	stvd    d30,32(r1)
    ARC_RET_t rc = ARC_INVALID_PARAMS;
    if((i_fileName != nullptr) || (i_destinationAddr != nullptr))
fff7cb40:	06 44 00 06 	bwnz    r4,fff7cb4c <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm+0x20>

#include "pakwrapper.H"

ARC_RET_t PakWrapper::read_file(const char* i_fileName, void* i_destinationAddr, uint32_t i_destinationBufferSize, sha3_t* o_hash, uint32_t *o_uncompressedSize)
{
    ARC_RET_t rc = ARC_INVALID_PARAMS;
fff7cb44:	3b e0 00 01 	li      r31,1
    if((i_fileName != nullptr) || (i_destinationAddr != nullptr))
fff7cb48:	06 c5 00 42 	bwz     r5,fff7cbcc <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm+0xa0>
    {
        rc = iv_fileArchive.locate_file(i_fileName, fileArchiveEntry);
fff7cb4c:	39 23 00 04 	addi    r9,r3,4
fff7cb50:	7c bc 2b 78 	mr      r28,r5
fff7cb54:	7d 25 4b 78 	mr      r5,r9
fff7cb58:	90 c1 00 0c 	stw     r6,12(r1)
fff7cb5c:	90 e1 00 10 	stw     r7,16(r1)
fff7cb60:	91 21 00 08 	stw     r9,8(r1)
fff7cb64:	7d 1d 43 78 	mr      r29,r8
fff7cb68:	7c 7e 1b 78 	mr      r30,r3
fff7cb6c:	4b ff d2 31 	bl      fff79d9c <_ZN11FileArchive11locate_fileEPKcRNS_5EntryE>
fff7cb70:	7c 7f 1b 78 	mr      r31,r3

        if (rc != ARC_OPERATION_SUCCESSFUL)
fff7cb74:	80 c1 00 0c 	lwz     r6,12(r1)
fff7cb78:	80 e1 00 10 	lwz     r7,16(r1)
fff7cb7c:	81 21 00 08 	lwz     r9,8(r1)
fff7cb80:	06 43 00 10 	bwnz    r3,fff7cba0 <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm+0x74>
            ARC_ERROR(" Pak Read Failed. Rc: %x ", rc);
        }
        else
        {
            rc = fileArchiveEntry.decompress(i_destinationAddr,
                    i_destinationBufferSize, static_cast<sha3_t *>(o_hash));
fff7cb84:	7c c5 33 78 	mr      r5,r6
fff7cb88:	7d 23 4b 78 	mr      r3,r9
fff7cb8c:	7f 84 e3 78 	mr      r4,r28
fff7cb90:	7c e6 3b 78 	mr      r6,r7
fff7cb94:	4b ff cf 01 	bl      fff79a94 <_ZN11FileArchive5Entry10decompressEPvmPA64_h>
fff7cb98:	7c 7f 1b 78 	mr      r31,r3
            if (rc != ARC_OPERATION_SUCCESSFUL)
fff7cb9c:	06 c3 00 12 	bwz     r3,fff7cbc0 <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm+0x94>
            {
                ARC_ERROR(" Pak Read Failed. Rc: %x ", rc);
fff7cba0:	3c 60 76 e9 	lis     r3,30441
fff7cba4:	60 63 00 01 	ori     r3,r3,1
fff7cba8:	7f e5 fb 78 	mr      r5,r31
fff7cbac:	38 c0 00 00 	li      r6,0
fff7cbb0:	38 e0 00 00 	li      r7,0
fff7cbb4:	39 00 00 00 	li      r8,0
fff7cbb8:	4b ff ec 21 	bl      fff7b7d8 <pk_trace_big>
fff7cbbc:	48 00 00 10 	b       fff7cbcc <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm+0xa0>
            }
            else
            {
                if(o_uncompressedSize)
fff7cbc0:	06 dd 00 06 	bwz     r29,fff7cbcc <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm+0xa0>
fff7cbc4:	81 3e 00 10 	lwz     r9,16(r30)
                    *o_uncompressedSize = fileArchiveEntry.get_size();
fff7cbc8:	91 3d 00 00 	stw     r9,0(r29)
            }
        }
    }
    return rc;
}
fff7cbcc:	80 01 00 2c 	lwz     r0,44(r1)
fff7cbd0:	7f e3 fb 78 	mr      r3,r31
fff7cbd4:	7c 08 03 a6 	mtlr    r0
fff7cbd8:	17 81 00 18 	lvd     d28,24(r1)
fff7cbdc:	17 c1 00 20 	lvd     d30,32(r1)
fff7cbe0:	38 21 00 28 	addi    r1,r1,40
fff7cbe4:	4e 80 00 20 	blr

fff7cbe8 <_ZN10PakWrapper19get_image_start_ptrEPKc>:
uint8_t* PakWrapper::get_image_start_ptr(const char* i_fileName)
{
    ARC_RET_t rc = ARC_INVALID_PARAMS;
    uint8_t* startOffset = NULL;

    if(i_fileName != nullptr)
fff7cbe8:	06 c4 00 30 	bwz     r4,fff7cc48 <_ZN10PakWrapper19get_image_start_ptrEPKc+0x60>
    }
    return rc;
}

uint8_t* PakWrapper::get_image_start_ptr(const char* i_fileName)
{
fff7cbec:	94 21 ff e0 	stwu    r1,-32(r1)
fff7cbf0:	7c 08 02 a6 	mflr    r0
fff7cbf4:	1b c1 00 18 	stvd    d30,24(r1)
    ARC_RET_t rc = ARC_INVALID_PARAMS;
    uint8_t* startOffset = NULL;

    if(i_fileName != nullptr)
    {
        rc = iv_fileArchive.locate_file(i_fileName, fileArchiveEntry);
fff7cbf8:	3b e3 00 04 	addi    r31,r3,4
fff7cbfc:	7f e5 fb 78 	mr      r5,r31
    }
    return rc;
}

uint8_t* PakWrapper::get_image_start_ptr(const char* i_fileName)
{
fff7cc00:	90 01 00 24 	stw     r0,36(r1)
    ARC_RET_t rc = ARC_INVALID_PARAMS;
    uint8_t* startOffset = NULL;

    if(i_fileName != nullptr)
    {
        rc = iv_fileArchive.locate_file(i_fileName, fileArchiveEntry);
fff7cc04:	4b ff d1 99 	bl      fff79d9c <_ZN11FileArchive11locate_fileEPKcRNS_5EntryE>
fff7cc08:	7c 65 1b 78 	mr      r5,r3
        if (rc != ARC_OPERATION_SUCCESSFUL)
fff7cc0c:	06 43 00 0e 	bwnz    r3,fff7cc28 <_ZN10PakWrapper19get_image_start_ptrEPKc+0x40>
        }

        __attribute__((always_inline))
        ARC_RET_t get_stored_data_ptr(const void*& o_buffer)
        {
            return fileArchiveEntry.get_stored_data_ptr(o_buffer);
fff7cc10:	7f e3 fb 78 	mr      r3,r31
fff7cc14:	38 81 00 08 	addi    r4,r1,8
fff7cc18:	4b ff cf 3d 	bl      fff79b54 <_ZN11FileArchive5Entry19get_stored_data_ptrERPKv>
fff7cc1c:	7c 65 1b 78 	mr      r5,r3
            {
                ARC_ERROR(" Pak Read for metadata Failed. Rc: %x ", rc);
            }
            else
            {
                startOffset = (uint8_t*)ptr;
fff7cc20:	80 61 00 08 	lwz     r3,8(r1)
        }
        else
        {
            const void* ptr;
            rc = get_stored_data_ptr(ptr);
            if (rc != ARC_OPERATION_SUCCESSFUL)
fff7cc24:	06 c5 00 16 	bwz     r5,fff7cc50 <_ZN10PakWrapper19get_image_start_ptrEPKc+0x68>
            {
                ARC_ERROR(" Pak Read for metadata Failed. Rc: %x ", rc);
fff7cc28:	3c 60 e8 bc 	lis     r3,-5956
fff7cc2c:	60 63 00 01 	ori     r3,r3,1
fff7cc30:	38 c0 00 00 	li      r6,0
fff7cc34:	38 e0 00 00 	li      r7,0
fff7cc38:	39 00 00 00 	li      r8,0
fff7cc3c:	4b ff eb 9d 	bl      fff7b7d8 <pk_trace_big>
}

uint8_t* PakWrapper::get_image_start_ptr(const char* i_fileName)
{
    ARC_RET_t rc = ARC_INVALID_PARAMS;
    uint8_t* startOffset = NULL;
fff7cc40:	38 60 00 00 	li      r3,0
fff7cc44:	48 00 00 0c 	b       fff7cc50 <_ZN10PakWrapper19get_image_start_ptrEPKc+0x68>
fff7cc48:	38 60 00 00 	li      r3,0
fff7cc4c:	4e 80 00 20 	blr
                startOffset = (uint8_t*)ptr;
            }
        }
    }
    return startOffset;
}
fff7cc50:	80 01 00 24 	lwz     r0,36(r1)
fff7cc54:	17 c1 00 18 	lvd     d30,24(r1)
fff7cc58:	7c 08 03 a6 	mtlr    r0
fff7cc5c:	38 21 00 20 	addi    r1,r1,32
fff7cc60:	4e 80 00 20 	blr

Disassembly of section .odysseybldrloader:

fff7d068 <jump2BootLoaderImage>:

//Function to jump to Boot Loader Image
void jump2BootLoaderImage(uint32_t i_bootLoaderOrigin)
{
    uint64_t data = (uint64_t)i_bootLoaderOrigin << 32;
    PPE_STVD(0xc0000160, data);
fff7d068:	3d 40 c0 00 	lis     r10,-16384
extern uint8_t hashList[HASH_LIST_SIZE];

//Function to jump to Boot Loader Image
void jump2BootLoaderImage(uint32_t i_bootLoaderOrigin)
{
    uint64_t data = (uint64_t)i_bootLoaderOrigin << 32;
fff7d06c:	7c 68 1b 78 	mr      r8,r3
fff7d070:	39 20 00 00 	li      r9,0
    PPE_STVD(0xc0000160, data);
fff7d074:	61 4a 01 60 	ori     r10,r10,352
fff7d078:	19 0a 00 00 	stvd    d8,0(r10)
    uint32_t bootAddr = i_bootLoaderOrigin + 0x40;
fff7d07c:	38 63 00 40 	addi    r3,r3,64
    asm volatile ( "mr %0, %1" : : "i" (6), "r" (bootAddr) : "memory" );
fff7d080:	7c 66 1b 78 	mr      r6,r3
    asm(
            "mtctr %r6\n"
            "bctr\n"
        );
fff7d084:	7c c9 03 a6 	mtctr   r6
fff7d088:	4e 80 04 20 	bctr
fff7d08c:	4e 80 00 20 	blr

fff7d090 <_Z15loadAndJumpBldrP10PakWrapperb>:
}


void loadAndJumpBldr(PakWrapper *pak, bool fileHashCalculationEnable)
{
fff7d090:	94 21 ff a8 	stwu    r1,-88(r1)
fff7d094:	7c 08 02 a6 	mflr    r0
fff7d098:	1b c1 00 50 	stvd    d30,80(r1)

    // Get image start offset
    uint32_t imageStartOffset = NULL;

    //Get Boot Loader start offset in nor
    filePtr = pak->get_image_start_ptr(bldr_file_name);
fff7d09c:	3f e0 ff f8 	lis     r31,-8
fff7d0a0:	3b ff d1 e0 	addi    r31,r31,-11808
        );
}


void loadAndJumpBldr(PakWrapper *pak, bool fileHashCalculationEnable)
{
fff7d0a4:	1b 81 00 48 	stvd    d28,72(r1)
fff7d0a8:	7c 9d 23 78 	mr      r29,r4

    // Get image start offset
    uint32_t imageStartOffset = NULL;

    //Get Boot Loader start offset in nor
    filePtr = pak->get_image_start_ptr(bldr_file_name);
fff7d0ac:	7f e4 fb 78 	mr      r4,r31
        );
}


void loadAndJumpBldr(PakWrapper *pak, bool fileHashCalculationEnable)
{
fff7d0b0:	90 01 00 5c 	stw     r0,92(r1)
fff7d0b4:	7c 7c 1b 78 	mr      r28,r3

    // Get image start offset
    uint32_t imageStartOffset = NULL;

    //Get Boot Loader start offset in nor
    filePtr = pak->get_image_start_ptr(bldr_file_name);
fff7d0b8:	4b ff fb 31 	bl      fff7cbe8 <_ZN10PakWrapper19get_image_start_ptrEPKc>
fff7d0bc:	7c 7e 1b 78 	mr      r30,r3
    if (filePtr == NULL)
fff7d0c0:	06 43 00 0a 	bwnz    r3,fff7d0d4 <_Z15loadAndJumpBldrP10PakWrapperb+0x44>
    {
        SBE_ERROR(" Pak get image start pointer Failed ");
fff7d0c4:	3c 60 b3 46 	lis     r3,-19642
fff7d0c8:	4b ff e1 15 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCodeAndHalt(FILE_RC_PAYLOAD_GET_IMAGE_START_PTR_ERROR);
fff7d0cc:	38 60 05 60 	li      r3,1376
fff7d0d0:	4b ff ab ed 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
    uint32_t traceAddr; // Address of the trace buffer
    uint32_t traceSize; // Size of the trace buffer
};

// Intended load address for the image
DECLARE_METADATA(LDA, 0x4c4441) {
fff7d0d4:	3c 80 00 4c 	lis     r4,76
fff7d0d8:	38 7e 02 00 	addi    r3,r30,512
fff7d0dc:	60 84 44 41 	ori     r4,r4,17473
fff7d0e0:	4b ff ad 0d 	bl      fff77dec <_Z13_get_metadataPKvm>
fff7d0e4:	7c 7e 1b 78 	mr      r30,r3
    }

    //Get image metadata pointer
    auto ptrLDAStruct = GET_META_LDA((uint8_t*)filePtr + VECTOR_SIZE);
    if (ptrLDAStruct == NULL)
fff7d0e8:	06 43 00 0a 	bwnz    r3,fff7d0fc <_Z15loadAndJumpBldrP10PakWrapperb+0x6c>
    {
        SBE_ERROR(SBE_FUNC "Failed to read bootloader load address");
fff7d0ec:	3c 60 5e d1 	lis     r3,24273
fff7d0f0:	4b ff e0 ed 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCodeAndHalt(FILE_RC_PAYLOAD_GET_IMAGE_METADATA_PTR_ERROR);
fff7d0f4:	38 60 05 61 	li      r3,1377
fff7d0f8:	4b ff ab c5 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
    }
    imageStartOffset = ptrLDAStruct->loadAddr;
fff7d0fc:	83 de 00 00 	lwz     r30,0(r30)

    //Load the Boot Loader Image into pibmem
    //NOTE:Boot Loader is un-compressed
    pakRc = pak->read_file(bldr_file_name, (uint32_t*)imageStartOffset,
            (HASH_LIST_START_OFFSET - (uint32_t)imageStartOffset),
            (fileHashCalculationEnable ? &digest : NULL), NULL);
fff7d100:	38 e1 00 08 	addi    r7,r1,8
fff7d104:	20 de f7 f8 	subfic  r6,r30,-2056
fff7d108:	06 5d 00 04 	bwnz    r29,fff7d110 <_Z15loadAndJumpBldrP10PakWrapperb+0x80>
fff7d10c:	38 e0 00 00 	li      r7,0
fff7d110:	7f 83 e3 78 	mr      r3,r28
fff7d114:	7f e4 fb 78 	mr      r4,r31
fff7d118:	7f c5 f3 78 	mr      r5,r30
fff7d11c:	39 00 00 00 	li      r8,0
fff7d120:	4b ff fa 0d 	bl      fff7cb2c <_ZN10PakWrapper9read_fileEPKcPvmPA64_hPm>
fff7d124:	7c 7c 1b 78 	mr      r28,r3
    if(pakRc != ARC_OPERATION_SUCCESSFUL)
fff7d128:	06 c3 00 0c 	bwz     r3,fff7d140 <_Z15loadAndJumpBldrP10PakWrapperb+0xb0>
    {
        SBE_ERROR(SBE_FUNC "Failed to read bootloader");
fff7d12c:	3c 60 e7 f8 	lis     r3,-6152
fff7d130:	4b ff e0 ad 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCodeAndHalt(FILE_RC_PAYLOAD_FILE_READ_BASE_ERROR + pakRc);
fff7d134:	38 7c 05 40 	addi    r3,r28,1344
fff7d138:	54 63 04 3e 	clrlwi  r3,r3,16
fff7d13c:	4b ff ab 81 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
    }

    // Check for hash list version.
    // 1st byte of hash list is version
    if(*(hashList) != SROM_HASH_LIST_SUPPORTED_VERSION)
fff7d140:	3d 20 00 00 	lis     r9,0
fff7d144:	88 69 f7 f8 	lbz     r3,-2056(r9)
fff7d148:	7d 3c 4b 78 	mr      r28,r9
fff7d14c:	06 c3 08 0a 	cmpwibeq r3,1,fff7d160 <_Z15loadAndJumpBldrP10PakWrapperb+0xd0>
    {
        SBE_ERROR(SBE_FUNC "Unsupported hash list version 0x%02x", *hashList);
fff7d150:	64 63 5c 15 	oris    r3,r3,23573
fff7d154:	4b ff e0 89 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCodeAndHalt(BOOT_RC_INVALID_HASH_LIST_VERSION);
fff7d158:	38 60 03 60 	li      r3,864
fff7d15c:	4b ff ab 61 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
    }

    // Check for hash list hash algo.
    // 2nd byte of hash list is hash algo
    if(*(hashList + 1) != SROM_HASH_LIST_SUPPORTED_HASH_ALGO)
fff7d160:	39 3c f7 f8 	addi    r9,r28,-2056
fff7d164:	88 69 00 01 	lbz     r3,1(r9)
fff7d168:	7d 3c 4b 78 	mr      r28,r9
fff7d16c:	06 c3 08 0a 	cmpwibeq r3,1,fff7d180 <_Z15loadAndJumpBldrP10PakWrapperb+0xf0>
    {
        SBE_ERROR(SBE_FUNC "Unsupported hash list hash algorithm 0x%02x", *(hashList + 1));
fff7d170:	64 63 ac 04 	oris    r3,r3,44036
fff7d174:	4b ff e0 69 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCodeAndHalt(BOOT_RC_INVALID_HASH_LIST_HASH_ALGO);
fff7d178:	38 60 03 61 	li      r3,865
fff7d17c:	4b ff ab 41 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
    }

    UPDATE_SROM_SBE_PROGRESS_CODE(VERIFYING_PAYLOAD_HASH_WITH_HASHLIST);
fff7d180:	38 60 00 3d 	li      r3,61
fff7d184:	4b ff ac 15 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Compare the bootloader.bin hash calculated with hash list value
    if(fileHashCalculationEnable)
fff7d188:	06 dd 00 18 	bwz     r29,fff7d1b8 <_Z15loadAndJumpBldrP10PakWrapperb+0x128>
    {
        SBE::HASH_LIST_RET_t hashListRc;
        hashListRc = SBE::check_file_hash(bldr_file_name, digest, hashList);
fff7d18c:	7f e3 fb 78 	mr      r3,r31
fff7d190:	38 81 00 08 	addi    r4,r1,8
fff7d194:	7f 85 e3 78 	mr      r5,r28
fff7d198:	4b ff aa 3d 	bl      fff77bd4 <_ZN3SBE15check_file_hashEPKcRA64_KhPS2_>
fff7d19c:	7c 7f 1b 78 	mr      r31,r3
        if(hashListRc != SBE::HASH_COMPARE_PASS)
fff7d1a0:	06 c3 00 0c 	bwz     r3,fff7d1b8 <_Z15loadAndJumpBldrP10PakWrapperb+0x128>
        {
            SBE_ERROR(SBE_FUNC "Failed to verify bootloader hash");
fff7d1a4:	3c 60 a1 c8 	lis     r3,-24120
fff7d1a8:	4b ff e0 35 	bl      fff7b1dc <pk_trace_tiny>
            SBE::updateErrorCodeAndHalt(FILE_RC_PAYLOAD_HASH_VERIFICATION + hashListRc);
fff7d1ac:	38 7f 05 50 	addi    r3,r31,1360
fff7d1b0:	54 63 04 3e 	clrlwi  r3,r3,16
fff7d1b4:	4b ff ab 09 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
        }
    }

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM);
fff7d1b8:	38 60 00 3e 	li      r3,62
fff7d1bc:	4b ff ab dd 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    //Jump to Boot Loader image
    jump2BootLoaderImage(imageStartOffset);
fff7d1c0:	7f c3 f3 78 	mr      r3,r30
fff7d1c4:	4b ff fe a5 	bl      fff7d068 <jump2BootLoaderImage>

    SBE_EXIT(SBE_FUNC);
#undef SBE_FUNC
}
fff7d1c8:	80 01 00 5c 	lwz     r0,92(r1)
fff7d1cc:	17 81 00 48 	lvd     d28,72(r1)
fff7d1d0:	7c 08 03 a6 	mtlr    r0
fff7d1d4:	17 c1 00 50 	lvd     d30,80(r1)
fff7d1d8:	38 21 00 58 	addi    r1,r1,88
fff7d1dc:	4e 80 00 20 	blr

fff7d1e0 <_ZL14bldr_file_name>:
fff7d1e0:	62 6f 6f 74 2f 62 6c 64 72 2e 62 69 6e 00           boot/bldr.bin.

Disassembly of section .odysseyshvsettings:

fff7d5f0 <_Z11shvSettingsv>:
        63-scomt::perv::FSXCOMP_FSXLOG_CBS_CS_SECURE_ACCESS_BIT)

extern secureBootCtrlSettings_t sromSecureBootCtrlSettings;

void shvSettings()
{
fff7d5f0:	94 21 ff c0 	stwu    r1,-64(r1)

    // OTPROM secure boot Control reg
    control_reg_t control_reg;

    // Read Secure Boot Control Reg from OTPROM
    getscom_abs(CONTROL_REG, &control_reg.control_reg);
fff7d5f4:	3c 60 00 01 	lis     r3,1
        63-scomt::perv::FSXCOMP_FSXLOG_CBS_CS_SECURE_ACCESS_BIT)

extern secureBootCtrlSettings_t sromSecureBootCtrlSettings;

void shvSettings()
{
fff7d5f8:	7c 08 02 a6 	mflr    r0

    // OTPROM secure boot Control reg
    control_reg_t control_reg;

    // Read Secure Boot Control Reg from OTPROM
    getscom_abs(CONTROL_REG, &control_reg.control_reg);
fff7d5fc:	38 81 00 28 	addi    r4,r1,40
fff7d600:	60 63 80 05 	ori     r3,r3,32773
        63-scomt::perv::FSXCOMP_FSXLOG_CBS_CS_SECURE_ACCESS_BIT)

extern secureBootCtrlSettings_t sromSecureBootCtrlSettings;

void shvSettings()
{
fff7d604:	90 01 00 44 	stw     r0,68(r1)
fff7d608:	1b c1 00 38 	stvd    d30,56(r1)

    // OTPROM secure boot Control reg
    control_reg_t control_reg;

    // Read Secure Boot Control Reg from OTPROM
    getscom_abs(CONTROL_REG, &control_reg.control_reg);
fff7d60c:	4b ff cc 21 	bl      fff7a22c <getscom_abs>
    SBE_INFO(SBE_FUNC "OTPROM Ctrl Reg  [0x%08X 0x%08X] ", SBE::higher32BWord(control_reg.control_reg),
            SBE::lower32BWord(control_reg.control_reg));
fff7d610:	14 a1 00 28 	lvd     d5,40(r1)
fff7d614:	3c 60 1c 89 	lis     r3,7305
fff7d618:	38 e0 00 00 	li      r7,0
fff7d61c:	39 00 00 00 	li      r8,0
fff7d620:	60 63 00 02 	ori     r3,r3,2
fff7d624:	4b ff e1 b5 	bl      fff7b7d8 <pk_trace_big>

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_OTPROM_CONTROL_REG_READ);
fff7d628:	38 60 00 0b 	li      r3,11
fff7d62c:	4b ff a7 6d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // Read mbx16 to check if mbx11 is valid
    mbx16_t mbx16 = {0};
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_16_RW, &mbx16.iv_mbx16);
fff7d630:	3c 60 00 05 	lis     r3,5
fff7d634:	38 81 00 20 	addi    r4,r1,32
            SBE::lower32BWord(control_reg.control_reg));

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_OTPROM_CONTROL_REG_READ);

    // Read mbx16 to check if mbx11 is valid
    mbx16_t mbx16 = {0};
fff7d638:	3b c0 00 00 	li      r30,0
fff7d63c:	3b e0 00 00 	li      r31,0
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_16_RW, &mbx16.iv_mbx16);
fff7d640:	60 63 01 87 	ori     r3,r3,391
            SBE::lower32BWord(control_reg.control_reg));

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_OTPROM_CONTROL_REG_READ);

    // Read mbx16 to check if mbx11 is valid
    mbx16_t mbx16 = {0};
fff7d644:	1b c1 00 20 	stvd    d30,32(r1)
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_16_RW, &mbx16.iv_mbx16);
fff7d648:	4b ff cb e5 	bl      fff7a22c <getscom_abs>
    SBE_INFO(SBE_FUNC "MBX16  [0x%08X 0x%08X] ", SBE::higher32BWord(mbx16.iv_mbx16),
                SBE::lower32BWord(mbx16.iv_mbx16));
fff7d64c:	14 a1 00 20 	lvd     d5,32(r1)
fff7d650:	3c 60 8b 5b 	lis     r3,-29861
fff7d654:	60 63 00 02 	ori     r3,r3,2
fff7d658:	38 e0 00 00 	li      r7,0
fff7d65c:	39 00 00 00 	li      r8,0
fff7d660:	4b ff e1 79 	bl      fff7b7d8 <pk_trace_big>

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_MBX16_REG_READ);
fff7d664:	38 60 00 0c 	li      r3,12
fff7d668:	4b ff a7 31 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // Read mbx11 scratch for Secure Boot control data
    mbx11_t mbx11 = {0};
    if(mbx16.iv_mbx11Valid != 0x1)
fff7d66c:	81 21 00 20 	lwz     r9,32(r1)
                SBE::lower32BWord(mbx16.iv_mbx16));

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_MBX16_REG_READ);

    // Read mbx11 scratch for Secure Boot control data
    mbx11_t mbx11 = {0};
fff7d670:	1b c1 00 18 	stvd    d30,24(r1)
    if(mbx16.iv_mbx11Valid != 0x1)
fff7d674:	07 09 50 08 	bb1wi   r9,10,fff7d684 <_Z11shvSettingsv+0x94>
    {
        SBE_INFO(SBE_FUNC "Scratch valid bit not set for MBX11 .Defaulting mbx11 to 0x00");
fff7d678:	3c 60 40 3a 	lis     r3,16442
fff7d67c:	4b ff db 61 	bl      fff7b1dc <pk_trace_tiny>
fff7d680:	48 00 00 2c 	b       fff7d6ac <_Z11shvSettingsv+0xbc>
    }
    else
    {
        getscom_abs(scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_11_RW, &mbx11.iv_mbx11);
fff7d684:	3c 60 00 05 	lis     r3,5
fff7d688:	60 63 01 82 	ori     r3,r3,386
fff7d68c:	38 81 00 18 	addi    r4,r1,24
fff7d690:	4b ff cb 9d 	bl      fff7a22c <getscom_abs>
        SBE_INFO(SBE_FUNC "MBX11  [0x%08X 0x%08X] ", SBE::higher32BWord(mbx11.iv_mbx11),
                    SBE::lower32BWord(mbx11.iv_mbx11));
fff7d694:	3c 60 3b d8 	lis     r3,15320
fff7d698:	14 a1 00 18 	lvd     d5,24(r1)
fff7d69c:	60 63 00 02 	ori     r3,r3,2
fff7d6a0:	38 e0 00 00 	li      r7,0
fff7d6a4:	39 00 00 00 	li      r8,0
fff7d6a8:	4b ff e1 31 	bl      fff7b7d8 <pk_trace_big>
    }

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_MBX11_REG_READ);
fff7d6ac:	38 60 00 0d 	li      r3,13
fff7d6b0:	4b ff a6 e9 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    uint8_t signatureAlgoCheck;
    // Check if ECDSA enable or disable
    signatureAlgoCheck = getSignatureAlgoCheck(mbx11.iv_enableECDSA,
       applyTripleModularRedundancyVoting(control_reg.control_reg_val.ecdsaSigCheckEnable),
fff7d6b4:	80 61 00 28 	lwz     r3,40(r1)
       applyTripleModularRedundancyVoting(control_reg.control_reg_val.ecdsaSigCheckDisable));
fff7d6b8:	83 c1 00 18 	lwz     r30,24(r1)
    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_MBX11_REG_READ);

    uint8_t signatureAlgoCheck;
    // Check if ECDSA enable or disable
    signatureAlgoCheck = getSignatureAlgoCheck(mbx11.iv_enableECDSA,
       applyTripleModularRedundancyVoting(control_reg.control_reg_val.ecdsaSigCheckEnable),
fff7d6bc:	54 63 37 7e 	rlwinm  r3,r3,6,29,31
fff7d6c0:	4b ff be e1 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
fff7d6c4:	7c 7f 1b 78 	mr      r31,r3
       applyTripleModularRedundancyVoting(control_reg.control_reg_val.ecdsaSigCheckDisable));
fff7d6c8:	80 61 00 28 	lwz     r3,40(r1)
fff7d6cc:	57 de 8f fe 	rlwinm  r30,r30,17,31,31
fff7d6d0:	54 63 4f 7e 	rlwinm  r3,r3,9,29,31
fff7d6d4:	4b ff be cd 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
fff7d6d8:	7c a3 00 d0 	neg     r5,r3
fff7d6dc:	7c 9f 00 d0 	neg     r4,r31
fff7d6e0:	7f c3 f3 78 	mr      r3,r30
fff7d6e4:	54 84 0f fe 	rlwinm  r4,r4,1,31,31
fff7d6e8:	54 a5 0f fe 	rlwinm  r5,r5,1,31,31
fff7d6ec:	4b ff be 95 	bl      fff79580 <_Z21getSignatureAlgoCheckbbb>
fff7d6f0:	7c 7f 1b 78 	mr      r31,r3

    if(signatureAlgoCheck == INVALID_SIGNATURE_CNFG)
fff7d6f4:	06 43 10 0a 	cmpwibne r3,2,fff7d708 <_Z11shvSettingsv+0x118>
    {
        SBE_ERROR(SBE_FUNC "Invalid ECDSA Signature Check configuration.");
fff7d6f8:	3c 60 32 98 	lis     r3,12952
fff7d6fc:	4b ff da e1 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCodeAndHalt(BOOT_RC_INVALID_ECDSA_FUSE_CHECK_CNFG);
fff7d700:	38 60 03 10 	li      r3,784
fff7d704:	4b ff a5 b9 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
    }
    sromSecureBootCtrlSettings.ecdsaSigCheckEnable = signatureAlgoCheck;
fff7d708:	81 2d 01 90 	lwz     r9,400(r13)
    SBE_INFO(SBE_FUNC "ECDSA Signature Check 0x%01x",(bool)sromSecureBootCtrlSettings.ecdsaSigCheckEnable);
fff7d70c:	3c 60 78 45 	lis     r3,30789
    if(signatureAlgoCheck == INVALID_SIGNATURE_CNFG)
    {
        SBE_ERROR(SBE_FUNC "Invalid ECDSA Signature Check configuration.");
        SBE::updateErrorCodeAndHalt(BOOT_RC_INVALID_ECDSA_FUSE_CHECK_CNFG);
    }
    sromSecureBootCtrlSettings.ecdsaSigCheckEnable = signatureAlgoCheck;
fff7d710:	53 e9 f0 42 	rlwimi  r9,r31,30,1,1
fff7d714:	91 2d 01 90 	stw     r9,400(r13)
    SBE_INFO(SBE_FUNC "ECDSA Signature Check 0x%01x",(bool)sromSecureBootCtrlSettings.ecdsaSigCheckEnable);
fff7d718:	60 63 00 01 	ori     r3,r3,1
fff7d71c:	07 09 08 04 	bb1wi   r9,1,fff7d724 <_Z11shvSettingsv+0x134>
fff7d720:	3c 60 78 45 	lis     r3,30789
fff7d724:	4b ff da b9 	bl      fff7b1dc <pk_trace_tiny>

    // Check if Dilithium enable or disable
    signatureAlgoCheck = getSignatureAlgoCheck(mbx11.iv_enableDilithium,
            applyTripleModularRedundancyVoting(control_reg.control_reg_val.dilithiumSigCheckEnable),
fff7d728:	80 61 00 28 	lwz     r3,40(r1)
            applyTripleModularRedundancyVoting(control_reg.control_reg_val.dilithiumSigCheckDisable));
fff7d72c:	83 c1 00 18 	lwz     r30,24(r1)
    sromSecureBootCtrlSettings.ecdsaSigCheckEnable = signatureAlgoCheck;
    SBE_INFO(SBE_FUNC "ECDSA Signature Check 0x%01x",(bool)sromSecureBootCtrlSettings.ecdsaSigCheckEnable);

    // Check if Dilithium enable or disable
    signatureAlgoCheck = getSignatureAlgoCheck(mbx11.iv_enableDilithium,
            applyTripleModularRedundancyVoting(control_reg.control_reg_val.dilithiumSigCheckEnable),
fff7d730:	54 63 67 7e 	rlwinm  r3,r3,12,29,31
fff7d734:	4b ff be 6d 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
fff7d738:	7c 7f 1b 78 	mr      r31,r3
            applyTripleModularRedundancyVoting(control_reg.control_reg_val.dilithiumSigCheckDisable));
fff7d73c:	80 61 00 28 	lwz     r3,40(r1)
fff7d740:	57 de 97 fe 	rlwinm  r30,r30,18,31,31
fff7d744:	54 63 7f 7e 	rlwinm  r3,r3,15,29,31
fff7d748:	4b ff be 59 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
fff7d74c:	7c a3 00 d0 	neg     r5,r3
fff7d750:	7c 9f 00 d0 	neg     r4,r31
fff7d754:	7f c3 f3 78 	mr      r3,r30
fff7d758:	54 84 0f fe 	rlwinm  r4,r4,1,31,31
fff7d75c:	54 a5 0f fe 	rlwinm  r5,r5,1,31,31
fff7d760:	4b ff be 21 	bl      fff79580 <_Z21getSignatureAlgoCheckbbb>
fff7d764:	7c 7f 1b 78 	mr      r31,r3

    if(signatureAlgoCheck == INVALID_SIGNATURE_CNFG)
fff7d768:	06 43 10 0a 	cmpwibne r3,2,fff7d77c <_Z11shvSettingsv+0x18c>
    {
        SBE_ERROR(SBE_FUNC "Invalid DILITHIUM Signature Check configuration.");
fff7d76c:	3c 60 fb 64 	lis     r3,-1180
fff7d770:	4b ff da 6d 	bl      fff7b1dc <pk_trace_tiny>
        SBE::updateErrorCodeAndHalt(BOOT_RC_INVALID_DILITHIUM_FUSE_CHECK_CNFG);
fff7d774:	38 60 03 11 	li      r3,785
fff7d778:	4b ff a5 45 	bl      fff77cbc <_ZN3SBE22updateErrorCodeAndHaltEt>
    }
    sromSecureBootCtrlSettings.dilithiumSigCheckEnable = signatureAlgoCheck;
fff7d77c:	81 2d 01 90 	lwz     r9,400(r13)
    SBE_INFO(SBE_FUNC "Dilithium Signature Check 0x%01x",(bool)sromSecureBootCtrlSettings.dilithiumSigCheckEnable);
fff7d780:	3c 60 c4 fc 	lis     r3,-15108
    if(signatureAlgoCheck == INVALID_SIGNATURE_CNFG)
    {
        SBE_ERROR(SBE_FUNC "Invalid DILITHIUM Signature Check configuration.");
        SBE::updateErrorCodeAndHalt(BOOT_RC_INVALID_DILITHIUM_FUSE_CHECK_CNFG);
    }
    sromSecureBootCtrlSettings.dilithiumSigCheckEnable = signatureAlgoCheck;
fff7d784:	53 e9 e8 84 	rlwimi  r9,r31,29,2,2
fff7d788:	91 2d 01 90 	stw     r9,400(r13)
    SBE_INFO(SBE_FUNC "Dilithium Signature Check 0x%01x",(bool)sromSecureBootCtrlSettings.dilithiumSigCheckEnable);
fff7d78c:	60 63 00 01 	ori     r3,r3,1
fff7d790:	07 09 10 04 	bb1wi   r9,2,fff7d798 <_Z11shvSettingsv+0x1a8>
fff7d794:	3c 60 c4 fc 	lis     r3,-15108
fff7d798:	4b ff da 45 	bl      fff7b1dc <pk_trace_tiny>

    //Check if HW Key hash is enabled or disabled
    sromSecureBootCtrlSettings.hwKeyHashVerificationEnable =
        applyTripleModularRedundancyVoting(control_reg.control_reg_val.hwKeyHashVerificationEnable) |
fff7d79c:	80 61 00 28 	lwz     r3,40(r1)
fff7d7a0:	54 63 1f 7e 	rlwinm  r3,r3,3,29,31
fff7d7a4:	4b ff bd fd 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
        mbx11.iv_enableHwKeyHashVerification;
fff7d7a8:	81 21 00 18 	lwz     r9,24(r1)
fff7d7ac:	81 4d 01 90 	lwz     r10,400(r13)
fff7d7b0:	55 29 a7 fe 	rlwinm  r9,r9,20,31,31
fff7d7b4:	7c 63 4b 78 	or      r3,r3,r9
fff7d7b8:	50 6a d9 08 	rlwimi  r10,r3,27,4,4
    SBE_INFO(SBE_FUNC "HW Key Hash Check 0x%01x",(bool)sromSecureBootCtrlSettings.hwKeyHashVerificationEnable);
fff7d7bc:	3c 60 c4 21 	lis     r3,-15327
    SBE_INFO(SBE_FUNC "Dilithium Signature Check 0x%01x",(bool)sromSecureBootCtrlSettings.dilithiumSigCheckEnable);

    //Check if HW Key hash is enabled or disabled
    sromSecureBootCtrlSettings.hwKeyHashVerificationEnable =
        applyTripleModularRedundancyVoting(control_reg.control_reg_val.hwKeyHashVerificationEnable) |
        mbx11.iv_enableHwKeyHashVerification;
fff7d7c0:	91 4d 01 90 	stw     r10,400(r13)
    SBE_INFO(SBE_FUNC "HW Key Hash Check 0x%01x",(bool)sromSecureBootCtrlSettings.hwKeyHashVerificationEnable);
fff7d7c4:	60 63 00 01 	ori     r3,r3,1
fff7d7c8:	07 0a 20 04 	bb1wi   r10,4,fff7d7d0 <_Z11shvSettingsv+0x1e0>
fff7d7cc:	3c 60 c4 21 	lis     r3,-15327
fff7d7d0:	4b ff da 0d 	bl      fff7b1dc <pk_trace_tiny>

    // Check if ECID check is enabled
    sromSecureBootCtrlSettings.ecidCheckEnable =
        applyTripleModularRedundancyVoting(control_reg.control_reg_val.ecidCheckEnable) |
fff7d7d4:	80 61 00 28 	lwz     r3,40(r1)
fff7d7d8:	54 63 97 7e 	rlwinm  r3,r3,18,29,31
fff7d7dc:	4b ff bd c5 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
        mbx11.iv_enableEcidVerification;
fff7d7e0:	81 21 00 18 	lwz     r9,24(r1)
fff7d7e4:	81 4d 01 90 	lwz     r10,400(r13)
fff7d7e8:	55 29 9f fe 	rlwinm  r9,r9,19,31,31
fff7d7ec:	7c 63 4b 78 	or      r3,r3,r9
fff7d7f0:	50 6a e0 c6 	rlwimi  r10,r3,28,3,3
    SBE_INFO(SBE_FUNC "ECID Check 0x%01x",(bool)sromSecureBootCtrlSettings.ecidCheckEnable);
fff7d7f4:	3c 60 ce ed 	lis     r3,-12563
    SBE_INFO(SBE_FUNC "HW Key Hash Check 0x%01x",(bool)sromSecureBootCtrlSettings.hwKeyHashVerificationEnable);

    // Check if ECID check is enabled
    sromSecureBootCtrlSettings.ecidCheckEnable =
        applyTripleModularRedundancyVoting(control_reg.control_reg_val.ecidCheckEnable) |
        mbx11.iv_enableEcidVerification;
fff7d7f8:	91 4d 01 90 	stw     r10,400(r13)
    SBE_INFO(SBE_FUNC "ECID Check 0x%01x",(bool)sromSecureBootCtrlSettings.ecidCheckEnable);
fff7d7fc:	60 63 00 01 	ori     r3,r3,1
fff7d800:	07 0a 18 04 	bb1wi   r10,3,fff7d808 <_Z11shvSettingsv+0x218>
fff7d804:	3c 60 ce ed 	lis     r3,-12563
fff7d808:	4b ff d9 d5 	bl      fff7b1dc <pk_trace_tiny>

    // Check if Matching Minimum Security Version check is enabled
    sromSecureBootCtrlSettings.enforceMatchingMSV =
        applyTripleModularRedundancyVoting(
          control_reg.control_reg_val.matchingSecurityVersionEnforcement) |
fff7d80c:	80 61 00 28 	lwz     r3,40(r1)
fff7d810:	54 63 af 7e 	rlwinm  r3,r3,21,29,31
fff7d814:	4b ff bd 8d 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
        mbx11.iv_enforceMatchingSecurity;
fff7d818:	81 21 00 18 	lwz     r9,24(r1)
fff7d81c:	81 4d 01 90 	lwz     r10,400(r13)
fff7d820:	55 29 b7 fe 	rlwinm  r9,r9,22,31,31
fff7d824:	7c 63 4b 78 	or      r3,r3,r9
fff7d828:	50 6a c9 8c 	rlwimi  r10,r3,25,6,6
    SBE_INFO(SBE_FUNC "Matching MSV check 0x%01x",(bool)sromSecureBootCtrlSettings.enforceMatchingMSV);
fff7d82c:	3c 60 33 56 	lis     r3,13142

    // Check if Matching Minimum Security Version check is enabled
    sromSecureBootCtrlSettings.enforceMatchingMSV =
        applyTripleModularRedundancyVoting(
          control_reg.control_reg_val.matchingSecurityVersionEnforcement) |
        mbx11.iv_enforceMatchingSecurity;
fff7d830:	91 4d 01 90 	stw     r10,400(r13)
    SBE_INFO(SBE_FUNC "Matching MSV check 0x%01x",(bool)sromSecureBootCtrlSettings.enforceMatchingMSV);
fff7d834:	60 63 00 01 	ori     r3,r3,1
fff7d838:	07 0a 30 04 	bb1wi   r10,6,fff7d840 <_Z11shvSettingsv+0x250>
fff7d83c:	3c 60 33 56 	lis     r3,13142
fff7d840:	4b ff d9 9d 	bl      fff7b1dc <pk_trace_tiny>

    // Check if File hash calculation during PAK read is enabled
    sromSecureBootCtrlSettings.fileHashCalculationEnable =
           applyTripleModularRedundancyVoting(control_reg.control_reg_val.fileHashCalculationEnable) |
fff7d844:	80 61 00 28 	lwz     r3,40(r1)
fff7d848:	54 63 c7 7e 	rlwinm  r3,r3,24,29,31
fff7d84c:	4b ff bd 55 	bl      fff795a0 <_Z34applyTripleModularRedundancyVotingh>
           mbx11.iv_fileHashCalculationEnable;
fff7d850:	81 21 00 18 	lwz     r9,24(r1)
fff7d854:	81 4d 01 90 	lwz     r10,400(r13)
fff7d858:	55 29 af fe 	rlwinm  r9,r9,21,31,31
fff7d85c:	7c 63 4b 78 	or      r3,r3,r9
fff7d860:	50 6a c1 ce 	rlwimi  r10,r3,24,7,7
    SBE_INFO(SBE_FUNC "File hash calculation 0x%01x",
fff7d864:	3c 60 1e 80 	lis     r3,7808
    SBE_INFO(SBE_FUNC "Matching MSV check 0x%01x",(bool)sromSecureBootCtrlSettings.enforceMatchingMSV);

    // Check if File hash calculation during PAK read is enabled
    sromSecureBootCtrlSettings.fileHashCalculationEnable =
           applyTripleModularRedundancyVoting(control_reg.control_reg_val.fileHashCalculationEnable) |
           mbx11.iv_fileHashCalculationEnable;
fff7d868:	91 4d 01 90 	stw     r10,400(r13)
    SBE_INFO(SBE_FUNC "File hash calculation 0x%01x",
fff7d86c:	60 63 00 01 	ori     r3,r3,1
fff7d870:	07 0a 38 04 	bb1wi   r10,7,fff7d878 <_Z11shvSettingsv+0x288>
fff7d874:	3c 60 1e 80 	lis     r3,7808
fff7d878:	4b ff d9 65 	bl      fff7b1dc <pk_trace_tiny>
    sromSecureBootCtrlSettings.secureBootVerificationEnforcement =
            sromSecureBootCtrlSettings.ecdsaSigCheckEnable |
            sromSecureBootCtrlSettings.dilithiumSigCheckEnable |
            sromSecureBootCtrlSettings.hwKeyHashVerificationEnable |
            sromSecureBootCtrlSettings.fileHashCalculationEnable |
            mbx11.iv_secureBootValidityVerification;
fff7d87c:	80 6d 01 90 	lwz     r3,400(r13)
    SBE_INFO(SBE_FUNC "Secure Boot Verification Enforcement 0x%01x",
            (bool)sromSecureBootCtrlSettings.secureBootVerificationEnforcement);

    // Read the OTPROM Fuse Regs
    uint64_t msvFuseBank = 0x00;
fff7d880:	3b c0 00 00 	li      r30,0
    sromSecureBootCtrlSettings.secureBootVerificationEnforcement =
            sromSecureBootCtrlSettings.ecdsaSigCheckEnable |
            sromSecureBootCtrlSettings.dilithiumSigCheckEnable |
            sromSecureBootCtrlSettings.hwKeyHashVerificationEnable |
            sromSecureBootCtrlSettings.fileHashCalculationEnable |
            mbx11.iv_secureBootValidityVerification;
fff7d884:	54 6a 1f fe 	rlwinm  r10,r3,3,31,31
fff7d888:	54 69 17 fe 	rlwinm  r9,r3,2,31,31
fff7d88c:	54 68 2f fe 	rlwinm  r8,r3,5,31,31
fff7d890:	7d 49 4b 78 	or      r9,r10,r9
fff7d894:	7d 29 43 78 	or      r9,r9,r8
fff7d898:	54 6a 47 fe 	rlwinm  r10,r3,8,31,31
fff7d89c:	7d 2a 53 78 	or      r10,r9,r10
fff7d8a0:	81 21 00 18 	lwz     r9,24(r1)
    SBE_INFO(SBE_FUNC "Secure Boot Verification Enforcement 0x%01x",
            (bool)sromSecureBootCtrlSettings.secureBootVerificationEnforcement);

    // Read the OTPROM Fuse Regs
    uint64_t msvFuseBank = 0x00;
fff7d8a4:	3b e0 00 00 	li      r31,0
    sromSecureBootCtrlSettings.secureBootVerificationEnforcement =
            sromSecureBootCtrlSettings.ecdsaSigCheckEnable |
            sromSecureBootCtrlSettings.dilithiumSigCheckEnable |
            sromSecureBootCtrlSettings.hwKeyHashVerificationEnable |
            sromSecureBootCtrlSettings.fileHashCalculationEnable |
            mbx11.iv_secureBootValidityVerification;
fff7d8a8:	55 29 bf fe 	rlwinm  r9,r9,23,31,31
fff7d8ac:	7d 49 4b 78 	or      r9,r10,r9
fff7d8b0:	51 23 f8 00 	rlwimi  r3,r9,31,0,0
fff7d8b4:	90 6d 01 90 	stw     r3,400(r13)
    SBE_INFO(SBE_FUNC "Secure Boot Verification Enforcement 0x%01x",
fff7d8b8:	54 63 0f fe 	rlwinm  r3,r3,1,31,31
fff7d8bc:	3c 63 1d 86 	addis   r3,r3,7558
fff7d8c0:	4b ff d9 1d 	bl      fff7b1dc <pk_trace_tiny>
            (bool)sromSecureBootCtrlSettings.secureBootVerificationEnforcement);

    // Read the OTPROM Fuse Regs
    uint64_t msvFuseBank = 0x00;

    getscom_abs(MSV_FUSE_BANK, &msvFuseBank);
fff7d8c4:	3c 60 00 01 	lis     r3,1
fff7d8c8:	38 81 00 10 	addi    r4,r1,16
fff7d8cc:	60 63 80 06 	ori     r3,r3,32774
            mbx11.iv_secureBootValidityVerification;
    SBE_INFO(SBE_FUNC "Secure Boot Verification Enforcement 0x%01x",
            (bool)sromSecureBootCtrlSettings.secureBootVerificationEnforcement);

    // Read the OTPROM Fuse Regs
    uint64_t msvFuseBank = 0x00;
fff7d8d0:	1b c1 00 10 	stvd    d30,16(r1)

    getscom_abs(MSV_FUSE_BANK, &msvFuseBank);
fff7d8d4:	4b ff c9 59 	bl      fff7a22c <getscom_abs>
    SBE_INFO("MSV Fuse Bank [0x%08X 0x%08X] ", SBE::higher32BWord(msvFuseBank),
            SBE::lower32BWord(msvFuseBank));
fff7d8d8:	14 a1 00 10 	lvd     d5,16(r1)
fff7d8dc:	3c 60 4b 72 	lis     r3,19314
fff7d8e0:	39 00 00 00 	li      r8,0
fff7d8e4:	38 e0 00 00 	li      r7,0
fff7d8e8:	60 63 00 02 	ori     r3,r3,2
fff7d8ec:	4b ff de ed 	bl      fff7b7d8 <pk_trace_big>

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_MSV_FUSE_BANK_OTPROM_READ);
fff7d8f0:	38 60 00 0e 	li      r3,14
fff7d8f4:	4b ff a4 a5 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>

    // Get the MSV basis OTPROM Fuse bits
    sromSecureBootCtrlSettings.msv = getMSV(msvFuseBank);
fff7d8f8:	14 61 00 10 	lvd     d3,16(r1)
fff7d8fc:	4b ff bc cd 	bl      fff795c8 <_Z6getMSVy>
fff7d900:	81 2d 01 90 	lwz     r9,400(r13)
fff7d904:	50 69 63 26 	rlwimi  r9,r3,12,12,19
    SBE_INFO(SBE_FUNC "MSV 0x%02x",(uint8_t)sromSecureBootCtrlSettings.msv);
fff7d908:	64 63 5d bf 	oris    r3,r3,23999
            SBE::lower32BWord(msvFuseBank));

    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_MSV_FUSE_BANK_OTPROM_READ);

    // Get the MSV basis OTPROM Fuse bits
    sromSecureBootCtrlSettings.msv = getMSV(msvFuseBank);
fff7d90c:	91 2d 01 90 	stw     r9,400(r13)
    SBE_INFO(SBE_FUNC "MSV 0x%02x",(uint8_t)sromSecureBootCtrlSettings.msv);
fff7d910:	4b ff d8 cd 	bl      fff7b1dc <pk_trace_tiny>

    //Bit 4 of FSXCOMP_FSXLOG_CBS_CS Control/status register
    //is secure access bit
    uint64_t fsxcompFsxlogCbsCs = 0x0;
fff7d914:	7c 24 0b 78 	mr      r4,r1
fff7d918:	5b c4 00 08 	stvdu   d30,8(r4)
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_CBS_CS, &fsxcompFsxlogCbsCs);
fff7d91c:	3c 60 00 05 	lis     r3,5
fff7d920:	60 63 00 01 	ori     r3,r3,1
fff7d924:	4b ff c9 09 	bl      fff7a22c <getscom_abs>
    sromSecureBootCtrlSettings.secureModeEnable = ((fsxcompFsxlogCbsCs &
fff7d928:	81 41 00 08 	lwz     r10,8(r1)
fff7d92c:	39 20 00 00 	li      r9,0
fff7d930:	55 48 01 08 	rlwinm  r8,r10,0,4,4
                    ( uint64_t(1)<<FSXCOMP_FSXLOG_CBS_CS_SAB_BIT_SHIFT ))
                                        >>FSXCOMP_FSXLOG_CBS_CS_SAB_BIT_SHIFT);
fff7d934:	81 4d 01 90 	lwz     r10,400(r13)
fff7d938:	79 08 2e e0 	rldicl  d8,d8,5,59
fff7d93c:	51 2a d1 4a 	rlwimi  r10,r9,26,5,5
    SBE_INFO(SBE_FUNC "Secure Mode Enable: 0x%01x", (bool)sromSecureBootCtrlSettings.secureModeEnable);
fff7d940:	3c 60 ef dc 	lis     r3,-4132
    //is secure access bit
    uint64_t fsxcompFsxlogCbsCs = 0x0;
    getscom_abs(scomt::perv::FSXCOMP_FSXLOG_CBS_CS, &fsxcompFsxlogCbsCs);
    sromSecureBootCtrlSettings.secureModeEnable = ((fsxcompFsxlogCbsCs &
                    ( uint64_t(1)<<FSXCOMP_FSXLOG_CBS_CS_SAB_BIT_SHIFT ))
                                        >>FSXCOMP_FSXLOG_CBS_CS_SAB_BIT_SHIFT);
fff7d944:	91 4d 01 90 	stw     r10,400(r13)
    SBE_INFO(SBE_FUNC "Secure Mode Enable: 0x%01x", (bool)sromSecureBootCtrlSettings.secureModeEnable);
fff7d948:	60 63 00 01 	ori     r3,r3,1
fff7d94c:	07 0a 28 04 	bb1wi   r10,5,fff7d954 <_Z11shvSettingsv+0x364>
fff7d950:	3c 60 ef dc 	lis     r3,-4132
fff7d954:	4b ff d8 89 	bl      fff7b1dc <pk_trace_tiny>
    UPDATE_SROM_SBE_PROGRESS_CODE(COMPLETED_SROM_READING_FSXCOMP_REG_STATUS_REG);
fff7d958:	38 60 00 11 	li      r3,17
fff7d95c:	4b ff a4 3d 	bl      fff77d98 <_ZN3SBE18updateProgressCodeEh>
    SBE_EXIT(SBE_FUNC);
    #undef SBE_FUNC
}
fff7d960:	80 01 00 44 	lwz     r0,68(r1)
fff7d964:	17 c1 00 38 	lvd     d30,56(r1)
fff7d968:	7c 08 03 a6 	mtlr    r0
fff7d96c:	38 21 00 40 	addi    r1,r1,64
fff7d970:	4e 80 00 20 	blr
