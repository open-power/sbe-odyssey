#!/usr/bin/env python3
from attrdb import *
from attrsrcgen import *
from attrtank import *
from attrtoolutils import *
from argparse import ArgumentParser
from contextlib import suppress
import pickle


class ArgumentError(Exception):
    pass


def cmd_parse(args):
    db = AttributeDB()
    for xml in args.attr_xml:
        vprint("Parsing attribute definitions from " + xml)
        db.load_xml(xml)

    for filt_xml in args.sbe_attrs:
        vprint("Parsing SBE attributes from " + filt_xml)
        if filt_xml != '':
            SBEAttributes(filt_xml).update_attrdb(db)

    sbe_attr_tank = AttributeStructure(db)

    AttrTankFileGen(sbe_attr_tank, args.gen_file_dir, args.virtual_fn_header[0])

    vprint("Storing attribute database to " + args.dbfile[0])
    pickle.dump(sbe_attr_tank, open(args.dbfile[0], "wb"))

def cmd_compile(args):
    sbe_attr_tank = pickle.load(open(args.ipdbfile, "rb"))
    # TODO: Add support to take sbe values from a new sbe_attr xml
    #vprint("Parsing SBE attributes from " + args.sbe_attrs)
    #SBEAttributes(args.sbe_attrs).update_attrdb(db)

    vprint("Parsing symbols from " + args.symbols)
    SymbolTable(args.symbols).update_attrdb(sbe_attr_tank)

    vprint("Storing attribute database to " + args.opdbfile)
    pickle.dump(sbe_attr_tank, open(args.opdbfile, "wb"))

# Function to convert the attribute value into human readable format
# TODO: Need to support enums also. (Not tested this yet)
def valuestr(value) -> str:
    if isinstance(value, int):
        return "0x%x" % value
    elif isinstance(value, list):
        return "[" + ",".join(valuestr(v) for v in value) + "]"
    else:
        return value

# Function to get the attribute type in human readable format
# TODO: Need to support enums also. (Not tested this yet)
def typestr(attr) -> str:
    return attr.value_type + "".join("[%d]" % dim for dim in attr.array_dims)

def cmd_setfixed(args):
    sbe_attr_tank : AttributeStructure = pickle.load(open(args.dbfile, "rb"))

    image = bytearray(open(args.image, "rb").read())
    for attr in sbe_attr_tank.field_list:
        if not isinstance(attr, RealAttrFieldInfo):
            continue
        vprint("%s(%s) = %s" % (attr.name, attr.value_type, str(attr.values)))
        attr.set(image, sbe_attr_tank.image_base, attr.values)
    open(args.image, "wb").write(image)

def cmd_setattr(args):
    db = pickle.load(open(args.dbfile, "rb"))
    if args.base is not None:
        db.image_base = args.base

    try:
        attr = db.attributes[args.attr.upper()]
    except KeyError:
        raise ArgumentError("Unknown attribute: " + args.attr)

    image = bytearray(open(args.image, "rb").read())

    value = args.value.split(",")
    for i in range(len(value)):
        with suppress(ValueError):
            value[i] = int(value[i], 0)

    attr.set(image, value)
    open(args.image, "wb").write(image)

def cmd_getattr(args):
    db = pickle.load(open(args.dbfile, "rb"))
    if args.base is not None:
        db.image_base = args.base

    try:
        attr = db.attributes[args.attr.upper()]
    except KeyError:
        raise ArgumentError("Unknown attribute: " + args.attr)

    image = open(args.image, "rb").read()
    value = attr.get(image)
    print("%s(%s) = %s" % (attr.name, typestr(attr), valuestr(value)))

def cmd_dumpattr(args):
    db = pickle.load(open(args.dbfile, "rb"))
    if args.base is not None:
        db.image_base = args.base

    image = open(args.image, "rb").read()
    for attr in db.attributes.values():
        if not attr.sbe_address:
            continue
        value = attr.get(image)
        print("%s(%s) = %s" % (attr.name, typestr(attr), valuestr(value)))

def img_standard_parms(parser):
    #parser.add_argument("-b", "--base", type=hexint, default=None, help="Base address (hex) of the image file, defaults to an autodetected value")
    parser.add_argument("-v", "--verbose", action="store_true", help="Increase verbosity")
    parser.add_argument("dbfile", help="Name of the attribute database")
    parser.add_argument("image", help="Image to be updated")

if __name__ == "__main__":
    parser = ArgumentParser(description="Tools to generate code and modify images according to attributes")
    subparsers = parser.add_subparsers()

    sub = subparsers.add_parser("parse", help="Parse attribute XML and generate attribute tank source code and attribute database")
    sub.add_argument("gen_file_dir", help="Path to the directory file where generated file has to be saved")
    sub.add_argument("-fx", "--sbe_attrs", nargs='+', help="Path to xmls which will filter the sbe required attributes")
    sub.add_argument("-ax", "--attr_xml", nargs="+", help="Attribute definition XML files")
    sub.add_argument("-vfh", "--virtual_fn_header", nargs=1, help="The header file need to be included in attribute_macro.H" +
                    "This option can be used to pass header file containing virtual attribute get function")
    sub.add_argument("-db", "--dbfile", nargs=1, help="Name of the database to be written")
    sub.add_argument("-v", "--verbose", action="store_true", help="Increase verbosity")
    sub.set_defaults(func=cmd_parse)

    sub = subparsers.add_parser("compile", help="Parse attribute XML and an image's symbol file into an attribute database")
    sub.add_argument("ipdbfile", help="Name of the database to be read")
    sub.add_argument("symbols", help="Name of the symbol file")
    # TODO: Insert below code to support another sbe attribute xmls.
    # sub.add_argument("sbe_attrs", help="Path to sbe_attributes.xml")
    sub.add_argument("opdbfile", help="Name of the database to be write")
    sub.add_argument("-v", "--verbose", action="store_true", help="Increase verbosity")
    sub.set_defaults(func=cmd_compile)

    sub = subparsers.add_parser("getattr", help="Set an attribute value in a PPE image")
    img_standard_parms(sub)
    sub.add_argument("attr", help="Name of the attribute")
    sub.set_defaults(func=cmd_getattr)

    sub = subparsers.add_parser("setattr", help="Set an attribute value in a PPE image")
    img_standard_parms(sub)
    sub.add_argument("attr", help="Name of the attribute, with optional index for array attributes")
    sub.add_argument("value", help="New value for the attribute; may be an integer value (prefix hex with 0x), an ENUM name, or a comma-separated list thereof")
    sub.set_defaults(func=cmd_setattr)

    sub = subparsers.add_parser("dumpattr", help="Dump all attributes from a PPE image")
    img_standard_parms(sub)
    sub.set_defaults(func=cmd_dumpattr)

    sub = subparsers.add_parser("setfixed", help="Set an image's attribute values based on the values in the SBE attribute file")
    img_standard_parms(sub)
    sub.set_defaults(func=cmd_setfixed)

    args = parser.parse_args()
    if not hasattr(args, "func"):
        parser.print_help()
        exit(1)

    g_verbose = args.verbose

    try:
        args.func(args)
    except ArgumentError as e:
        print("Invalid argument: " + str(e))
        exit(1)
    except ParseError as e:
        print("Parser error: " + str(e))
        exit(1)
